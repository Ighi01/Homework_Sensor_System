
HW_05_3a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08007670  08007670  00017670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a44  08007a44  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a4c  08007a4c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08007c28  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007c28  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009eeb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2d  00000000  00000000  0002a132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000680  00000000  00000000  0002c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017628  00000000  00000000  0002cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a65c  00000000  00000000  00044190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000925b9  00000000  00000000  0004e7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003398  00000000  00000000  000e0da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e4140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007658 	.word	0x08007658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007658 	.word	0x08007658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <HAL_ADC_ConvCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b08c      	sub	sp, #48	; 0x30
 8000f5e:	af06      	add	r7, sp, #24
 8000f60:	6078      	str	r0, [r7, #4]

	//convert the ADC value from the potentiometer to voltage
	float pot = (adc_val[0]*VMAX)/4095;
 8000f62:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fae4 	bl	8000534 <__aeabi_i2d>
 8000f6c:	a34a      	add	r3, pc, #296	; (adr r3, 8001098 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb49 	bl	8000608 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a348      	add	r3, pc, #288	; (adr r3, 80010a0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc6a 	bl	800085c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe12 	bl	8000bb8 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	617b      	str	r3, [r7, #20]
	//convert the ADC value from the T sensor to voltage
	float temp = 25 + ( ( ( (adc_val[1]*VMAX)/4095) - V25 ) / AVG_SLOPE);
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fac9 	bl	8000534 <__aeabi_i2d>
 8000fa2:	a33d      	add	r3, pc, #244	; (adr r3, 8001098 <HAL_ADC_ConvCpltCallback+0x140>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fb2e 	bl	8000608 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	a33a      	add	r3, pc, #232	; (adr r3, 80010a0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff fc4f 	bl	800085c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	a338      	add	r3, pc, #224	; (adr r3, 80010a8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff f964 	bl	8000298 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	a335      	add	r3, pc, #212	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fc3d 	bl	800085c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_ADC_ConvCpltCallback+0x164>)
 8000ff0:	f7ff f954 	bl	800029c <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fddc 	bl	8000bb8 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	613b      	str	r3, [r7, #16]
	//convert the ADC value from the internal reference to voltage
	float ref = (adc_val[2]*VMAX)/4095;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001006:	889b      	ldrh	r3, [r3, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa93 	bl	8000534 <__aeabi_i2d>
 800100e:	a322      	add	r3, pc, #136	; (adr r3, 8001098 <HAL_ADC_ConvCpltCallback+0x140>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff faf8 	bl	8000608 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	a31f      	add	r3, pc, #124	; (adr r3, 80010a0 <HAL_ADC_ConvCpltCallback+0x148>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fc19 	bl	800085c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fdc1 	bl	8000bb8 <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]

	//print into a buffer and send through UART with DMA
	int length = snprintf(buff, sizeof(buff),"Potentiometer: %.2f V , Temperature: %.2f C , Vref: %.2f V \n",pot,temp,ref);
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff fa87 	bl	8000558 <__aeabi_f2d>
 800104a:	4680      	mov	r8, r0
 800104c:	4689      	mov	r9, r1
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fa82 	bl	8000558 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800105c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001060:	e9cd 4500 	strd	r4, r5, [sp]
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001066:	2150      	movs	r1, #80	; 0x50
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800106a:	f004 f987 	bl	800537c <sniprintf>
 800106e:	60b8      	str	r0, [r7, #8]

	if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*) buff, length) != HAL_OK)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	b29b      	uxth	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x170>)
 800107a:	f002 fc4d 	bl	8003918 <HAL_UART_Transmit_DMA>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_ADC_ConvCpltCallback+0x130>
		Error_Handler();
 8001084:	f000 f9da 	bl	800143c <Error_Handler>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	66666666 	.word	0x66666666
 800109c:	400a6666 	.word	0x400a6666
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40affe00 	.word	0x40affe00
 80010a8:	851eb852 	.word	0x851eb852
 80010ac:	3fe851eb 	.word	0x3fe851eb
 80010b0:	47ae147b 	.word	0x47ae147b
 80010b4:	3f647ae1 	.word	0x3f647ae1
 80010b8:	2000033c 	.word	0x2000033c
 80010bc:	40390000 	.word	0x40390000
 80010c0:	08007670 	.word	0x08007670
 80010c4:	20000344 	.word	0x20000344
 80010c8:	20000298 	.word	0x20000298

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fc26 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f81c 	bl	8001110 <SystemClock_Config>
  //start the ADC in interrupt mode

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f956 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 80010dc:	f000 f91e 	bl	800131c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010e0:	f000 f8f2 	bl	80012c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010e4:	f000 f880 	bl	80011e8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//start the ADC in DMA mode
	if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_val,3) != HAL_OK)
 80010e8:	2203      	movs	r2, #3
 80010ea:	4907      	ldr	r1, [pc, #28]	; (8001108 <main+0x3c>)
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <main+0x40>)
 80010ee:	f000 fcf1 	bl	8001ad4 <HAL_ADC_Start_DMA>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <main+0x30>
		Error_Handler();
 80010f8:	f000 f9a0 	bl	800143c <Error_Handler>
    //delay between acquisitions
    HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001100:	f000 fc80 	bl	8001a04 <HAL_Delay>
	if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_val,3) != HAL_OK)
 8001104:	e7f0      	b.n	80010e8 <main+0x1c>
 8001106:	bf00      	nop
 8001108:	2000033c 	.word	0x2000033c
 800110c:	200001f0 	.word	0x200001f0

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	; 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f9a3 	bl	800546a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <SystemClock_Config+0xd0>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <SystemClock_Config+0xd0>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <SystemClock_Config+0xd0>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <SystemClock_Config+0xd4>)
 800115e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <SystemClock_Config+0xd4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001184:	2310      	movs	r3, #16
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800118e:	2304      	movs	r3, #4
 8001190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001192:	2307      	movs	r3, #7
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fed6 	bl	8002f4c <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011a6:	f000 f949 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f938 	bl	800343c <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011d2:	f000 f933 	bl	800143c <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3750      	adds	r7, #80	; 0x50
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MX_ADC1_Init+0xd4>)
 80011fc:	4a30      	ldr	r2, [pc, #192]	; (80012c0 <MX_ADC1_Init+0xd8>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001206:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_ADC1_Init+0xd4>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001210:	2201      	movs	r2, #1
 8001212:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <MX_ADC1_Init+0xd4>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <MX_ADC1_Init+0xd4>)
 800122a:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <MX_ADC1_Init+0xdc>)
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001236:	2203      	movs	r2, #3
 8001238:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_ADC1_Init+0xd4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_ADC1_Init+0xd4>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001248:	481c      	ldr	r0, [pc, #112]	; (80012bc <MX_ADC1_Init+0xd4>)
 800124a:	f000 fbff 	bl	8001a4c <HAL_ADC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001254:	f000 f8f2 	bl	800143c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001258:	2301      	movs	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_ADC1_Init+0xd4>)
 800126a:	f000 fd37 	bl	8001cdc <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 f8e2 	bl	800143c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001278:	2310      	movs	r3, #16
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001280:	2307      	movs	r3, #7
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_ADC1_Init+0xd4>)
 800128a:	f000 fd27 	bl	8001cdc <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001294:	f000 f8d2 	bl	800143c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001298:	2311      	movs	r3, #17
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_ADC1_Init+0xd4>)
 80012a6:	f000 fd19 	bl	8001cdc <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80012b0:	f000 f8c4 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001f0 	.word	0x200001f0
 80012c0:	40012000 	.word	0x40012000
 80012c4:	0f000001 	.word	0x0f000001

080012c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_USART2_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART2_UART_Init+0x4c>)
 8001300:	f002 fabc 	bl	800387c <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f000 f897 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000298 	.word	0x20000298
 8001318:	40004400 	.word	0x40004400

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_DMA_Init+0x68>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MX_DMA_Init+0x68>)
 800132c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_DMA_Init+0x68>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_DMA_Init+0x68>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <MX_DMA_Init+0x68>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_DMA_Init+0x68>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2011      	movs	r0, #17
 8001360:	f001 f837 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001364:	2011      	movs	r0, #17
 8001366:	f001 f850 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2038      	movs	r0, #56	; 0x38
 8001370:	f001 f82f 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001374:	2038      	movs	r0, #56	; 0x38
 8001376:	f001 f848 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_GPIO_Init+0xac>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a23      	ldr	r2, [pc, #140]	; (8001434 <MX_GPIO_Init+0xac>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_GPIO_Init+0xac>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_GPIO_Init+0xac>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <MX_GPIO_Init+0xac>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_GPIO_Init+0xac>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_GPIO_Init+0xac>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_GPIO_Init+0xac>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_GPIO_Init+0xac>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_GPIO_Init+0xac>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <MX_GPIO_Init+0xac>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_GPIO_Init+0xac>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001414:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_GPIO_Init+0xb0>)
 8001426:	f001 fc0d 	bl	8002c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_MspInit+0x4c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x4c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001486:	2007      	movs	r0, #7
 8001488:	f000 ff98 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <HAL_ADC_MspInit+0xdc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d157      	bne.n	800156a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_ADC_MspInit+0xe0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f2:	2302      	movs	r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <HAL_ADC_MspInit+0xe4>)
 8001506:	f001 fb9d 	bl	8002c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_ADC_MspInit+0xec>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 800152c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001530:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001550:	f000 ff76 	bl	8002440 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800155a:	f7ff ff6f 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_ADC_MspInit+0xe8>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40012000 	.word	0x40012000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	20000238 	.word	0x20000238
 8001584:	40026410 	.word	0x40026410

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_UART_MspInit+0xf0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d161      	bne.n	800166e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4820      	ldr	r0, [pc, #128]	; (8001680 <HAL_UART_MspInit+0xf8>)
 80015fe:	f001 fb21 	bl	8002c44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <HAL_UART_MspInit+0x100>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_UART_MspInit+0xfc>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_UART_MspInit+0xfc>)
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_UART_MspInit+0xfc>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_UART_MspInit+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001644:	f000 fefc 	bl	8002440 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800164e:	f7ff fef5 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_UART_MspInit+0xfc>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2026      	movs	r0, #38	; 0x26
 8001664:	f000 feb5 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001668:	2026      	movs	r0, #38	; 0x26
 800166a:	f000 fece 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	200002dc 	.word	0x200002dc
 8001688:	400260a0 	.word	0x400260a0

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f974 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Stream6_IRQHandler+0x10>)
 80016e6:	f001 f843 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002dc 	.word	0x200002dc

080016f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USART2_IRQHandler+0x10>)
 80016fa:	f002 f98b 	bl	8003a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000298 	.word	0x20000298

08001708 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA2_Stream0_IRQHandler+0x10>)
 800170e:	f001 f82f 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000238 	.word	0x20000238

0800171c <_getpid>:
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
 8001720:	2301      	movs	r3, #1
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_kill>:
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	f003 feeb 	bl	8005510 <__errno>
 800173a:	4603      	mov	r3, r0
 800173c:	2216      	movs	r2, #22
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_exit>:
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffe7 	bl	800172c <_kill>
 800175e:	e7fe      	b.n	800175e <_exit+0x12>

08001760 <_read>:
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00a      	b.n	8001788 <_read+0x28>
 8001772:	f3af 8000 	nop.w
 8001776:	4601      	mov	r1, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf0      	blt.n	8001772 <_read+0x12>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_write>:
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <_write+0x26>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f3af 8000 	nop.w
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf1      	blt.n	80017ac <_write+0x12>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_fstat>:
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	2300      	movs	r3, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_isatty>:
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	2301      	movs	r3, #1
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_lseek>:
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	2300      	movs	r3, #0
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
 800186c:	f003 fe50 	bl	8005510 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000394 	.word	0x20000394
 80018a4:	200004e8 	.word	0x200004e8

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x12>
 80018d0:	480d      	ldr	r0, [pc, #52]	; (8001908 <LoopFillZerobss+0x16>)
 80018d2:	490e      	ldr	r1, [pc, #56]	; (800190c <LoopFillZerobss+0x1a>)
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <LoopFillZerobss+0x1e>)
 80018d6:	2300      	movs	r3, #0
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:
 80018da:	58d4      	ldr	r4, [r2, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:
 80018e0:	18c4      	adds	r4, r0, r3
 80018e2:	428c      	cmp	r4, r1
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x22>)
 80018e8:	4c0b      	ldr	r4, [pc, #44]	; (8001918 <LoopFillZerobss+0x26>)
 80018ea:	2300      	movs	r3, #0
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:
 80018f2:	42a2      	cmp	r2, r4
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>
 80018f6:	f7ff ffd7 	bl	80018a8 <SystemInit>
 80018fa:	f003 fe0f 	bl	800551c <__libc_init_array>
 80018fe:	f7ff fbe5 	bl	80010cc <main>
 8001902:	4770      	bx	lr
 8001904:	20018000 	.word	0x20018000
 8001908:	20000000 	.word	0x20000000
 800190c:	200001d4 	.word	0x200001d4
 8001910:	08007a54 	.word	0x08007a54
 8001914:	200001d4 	.word	0x200001d4
 8001918:	200004e8 	.word	0x200004e8

0800191c <ADC_IRQHandler>:
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 fd37 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fd78 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fd4f 	bl	8002426 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f000 fd17 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	20000398 	.word	0x20000398

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000398 	.word	0x20000398

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e033      	b.n	8001aca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fd14 	bl	8001498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a92:	f023 0302 	bic.w	r3, r3, #2
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa3e 	bl	8001f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aba:	e001      	b.n	8001ac0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Start_DMA+0x1e>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e0ce      	b.n	8001c90 <HAL_ADC_Start_DMA+0x1bc>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d018      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_ADC_Start_DMA+0x1c4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <HAL_ADC_Start_DMA+0x1c8>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9a      	lsrs	r2, r3, #18
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b48:	d107      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	f040 8086 	bne.w	8001c76 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f023 0206 	bic.w	r2, r3, #6
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb6:	e002      	b.n	8001bbe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_ADC_Start_DMA+0x1cc>)
 8001bc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <HAL_ADC_Start_DMA+0x1d0>)
 8001bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <HAL_ADC_Start_DMA+0x1d4>)
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_ADC_Start_DMA+0x1d8>)
 8001be0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	334c      	adds	r3, #76	; 0x4c
 8001c16:	4619      	mov	r1, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f000 fcbe 	bl	800259c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10f      	bne.n	8001c4c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d129      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	e020      	b.n	8001c8e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_ADC_Start_DMA+0x1dc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11b      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1ba>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d114      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e00b      	b.n	8001c8e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	08002119 	.word	0x08002119
 8001ca8:	080021d3 	.word	0x080021d3
 8001cac:	080021ef 	.word	0x080021ef
 8001cb0:	40012000 	.word	0x40012000

08001cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1c>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e105      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x228>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d925      	bls.n	8001d54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b1e      	subs	r3, #30
 8001d1e:	2207      	movs	r2, #7
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43da      	mvns	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4403      	add	r3, r0
 8001d46:	3b1e      	subs	r3, #30
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	e022      	b.n	8001d9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	2207      	movs	r2, #7
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	400a      	ands	r2, r1
 8001d76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4403      	add	r3, r0
 8001d90:	409a      	lsls	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d824      	bhi.n	8001dec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b05      	subs	r3, #5
 8001db4:	221f      	movs	r2, #31
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b05      	subs	r3, #5
 8001dde:	fa00 f203 	lsl.w	r2, r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dea:	e04c      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d824      	bhi.n	8001e3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	3b23      	subs	r3, #35	; 0x23
 8001e06:	221f      	movs	r2, #31
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b23      	subs	r3, #35	; 0x23
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3c:	e023      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b41      	subs	r3, #65	; 0x41
 8001e50:	221f      	movs	r2, #31
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b41      	subs	r3, #65	; 0x41
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_ADC_ConfigChannel+0x234>)
 8001e88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <HAL_ADC_ConfigChannel+0x238>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1cc>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_ADC_ConfigChannel+0x238>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d123      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x21e>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d003      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x1e6>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d11b      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d111      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_ADC_ConfigChannel+0x23c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_ADC_ConfigChannel+0x240>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9a      	lsrs	r2, r3, #18
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001eec:	e002      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f9      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40012300 	.word	0x40012300
 8001f14:	40012000 	.word	0x40012000
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	431bde83 	.word	0x431bde83

08001f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b79      	ldr	r3, [pc, #484]	; (8002110 <ADC_Init+0x1f0>)
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	021a      	lsls	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <ADC_Init+0x1f4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6899      	ldr	r1, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e00f      	b.n	800201e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0202 	bic.w	r2, r2, #2
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
 8002038:	005a      	lsls	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800206a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	035a      	lsls	r2, r3, #13
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e007      	b.n	8002094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	051a      	lsls	r2, r3, #20
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d6:	025a      	lsls	r2, r3, #9
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	029a      	lsls	r2, r3, #10
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	0f000001 	.word	0x0f000001

08002118 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13c      	bne.n	80021ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d12b      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d127      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800216c:	2b00      	cmp	r3, #0
 800216e:	d119      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0220 	bic.w	r2, r2, #32
 800217e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7fe fed7 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021aa:	e00e      	b.n	80021ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fd85 	bl	8001cc8 <HAL_ADC_ErrorCallback>
}
 80021be:	e004      	b.n	80021ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff fd67 	bl	8001cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff fd5a 	bl	8001cc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff face 	bl	80019ec <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e099      	b.n	8002590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247c:	e00f      	b.n	800249e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247e:	f7ff fab5 	bl	80019ec <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b05      	cmp	r3, #5
 800248a:	d908      	bls.n	800249e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e078      	b.n	8002590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e8      	bne.n	800247e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_DMA_Init+0x158>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d107      	bne.n	8002508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4313      	orrs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0307 	bic.w	r3, r3, #7
 800251e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b04      	cmp	r3, #4
 8002530:	d117      	bne.n	8002562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fb01 	bl	8002b4c <DMA_CheckFifoParam>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800255e:	2301      	movs	r3, #1
 8002560:	e016      	b.n	8002590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fab8 	bl	8002ae0 <DMA_CalcBaseAndBitshift>
 8002570:	4603      	mov	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	223f      	movs	r2, #63	; 0x3f
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	f010803f 	.word	0xf010803f

0800259c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Start_IT+0x26>
 80025be:	2302      	movs	r3, #2
 80025c0:	e040      	b.n	8002644 <HAL_DMA_Start_IT+0xa8>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12f      	bne.n	8002636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa4a 	bl	8002a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0216 	orr.w	r2, r2, #22
 800260a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e005      	b.n	8002642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800265a:	f7ff f9c7 	bl	80019ec <HAL_GetTick>
 800265e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d008      	beq.n	800267e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e052      	b.n	8002724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0216 	bic.w	r2, r2, #22
 800268c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_DMA_Abort+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0208 	bic.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	e013      	b.n	80026f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d0:	f7ff f98c 	bl	80019ec <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d90c      	bls.n	80026f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e015      	b.n	8002724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e4      	bne.n	80026d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d004      	beq.n	800274a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00c      	b.n	8002764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2205      	movs	r2, #5
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800277c:	4b8e      	ldr	r3, [pc, #568]	; (80029b8 <HAL_DMA_IRQHandler+0x248>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a8e      	ldr	r2, [pc, #568]	; (80029bc <HAL_DMA_IRQHandler+0x24c>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2208      	movs	r2, #8
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01a      	beq.n	80027dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2208      	movs	r2, #8
 80027ca:	409a      	lsls	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2201      	movs	r2, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2201      	movs	r2, #1
 8002800:	409a      	lsls	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2204      	movs	r2, #4
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2204      	movs	r2, #4
 8002836:	409a      	lsls	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2210      	movs	r2, #16
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d043      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03c      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2210      	movs	r2, #16
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d024      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
 800289e:	e01f      	b.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e016      	b.n	80028e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0208 	bic.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2220      	movs	r2, #32
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 808f 	beq.w	8002a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8087 	beq.w	8002a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2220      	movs	r2, #32
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b05      	cmp	r3, #5
 8002918:	d136      	bne.n	8002988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0216 	bic.w	r2, r2, #22
 8002928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <HAL_DMA_IRQHandler+0x1da>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0208 	bic.w	r2, r2, #8
 8002958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	223f      	movs	r2, #63	; 0x3f
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	2b00      	cmp	r3, #0
 800297c:	d07e      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
        }
        return;
 8002986:	e079      	b.n	8002a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01d      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10d      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d031      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
 80029b4:	e02c      	b.n	8002a10 <HAL_DMA_IRQHandler+0x2a0>
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000
 80029bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e01e      	b.n	8002a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0210 	bic.w	r2, r2, #16
 80029ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d032      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2205      	movs	r2, #5
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d307      	bcc.n	8002a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f2      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x2cc>
 8002a56:	e000      	b.n	8002a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
 8002a7a:	e000      	b.n	8002a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a7c:	bf00      	nop
    }
  }
}
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d108      	bne.n	8002ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ac2:	e007      	b.n	8002ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3b10      	subs	r3, #16
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <DMA_CalcBaseAndBitshift+0x64>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <DMA_CalcBaseAndBitshift+0x68>)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d909      	bls.n	8002b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	1d1a      	adds	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b20:	e007      	b.n	8002b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	aaaaaaab 	.word	0xaaaaaaab
 8002b48:	080076c8 	.word	0x080076c8

08002b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11f      	bne.n	8002ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d856      	bhi.n	8002c1a <DMA_CheckFifoParam+0xce>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <DMA_CheckFifoParam+0x28>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b97 	.word	0x08002b97
 8002b7c:	08002b85 	.word	0x08002b85
 8002b80:	08002c1b 	.word	0x08002c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d046      	beq.n	8002c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e043      	b.n	8002c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9e:	d140      	bne.n	8002c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e03d      	b.n	8002c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	d121      	bne.n	8002bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d837      	bhi.n	8002c26 <DMA_CheckFifoParam+0xda>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <DMA_CheckFifoParam+0x70>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bd3 	.word	0x08002bd3
 8002bc4:	08002bcd 	.word	0x08002bcd
 8002bc8:	08002be5 	.word	0x08002be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	e030      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d025      	beq.n	8002c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be2:	e022      	b.n	8002c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bf2:	e01c      	b.n	8002c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d903      	bls.n	8002c02 <DMA_CheckFifoParam+0xb6>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d003      	beq.n	8002c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c00:	e018      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      break;
 8002c06:	e015      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e00b      	b.n	8002c32 <DMA_CheckFifoParam+0xe6>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e00a      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e008      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e006      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e004      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
    }
  } 
  
  return status; 
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e159      	b.n	8002f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8148 	bne.w	8002f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d005      	beq.n	8002c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d130      	bne.n	8002cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 0201 	and.w	r2, r3, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d017      	beq.n	8002d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d123      	bne.n	8002d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a2 	beq.w	8002f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de6:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_GPIO_Init+0x2f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x202>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_GPIO_Init+0x2f4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x1fe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a47      	ldr	r2, [pc, #284]	; (8002f3c <HAL_GPIO_Init+0x2f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a46      	ldr	r2, [pc, #280]	; (8002f40 <HAL_GPIO_Init+0x2fc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x1f6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x1f2>
 8002e32:	2304      	movs	r3, #4
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f aea2 	bls.w	8002c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e267      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d075      	beq.n	8003056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d00c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d112      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4b82      	ldr	r3, [pc, #520]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	4b7e      	ldr	r3, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05b      	beq.n	8003054 <HAL_RCC_OscConfig+0x108>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d157      	bne.n	8003054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e242      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x74>
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e01d      	b.n	8002ffc <HAL_RCC_OscConfig+0xb0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x98>
 8002fca:	4b70      	ldr	r3, [pc, #448]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6f      	ldr	r2, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6c      	ldr	r2, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0xb0>
 8002fe4:	4b69      	ldr	r3, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a68      	ldr	r2, [pc, #416]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b66      	ldr	r3, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fcf2 	bl	80019ec <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fcee 	bl	80019ec <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e207      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b5b      	ldr	r3, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0xc0>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fcde 	bl	80019ec <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe fcda 	bl	80019ec <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1f3      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0xe8>
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d063      	beq.n	800312a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003076:	2b08      	cmp	r3, #8
 8003078:	d11c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b44      	ldr	r3, [pc, #272]	; (800318c <HAL_RCC_OscConfig+0x240>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d116      	bne.n	80030b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x152>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e1c7      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x240>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	e03a      	b.n	800312a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030bc:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x244>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe fc93 	bl	80019ec <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe fc8f 	bl	80019ec <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1a8      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4925      	ldr	r1, [pc, #148]	; (800318c <HAL_RCC_OscConfig+0x240>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
 80030fc:	e015      	b.n	800312a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_OscConfig+0x244>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fc72 	bl	80019ec <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310c:	f7fe fc6e 	bl	80019ec <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e187      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d036      	beq.n	80031a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_RCC_OscConfig+0x248>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe fc52 	bl	80019ec <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe fc4e 	bl	80019ec <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e167      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x240>)
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x200>
 800316a:	e01b      	b.n	80031a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_OscConfig+0x248>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe fc3b 	bl	80019ec <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	e00e      	b.n	8003198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317a:	f7fe fc37 	bl	80019ec <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d907      	bls.n	8003198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e150      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ea      	bne.n	800317a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8097 	beq.w	80032e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b81      	ldr	r3, [pc, #516]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b7d      	ldr	r3, [pc, #500]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a7c      	ldr	r2, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b7a      	ldr	r3, [pc, #488]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b77      	ldr	r3, [pc, #476]	; (80033c0 <HAL_RCC_OscConfig+0x474>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b74      	ldr	r3, [pc, #464]	; (80033c0 <HAL_RCC_OscConfig+0x474>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a73      	ldr	r2, [pc, #460]	; (80033c0 <HAL_RCC_OscConfig+0x474>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fbf7 	bl	80019ec <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fe fbf3 	bl	80019ec <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e10c      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x474>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x2ea>
 8003228:	4b64      	ldr	r3, [pc, #400]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a63      	ldr	r2, [pc, #396]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	e01c      	b.n	8003270 <HAL_RCC_OscConfig+0x324>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x30c>
 800323e:	4b5f      	ldr	r3, [pc, #380]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a5b      	ldr	r2, [pc, #364]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0x324>
 8003258:	4b58      	ldr	r3, [pc, #352]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	4b55      	ldr	r3, [pc, #340]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a54      	ldr	r2, [pc, #336]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fbb8 	bl	80019ec <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fe fbb4 	bl	80019ec <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0cb      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b49      	ldr	r3, [pc, #292]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ee      	beq.n	8003280 <HAL_RCC_OscConfig+0x334>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a4:	f7fe fba2 	bl	80019ec <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe fb9e 	bl	80019ec <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0b5      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1ee      	bne.n	80032ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a1 	beq.w	800342c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d05c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d141      	bne.n	8003382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_OscConfig+0x478>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fb72 	bl	80019ec <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fb6e 	bl	80019ec <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e087      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	491b      	ldr	r1, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x478>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fb47 	bl	80019ec <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fb43 	bl	80019ec <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e05c      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x416>
 8003380:	e054      	b.n	800342c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCC_OscConfig+0x478>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fb30 	bl	80019ec <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fb2c 	bl	80019ec <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e045      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_OscConfig+0x470>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x444>
 80033ae:	e03d      	b.n	800342c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e038      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000
 80033c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x4ec>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d028      	beq.n	8003428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d121      	bne.n	8003428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d11a      	bne.n	8003428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0cc      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b68      	ldr	r3, [pc, #416]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d90c      	bls.n	8003478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b8      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003490:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	494d      	ldr	r1, [pc, #308]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d044      	beq.n	800355c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d119      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e07f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e06f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e067      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4934      	ldr	r1, [pc, #208]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800352c:	f7fe fa5e 	bl	80019ec <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fe fa5a 	bl	80019ec <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e04f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 020c 	and.w	r2, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	429a      	cmp	r2, r3
 800355a:	d1eb      	bne.n	8003534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d20c      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e032      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4916      	ldr	r1, [pc, #88]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c2:	f000 f821 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	490a      	ldr	r1, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	5ccb      	ldrb	r3, [r1, r3]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f9be 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00
 80035f8:	40023800 	.word	0x40023800
 80035fc:	080076b0 	.word	0x080076b0
 8003600:	20000000 	.word	0x20000000
 8003604:	20000004 	.word	0x20000004

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800360c:	b094      	sub	sp, #80	; 0x50
 800360e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
 8003614:	2300      	movs	r3, #0
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003618:	2300      	movs	r3, #0
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003620:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d00d      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x40>
 800362c:	2b08      	cmp	r3, #8
 800362e:	f200 80e1 	bhi.w	80037f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
 8003636:	2b04      	cmp	r3, #4
 8003638:	d003      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x3a>
 800363a:	e0db      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_GetSysClockFreq+0x204>)
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003640:	e0db      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003642:	4b73      	ldr	r3, [pc, #460]	; (8003810 <HAL_RCC_GetSysClockFreq+0x208>)
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003646:	e0d8      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003652:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	2200      	movs	r2, #0
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 8003672:	2300      	movs	r3, #0
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
 8003676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4621      	mov	r1, r4
 8003694:	1a51      	subs	r1, r2, r1
 8003696:	6139      	str	r1, [r7, #16]
 8003698:	4629      	mov	r1, r5
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036ac:	4659      	mov	r1, fp
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b6:	4651      	mov	r1, sl
 80036b8:	018a      	lsls	r2, r1, #6
 80036ba:	4651      	mov	r1, sl
 80036bc:	ebb2 0801 	subs.w	r8, r2, r1
 80036c0:	4659      	mov	r1, fp
 80036c2:	eb63 0901 	sbc.w	r9, r3, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036da:	4690      	mov	r8, r2
 80036dc:	4699      	mov	r9, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	eb18 0303 	adds.w	r3, r8, r3
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	462b      	mov	r3, r5
 80036e8:	eb49 0303 	adc.w	r3, r9, r3
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036fa:	4629      	mov	r1, r5
 80036fc:	024b      	lsls	r3, r1, #9
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003704:	4621      	mov	r1, r4
 8003706:	024a      	lsls	r2, r1, #9
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2200      	movs	r2, #0
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003718:	f7fd fa9e 	bl	8000c58 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	e058      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	2200      	movs	r2, #0
 800372e:	4618      	mov	r0, r3
 8003730:	4611      	mov	r1, r2
 8003732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	0159      	lsls	r1, r3, #5
 800374e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003752:	0150      	lsls	r0, r2, #5
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4641      	mov	r1, r8
 800375a:	ebb2 0a01 	subs.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb63 0b01 	sbc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003778:	ebb2 040a 	subs.w	r4, r2, sl
 800377c:	eb63 050b 	sbc.w	r5, r3, fp
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	00eb      	lsls	r3, r5, #3
 800378a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378e:	00e2      	lsls	r2, r4, #3
 8003790:	4614      	mov	r4, r2
 8003792:	461d      	mov	r5, r3
 8003794:	4643      	mov	r3, r8
 8003796:	18e3      	adds	r3, r4, r3
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	464b      	mov	r3, r9
 800379c:	eb45 0303 	adc.w	r3, r5, r3
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ae:	4629      	mov	r1, r5
 80037b0:	028b      	lsls	r3, r1, #10
 80037b2:	4621      	mov	r1, r4
 80037b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b8:	4621      	mov	r1, r4
 80037ba:	028a      	lsls	r2, r1, #10
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	2200      	movs	r2, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	61fa      	str	r2, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	f7fd fa44 	bl	8000c58 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetSysClockFreq+0x204>)
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3750      	adds	r7, #80	; 0x50
 8003800:	46bd      	mov	sp, r7
 8003802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	00f42400 	.word	0x00f42400
 8003810:	007a1200 	.word	0x007a1200

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_RCC_GetHCLKFreq+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff0 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	080076c0 	.word	0x080076c0

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffdc 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	080076c0 	.word	0x080076c0

0800387c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e03f      	b.n	800390e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fe70 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fdd1 	bl	8004468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d165      	bne.n	80039fe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Transmit_DMA+0x26>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e05e      	b.n	8003a00 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit_DMA+0x38>
 800394c:	2302      	movs	r3, #2
 800394e:	e057      	b.n	8003a00 <HAL_UART_Transmit_DMA+0xe8>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2221      	movs	r2, #33	; 0x21
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_UART_Transmit_DMA+0xf0>)
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_UART_Transmit_DMA+0xf4>)
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <HAL_UART_Transmit_DMA+0xf8>)
 800398e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	2200      	movs	r2, #0
 8003996:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3304      	adds	r3, #4
 80039ac:	461a      	mov	r2, r3
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	f7fe fdf4 	bl	800259c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039bc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	617b      	str	r3, [r7, #20]
   return(result);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e6:	627a      	str	r2, [r7, #36]	; 0x24
 80039e8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6a39      	ldr	r1, [r7, #32]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3730      	adds	r7, #48	; 0x30
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	08003f99 	.word	0x08003f99
 8003a0c:	08004033 	.word	0x08004033
 8003a10:	0800404f 	.word	0x0800404f

08003a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ba      	sub	sp, #232	; 0xe8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_UART_IRQHandler+0x66>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fc3c 	bl	80042f0 <UART_Receive_IT>
      return;
 8003a78:	e256      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80de 	beq.w	8003c40 <HAL_UART_IRQHandler+0x22c>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80d1 	beq.w	8003c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xae>
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xd2>
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xf6>
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d011      	beq.n	8003b3a <HAL_UART_IRQHandler+0x126>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0208 	orr.w	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 81ed 	beq.w	8003f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_UART_IRQHandler+0x14e>
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fbc7 	bl	80042f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <HAL_UART_IRQHandler+0x17a>
 8003b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04f      	beq.n	8003c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 facf 	bl	8004132 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d141      	bne.n	8003c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3314      	adds	r3, #20
 8003ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d9      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d013      	beq.n	8003c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	4a7d      	ldr	r2, [pc, #500]	; (8003df0 <HAL_UART_IRQHandler+0x3dc>)
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fd92 	bl	800272c <HAL_DMA_Abort_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e00e      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9a4 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00a      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9a0 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e006      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f99c 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c3a:	e170      	b.n	8003f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	bf00      	nop
    return;
 8003c3e:	e16e      	b.n	8003f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 814a 	bne.w	8003ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8143 	beq.w	8003ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 813c 	beq.w	8003ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	f040 80b4 	bne.w	8003df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8140 	beq.w	8003f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f080 8139 	bcs.w	8003f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	f000 8088 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1d9      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e1      	bne.n	8003d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e3      	bne.n	8003d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fc3b 	bl	800264c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8ca 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dec:	e099      	b.n	8003f22 <HAL_UART_IRQHandler+0x50e>
 8003dee:	bf00      	nop
 8003df0:	080041f9 	.word	0x080041f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 808b 	beq.w	8003f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8086 	beq.w	8003f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e76:	633a      	str	r2, [r7, #48]	; 0x30
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f852 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003edc:	e023      	b.n	8003f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x4ea>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f992 	bl	8004220 <UART_Transmit_IT>
    return;
 8003efc:	e014      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <HAL_UART_IRQHandler+0x514>
 8003f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f9d2 	bl	80042c0 <UART_EndTransmit_IT>
    return;
 8003f1c:	e004      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
    return;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
      return;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
      return;
 8003f26:	bf00      	nop
  }
}
 8003f28:	37e8      	adds	r7, #232	; 0xe8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b090      	sub	sp, #64	; 0x40
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d137      	bne.n	8004024 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fda:	633a      	str	r2, [r7, #48]	; 0x30
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400e:	61fa      	str	r2, [r7, #28]
 8004010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	69b9      	ldr	r1, [r7, #24]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	617b      	str	r3, [r7, #20]
   return(result);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004022:	e002      	b.n	800402a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004024:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004026:	f7ff ff83 	bl	8003f30 <HAL_UART_TxCpltCallback>
}
 800402a:	bf00      	nop
 800402c:	3740      	adds	r7, #64	; 0x40
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ff7f 	bl	8003f44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b21      	cmp	r3, #33	; 0x21
 8004080:	d108      	bne.n	8004094 <UART_DMAError+0x46>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f000 f827 	bl	80040e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	d108      	bne.n	80040c8 <UART_DMAError+0x7a>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f000 f835 	bl	8004132 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0210 	orr.w	r2, r3, #16
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	f7ff ff49 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b089      	sub	sp, #36	; 0x24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	61ba      	str	r2, [r7, #24]
 800410c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	613b      	str	r3, [r7, #16]
   return(result);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004126:	bf00      	nop
 8004128:	3724      	adds	r7, #36	; 0x24
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b095      	sub	sp, #84	; 0x54
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415a:	643a      	str	r2, [r7, #64]	; 0x40
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	61fb      	str	r3, [r7, #28]
   return(result);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d119      	bne.n	80041de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ca:	61ba      	str	r2, [r7, #24]
 80041cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6979      	ldr	r1, [r7, #20]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	613b      	str	r3, [r7, #16]
   return(result);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ec:	bf00      	nop
 80041ee:	3754      	adds	r7, #84	; 0x54
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff feaa 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b21      	cmp	r3, #33	; 0x21
 8004232:	d13e      	bne.n	80042b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d114      	bne.n	8004268 <UART_Transmit_IT+0x48>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	e008      	b.n	800427a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6211      	str	r1, [r2, #32]
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4619      	mov	r1, r3
 8004288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe25 	bl	8003f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b22      	cmp	r3, #34	; 0x22
 8004302:	f040 80ab 	bne.w	800445c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d117      	bne.n	8004340 <UART_Receive_IT+0x50>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d113      	bne.n	8004340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432e:	b29a      	uxth	r2, r3
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
 800433e:	e026      	b.n	800438e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d007      	beq.n	8004364 <UART_Receive_IT+0x74>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <UART_Receive_IT+0x82>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e008      	b.n	8004384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4619      	mov	r1, r3
 800439c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d15a      	bne.n	8004458 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0220 	bic.w	r2, r2, #32
 80043b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d135      	bne.n	800444e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	613b      	str	r3, [r7, #16]
   return(result);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	623a      	str	r2, [r7, #32]
 800440a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69f9      	ldr	r1, [r7, #28]
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	61bb      	str	r3, [r7, #24]
   return(result);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fd9a 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
 800444c:	e002      	b.n	8004454 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fd82 	bl	8003f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e002      	b.n	800445e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3730      	adds	r7, #48	; 0x30
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b0c0      	sub	sp, #256	; 0x100
 800446e:	af00      	add	r7, sp, #0
 8004470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	68d9      	ldr	r1, [r3, #12]
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	ea40 0301 	orr.w	r3, r0, r1
 8004490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c0:	f021 010c 	bic.w	r1, r1, #12
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ce:	430b      	orrs	r3, r1
 80044d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	6999      	ldr	r1, [r3, #24]
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	ea40 0301 	orr.w	r3, r0, r1
 80044ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b8f      	ldr	r3, [pc, #572]	; (8004734 <UART_SetConfig+0x2cc>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d005      	beq.n	8004508 <UART_SetConfig+0xa0>
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b8d      	ldr	r3, [pc, #564]	; (8004738 <UART_SetConfig+0x2d0>)
 8004504:	429a      	cmp	r2, r3
 8004506:	d104      	bne.n	8004512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7ff f9a4 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 800450c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004510:	e003      	b.n	800451a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004512:	f7ff f98b 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8004516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004524:	f040 810c 	bne.w	8004740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	1891      	adds	r1, r2, r2
 8004540:	65b9      	str	r1, [r7, #88]	; 0x58
 8004542:	415b      	adcs	r3, r3
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800454a:	4621      	mov	r1, r4
 800454c:	eb12 0801 	adds.w	r8, r2, r1
 8004550:	4629      	mov	r1, r5
 8004552:	eb43 0901 	adc.w	r9, r3, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	4623      	mov	r3, r4
 8004570:	eb18 0303 	adds.w	r3, r8, r3
 8004574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004578:	462b      	mov	r3, r5
 800457a:	eb49 0303 	adc.w	r3, r9, r3
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800458e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004596:	460b      	mov	r3, r1
 8004598:	18db      	adds	r3, r3, r3
 800459a:	653b      	str	r3, [r7, #80]	; 0x50
 800459c:	4613      	mov	r3, r2
 800459e:	eb42 0303 	adc.w	r3, r2, r3
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
 80045a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045ac:	f7fc fb54 	bl	8000c58 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <UART_SetConfig+0x2d4>)
 80045b6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	011c      	lsls	r4, r3, #4
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045d8:	415b      	adcs	r3, r3
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045e0:	4641      	mov	r1, r8
 80045e2:	eb12 0a01 	adds.w	sl, r2, r1
 80045e6:	4649      	mov	r1, r9
 80045e8:	eb43 0b01 	adc.w	fp, r3, r1
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004600:	4692      	mov	sl, r2
 8004602:	469b      	mov	fp, r3
 8004604:	4643      	mov	r3, r8
 8004606:	eb1a 0303 	adds.w	r3, sl, r3
 800460a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800460e:	464b      	mov	r3, r9
 8004610:	eb4b 0303 	adc.w	r3, fp, r3
 8004614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
 800463a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800463e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004642:	f7fc fb09 	bl	8000c58 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4611      	mov	r1, r2
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <UART_SetConfig+0x2d4>)
 800464e:	fba3 2301 	umull	r2, r3, r3, r1
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2264      	movs	r2, #100	; 0x64
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	1acb      	subs	r3, r1, r3
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <UART_SetConfig+0x2d4>)
 8004664:	fba3 2302 	umull	r2, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004670:	441c      	add	r4, r3
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	63b9      	str	r1, [r7, #56]	; 0x38
 800468c:	415b      	adcs	r3, r3
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004694:	4641      	mov	r1, r8
 8004696:	1851      	adds	r1, r2, r1
 8004698:	6339      	str	r1, [r7, #48]	; 0x30
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046ac:	4659      	mov	r1, fp
 80046ae:	00cb      	lsls	r3, r1, #3
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b6:	4651      	mov	r1, sl
 80046b8:	00ca      	lsls	r2, r1, #3
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	4642      	mov	r2, r8
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046c8:	464b      	mov	r3, r9
 80046ca:	460a      	mov	r2, r1
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046e8:	460b      	mov	r3, r1
 80046ea:	18db      	adds	r3, r3, r3
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ee:	4613      	mov	r3, r2
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046fe:	f7fc faab 	bl	8000c58 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <UART_SetConfig+0x2d4>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	2164      	movs	r1, #100	; 0x64
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	3332      	adds	r3, #50	; 0x32
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <UART_SetConfig+0x2d4>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	f003 0207 	and.w	r2, r3, #7
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4422      	add	r2, r4
 800472e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004730:	e106      	b.n	8004940 <UART_SetConfig+0x4d8>
 8004732:	bf00      	nop
 8004734:	40011000 	.word	0x40011000
 8004738:	40011400 	.word	0x40011400
 800473c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800474a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800474e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004752:	4642      	mov	r2, r8
 8004754:	464b      	mov	r3, r9
 8004756:	1891      	adds	r1, r2, r2
 8004758:	6239      	str	r1, [r7, #32]
 800475a:	415b      	adcs	r3, r3
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004762:	4641      	mov	r1, r8
 8004764:	1854      	adds	r4, r2, r1
 8004766:	4649      	mov	r1, r9
 8004768:	eb43 0501 	adc.w	r5, r3, r1
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	00eb      	lsls	r3, r5, #3
 8004776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477a:	00e2      	lsls	r2, r4, #3
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
 8004780:	4643      	mov	r3, r8
 8004782:	18e3      	adds	r3, r4, r3
 8004784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004788:	464b      	mov	r3, r9
 800478a:	eb45 0303 	adc.w	r3, r5, r3
 800478e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800479e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ae:	4629      	mov	r1, r5
 80047b0:	008b      	lsls	r3, r1, #2
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b8:	4621      	mov	r1, r4
 80047ba:	008a      	lsls	r2, r1, #2
 80047bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047c0:	f7fc fa4a 	bl	8000c58 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4b60      	ldr	r3, [pc, #384]	; (800494c <UART_SetConfig+0x4e4>)
 80047ca:	fba3 2302 	umull	r2, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	011c      	lsls	r4, r3, #4
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	61b9      	str	r1, [r7, #24]
 80047ec:	415b      	adcs	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6139      	str	r1, [r7, #16]
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004828:	464b      	mov	r3, r9
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	67bb      	str	r3, [r7, #120]	; 0x78
 800483e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800484c:	4649      	mov	r1, r9
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004856:	4641      	mov	r1, r8
 8004858:	008a      	lsls	r2, r1, #2
 800485a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800485e:	f7fc f9fb 	bl	8000c58 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4611      	mov	r1, r2
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <UART_SetConfig+0x4e4>)
 800486a:	fba3 2301 	umull	r2, r3, r3, r1
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2264      	movs	r2, #100	; 0x64
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	; 0x32
 800487c:	4a33      	ldr	r2, [pc, #204]	; (800494c <UART_SetConfig+0x4e4>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	673b      	str	r3, [r7, #112]	; 0x70
 8004892:	677a      	str	r2, [r7, #116]	; 0x74
 8004894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	415b      	adcs	r3, r3
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a8:	4641      	mov	r1, r8
 80048aa:	1851      	adds	r1, r2, r1
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	4649      	mov	r1, r9
 80048b0:	414b      	adcs	r3, r1
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c0:	4659      	mov	r1, fp
 80048c2:	00cb      	lsls	r3, r1, #3
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ca:	4651      	mov	r1, sl
 80048cc:	00ca      	lsls	r2, r1, #3
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	4642      	mov	r2, r8
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048da:	464b      	mov	r3, r9
 80048dc:	460a      	mov	r2, r1
 80048de:	eb42 0303 	adc.w	r3, r2, r3
 80048e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	667a      	str	r2, [r7, #100]	; 0x64
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048fc:	4649      	mov	r1, r9
 80048fe:	008b      	lsls	r3, r1, #2
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004906:	4641      	mov	r1, r8
 8004908:	008a      	lsls	r2, r1, #2
 800490a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800490e:	f7fc f9a3 	bl	8000c58 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <UART_SetConfig+0x4e4>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <UART_SetConfig+0x4e4>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4422      	add	r2, r4
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <__cvt>:
 8004950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	ec55 4b10 	vmov	r4, r5, d0
 8004958:	2d00      	cmp	r5, #0
 800495a:	460e      	mov	r6, r1
 800495c:	4619      	mov	r1, r3
 800495e:	462b      	mov	r3, r5
 8004960:	bfbb      	ittet	lt
 8004962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004966:	461d      	movlt	r5, r3
 8004968:	2300      	movge	r3, #0
 800496a:	232d      	movlt	r3, #45	; 0x2d
 800496c:	700b      	strb	r3, [r1, #0]
 800496e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004970:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004974:	4691      	mov	r9, r2
 8004976:	f023 0820 	bic.w	r8, r3, #32
 800497a:	bfbc      	itt	lt
 800497c:	4622      	movlt	r2, r4
 800497e:	4614      	movlt	r4, r2
 8004980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004984:	d005      	beq.n	8004992 <__cvt+0x42>
 8004986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800498a:	d100      	bne.n	800498e <__cvt+0x3e>
 800498c:	3601      	adds	r6, #1
 800498e:	2102      	movs	r1, #2
 8004990:	e000      	b.n	8004994 <__cvt+0x44>
 8004992:	2103      	movs	r1, #3
 8004994:	ab03      	add	r3, sp, #12
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	ab02      	add	r3, sp, #8
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	ec45 4b10 	vmov	d0, r4, r5
 80049a0:	4653      	mov	r3, sl
 80049a2:	4632      	mov	r2, r6
 80049a4:	f000 fe68 	bl	8005678 <_dtoa_r>
 80049a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049ac:	4607      	mov	r7, r0
 80049ae:	d102      	bne.n	80049b6 <__cvt+0x66>
 80049b0:	f019 0f01 	tst.w	r9, #1
 80049b4:	d022      	beq.n	80049fc <__cvt+0xac>
 80049b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ba:	eb07 0906 	add.w	r9, r7, r6
 80049be:	d110      	bne.n	80049e2 <__cvt+0x92>
 80049c0:	783b      	ldrb	r3, [r7, #0]
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	d10a      	bne.n	80049dc <__cvt+0x8c>
 80049c6:	2200      	movs	r2, #0
 80049c8:	2300      	movs	r3, #0
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fc f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80049d2:	b918      	cbnz	r0, 80049dc <__cvt+0x8c>
 80049d4:	f1c6 0601 	rsb	r6, r6, #1
 80049d8:	f8ca 6000 	str.w	r6, [sl]
 80049dc:	f8da 3000 	ldr.w	r3, [sl]
 80049e0:	4499      	add	r9, r3
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fc f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ee:	b108      	cbz	r0, 80049f4 <__cvt+0xa4>
 80049f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80049f4:	2230      	movs	r2, #48	; 0x30
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	454b      	cmp	r3, r9
 80049fa:	d307      	bcc.n	8004a0c <__cvt+0xbc>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a00:	1bdb      	subs	r3, r3, r7
 8004a02:	4638      	mov	r0, r7
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	b004      	add	sp, #16
 8004a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	9103      	str	r1, [sp, #12]
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e7f0      	b.n	80049f6 <__cvt+0xa6>

08004a14 <__exponent>:
 8004a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a16:	4603      	mov	r3, r0
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	bfb8      	it	lt
 8004a1c:	4249      	neglt	r1, r1
 8004a1e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a22:	bfb4      	ite	lt
 8004a24:	222d      	movlt	r2, #45	; 0x2d
 8004a26:	222b      	movge	r2, #43	; 0x2b
 8004a28:	2909      	cmp	r1, #9
 8004a2a:	7042      	strb	r2, [r0, #1]
 8004a2c:	dd2a      	ble.n	8004a84 <__exponent+0x70>
 8004a2e:	f10d 0207 	add.w	r2, sp, #7
 8004a32:	4617      	mov	r7, r2
 8004a34:	260a      	movs	r6, #10
 8004a36:	4694      	mov	ip, r2
 8004a38:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a3c:	fb06 1415 	mls	r4, r6, r5, r1
 8004a40:	3430      	adds	r4, #48	; 0x30
 8004a42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a46:	460c      	mov	r4, r1
 8004a48:	2c63      	cmp	r4, #99	; 0x63
 8004a4a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004a4e:	4629      	mov	r1, r5
 8004a50:	dcf1      	bgt.n	8004a36 <__exponent+0x22>
 8004a52:	3130      	adds	r1, #48	; 0x30
 8004a54:	f1ac 0402 	sub.w	r4, ip, #2
 8004a58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a5c:	1c41      	adds	r1, r0, #1
 8004a5e:	4622      	mov	r2, r4
 8004a60:	42ba      	cmp	r2, r7
 8004a62:	d30a      	bcc.n	8004a7a <__exponent+0x66>
 8004a64:	f10d 0209 	add.w	r2, sp, #9
 8004a68:	eba2 020c 	sub.w	r2, r2, ip
 8004a6c:	42bc      	cmp	r4, r7
 8004a6e:	bf88      	it	hi
 8004a70:	2200      	movhi	r2, #0
 8004a72:	4413      	add	r3, r2
 8004a74:	1a18      	subs	r0, r3, r0
 8004a76:	b003      	add	sp, #12
 8004a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a82:	e7ed      	b.n	8004a60 <__exponent+0x4c>
 8004a84:	2330      	movs	r3, #48	; 0x30
 8004a86:	3130      	adds	r1, #48	; 0x30
 8004a88:	7083      	strb	r3, [r0, #2]
 8004a8a:	70c1      	strb	r1, [r0, #3]
 8004a8c:	1d03      	adds	r3, r0, #4
 8004a8e:	e7f1      	b.n	8004a74 <__exponent+0x60>

08004a90 <_printf_float>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	ed2d 8b02 	vpush	{d8}
 8004a98:	b08d      	sub	sp, #52	; 0x34
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	461f      	mov	r7, r3
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	f000 fce9 	bl	800547c <_localeconv_r>
 8004aaa:	f8d0 a000 	ldr.w	sl, [r0]
 8004aae:	4650      	mov	r0, sl
 8004ab0:	f7fb fbe6 	bl	8000280 <strlen>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ac4:	3307      	adds	r3, #7
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	f103 0208 	add.w	r2, r3, #8
 8004ace:	f8c8 2000 	str.w	r2, [r8]
 8004ad2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ada:	9307      	str	r3, [sp, #28]
 8004adc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ae0:	ee08 0a10 	vmov	s16, r0
 8004ae4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aec:	4b9e      	ldr	r3, [pc, #632]	; (8004d68 <_printf_float+0x2d8>)
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af2:	f7fc f823 	bl	8000b3c <__aeabi_dcmpun>
 8004af6:	bb88      	cbnz	r0, 8004b5c <_printf_float+0xcc>
 8004af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004afc:	4b9a      	ldr	r3, [pc, #616]	; (8004d68 <_printf_float+0x2d8>)
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b02:	f7fb fffd 	bl	8000b00 <__aeabi_dcmple>
 8004b06:	bb48      	cbnz	r0, 8004b5c <_printf_float+0xcc>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	4649      	mov	r1, r9
 8004b10:	f7fb ffec 	bl	8000aec <__aeabi_dcmplt>
 8004b14:	b110      	cbz	r0, 8004b1c <_printf_float+0x8c>
 8004b16:	232d      	movs	r3, #45	; 0x2d
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1c:	4a93      	ldr	r2, [pc, #588]	; (8004d6c <_printf_float+0x2dc>)
 8004b1e:	4b94      	ldr	r3, [pc, #592]	; (8004d70 <_printf_float+0x2e0>)
 8004b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b24:	bf94      	ite	ls
 8004b26:	4690      	movls	r8, r2
 8004b28:	4698      	movhi	r8, r3
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	9700      	str	r7, [sp, #0]
 8004b3c:	4633      	mov	r3, r6
 8004b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f9da 	bl	8004efc <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f040 8090 	bne.w	8004c6e <_printf_float+0x1de>
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b52:	b00d      	add	sp, #52	; 0x34
 8004b54:	ecbd 8b02 	vpop	{d8}
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	4640      	mov	r0, r8
 8004b62:	4649      	mov	r1, r9
 8004b64:	f7fb ffea 	bl	8000b3c <__aeabi_dcmpun>
 8004b68:	b140      	cbz	r0, 8004b7c <_printf_float+0xec>
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bfbc      	itt	lt
 8004b70:	232d      	movlt	r3, #45	; 0x2d
 8004b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b76:	4a7f      	ldr	r2, [pc, #508]	; (8004d74 <_printf_float+0x2e4>)
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <_printf_float+0x2e8>)
 8004b7a:	e7d1      	b.n	8004b20 <_printf_float+0x90>
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b82:	9206      	str	r2, [sp, #24]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	d13f      	bne.n	8004c08 <_printf_float+0x178>
 8004b88:	2306      	movs	r3, #6
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	6861      	ldr	r1, [r4, #4]
 8004b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b94:	2300      	movs	r3, #0
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	ab0a      	add	r3, sp, #40	; 0x28
 8004b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b9e:	ab09      	add	r3, sp, #36	; 0x24
 8004ba0:	ec49 8b10 	vmov	d0, r8, r9
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff fecf 	bl	8004950 <__cvt>
 8004bb2:	9b06      	ldr	r3, [sp, #24]
 8004bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bb6:	2b47      	cmp	r3, #71	; 0x47
 8004bb8:	4680      	mov	r8, r0
 8004bba:	d108      	bne.n	8004bce <_printf_float+0x13e>
 8004bbc:	1cc8      	adds	r0, r1, #3
 8004bbe:	db02      	blt.n	8004bc6 <_printf_float+0x136>
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	dd41      	ble.n	8004c4a <_printf_float+0x1ba>
 8004bc6:	f1ab 0302 	sub.w	r3, fp, #2
 8004bca:	fa5f fb83 	uxtb.w	fp, r3
 8004bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bd2:	d820      	bhi.n	8004c16 <_printf_float+0x186>
 8004bd4:	3901      	subs	r1, #1
 8004bd6:	465a      	mov	r2, fp
 8004bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8004bde:	f7ff ff19 	bl	8004a14 <__exponent>
 8004be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004be4:	1813      	adds	r3, r2, r0
 8004be6:	2a01      	cmp	r2, #1
 8004be8:	4681      	mov	r9, r0
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	dc02      	bgt.n	8004bf4 <_printf_float+0x164>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	07d2      	lsls	r2, r2, #31
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_float+0x168>
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d09c      	beq.n	8004b3a <_printf_float+0xaa>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c06:	e798      	b.n	8004b3a <_printf_float+0xaa>
 8004c08:	9a06      	ldr	r2, [sp, #24]
 8004c0a:	2a47      	cmp	r2, #71	; 0x47
 8004c0c:	d1be      	bne.n	8004b8c <_printf_float+0xfc>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1bc      	bne.n	8004b8c <_printf_float+0xfc>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7b9      	b.n	8004b8a <_printf_float+0xfa>
 8004c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c1a:	d118      	bne.n	8004c4e <_printf_float+0x1be>
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	dd0b      	ble.n	8004c3a <_printf_float+0x1aa>
 8004c22:	6121      	str	r1, [r4, #16]
 8004c24:	b913      	cbnz	r3, 8004c2c <_printf_float+0x19c>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	07d0      	lsls	r0, r2, #31
 8004c2a:	d502      	bpl.n	8004c32 <_printf_float+0x1a2>
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	440b      	add	r3, r1
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c34:	f04f 0900 	mov.w	r9, #0
 8004c38:	e7de      	b.n	8004bf8 <_printf_float+0x168>
 8004c3a:	b913      	cbnz	r3, 8004c42 <_printf_float+0x1b2>
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	07d2      	lsls	r2, r2, #31
 8004c40:	d501      	bpl.n	8004c46 <_printf_float+0x1b6>
 8004c42:	3302      	adds	r3, #2
 8004c44:	e7f4      	b.n	8004c30 <_printf_float+0x1a0>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7f2      	b.n	8004c30 <_printf_float+0x1a0>
 8004c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	4299      	cmp	r1, r3
 8004c52:	db05      	blt.n	8004c60 <_printf_float+0x1d0>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	6121      	str	r1, [r4, #16]
 8004c58:	07d8      	lsls	r0, r3, #31
 8004c5a:	d5ea      	bpl.n	8004c32 <_printf_float+0x1a2>
 8004c5c:	1c4b      	adds	r3, r1, #1
 8004c5e:	e7e7      	b.n	8004c30 <_printf_float+0x1a0>
 8004c60:	2900      	cmp	r1, #0
 8004c62:	bfd4      	ite	le
 8004c64:	f1c1 0202 	rsble	r2, r1, #2
 8004c68:	2201      	movgt	r2, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	e7e0      	b.n	8004c30 <_printf_float+0x1a0>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	055a      	lsls	r2, r3, #21
 8004c72:	d407      	bmi.n	8004c84 <_printf_float+0x1f4>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	4642      	mov	r2, r8
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d12c      	bne.n	8004cdc <_printf_float+0x24c>
 8004c82:	e764      	b.n	8004b4e <_printf_float+0xbe>
 8004c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c88:	f240 80e0 	bls.w	8004e4c <_printf_float+0x3bc>
 8004c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c90:	2200      	movs	r2, #0
 8004c92:	2300      	movs	r3, #0
 8004c94:	f7fb ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d034      	beq.n	8004d06 <_printf_float+0x276>
 8004c9c:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <_printf_float+0x2ec>)
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af51 	beq.w	8004b4e <_printf_float+0xbe>
 8004cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	db02      	blt.n	8004cba <_printf_float+0x22a>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07d8      	lsls	r0, r3, #31
 8004cb8:	d510      	bpl.n	8004cdc <_printf_float+0x24c>
 8004cba:	ee18 3a10 	vmov	r3, s16
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f af41 	beq.w	8004b4e <_printf_float+0xbe>
 8004ccc:	f04f 0800 	mov.w	r8, #0
 8004cd0:	f104 091a 	add.w	r9, r4, #26
 8004cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	4543      	cmp	r3, r8
 8004cda:	dc09      	bgt.n	8004cf0 <_printf_float+0x260>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	079b      	lsls	r3, r3, #30
 8004ce0:	f100 8107 	bmi.w	8004ef2 <_printf_float+0x462>
 8004ce4:	68e0      	ldr	r0, [r4, #12]
 8004ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	bfb8      	it	lt
 8004cec:	4618      	movlt	r0, r3
 8004cee:	e730      	b.n	8004b52 <_printf_float+0xc2>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	464a      	mov	r2, r9
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f af27 	beq.w	8004b4e <_printf_float+0xbe>
 8004d00:	f108 0801 	add.w	r8, r8, #1
 8004d04:	e7e6      	b.n	8004cd4 <_printf_float+0x244>
 8004d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dc39      	bgt.n	8004d80 <_printf_float+0x2f0>
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <_printf_float+0x2ec>)
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af19 	beq.w	8004b4e <_printf_float+0xbe>
 8004d1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d102      	bne.n	8004d2a <_printf_float+0x29a>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07d9      	lsls	r1, r3, #31
 8004d28:	d5d8      	bpl.n	8004cdc <_printf_float+0x24c>
 8004d2a:	ee18 3a10 	vmov	r3, s16
 8004d2e:	4652      	mov	r2, sl
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af09 	beq.w	8004b4e <_printf_float+0xbe>
 8004d3c:	f04f 0900 	mov.w	r9, #0
 8004d40:	f104 0a1a 	add.w	sl, r4, #26
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	425b      	negs	r3, r3
 8004d48:	454b      	cmp	r3, r9
 8004d4a:	dc01      	bgt.n	8004d50 <_printf_float+0x2c0>
 8004d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4e:	e792      	b.n	8004c76 <_printf_float+0x1e6>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4652      	mov	r2, sl
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f aef7 	beq.w	8004b4e <_printf_float+0xbe>
 8004d60:	f109 0901 	add.w	r9, r9, #1
 8004d64:	e7ee      	b.n	8004d44 <_printf_float+0x2b4>
 8004d66:	bf00      	nop
 8004d68:	7fefffff 	.word	0x7fefffff
 8004d6c:	080076d0 	.word	0x080076d0
 8004d70:	080076d4 	.word	0x080076d4
 8004d74:	080076d8 	.word	0x080076d8
 8004d78:	080076dc 	.word	0x080076dc
 8004d7c:	080076e0 	.word	0x080076e0
 8004d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d84:	429a      	cmp	r2, r3
 8004d86:	bfa8      	it	ge
 8004d88:	461a      	movge	r2, r3
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	4691      	mov	r9, r2
 8004d8e:	dc37      	bgt.n	8004e00 <_printf_float+0x370>
 8004d90:	f04f 0b00 	mov.w	fp, #0
 8004d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d98:	f104 021a 	add.w	r2, r4, #26
 8004d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	455b      	cmp	r3, fp
 8004da6:	dc33      	bgt.n	8004e10 <_printf_float+0x380>
 8004da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dac:	429a      	cmp	r2, r3
 8004dae:	db3b      	blt.n	8004e28 <_printf_float+0x398>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	07da      	lsls	r2, r3, #31
 8004db4:	d438      	bmi.n	8004e28 <_printf_float+0x398>
 8004db6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004dba:	eba2 0903 	sub.w	r9, r2, r3
 8004dbe:	9b05      	ldr	r3, [sp, #20]
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	4591      	cmp	r9, r2
 8004dc4:	bfa8      	it	ge
 8004dc6:	4691      	movge	r9, r2
 8004dc8:	f1b9 0f00 	cmp.w	r9, #0
 8004dcc:	dc35      	bgt.n	8004e3a <_printf_float+0x3aa>
 8004dce:	f04f 0800 	mov.w	r8, #0
 8004dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd6:	f104 0a1a 	add.w	sl, r4, #26
 8004dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	eba3 0309 	sub.w	r3, r3, r9
 8004de4:	4543      	cmp	r3, r8
 8004de6:	f77f af79 	ble.w	8004cdc <_printf_float+0x24c>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4652      	mov	r2, sl
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f aeaa 	beq.w	8004b4e <_printf_float+0xbe>
 8004dfa:	f108 0801 	add.w	r8, r8, #1
 8004dfe:	e7ec      	b.n	8004dda <_printf_float+0x34a>
 8004e00:	4613      	mov	r3, r2
 8004e02:	4631      	mov	r1, r6
 8004e04:	4642      	mov	r2, r8
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d1c0      	bne.n	8004d90 <_printf_float+0x300>
 8004e0e:	e69e      	b.n	8004b4e <_printf_float+0xbe>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	9205      	str	r2, [sp, #20]
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f ae97 	beq.w	8004b4e <_printf_float+0xbe>
 8004e20:	9a05      	ldr	r2, [sp, #20]
 8004e22:	f10b 0b01 	add.w	fp, fp, #1
 8004e26:	e7b9      	b.n	8004d9c <_printf_float+0x30c>
 8004e28:	ee18 3a10 	vmov	r3, s16
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	d1be      	bne.n	8004db6 <_printf_float+0x326>
 8004e38:	e689      	b.n	8004b4e <_printf_float+0xbe>
 8004e3a:	9a05      	ldr	r2, [sp, #20]
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	4442      	add	r2, r8
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	d1c1      	bne.n	8004dce <_printf_float+0x33e>
 8004e4a:	e680      	b.n	8004b4e <_printf_float+0xbe>
 8004e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e4e:	2a01      	cmp	r2, #1
 8004e50:	dc01      	bgt.n	8004e56 <_printf_float+0x3c6>
 8004e52:	07db      	lsls	r3, r3, #31
 8004e54:	d53a      	bpl.n	8004ecc <_printf_float+0x43c>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4642      	mov	r2, r8
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae74 	beq.w	8004b4e <_printf_float+0xbe>
 8004e66:	ee18 3a10 	vmov	r3, s16
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f ae6b 	beq.w	8004b4e <_printf_float+0xbe>
 8004e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004e84:	f7fb fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e88:	b9d8      	cbnz	r0, 8004ec2 <_printf_float+0x432>
 8004e8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004e8e:	f108 0201 	add.w	r2, r8, #1
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d10e      	bne.n	8004eba <_printf_float+0x42a>
 8004e9c:	e657      	b.n	8004b4e <_printf_float+0xbe>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae50 	beq.w	8004b4e <_printf_float+0xbe>
 8004eae:	f108 0801 	add.w	r8, r8, #1
 8004eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4543      	cmp	r3, r8
 8004eb8:	dcf1      	bgt.n	8004e9e <_printf_float+0x40e>
 8004eba:	464b      	mov	r3, r9
 8004ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ec0:	e6da      	b.n	8004c78 <_printf_float+0x1e8>
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	f104 0a1a 	add.w	sl, r4, #26
 8004eca:	e7f2      	b.n	8004eb2 <_printf_float+0x422>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4642      	mov	r2, r8
 8004ed0:	e7df      	b.n	8004e92 <_printf_float+0x402>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	464a      	mov	r2, r9
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	f43f ae36 	beq.w	8004b4e <_printf_float+0xbe>
 8004ee2:	f108 0801 	add.w	r8, r8, #1
 8004ee6:	68e3      	ldr	r3, [r4, #12]
 8004ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eea:	1a5b      	subs	r3, r3, r1
 8004eec:	4543      	cmp	r3, r8
 8004eee:	dcf0      	bgt.n	8004ed2 <_printf_float+0x442>
 8004ef0:	e6f8      	b.n	8004ce4 <_printf_float+0x254>
 8004ef2:	f04f 0800 	mov.w	r8, #0
 8004ef6:	f104 0919 	add.w	r9, r4, #25
 8004efa:	e7f4      	b.n	8004ee6 <_printf_float+0x456>

08004efc <_printf_common>:
 8004efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	4616      	mov	r6, r2
 8004f02:	4699      	mov	r9, r3
 8004f04:	688a      	ldr	r2, [r1, #8]
 8004f06:	690b      	ldr	r3, [r1, #16]
 8004f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	bfb8      	it	lt
 8004f10:	4613      	movlt	r3, r2
 8004f12:	6033      	str	r3, [r6, #0]
 8004f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f18:	4607      	mov	r7, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	b10a      	cbz	r2, 8004f22 <_printf_common+0x26>
 8004f1e:	3301      	adds	r3, #1
 8004f20:	6033      	str	r3, [r6, #0]
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	0699      	lsls	r1, r3, #26
 8004f26:	bf42      	ittt	mi
 8004f28:	6833      	ldrmi	r3, [r6, #0]
 8004f2a:	3302      	addmi	r3, #2
 8004f2c:	6033      	strmi	r3, [r6, #0]
 8004f2e:	6825      	ldr	r5, [r4, #0]
 8004f30:	f015 0506 	ands.w	r5, r5, #6
 8004f34:	d106      	bne.n	8004f44 <_printf_common+0x48>
 8004f36:	f104 0a19 	add.w	sl, r4, #25
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	6832      	ldr	r2, [r6, #0]
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	42ab      	cmp	r3, r5
 8004f42:	dc26      	bgt.n	8004f92 <_printf_common+0x96>
 8004f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f48:	1e13      	subs	r3, r2, #0
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	bf18      	it	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	0692      	lsls	r2, r2, #26
 8004f52:	d42b      	bmi.n	8004fac <_printf_common+0xb0>
 8004f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	47c0      	blx	r8
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d01e      	beq.n	8004fa0 <_printf_common+0xa4>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	6922      	ldr	r2, [r4, #16]
 8004f66:	f003 0306 	and.w	r3, r3, #6
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	bf02      	ittt	eq
 8004f6e:	68e5      	ldreq	r5, [r4, #12]
 8004f70:	6833      	ldreq	r3, [r6, #0]
 8004f72:	1aed      	subeq	r5, r5, r3
 8004f74:	68a3      	ldr	r3, [r4, #8]
 8004f76:	bf0c      	ite	eq
 8004f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f7c:	2500      	movne	r5, #0
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	bfc4      	itt	gt
 8004f82:	1a9b      	subgt	r3, r3, r2
 8004f84:	18ed      	addgt	r5, r5, r3
 8004f86:	2600      	movs	r6, #0
 8004f88:	341a      	adds	r4, #26
 8004f8a:	42b5      	cmp	r5, r6
 8004f8c:	d11a      	bne.n	8004fc4 <_printf_common+0xc8>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e008      	b.n	8004fa4 <_printf_common+0xa8>
 8004f92:	2301      	movs	r3, #1
 8004f94:	4652      	mov	r2, sl
 8004f96:	4649      	mov	r1, r9
 8004f98:	4638      	mov	r0, r7
 8004f9a:	47c0      	blx	r8
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d103      	bne.n	8004fa8 <_printf_common+0xac>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa8:	3501      	adds	r5, #1
 8004faa:	e7c6      	b.n	8004f3a <_printf_common+0x3e>
 8004fac:	18e1      	adds	r1, r4, r3
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	2030      	movs	r0, #48	; 0x30
 8004fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb6:	4422      	add	r2, r4
 8004fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	e7c7      	b.n	8004f54 <_printf_common+0x58>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	4649      	mov	r1, r9
 8004fca:	4638      	mov	r0, r7
 8004fcc:	47c0      	blx	r8
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d0e6      	beq.n	8004fa0 <_printf_common+0xa4>
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7d9      	b.n	8004f8a <_printf_common+0x8e>
	...

08004fd8 <_printf_i>:
 8004fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	7e0f      	ldrb	r7, [r1, #24]
 8004fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fe0:	2f78      	cmp	r7, #120	; 0x78
 8004fe2:	4691      	mov	r9, r2
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	469a      	mov	sl, r3
 8004fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fee:	d807      	bhi.n	8005000 <_printf_i+0x28>
 8004ff0:	2f62      	cmp	r7, #98	; 0x62
 8004ff2:	d80a      	bhi.n	800500a <_printf_i+0x32>
 8004ff4:	2f00      	cmp	r7, #0
 8004ff6:	f000 80d4 	beq.w	80051a2 <_printf_i+0x1ca>
 8004ffa:	2f58      	cmp	r7, #88	; 0x58
 8004ffc:	f000 80c0 	beq.w	8005180 <_printf_i+0x1a8>
 8005000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005008:	e03a      	b.n	8005080 <_printf_i+0xa8>
 800500a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800500e:	2b15      	cmp	r3, #21
 8005010:	d8f6      	bhi.n	8005000 <_printf_i+0x28>
 8005012:	a101      	add	r1, pc, #4	; (adr r1, 8005018 <_printf_i+0x40>)
 8005014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005018:	08005071 	.word	0x08005071
 800501c:	08005085 	.word	0x08005085
 8005020:	08005001 	.word	0x08005001
 8005024:	08005001 	.word	0x08005001
 8005028:	08005001 	.word	0x08005001
 800502c:	08005001 	.word	0x08005001
 8005030:	08005085 	.word	0x08005085
 8005034:	08005001 	.word	0x08005001
 8005038:	08005001 	.word	0x08005001
 800503c:	08005001 	.word	0x08005001
 8005040:	08005001 	.word	0x08005001
 8005044:	08005189 	.word	0x08005189
 8005048:	080050b1 	.word	0x080050b1
 800504c:	08005143 	.word	0x08005143
 8005050:	08005001 	.word	0x08005001
 8005054:	08005001 	.word	0x08005001
 8005058:	080051ab 	.word	0x080051ab
 800505c:	08005001 	.word	0x08005001
 8005060:	080050b1 	.word	0x080050b1
 8005064:	08005001 	.word	0x08005001
 8005068:	08005001 	.word	0x08005001
 800506c:	0800514b 	.word	0x0800514b
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	1d1a      	adds	r2, r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	602a      	str	r2, [r5, #0]
 8005078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005080:	2301      	movs	r3, #1
 8005082:	e09f      	b.n	80051c4 <_printf_i+0x1ec>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	0607      	lsls	r7, r0, #24
 800508a:	f103 0104 	add.w	r1, r3, #4
 800508e:	6029      	str	r1, [r5, #0]
 8005090:	d501      	bpl.n	8005096 <_printf_i+0xbe>
 8005092:	681e      	ldr	r6, [r3, #0]
 8005094:	e003      	b.n	800509e <_printf_i+0xc6>
 8005096:	0646      	lsls	r6, r0, #25
 8005098:	d5fb      	bpl.n	8005092 <_printf_i+0xba>
 800509a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800509e:	2e00      	cmp	r6, #0
 80050a0:	da03      	bge.n	80050aa <_printf_i+0xd2>
 80050a2:	232d      	movs	r3, #45	; 0x2d
 80050a4:	4276      	negs	r6, r6
 80050a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050aa:	485a      	ldr	r0, [pc, #360]	; (8005214 <_printf_i+0x23c>)
 80050ac:	230a      	movs	r3, #10
 80050ae:	e012      	b.n	80050d6 <_printf_i+0xfe>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	6029      	str	r1, [r5, #0]
 80050b8:	0605      	lsls	r5, r0, #24
 80050ba:	d501      	bpl.n	80050c0 <_printf_i+0xe8>
 80050bc:	681e      	ldr	r6, [r3, #0]
 80050be:	e002      	b.n	80050c6 <_printf_i+0xee>
 80050c0:	0641      	lsls	r1, r0, #25
 80050c2:	d5fb      	bpl.n	80050bc <_printf_i+0xe4>
 80050c4:	881e      	ldrh	r6, [r3, #0]
 80050c6:	4853      	ldr	r0, [pc, #332]	; (8005214 <_printf_i+0x23c>)
 80050c8:	2f6f      	cmp	r7, #111	; 0x6f
 80050ca:	bf0c      	ite	eq
 80050cc:	2308      	moveq	r3, #8
 80050ce:	230a      	movne	r3, #10
 80050d0:	2100      	movs	r1, #0
 80050d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050d6:	6865      	ldr	r5, [r4, #4]
 80050d8:	60a5      	str	r5, [r4, #8]
 80050da:	2d00      	cmp	r5, #0
 80050dc:	bfa2      	ittt	ge
 80050de:	6821      	ldrge	r1, [r4, #0]
 80050e0:	f021 0104 	bicge.w	r1, r1, #4
 80050e4:	6021      	strge	r1, [r4, #0]
 80050e6:	b90e      	cbnz	r6, 80050ec <_printf_i+0x114>
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	d04b      	beq.n	8005184 <_printf_i+0x1ac>
 80050ec:	4615      	mov	r5, r2
 80050ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80050f2:	fb03 6711 	mls	r7, r3, r1, r6
 80050f6:	5dc7      	ldrb	r7, [r0, r7]
 80050f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050fc:	4637      	mov	r7, r6
 80050fe:	42bb      	cmp	r3, r7
 8005100:	460e      	mov	r6, r1
 8005102:	d9f4      	bls.n	80050ee <_printf_i+0x116>
 8005104:	2b08      	cmp	r3, #8
 8005106:	d10b      	bne.n	8005120 <_printf_i+0x148>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	07de      	lsls	r6, r3, #31
 800510c:	d508      	bpl.n	8005120 <_printf_i+0x148>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	6861      	ldr	r1, [r4, #4]
 8005112:	4299      	cmp	r1, r3
 8005114:	bfde      	ittt	le
 8005116:	2330      	movle	r3, #48	; 0x30
 8005118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800511c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005120:	1b52      	subs	r2, r2, r5
 8005122:	6122      	str	r2, [r4, #16]
 8005124:	f8cd a000 	str.w	sl, [sp]
 8005128:	464b      	mov	r3, r9
 800512a:	aa03      	add	r2, sp, #12
 800512c:	4621      	mov	r1, r4
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fee4 	bl	8004efc <_printf_common>
 8005134:	3001      	adds	r0, #1
 8005136:	d14a      	bne.n	80051ce <_printf_i+0x1f6>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800513c:	b004      	add	sp, #16
 800513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f043 0320 	orr.w	r3, r3, #32
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	4833      	ldr	r0, [pc, #204]	; (8005218 <_printf_i+0x240>)
 800514c:	2778      	movs	r7, #120	; 0x78
 800514e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	6829      	ldr	r1, [r5, #0]
 8005156:	061f      	lsls	r7, r3, #24
 8005158:	f851 6b04 	ldr.w	r6, [r1], #4
 800515c:	d402      	bmi.n	8005164 <_printf_i+0x18c>
 800515e:	065f      	lsls	r7, r3, #25
 8005160:	bf48      	it	mi
 8005162:	b2b6      	uxthmi	r6, r6
 8005164:	07df      	lsls	r7, r3, #31
 8005166:	bf48      	it	mi
 8005168:	f043 0320 	orrmi.w	r3, r3, #32
 800516c:	6029      	str	r1, [r5, #0]
 800516e:	bf48      	it	mi
 8005170:	6023      	strmi	r3, [r4, #0]
 8005172:	b91e      	cbnz	r6, 800517c <_printf_i+0x1a4>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	f023 0320 	bic.w	r3, r3, #32
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	2310      	movs	r3, #16
 800517e:	e7a7      	b.n	80050d0 <_printf_i+0xf8>
 8005180:	4824      	ldr	r0, [pc, #144]	; (8005214 <_printf_i+0x23c>)
 8005182:	e7e4      	b.n	800514e <_printf_i+0x176>
 8005184:	4615      	mov	r5, r2
 8005186:	e7bd      	b.n	8005104 <_printf_i+0x12c>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	6826      	ldr	r6, [r4, #0]
 800518c:	6961      	ldr	r1, [r4, #20]
 800518e:	1d18      	adds	r0, r3, #4
 8005190:	6028      	str	r0, [r5, #0]
 8005192:	0635      	lsls	r5, r6, #24
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	d501      	bpl.n	800519c <_printf_i+0x1c4>
 8005198:	6019      	str	r1, [r3, #0]
 800519a:	e002      	b.n	80051a2 <_printf_i+0x1ca>
 800519c:	0670      	lsls	r0, r6, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0x1c0>
 80051a0:	8019      	strh	r1, [r3, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	4615      	mov	r5, r2
 80051a8:	e7bc      	b.n	8005124 <_printf_i+0x14c>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	1d1a      	adds	r2, r3, #4
 80051ae:	602a      	str	r2, [r5, #0]
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	2100      	movs	r1, #0
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7fb f812 	bl	80001e0 <memchr>
 80051bc:	b108      	cbz	r0, 80051c2 <_printf_i+0x1ea>
 80051be:	1b40      	subs	r0, r0, r5
 80051c0:	6060      	str	r0, [r4, #4]
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	2300      	movs	r3, #0
 80051c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051cc:	e7aa      	b.n	8005124 <_printf_i+0x14c>
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	462a      	mov	r2, r5
 80051d2:	4649      	mov	r1, r9
 80051d4:	4640      	mov	r0, r8
 80051d6:	47d0      	blx	sl
 80051d8:	3001      	adds	r0, #1
 80051da:	d0ad      	beq.n	8005138 <_printf_i+0x160>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	079b      	lsls	r3, r3, #30
 80051e0:	d413      	bmi.n	800520a <_printf_i+0x232>
 80051e2:	68e0      	ldr	r0, [r4, #12]
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	4298      	cmp	r0, r3
 80051e8:	bfb8      	it	lt
 80051ea:	4618      	movlt	r0, r3
 80051ec:	e7a6      	b.n	800513c <_printf_i+0x164>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4632      	mov	r2, r6
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	47d0      	blx	sl
 80051f8:	3001      	adds	r0, #1
 80051fa:	d09d      	beq.n	8005138 <_printf_i+0x160>
 80051fc:	3501      	adds	r5, #1
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	9903      	ldr	r1, [sp, #12]
 8005202:	1a5b      	subs	r3, r3, r1
 8005204:	42ab      	cmp	r3, r5
 8005206:	dcf2      	bgt.n	80051ee <_printf_i+0x216>
 8005208:	e7eb      	b.n	80051e2 <_printf_i+0x20a>
 800520a:	2500      	movs	r5, #0
 800520c:	f104 0619 	add.w	r6, r4, #25
 8005210:	e7f5      	b.n	80051fe <_printf_i+0x226>
 8005212:	bf00      	nop
 8005214:	080076e2 	.word	0x080076e2
 8005218:	080076f3 	.word	0x080076f3

0800521c <std>:
 800521c:	2300      	movs	r3, #0
 800521e:	b510      	push	{r4, lr}
 8005220:	4604      	mov	r4, r0
 8005222:	e9c0 3300 	strd	r3, r3, [r0]
 8005226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800522a:	6083      	str	r3, [r0, #8]
 800522c:	8181      	strh	r1, [r0, #12]
 800522e:	6643      	str	r3, [r0, #100]	; 0x64
 8005230:	81c2      	strh	r2, [r0, #14]
 8005232:	6183      	str	r3, [r0, #24]
 8005234:	4619      	mov	r1, r3
 8005236:	2208      	movs	r2, #8
 8005238:	305c      	adds	r0, #92	; 0x5c
 800523a:	f000 f916 	bl	800546a <memset>
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <std+0x38>)
 8005240:	6263      	str	r3, [r4, #36]	; 0x24
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <std+0x3c>)
 8005244:	62a3      	str	r3, [r4, #40]	; 0x28
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <std+0x40>)
 8005248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <std+0x44>)
 800524c:	6224      	str	r4, [r4, #32]
 800524e:	6323      	str	r3, [r4, #48]	; 0x30
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	080053e5 	.word	0x080053e5
 8005258:	08005407 	.word	0x08005407
 800525c:	0800543f 	.word	0x0800543f
 8005260:	08005463 	.word	0x08005463

08005264 <stdio_exit_handler>:
 8005264:	4a02      	ldr	r2, [pc, #8]	; (8005270 <stdio_exit_handler+0xc>)
 8005266:	4903      	ldr	r1, [pc, #12]	; (8005274 <stdio_exit_handler+0x10>)
 8005268:	4803      	ldr	r0, [pc, #12]	; (8005278 <stdio_exit_handler+0x14>)
 800526a:	f000 b869 	b.w	8005340 <_fwalk_sglue>
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c
 8005274:	08006f11 	.word	0x08006f11
 8005278:	20000018 	.word	0x20000018

0800527c <cleanup_stdio>:
 800527c:	6841      	ldr	r1, [r0, #4]
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <cleanup_stdio+0x34>)
 8005280:	4299      	cmp	r1, r3
 8005282:	b510      	push	{r4, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	d001      	beq.n	800528c <cleanup_stdio+0x10>
 8005288:	f001 fe42 	bl	8006f10 <_fflush_r>
 800528c:	68a1      	ldr	r1, [r4, #8]
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <cleanup_stdio+0x38>)
 8005290:	4299      	cmp	r1, r3
 8005292:	d002      	beq.n	800529a <cleanup_stdio+0x1e>
 8005294:	4620      	mov	r0, r4
 8005296:	f001 fe3b 	bl	8006f10 <_fflush_r>
 800529a:	68e1      	ldr	r1, [r4, #12]
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <cleanup_stdio+0x3c>)
 800529e:	4299      	cmp	r1, r3
 80052a0:	d004      	beq.n	80052ac <cleanup_stdio+0x30>
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a8:	f001 be32 	b.w	8006f10 <_fflush_r>
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	2000039c 	.word	0x2000039c
 80052b4:	20000404 	.word	0x20000404
 80052b8:	2000046c 	.word	0x2000046c

080052bc <global_stdio_init.part.0>:
 80052bc:	b510      	push	{r4, lr}
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <global_stdio_init.part.0+0x30>)
 80052c0:	4c0b      	ldr	r4, [pc, #44]	; (80052f0 <global_stdio_init.part.0+0x34>)
 80052c2:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <global_stdio_init.part.0+0x38>)
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	4620      	mov	r0, r4
 80052c8:	2200      	movs	r2, #0
 80052ca:	2104      	movs	r1, #4
 80052cc:	f7ff ffa6 	bl	800521c <std>
 80052d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052d4:	2201      	movs	r2, #1
 80052d6:	2109      	movs	r1, #9
 80052d8:	f7ff ffa0 	bl	800521c <std>
 80052dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052e0:	2202      	movs	r2, #2
 80052e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e6:	2112      	movs	r1, #18
 80052e8:	f7ff bf98 	b.w	800521c <std>
 80052ec:	200004d4 	.word	0x200004d4
 80052f0:	2000039c 	.word	0x2000039c
 80052f4:	08005265 	.word	0x08005265

080052f8 <__sfp_lock_acquire>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__sfp_lock_acquire+0x8>)
 80052fa:	f000 b933 	b.w	8005564 <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	200004dd 	.word	0x200004dd

08005304 <__sfp_lock_release>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__sfp_lock_release+0x8>)
 8005306:	f000 b92e 	b.w	8005566 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	200004dd 	.word	0x200004dd

08005310 <__sinit>:
 8005310:	b510      	push	{r4, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	f7ff fff0 	bl	80052f8 <__sfp_lock_acquire>
 8005318:	6a23      	ldr	r3, [r4, #32]
 800531a:	b11b      	cbz	r3, 8005324 <__sinit+0x14>
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005320:	f7ff bff0 	b.w	8005304 <__sfp_lock_release>
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <__sinit+0x28>)
 8005326:	6223      	str	r3, [r4, #32]
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <__sinit+0x2c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f5      	bne.n	800531c <__sinit+0xc>
 8005330:	f7ff ffc4 	bl	80052bc <global_stdio_init.part.0>
 8005334:	e7f2      	b.n	800531c <__sinit+0xc>
 8005336:	bf00      	nop
 8005338:	0800527d 	.word	0x0800527d
 800533c:	200004d4 	.word	0x200004d4

08005340 <_fwalk_sglue>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4607      	mov	r7, r0
 8005346:	4688      	mov	r8, r1
 8005348:	4614      	mov	r4, r2
 800534a:	2600      	movs	r6, #0
 800534c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005350:	f1b9 0901 	subs.w	r9, r9, #1
 8005354:	d505      	bpl.n	8005362 <_fwalk_sglue+0x22>
 8005356:	6824      	ldr	r4, [r4, #0]
 8005358:	2c00      	cmp	r4, #0
 800535a:	d1f7      	bne.n	800534c <_fwalk_sglue+0xc>
 800535c:	4630      	mov	r0, r6
 800535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d907      	bls.n	8005378 <_fwalk_sglue+0x38>
 8005368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800536c:	3301      	adds	r3, #1
 800536e:	d003      	beq.n	8005378 <_fwalk_sglue+0x38>
 8005370:	4629      	mov	r1, r5
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	4306      	orrs	r6, r0
 8005378:	3568      	adds	r5, #104	; 0x68
 800537a:	e7e9      	b.n	8005350 <_fwalk_sglue+0x10>

0800537c <sniprintf>:
 800537c:	b40c      	push	{r2, r3}
 800537e:	b530      	push	{r4, r5, lr}
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <sniprintf+0x64>)
 8005382:	1e0c      	subs	r4, r1, #0
 8005384:	681d      	ldr	r5, [r3, #0]
 8005386:	b09d      	sub	sp, #116	; 0x74
 8005388:	da08      	bge.n	800539c <sniprintf+0x20>
 800538a:	238b      	movs	r3, #139	; 0x8b
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005392:	b01d      	add	sp, #116	; 0x74
 8005394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005398:	b002      	add	sp, #8
 800539a:	4770      	bx	lr
 800539c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80053a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80053a4:	bf14      	ite	ne
 80053a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80053aa:	4623      	moveq	r3, r4
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	9307      	str	r3, [sp, #28]
 80053b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80053bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053be:	ab21      	add	r3, sp, #132	; 0x84
 80053c0:	a902      	add	r1, sp, #8
 80053c2:	4628      	mov	r0, r5
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	f001 fc1f 	bl	8006c08 <_svfiprintf_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	bfbc      	itt	lt
 80053ce:	238b      	movlt	r3, #139	; 0x8b
 80053d0:	602b      	strlt	r3, [r5, #0]
 80053d2:	2c00      	cmp	r4, #0
 80053d4:	d0dd      	beq.n	8005392 <sniprintf+0x16>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e7d9      	b.n	8005392 <sniprintf+0x16>
 80053de:	bf00      	nop
 80053e0:	20000064 	.word	0x20000064

080053e4 <__sread>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ec:	f000 f86c 	bl	80054c8 <_read_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	bfab      	itete	ge
 80053f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053f6:	89a3      	ldrhlt	r3, [r4, #12]
 80053f8:	181b      	addge	r3, r3, r0
 80053fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053fe:	bfac      	ite	ge
 8005400:	6563      	strge	r3, [r4, #84]	; 0x54
 8005402:	81a3      	strhlt	r3, [r4, #12]
 8005404:	bd10      	pop	{r4, pc}

08005406 <__swrite>:
 8005406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540a:	461f      	mov	r7, r3
 800540c:	898b      	ldrh	r3, [r1, #12]
 800540e:	05db      	lsls	r3, r3, #23
 8005410:	4605      	mov	r5, r0
 8005412:	460c      	mov	r4, r1
 8005414:	4616      	mov	r6, r2
 8005416:	d505      	bpl.n	8005424 <__swrite+0x1e>
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	2302      	movs	r3, #2
 800541e:	2200      	movs	r2, #0
 8005420:	f000 f840 	bl	80054a4 <_lseek_r>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	4632      	mov	r2, r6
 8005432:	463b      	mov	r3, r7
 8005434:	4628      	mov	r0, r5
 8005436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	f000 b857 	b.w	80054ec <_write_r>

0800543e <__sseek>:
 800543e:	b510      	push	{r4, lr}
 8005440:	460c      	mov	r4, r1
 8005442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005446:	f000 f82d 	bl	80054a4 <_lseek_r>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	bf15      	itete	ne
 8005450:	6560      	strne	r0, [r4, #84]	; 0x54
 8005452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800545a:	81a3      	strheq	r3, [r4, #12]
 800545c:	bf18      	it	ne
 800545e:	81a3      	strhne	r3, [r4, #12]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__sclose>:
 8005462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005466:	f000 b80d 	b.w	8005484 <_close_r>

0800546a <memset>:
 800546a:	4402      	add	r2, r0
 800546c:	4603      	mov	r3, r0
 800546e:	4293      	cmp	r3, r2
 8005470:	d100      	bne.n	8005474 <memset+0xa>
 8005472:	4770      	bx	lr
 8005474:	f803 1b01 	strb.w	r1, [r3], #1
 8005478:	e7f9      	b.n	800546e <memset+0x4>
	...

0800547c <_localeconv_r>:
 800547c:	4800      	ldr	r0, [pc, #0]	; (8005480 <_localeconv_r+0x4>)
 800547e:	4770      	bx	lr
 8005480:	20000158 	.word	0x20000158

08005484 <_close_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d06      	ldr	r5, [pc, #24]	; (80054a0 <_close_r+0x1c>)
 8005488:	2300      	movs	r3, #0
 800548a:	4604      	mov	r4, r0
 800548c:	4608      	mov	r0, r1
 800548e:	602b      	str	r3, [r5, #0]
 8005490:	f7fc f99f 	bl	80017d2 <_close>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_close_r+0x1a>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_close_r+0x1a>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	200004d8 	.word	0x200004d8

080054a4 <_lseek_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d07      	ldr	r5, [pc, #28]	; (80054c4 <_lseek_r+0x20>)
 80054a8:	4604      	mov	r4, r0
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	2200      	movs	r2, #0
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f7fc f9b4 	bl	8001820 <_lseek>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_lseek_r+0x1e>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_lseek_r+0x1e>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	200004d8 	.word	0x200004d8

080054c8 <_read_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d07      	ldr	r5, [pc, #28]	; (80054e8 <_read_r+0x20>)
 80054cc:	4604      	mov	r4, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	602a      	str	r2, [r5, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fc f942 	bl	8001760 <_read>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_read_r+0x1e>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_read_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200004d8 	.word	0x200004d8

080054ec <_write_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d07      	ldr	r5, [pc, #28]	; (800550c <_write_r+0x20>)
 80054f0:	4604      	mov	r4, r0
 80054f2:	4608      	mov	r0, r1
 80054f4:	4611      	mov	r1, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	602a      	str	r2, [r5, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fc f94d 	bl	800179a <_write>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_write_r+0x1e>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_write_r+0x1e>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200004d8 	.word	0x200004d8

08005510 <__errno>:
 8005510:	4b01      	ldr	r3, [pc, #4]	; (8005518 <__errno+0x8>)
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000064 	.word	0x20000064

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2600      	movs	r6, #0
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4d0b      	ldr	r5, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f002 f892 	bl	8007658 <_init>
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2600      	movs	r6, #0
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	08007a4c 	.word	0x08007a4c
 8005558:	08007a4c 	.word	0x08007a4c
 800555c:	08007a4c 	.word	0x08007a4c
 8005560:	08007a50 	.word	0x08007a50

08005564 <__retarget_lock_acquire_recursive>:
 8005564:	4770      	bx	lr

08005566 <__retarget_lock_release_recursive>:
 8005566:	4770      	bx	lr

08005568 <quorem>:
 8005568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	6903      	ldr	r3, [r0, #16]
 800556e:	690c      	ldr	r4, [r1, #16]
 8005570:	42a3      	cmp	r3, r4
 8005572:	4607      	mov	r7, r0
 8005574:	db7e      	blt.n	8005674 <quorem+0x10c>
 8005576:	3c01      	subs	r4, #1
 8005578:	f101 0814 	add.w	r8, r1, #20
 800557c:	f100 0514 	add.w	r5, r0, #20
 8005580:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800558a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800558e:	3301      	adds	r3, #1
 8005590:	429a      	cmp	r2, r3
 8005592:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005596:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800559a:	fbb2 f6f3 	udiv	r6, r2, r3
 800559e:	d331      	bcc.n	8005604 <quorem+0x9c>
 80055a0:	f04f 0e00 	mov.w	lr, #0
 80055a4:	4640      	mov	r0, r8
 80055a6:	46ac      	mov	ip, r5
 80055a8:	46f2      	mov	sl, lr
 80055aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80055ae:	b293      	uxth	r3, r2
 80055b0:	fb06 e303 	mla	r3, r6, r3, lr
 80055b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055b8:	0c1a      	lsrs	r2, r3, #16
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ebaa 0303 	sub.w	r3, sl, r3
 80055c0:	f8dc a000 	ldr.w	sl, [ip]
 80055c4:	fa13 f38a 	uxtah	r3, r3, sl
 80055c8:	fb06 220e 	mla	r2, r6, lr, r2
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	9b00      	ldr	r3, [sp, #0]
 80055d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055d4:	b292      	uxth	r2, r2
 80055d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055de:	f8bd 3000 	ldrh.w	r3, [sp]
 80055e2:	4581      	cmp	r9, r0
 80055e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e8:	f84c 3b04 	str.w	r3, [ip], #4
 80055ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055f0:	d2db      	bcs.n	80055aa <quorem+0x42>
 80055f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80055f6:	b92b      	cbnz	r3, 8005604 <quorem+0x9c>
 80055f8:	9b01      	ldr	r3, [sp, #4]
 80055fa:	3b04      	subs	r3, #4
 80055fc:	429d      	cmp	r5, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	d32c      	bcc.n	800565c <quorem+0xf4>
 8005602:	613c      	str	r4, [r7, #16]
 8005604:	4638      	mov	r0, r7
 8005606:	f001 f9a5 	bl	8006954 <__mcmp>
 800560a:	2800      	cmp	r0, #0
 800560c:	db22      	blt.n	8005654 <quorem+0xec>
 800560e:	3601      	adds	r6, #1
 8005610:	4629      	mov	r1, r5
 8005612:	2000      	movs	r0, #0
 8005614:	f858 2b04 	ldr.w	r2, [r8], #4
 8005618:	f8d1 c000 	ldr.w	ip, [r1]
 800561c:	b293      	uxth	r3, r2
 800561e:	1ac3      	subs	r3, r0, r3
 8005620:	0c12      	lsrs	r2, r2, #16
 8005622:	fa13 f38c 	uxtah	r3, r3, ip
 8005626:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800562a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800562e:	b29b      	uxth	r3, r3
 8005630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005634:	45c1      	cmp	r9, r8
 8005636:	f841 3b04 	str.w	r3, [r1], #4
 800563a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800563e:	d2e9      	bcs.n	8005614 <quorem+0xac>
 8005640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005648:	b922      	cbnz	r2, 8005654 <quorem+0xec>
 800564a:	3b04      	subs	r3, #4
 800564c:	429d      	cmp	r5, r3
 800564e:	461a      	mov	r2, r3
 8005650:	d30a      	bcc.n	8005668 <quorem+0x100>
 8005652:	613c      	str	r4, [r7, #16]
 8005654:	4630      	mov	r0, r6
 8005656:	b003      	add	sp, #12
 8005658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	3b04      	subs	r3, #4
 8005660:	2a00      	cmp	r2, #0
 8005662:	d1ce      	bne.n	8005602 <quorem+0x9a>
 8005664:	3c01      	subs	r4, #1
 8005666:	e7c9      	b.n	80055fc <quorem+0x94>
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	3b04      	subs	r3, #4
 800566c:	2a00      	cmp	r2, #0
 800566e:	d1f0      	bne.n	8005652 <quorem+0xea>
 8005670:	3c01      	subs	r4, #1
 8005672:	e7eb      	b.n	800564c <quorem+0xe4>
 8005674:	2000      	movs	r0, #0
 8005676:	e7ee      	b.n	8005656 <quorem+0xee>

08005678 <_dtoa_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ed2d 8b04 	vpush	{d8-d9}
 8005680:	69c5      	ldr	r5, [r0, #28]
 8005682:	b093      	sub	sp, #76	; 0x4c
 8005684:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005688:	ec57 6b10 	vmov	r6, r7, d0
 800568c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005690:	9107      	str	r1, [sp, #28]
 8005692:	4604      	mov	r4, r0
 8005694:	920a      	str	r2, [sp, #40]	; 0x28
 8005696:	930d      	str	r3, [sp, #52]	; 0x34
 8005698:	b975      	cbnz	r5, 80056b8 <_dtoa_r+0x40>
 800569a:	2010      	movs	r0, #16
 800569c:	f000 fe2a 	bl	80062f4 <malloc>
 80056a0:	4602      	mov	r2, r0
 80056a2:	61e0      	str	r0, [r4, #28]
 80056a4:	b920      	cbnz	r0, 80056b0 <_dtoa_r+0x38>
 80056a6:	4bae      	ldr	r3, [pc, #696]	; (8005960 <_dtoa_r+0x2e8>)
 80056a8:	21ef      	movs	r1, #239	; 0xef
 80056aa:	48ae      	ldr	r0, [pc, #696]	; (8005964 <_dtoa_r+0x2ec>)
 80056ac:	f001 fc90 	bl	8006fd0 <__assert_func>
 80056b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056b4:	6005      	str	r5, [r0, #0]
 80056b6:	60c5      	str	r5, [r0, #12]
 80056b8:	69e3      	ldr	r3, [r4, #28]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	b151      	cbz	r1, 80056d4 <_dtoa_r+0x5c>
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	604a      	str	r2, [r1, #4]
 80056c2:	2301      	movs	r3, #1
 80056c4:	4093      	lsls	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 ff07 	bl	80064dc <_Bfree>
 80056ce:	69e3      	ldr	r3, [r4, #28]
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	1e3b      	subs	r3, r7, #0
 80056d6:	bfbb      	ittet	lt
 80056d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056dc:	9303      	strlt	r3, [sp, #12]
 80056de:	2300      	movge	r3, #0
 80056e0:	2201      	movlt	r2, #1
 80056e2:	bfac      	ite	ge
 80056e4:	f8c8 3000 	strge.w	r3, [r8]
 80056e8:	f8c8 2000 	strlt.w	r2, [r8]
 80056ec:	4b9e      	ldr	r3, [pc, #632]	; (8005968 <_dtoa_r+0x2f0>)
 80056ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056f2:	ea33 0308 	bics.w	r3, r3, r8
 80056f6:	d11b      	bne.n	8005730 <_dtoa_r+0xb8>
 80056f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005704:	4333      	orrs	r3, r6
 8005706:	f000 8593 	beq.w	8006230 <_dtoa_r+0xbb8>
 800570a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800570c:	b963      	cbnz	r3, 8005728 <_dtoa_r+0xb0>
 800570e:	4b97      	ldr	r3, [pc, #604]	; (800596c <_dtoa_r+0x2f4>)
 8005710:	e027      	b.n	8005762 <_dtoa_r+0xea>
 8005712:	4b97      	ldr	r3, [pc, #604]	; (8005970 <_dtoa_r+0x2f8>)
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	9800      	ldr	r0, [sp, #0]
 800571e:	b013      	add	sp, #76	; 0x4c
 8005720:	ecbd 8b04 	vpop	{d8-d9}
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005728:	4b90      	ldr	r3, [pc, #576]	; (800596c <_dtoa_r+0x2f4>)
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	3303      	adds	r3, #3
 800572e:	e7f3      	b.n	8005718 <_dtoa_r+0xa0>
 8005730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	ec51 0b17 	vmov	r0, r1, d7
 800573a:	eeb0 8a47 	vmov.f32	s16, s14
 800573e:	eef0 8a67 	vmov.f32	s17, s15
 8005742:	2300      	movs	r3, #0
 8005744:	f7fb f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005748:	4681      	mov	r9, r0
 800574a:	b160      	cbz	r0, 8005766 <_dtoa_r+0xee>
 800574c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800574e:	2301      	movs	r3, #1
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8568 	beq.w	800622a <_dtoa_r+0xbb2>
 800575a:	4b86      	ldr	r3, [pc, #536]	; (8005974 <_dtoa_r+0x2fc>)
 800575c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	e7da      	b.n	800571c <_dtoa_r+0xa4>
 8005766:	aa10      	add	r2, sp, #64	; 0x40
 8005768:	a911      	add	r1, sp, #68	; 0x44
 800576a:	4620      	mov	r0, r4
 800576c:	eeb0 0a48 	vmov.f32	s0, s16
 8005770:	eef0 0a68 	vmov.f32	s1, s17
 8005774:	f001 f994 	bl	8006aa0 <__d2b>
 8005778:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800577c:	4682      	mov	sl, r0
 800577e:	2d00      	cmp	r5, #0
 8005780:	d07f      	beq.n	8005882 <_dtoa_r+0x20a>
 8005782:	ee18 3a90 	vmov	r3, s17
 8005786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800578a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800578e:	ec51 0b18 	vmov	r0, r1, d8
 8005792:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800579a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800579e:	4619      	mov	r1, r3
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b75      	ldr	r3, [pc, #468]	; (8005978 <_dtoa_r+0x300>)
 80057a4:	f7fa fd78 	bl	8000298 <__aeabi_dsub>
 80057a8:	a367      	add	r3, pc, #412	; (adr r3, 8005948 <_dtoa_r+0x2d0>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff2b 	bl	8000608 <__aeabi_dmul>
 80057b2:	a367      	add	r3, pc, #412	; (adr r3, 8005950 <_dtoa_r+0x2d8>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd70 	bl	800029c <__adddf3>
 80057bc:	4606      	mov	r6, r0
 80057be:	4628      	mov	r0, r5
 80057c0:	460f      	mov	r7, r1
 80057c2:	f7fa feb7 	bl	8000534 <__aeabi_i2d>
 80057c6:	a364      	add	r3, pc, #400	; (adr r3, 8005958 <_dtoa_r+0x2e0>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd60 	bl	800029c <__adddf3>
 80057dc:	4606      	mov	r6, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	f7fb f9c2 	bl	8000b68 <__aeabi_d2iz>
 80057e4:	2200      	movs	r2, #0
 80057e6:	4683      	mov	fp, r0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f97d 	bl	8000aec <__aeabi_dcmplt>
 80057f2:	b148      	cbz	r0, 8005808 <_dtoa_r+0x190>
 80057f4:	4658      	mov	r0, fp
 80057f6:	f7fa fe9d 	bl	8000534 <__aeabi_i2d>
 80057fa:	4632      	mov	r2, r6
 80057fc:	463b      	mov	r3, r7
 80057fe:	f7fb f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005802:	b908      	cbnz	r0, 8005808 <_dtoa_r+0x190>
 8005804:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005808:	f1bb 0f16 	cmp.w	fp, #22
 800580c:	d857      	bhi.n	80058be <_dtoa_r+0x246>
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <_dtoa_r+0x304>)
 8005810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	ec51 0b18 	vmov	r0, r1, d8
 800581c:	f7fb f966 	bl	8000aec <__aeabi_dcmplt>
 8005820:	2800      	cmp	r0, #0
 8005822:	d04e      	beq.n	80058c2 <_dtoa_r+0x24a>
 8005824:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005828:	2300      	movs	r3, #0
 800582a:	930c      	str	r3, [sp, #48]	; 0x30
 800582c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800582e:	1b5b      	subs	r3, r3, r5
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	bf45      	ittet	mi
 8005834:	f1c3 0301 	rsbmi	r3, r3, #1
 8005838:	9305      	strmi	r3, [sp, #20]
 800583a:	2300      	movpl	r3, #0
 800583c:	2300      	movmi	r3, #0
 800583e:	9206      	str	r2, [sp, #24]
 8005840:	bf54      	ite	pl
 8005842:	9305      	strpl	r3, [sp, #20]
 8005844:	9306      	strmi	r3, [sp, #24]
 8005846:	f1bb 0f00 	cmp.w	fp, #0
 800584a:	db3c      	blt.n	80058c6 <_dtoa_r+0x24e>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005852:	445b      	add	r3, fp
 8005854:	9306      	str	r3, [sp, #24]
 8005856:	2300      	movs	r3, #0
 8005858:	9308      	str	r3, [sp, #32]
 800585a:	9b07      	ldr	r3, [sp, #28]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d868      	bhi.n	8005932 <_dtoa_r+0x2ba>
 8005860:	2b05      	cmp	r3, #5
 8005862:	bfc4      	itt	gt
 8005864:	3b04      	subgt	r3, #4
 8005866:	9307      	strgt	r3, [sp, #28]
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	f1a3 0302 	sub.w	r3, r3, #2
 800586e:	bfcc      	ite	gt
 8005870:	2500      	movgt	r5, #0
 8005872:	2501      	movle	r5, #1
 8005874:	2b03      	cmp	r3, #3
 8005876:	f200 8085 	bhi.w	8005984 <_dtoa_r+0x30c>
 800587a:	e8df f003 	tbb	[pc, r3]
 800587e:	3b2e      	.short	0x3b2e
 8005880:	5839      	.short	0x5839
 8005882:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005886:	441d      	add	r5, r3
 8005888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800588c:	2b20      	cmp	r3, #32
 800588e:	bfc1      	itttt	gt
 8005890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005894:	fa08 f803 	lslgt.w	r8, r8, r3
 8005898:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800589c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058a0:	bfd6      	itet	le
 80058a2:	f1c3 0320 	rsble	r3, r3, #32
 80058a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80058aa:	fa06 f003 	lslle.w	r0, r6, r3
 80058ae:	f7fa fe31 	bl	8000514 <__aeabi_ui2d>
 80058b2:	2201      	movs	r2, #1
 80058b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058b8:	3d01      	subs	r5, #1
 80058ba:	920e      	str	r2, [sp, #56]	; 0x38
 80058bc:	e76f      	b.n	800579e <_dtoa_r+0x126>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7b3      	b.n	800582a <_dtoa_r+0x1b2>
 80058c2:	900c      	str	r0, [sp, #48]	; 0x30
 80058c4:	e7b2      	b.n	800582c <_dtoa_r+0x1b4>
 80058c6:	9b05      	ldr	r3, [sp, #20]
 80058c8:	eba3 030b 	sub.w	r3, r3, fp
 80058cc:	9305      	str	r3, [sp, #20]
 80058ce:	f1cb 0300 	rsb	r3, fp, #0
 80058d2:	9308      	str	r3, [sp, #32]
 80058d4:	2300      	movs	r3, #0
 80058d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d8:	e7bf      	b.n	800585a <_dtoa_r+0x1e2>
 80058da:	2300      	movs	r3, #0
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	dc52      	bgt.n	800598a <_dtoa_r+0x312>
 80058e4:	2301      	movs	r3, #1
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	461a      	mov	r2, r3
 80058ec:	920a      	str	r2, [sp, #40]	; 0x28
 80058ee:	e00b      	b.n	8005908 <_dtoa_r+0x290>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7f3      	b.n	80058dc <_dtoa_r+0x264>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9309      	str	r3, [sp, #36]	; 0x24
 80058f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fa:	445b      	add	r3, fp
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	3301      	adds	r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	bfb8      	it	lt
 8005906:	2301      	movlt	r3, #1
 8005908:	69e0      	ldr	r0, [r4, #28]
 800590a:	2100      	movs	r1, #0
 800590c:	2204      	movs	r2, #4
 800590e:	f102 0614 	add.w	r6, r2, #20
 8005912:	429e      	cmp	r6, r3
 8005914:	d93d      	bls.n	8005992 <_dtoa_r+0x31a>
 8005916:	6041      	str	r1, [r0, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fd9f 	bl	800645c <_Balloc>
 800591e:	9000      	str	r0, [sp, #0]
 8005920:	2800      	cmp	r0, #0
 8005922:	d139      	bne.n	8005998 <_dtoa_r+0x320>
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <_dtoa_r+0x308>)
 8005926:	4602      	mov	r2, r0
 8005928:	f240 11af 	movw	r1, #431	; 0x1af
 800592c:	e6bd      	b.n	80056aa <_dtoa_r+0x32>
 800592e:	2301      	movs	r3, #1
 8005930:	e7e1      	b.n	80058f6 <_dtoa_r+0x27e>
 8005932:	2501      	movs	r5, #1
 8005934:	2300      	movs	r3, #0
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	9509      	str	r5, [sp, #36]	; 0x24
 800593a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	2200      	movs	r2, #0
 8005944:	2312      	movs	r3, #18
 8005946:	e7d1      	b.n	80058ec <_dtoa_r+0x274>
 8005948:	636f4361 	.word	0x636f4361
 800594c:	3fd287a7 	.word	0x3fd287a7
 8005950:	8b60c8b3 	.word	0x8b60c8b3
 8005954:	3fc68a28 	.word	0x3fc68a28
 8005958:	509f79fb 	.word	0x509f79fb
 800595c:	3fd34413 	.word	0x3fd34413
 8005960:	08007711 	.word	0x08007711
 8005964:	08007728 	.word	0x08007728
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	0800770d 	.word	0x0800770d
 8005970:	08007704 	.word	0x08007704
 8005974:	080076e1 	.word	0x080076e1
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	08007818 	.word	0x08007818
 8005980:	08007780 	.word	0x08007780
 8005984:	2301      	movs	r3, #1
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	e7d7      	b.n	800593a <_dtoa_r+0x2c2>
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	e7ba      	b.n	8005908 <_dtoa_r+0x290>
 8005992:	3101      	adds	r1, #1
 8005994:	0052      	lsls	r2, r2, #1
 8005996:	e7ba      	b.n	800590e <_dtoa_r+0x296>
 8005998:	69e3      	ldr	r3, [r4, #28]
 800599a:	9a00      	ldr	r2, [sp, #0]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	2b0e      	cmp	r3, #14
 80059a2:	f200 80a8 	bhi.w	8005af6 <_dtoa_r+0x47e>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	f000 80a5 	beq.w	8005af6 <_dtoa_r+0x47e>
 80059ac:	f1bb 0f00 	cmp.w	fp, #0
 80059b0:	dd38      	ble.n	8005a24 <_dtoa_r+0x3ac>
 80059b2:	4bc0      	ldr	r3, [pc, #768]	; (8005cb4 <_dtoa_r+0x63c>)
 80059b4:	f00b 020f 	and.w	r2, fp, #15
 80059b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80059c8:	d019      	beq.n	80059fe <_dtoa_r+0x386>
 80059ca:	4bbb      	ldr	r3, [pc, #748]	; (8005cb8 <_dtoa_r+0x640>)
 80059cc:	ec51 0b18 	vmov	r0, r1, d8
 80059d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059d4:	f7fa ff42 	bl	800085c <__aeabi_ddiv>
 80059d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059dc:	f008 080f 	and.w	r8, r8, #15
 80059e0:	2503      	movs	r5, #3
 80059e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cb8 <_dtoa_r+0x640>
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	d10a      	bne.n	8005a02 <_dtoa_r+0x38a>
 80059ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f0:	4632      	mov	r2, r6
 80059f2:	463b      	mov	r3, r7
 80059f4:	f7fa ff32 	bl	800085c <__aeabi_ddiv>
 80059f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fc:	e02b      	b.n	8005a56 <_dtoa_r+0x3de>
 80059fe:	2502      	movs	r5, #2
 8005a00:	e7ef      	b.n	80059e2 <_dtoa_r+0x36a>
 8005a02:	f018 0f01 	tst.w	r8, #1
 8005a06:	d008      	beq.n	8005a1a <_dtoa_r+0x3a2>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a10:	f7fa fdfa 	bl	8000608 <__aeabi_dmul>
 8005a14:	3501      	adds	r5, #1
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a1e:	f109 0908 	add.w	r9, r9, #8
 8005a22:	e7e0      	b.n	80059e6 <_dtoa_r+0x36e>
 8005a24:	f000 809f 	beq.w	8005b66 <_dtoa_r+0x4ee>
 8005a28:	f1cb 0600 	rsb	r6, fp, #0
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <_dtoa_r+0x63c>)
 8005a2e:	4fa2      	ldr	r7, [pc, #648]	; (8005cb8 <_dtoa_r+0x640>)
 8005a30:	f006 020f 	and.w	r2, r6, #15
 8005a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	ec51 0b18 	vmov	r0, r1, d8
 8005a40:	f7fa fde2 	bl	8000608 <__aeabi_dmul>
 8005a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a48:	1136      	asrs	r6, r6, #4
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2502      	movs	r5, #2
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d17e      	bne.n	8005b50 <_dtoa_r+0x4d8>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d0      	bne.n	80059f8 <_dtoa_r+0x380>
 8005a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8084 	beq.w	8005b6a <_dtoa_r+0x4f2>
 8005a62:	4b96      	ldr	r3, [pc, #600]	; (8005cbc <_dtoa_r+0x644>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	4640      	mov	r0, r8
 8005a68:	4649      	mov	r1, r9
 8005a6a:	f7fb f83f 	bl	8000aec <__aeabi_dcmplt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d07b      	beq.n	8005b6a <_dtoa_r+0x4f2>
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d078      	beq.n	8005b6a <_dtoa_r+0x4f2>
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd39      	ble.n	8005af2 <_dtoa_r+0x47a>
 8005a7e:	4b90      	ldr	r3, [pc, #576]	; (8005cc0 <_dtoa_r+0x648>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a8e:	9e01      	ldr	r6, [sp, #4]
 8005a90:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005a94:	3501      	adds	r5, #1
 8005a96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7fa fd4a 	bl	8000534 <__aeabi_i2d>
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	f7fa fdb0 	bl	8000608 <__aeabi_dmul>
 8005aa8:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <_dtoa_r+0x64c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fbf6 	bl	800029c <__adddf3>
 8005ab0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab8:	9303      	str	r3, [sp, #12]
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	d158      	bne.n	8005b70 <_dtoa_r+0x4f8>
 8005abe:	4b82      	ldr	r3, [pc, #520]	; (8005cc8 <_dtoa_r+0x650>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fa fbe7 	bl	8000298 <__aeabi_dsub>
 8005aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ace:	4680      	mov	r8, r0
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	f7fb f829 	bl	8000b28 <__aeabi_dcmpgt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f040 8296 	bne.w	8006008 <_dtoa_r+0x990>
 8005adc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fb f800 	bl	8000aec <__aeabi_dcmplt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f040 8289 	bne.w	8006004 <_dtoa_r+0x98c>
 8005af2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f2c0 814e 	blt.w	8005d9a <_dtoa_r+0x722>
 8005afe:	f1bb 0f0e 	cmp.w	fp, #14
 8005b02:	f300 814a 	bgt.w	8005d9a <_dtoa_r+0x722>
 8005b06:	4b6b      	ldr	r3, [pc, #428]	; (8005cb4 <_dtoa_r+0x63c>)
 8005b08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f280 80dc 	bge.w	8005cd0 <_dtoa_r+0x658>
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f300 80d8 	bgt.w	8005cd0 <_dtoa_r+0x658>
 8005b20:	f040 826f 	bne.w	8006002 <_dtoa_r+0x98a>
 8005b24:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <_dtoa_r+0x650>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	f7fa fd6c 	bl	8000608 <__aeabi_dmul>
 8005b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b34:	f7fa ffee 	bl	8000b14 <__aeabi_dcmpge>
 8005b38:	9e04      	ldr	r6, [sp, #16]
 8005b3a:	4637      	mov	r7, r6
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f040 8245 	bne.w	8005fcc <_dtoa_r+0x954>
 8005b42:	9d00      	ldr	r5, [sp, #0]
 8005b44:	2331      	movs	r3, #49	; 0x31
 8005b46:	f805 3b01 	strb.w	r3, [r5], #1
 8005b4a:	f10b 0b01 	add.w	fp, fp, #1
 8005b4e:	e241      	b.n	8005fd4 <_dtoa_r+0x95c>
 8005b50:	07f2      	lsls	r2, r6, #31
 8005b52:	d505      	bpl.n	8005b60 <_dtoa_r+0x4e8>
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	f7fa fd56 	bl	8000608 <__aeabi_dmul>
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	2301      	movs	r3, #1
 8005b60:	1076      	asrs	r6, r6, #1
 8005b62:	3708      	adds	r7, #8
 8005b64:	e773      	b.n	8005a4e <_dtoa_r+0x3d6>
 8005b66:	2502      	movs	r5, #2
 8005b68:	e775      	b.n	8005a56 <_dtoa_r+0x3de>
 8005b6a:	9e04      	ldr	r6, [sp, #16]
 8005b6c:	465f      	mov	r7, fp
 8005b6e:	e792      	b.n	8005a96 <_dtoa_r+0x41e>
 8005b70:	9900      	ldr	r1, [sp, #0]
 8005b72:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <_dtoa_r+0x63c>)
 8005b74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b78:	4431      	add	r1, r6
 8005b7a:	9102      	str	r1, [sp, #8]
 8005b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b7e:	eeb0 9a47 	vmov.f32	s18, s14
 8005b82:	eef0 9a67 	vmov.f32	s19, s15
 8005b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d044      	beq.n	8005c1c <_dtoa_r+0x5a4>
 8005b92:	494e      	ldr	r1, [pc, #312]	; (8005ccc <_dtoa_r+0x654>)
 8005b94:	2000      	movs	r0, #0
 8005b96:	f7fa fe61 	bl	800085c <__aeabi_ddiv>
 8005b9a:	ec53 2b19 	vmov	r2, r3, d9
 8005b9e:	f7fa fb7b 	bl	8000298 <__aeabi_dsub>
 8005ba2:	9d00      	ldr	r5, [sp, #0]
 8005ba4:	ec41 0b19 	vmov	d9, r0, r1
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7fa ffdc 	bl	8000b68 <__aeabi_d2iz>
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	f7fa fcbf 	bl	8000534 <__aeabi_i2d>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fb6b 	bl	8000298 <__aeabi_dsub>
 8005bc2:	3630      	adds	r6, #48	; 0x30
 8005bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc8:	ec53 2b19 	vmov	r2, r3, d9
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	f7fa ff8c 	bl	8000aec <__aeabi_dcmplt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d164      	bne.n	8005ca2 <_dtoa_r+0x62a>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4937      	ldr	r1, [pc, #220]	; (8005cbc <_dtoa_r+0x644>)
 8005bde:	2000      	movs	r0, #0
 8005be0:	f7fa fb5a 	bl	8000298 <__aeabi_dsub>
 8005be4:	ec53 2b19 	vmov	r2, r3, d9
 8005be8:	f7fa ff80 	bl	8000aec <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f040 80b6 	bne.w	8005d5e <_dtoa_r+0x6e6>
 8005bf2:	9b02      	ldr	r3, [sp, #8]
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	f43f af7c 	beq.w	8005af2 <_dtoa_r+0x47a>
 8005bfa:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <_dtoa_r+0x648>)
 8005bfc:	ec51 0b19 	vmov	r0, r1, d9
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fd01 	bl	8000608 <__aeabi_dmul>
 8005c06:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <_dtoa_r+0x648>)
 8005c08:	ec41 0b19 	vmov	d9, r0, r1
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fcf9 	bl	8000608 <__aeabi_dmul>
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	e7c5      	b.n	8005ba8 <_dtoa_r+0x530>
 8005c1c:	ec51 0b17 	vmov	r0, r1, d7
 8005c20:	f7fa fcf2 	bl	8000608 <__aeabi_dmul>
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	9d00      	ldr	r5, [sp, #0]
 8005c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c2a:	ec41 0b19 	vmov	d9, r0, r1
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4640      	mov	r0, r8
 8005c32:	f7fa ff99 	bl	8000b68 <__aeabi_d2iz>
 8005c36:	4606      	mov	r6, r0
 8005c38:	f7fa fc7c 	bl	8000534 <__aeabi_i2d>
 8005c3c:	3630      	adds	r6, #48	; 0x30
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7fa fb27 	bl	8000298 <__aeabi_dsub>
 8005c4a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c4e:	9b02      	ldr	r3, [sp, #8]
 8005c50:	429d      	cmp	r5, r3
 8005c52:	4680      	mov	r8, r0
 8005c54:	4689      	mov	r9, r1
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	d124      	bne.n	8005ca6 <_dtoa_r+0x62e>
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <_dtoa_r+0x654>)
 8005c5e:	ec51 0b19 	vmov	r0, r1, d9
 8005c62:	f7fa fb1b 	bl	800029c <__adddf3>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa ff5b 	bl	8000b28 <__aeabi_dcmpgt>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d173      	bne.n	8005d5e <_dtoa_r+0x6e6>
 8005c76:	ec53 2b19 	vmov	r2, r3, d9
 8005c7a:	4914      	ldr	r1, [pc, #80]	; (8005ccc <_dtoa_r+0x654>)
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f7fa fb0b 	bl	8000298 <__aeabi_dsub>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa ff2f 	bl	8000aec <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f43f af2f 	beq.w	8005af2 <_dtoa_r+0x47a>
 8005c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c96:	1e6b      	subs	r3, r5, #1
 8005c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c9e:	2b30      	cmp	r3, #48	; 0x30
 8005ca0:	d0f8      	beq.n	8005c94 <_dtoa_r+0x61c>
 8005ca2:	46bb      	mov	fp, r7
 8005ca4:	e04a      	b.n	8005d3c <_dtoa_r+0x6c4>
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <_dtoa_r+0x648>)
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	e7bd      	b.n	8005c2e <_dtoa_r+0x5b6>
 8005cb2:	bf00      	nop
 8005cb4:	08007818 	.word	0x08007818
 8005cb8:	080077f0 	.word	0x080077f0
 8005cbc:	3ff00000 	.word	0x3ff00000
 8005cc0:	40240000 	.word	0x40240000
 8005cc4:	401c0000 	.word	0x401c0000
 8005cc8:	40140000 	.word	0x40140000
 8005ccc:	3fe00000 	.word	0x3fe00000
 8005cd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cd4:	9d00      	ldr	r5, [sp, #0]
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	464b      	mov	r3, r9
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa fdbd 	bl	800085c <__aeabi_ddiv>
 8005ce2:	f7fa ff41 	bl	8000b68 <__aeabi_d2iz>
 8005ce6:	9001      	str	r0, [sp, #4]
 8005ce8:	f7fa fc24 	bl	8000534 <__aeabi_i2d>
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	f7fa fc8a 	bl	8000608 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa facc 	bl	8000298 <__aeabi_dsub>
 8005d00:	9e01      	ldr	r6, [sp, #4]
 8005d02:	9f04      	ldr	r7, [sp, #16]
 8005d04:	3630      	adds	r6, #48	; 0x30
 8005d06:	f805 6b01 	strb.w	r6, [r5], #1
 8005d0a:	9e00      	ldr	r6, [sp, #0]
 8005d0c:	1bae      	subs	r6, r5, r6
 8005d0e:	42b7      	cmp	r7, r6
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	d134      	bne.n	8005d80 <_dtoa_r+0x708>
 8005d16:	f7fa fac1 	bl	800029c <__adddf3>
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	f7fa ff01 	bl	8000b28 <__aeabi_dcmpgt>
 8005d26:	b9c8      	cbnz	r0, 8005d5c <_dtoa_r+0x6e4>
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d34:	b110      	cbz	r0, 8005d3c <_dtoa_r+0x6c4>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	07db      	lsls	r3, r3, #31
 8005d3a:	d40f      	bmi.n	8005d5c <_dtoa_r+0x6e4>
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 fbcc 	bl	80064dc <_Bfree>
 8005d44:	2300      	movs	r3, #0
 8005d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d48:	702b      	strb	r3, [r5, #0]
 8005d4a:	f10b 0301 	add.w	r3, fp, #1
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f43f ace2 	beq.w	800571c <_dtoa_r+0xa4>
 8005d58:	601d      	str	r5, [r3, #0]
 8005d5a:	e4df      	b.n	800571c <_dtoa_r+0xa4>
 8005d5c:	465f      	mov	r7, fp
 8005d5e:	462b      	mov	r3, r5
 8005d60:	461d      	mov	r5, r3
 8005d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d66:	2a39      	cmp	r2, #57	; 0x39
 8005d68:	d106      	bne.n	8005d78 <_dtoa_r+0x700>
 8005d6a:	9a00      	ldr	r2, [sp, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d1f7      	bne.n	8005d60 <_dtoa_r+0x6e8>
 8005d70:	9900      	ldr	r1, [sp, #0]
 8005d72:	2230      	movs	r2, #48	; 0x30
 8005d74:	3701      	adds	r7, #1
 8005d76:	700a      	strb	r2, [r1, #0]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e790      	b.n	8005ca2 <_dtoa_r+0x62a>
 8005d80:	4ba3      	ldr	r3, [pc, #652]	; (8006010 <_dtoa_r+0x998>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	f7fa fc40 	bl	8000608 <__aeabi_dmul>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	f7fa fea2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d09e      	beq.n	8005cd6 <_dtoa_r+0x65e>
 8005d98:	e7d0      	b.n	8005d3c <_dtoa_r+0x6c4>
 8005d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f000 80ca 	beq.w	8005f36 <_dtoa_r+0x8be>
 8005da2:	9a07      	ldr	r2, [sp, #28]
 8005da4:	2a01      	cmp	r2, #1
 8005da6:	f300 80ad 	bgt.w	8005f04 <_dtoa_r+0x88c>
 8005daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	f000 80a5 	beq.w	8005efc <_dtoa_r+0x884>
 8005db2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005db6:	9e08      	ldr	r6, [sp, #32]
 8005db8:	9d05      	ldr	r5, [sp, #20]
 8005dba:	9a05      	ldr	r2, [sp, #20]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	9205      	str	r2, [sp, #20]
 8005dc0:	9a06      	ldr	r2, [sp, #24]
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9206      	str	r2, [sp, #24]
 8005dca:	f000 fc3d 	bl	8006648 <__i2b>
 8005dce:	4607      	mov	r7, r0
 8005dd0:	b165      	cbz	r5, 8005dec <_dtoa_r+0x774>
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd09      	ble.n	8005dec <_dtoa_r+0x774>
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	9a05      	ldr	r2, [sp, #20]
 8005ddc:	bfa8      	it	ge
 8005dde:	462b      	movge	r3, r5
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	9205      	str	r2, [sp, #20]
 8005de4:	9a06      	ldr	r2, [sp, #24]
 8005de6:	1aed      	subs	r5, r5, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	b1f3      	cbz	r3, 8005e2e <_dtoa_r+0x7b6>
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80a3 	beq.w	8005f3e <_dtoa_r+0x8c6>
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	dd10      	ble.n	8005e1e <_dtoa_r+0x7a6>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 fce1 	bl	80067c8 <__pow5mult>
 8005e06:	4652      	mov	r2, sl
 8005e08:	4601      	mov	r1, r0
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 fc31 	bl	8006674 <__multiply>
 8005e12:	4651      	mov	r1, sl
 8005e14:	4680      	mov	r8, r0
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 fb60 	bl	80064dc <_Bfree>
 8005e1c:	46c2      	mov	sl, r8
 8005e1e:	9b08      	ldr	r3, [sp, #32]
 8005e20:	1b9a      	subs	r2, r3, r6
 8005e22:	d004      	beq.n	8005e2e <_dtoa_r+0x7b6>
 8005e24:	4651      	mov	r1, sl
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fcce 	bl	80067c8 <__pow5mult>
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 fc09 	bl	8006648 <__i2b>
 8005e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	f340 8081 	ble.w	8005f42 <_dtoa_r+0x8ca>
 8005e40:	461a      	mov	r2, r3
 8005e42:	4601      	mov	r1, r0
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fcbf 	bl	80067c8 <__pow5mult>
 8005e4a:	9b07      	ldr	r3, [sp, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	4606      	mov	r6, r0
 8005e50:	dd7a      	ble.n	8005f48 <_dtoa_r+0x8d0>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	6933      	ldr	r3, [r6, #16]
 8005e58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e5c:	6918      	ldr	r0, [r3, #16]
 8005e5e:	f000 fba5 	bl	80065ac <__hi0bits>
 8005e62:	f1c0 0020 	rsb	r0, r0, #32
 8005e66:	9b06      	ldr	r3, [sp, #24]
 8005e68:	4418      	add	r0, r3
 8005e6a:	f010 001f 	ands.w	r0, r0, #31
 8005e6e:	f000 8094 	beq.w	8005f9a <_dtoa_r+0x922>
 8005e72:	f1c0 0320 	rsb	r3, r0, #32
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	f340 8085 	ble.w	8005f86 <_dtoa_r+0x90e>
 8005e7c:	9b05      	ldr	r3, [sp, #20]
 8005e7e:	f1c0 001c 	rsb	r0, r0, #28
 8005e82:	4403      	add	r3, r0
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	4403      	add	r3, r0
 8005e8a:	4405      	add	r5, r0
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	9b05      	ldr	r3, [sp, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dd05      	ble.n	8005ea0 <_dtoa_r+0x828>
 8005e94:	4651      	mov	r1, sl
 8005e96:	461a      	mov	r2, r3
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fcef 	bl	800687c <__lshift>
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dd05      	ble.n	8005eb2 <_dtoa_r+0x83a>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fce6 	bl	800687c <__lshift>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d072      	beq.n	8005f9e <_dtoa_r+0x926>
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f000 fd4a 	bl	8006954 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	da6c      	bge.n	8005f9e <_dtoa_r+0x926>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	220a      	movs	r2, #10
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fb28 	bl	8006520 <__multadd>
 8005ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005ed6:	4682      	mov	sl, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 81b0 	beq.w	800623e <_dtoa_r+0xbc6>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	220a      	movs	r2, #10
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fb1b 	bl	8006520 <__multadd>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	4607      	mov	r7, r0
 8005ef0:	f300 8096 	bgt.w	8006020 <_dtoa_r+0x9a8>
 8005ef4:	9b07      	ldr	r3, [sp, #28]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	dc59      	bgt.n	8005fae <_dtoa_r+0x936>
 8005efa:	e091      	b.n	8006020 <_dtoa_r+0x9a8>
 8005efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f02:	e758      	b.n	8005db6 <_dtoa_r+0x73e>
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	1e5e      	subs	r6, r3, #1
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	42b3      	cmp	r3, r6
 8005f0c:	bfbf      	itttt	lt
 8005f0e:	9b08      	ldrlt	r3, [sp, #32]
 8005f10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f12:	9608      	strlt	r6, [sp, #32]
 8005f14:	1af3      	sublt	r3, r6, r3
 8005f16:	bfb4      	ite	lt
 8005f18:	18d2      	addlt	r2, r2, r3
 8005f1a:	1b9e      	subge	r6, r3, r6
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	bfbc      	itt	lt
 8005f20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f22:	2600      	movlt	r6, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb7      	itett	lt
 8005f28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f30:	1a9d      	sublt	r5, r3, r2
 8005f32:	2300      	movlt	r3, #0
 8005f34:	e741      	b.n	8005dba <_dtoa_r+0x742>
 8005f36:	9e08      	ldr	r6, [sp, #32]
 8005f38:	9d05      	ldr	r5, [sp, #20]
 8005f3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f3c:	e748      	b.n	8005dd0 <_dtoa_r+0x758>
 8005f3e:	9a08      	ldr	r2, [sp, #32]
 8005f40:	e770      	b.n	8005e24 <_dtoa_r+0x7ac>
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	dc19      	bgt.n	8005f7c <_dtoa_r+0x904>
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	b9bb      	cbnz	r3, 8005f7c <_dtoa_r+0x904>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f52:	b99b      	cbnz	r3, 8005f7c <_dtoa_r+0x904>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f5a:	0d1b      	lsrs	r3, r3, #20
 8005f5c:	051b      	lsls	r3, r3, #20
 8005f5e:	b183      	cbz	r3, 8005f82 <_dtoa_r+0x90a>
 8005f60:	9b05      	ldr	r3, [sp, #20]
 8005f62:	3301      	adds	r3, #1
 8005f64:	9305      	str	r3, [sp, #20]
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	9306      	str	r3, [sp, #24]
 8005f6c:	f04f 0801 	mov.w	r8, #1
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f47f af6f 	bne.w	8005e56 <_dtoa_r+0x7de>
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e774      	b.n	8005e66 <_dtoa_r+0x7ee>
 8005f7c:	f04f 0800 	mov.w	r8, #0
 8005f80:	e7f6      	b.n	8005f70 <_dtoa_r+0x8f8>
 8005f82:	4698      	mov	r8, r3
 8005f84:	e7f4      	b.n	8005f70 <_dtoa_r+0x8f8>
 8005f86:	d082      	beq.n	8005e8e <_dtoa_r+0x816>
 8005f88:	9a05      	ldr	r2, [sp, #20]
 8005f8a:	331c      	adds	r3, #28
 8005f8c:	441a      	add	r2, r3
 8005f8e:	9205      	str	r2, [sp, #20]
 8005f90:	9a06      	ldr	r2, [sp, #24]
 8005f92:	441a      	add	r2, r3
 8005f94:	441d      	add	r5, r3
 8005f96:	9206      	str	r2, [sp, #24]
 8005f98:	e779      	b.n	8005e8e <_dtoa_r+0x816>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x910>
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc37      	bgt.n	8006014 <_dtoa_r+0x99c>
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dd34      	ble.n	8006014 <_dtoa_r+0x99c>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	b963      	cbnz	r3, 8005fcc <_dtoa_r+0x954>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 fab2 	bl	8006520 <__multadd>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	f000 fcc7 	bl	8006954 <__mcmp>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f73f adbb 	bgt.w	8005b42 <_dtoa_r+0x4ca>
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	9d00      	ldr	r5, [sp, #0]
 8005fd0:	ea6f 0b03 	mvn.w	fp, r3
 8005fd4:	f04f 0800 	mov.w	r8, #0
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fa7e 	bl	80064dc <_Bfree>
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	f43f aeab 	beq.w	8005d3c <_dtoa_r+0x6c4>
 8005fe6:	f1b8 0f00 	cmp.w	r8, #0
 8005fea:	d005      	beq.n	8005ff8 <_dtoa_r+0x980>
 8005fec:	45b8      	cmp	r8, r7
 8005fee:	d003      	beq.n	8005ff8 <_dtoa_r+0x980>
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fa72 	bl	80064dc <_Bfree>
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fa6e 	bl	80064dc <_Bfree>
 8006000:	e69c      	b.n	8005d3c <_dtoa_r+0x6c4>
 8006002:	2600      	movs	r6, #0
 8006004:	4637      	mov	r7, r6
 8006006:	e7e1      	b.n	8005fcc <_dtoa_r+0x954>
 8006008:	46bb      	mov	fp, r7
 800600a:	4637      	mov	r7, r6
 800600c:	e599      	b.n	8005b42 <_dtoa_r+0x4ca>
 800600e:	bf00      	nop
 8006010:	40240000 	.word	0x40240000
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80c8 	beq.w	80061ac <_dtoa_r+0xb34>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd05      	ble.n	8006030 <_dtoa_r+0x9b8>
 8006024:	4639      	mov	r1, r7
 8006026:	462a      	mov	r2, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fc27 	bl	800687c <__lshift>
 800602e:	4607      	mov	r7, r0
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d05b      	beq.n	80060ee <_dtoa_r+0xa76>
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fa0f 	bl	800645c <_Balloc>
 800603e:	4605      	mov	r5, r0
 8006040:	b928      	cbnz	r0, 800604e <_dtoa_r+0x9d6>
 8006042:	4b83      	ldr	r3, [pc, #524]	; (8006250 <_dtoa_r+0xbd8>)
 8006044:	4602      	mov	r2, r0
 8006046:	f240 21ef 	movw	r1, #751	; 0x2ef
 800604a:	f7ff bb2e 	b.w	80056aa <_dtoa_r+0x32>
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	f107 010c 	add.w	r1, r7, #12
 8006058:	300c      	adds	r0, #12
 800605a:	f000 ffab 	bl	8006fb4 <memcpy>
 800605e:	2201      	movs	r2, #1
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fc0a 	bl	800687c <__lshift>
 8006068:	9b00      	ldr	r3, [sp, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006072:	4413      	add	r3, r2
 8006074:	9308      	str	r3, [sp, #32]
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	46b8      	mov	r8, r7
 800607e:	9306      	str	r3, [sp, #24]
 8006080:	4607      	mov	r7, r0
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	4631      	mov	r1, r6
 8006086:	3b01      	subs	r3, #1
 8006088:	4650      	mov	r0, sl
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f7ff fa6c 	bl	8005568 <quorem>
 8006090:	4641      	mov	r1, r8
 8006092:	9002      	str	r0, [sp, #8]
 8006094:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006098:	4650      	mov	r0, sl
 800609a:	f000 fc5b 	bl	8006954 <__mcmp>
 800609e:	463a      	mov	r2, r7
 80060a0:	9005      	str	r0, [sp, #20]
 80060a2:	4631      	mov	r1, r6
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 fc71 	bl	800698c <__mdiff>
 80060aa:	68c2      	ldr	r2, [r0, #12]
 80060ac:	4605      	mov	r5, r0
 80060ae:	bb02      	cbnz	r2, 80060f2 <_dtoa_r+0xa7a>
 80060b0:	4601      	mov	r1, r0
 80060b2:	4650      	mov	r0, sl
 80060b4:	f000 fc4e 	bl	8006954 <__mcmp>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4629      	mov	r1, r5
 80060bc:	4620      	mov	r0, r4
 80060be:	9209      	str	r2, [sp, #36]	; 0x24
 80060c0:	f000 fa0c 	bl	80064dc <_Bfree>
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c8:	9d04      	ldr	r5, [sp, #16]
 80060ca:	ea43 0102 	orr.w	r1, r3, r2
 80060ce:	9b06      	ldr	r3, [sp, #24]
 80060d0:	4319      	orrs	r1, r3
 80060d2:	d110      	bne.n	80060f6 <_dtoa_r+0xa7e>
 80060d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060d8:	d029      	beq.n	800612e <_dtoa_r+0xab6>
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd02      	ble.n	80060e6 <_dtoa_r+0xa6e>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	f883 9000 	strb.w	r9, [r3]
 80060ec:	e774      	b.n	8005fd8 <_dtoa_r+0x960>
 80060ee:	4638      	mov	r0, r7
 80060f0:	e7ba      	b.n	8006068 <_dtoa_r+0x9f0>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e7e1      	b.n	80060ba <_dtoa_r+0xa42>
 80060f6:	9b05      	ldr	r3, [sp, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db04      	blt.n	8006106 <_dtoa_r+0xa8e>
 80060fc:	9907      	ldr	r1, [sp, #28]
 80060fe:	430b      	orrs	r3, r1
 8006100:	9906      	ldr	r1, [sp, #24]
 8006102:	430b      	orrs	r3, r1
 8006104:	d120      	bne.n	8006148 <_dtoa_r+0xad0>
 8006106:	2a00      	cmp	r2, #0
 8006108:	dded      	ble.n	80060e6 <_dtoa_r+0xa6e>
 800610a:	4651      	mov	r1, sl
 800610c:	2201      	movs	r2, #1
 800610e:	4620      	mov	r0, r4
 8006110:	f000 fbb4 	bl	800687c <__lshift>
 8006114:	4631      	mov	r1, r6
 8006116:	4682      	mov	sl, r0
 8006118:	f000 fc1c 	bl	8006954 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dc03      	bgt.n	8006128 <_dtoa_r+0xab0>
 8006120:	d1e1      	bne.n	80060e6 <_dtoa_r+0xa6e>
 8006122:	f019 0f01 	tst.w	r9, #1
 8006126:	d0de      	beq.n	80060e6 <_dtoa_r+0xa6e>
 8006128:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800612c:	d1d8      	bne.n	80060e0 <_dtoa_r+0xa68>
 800612e:	9a01      	ldr	r2, [sp, #4]
 8006130:	2339      	movs	r3, #57	; 0x39
 8006132:	7013      	strb	r3, [r2, #0]
 8006134:	462b      	mov	r3, r5
 8006136:	461d      	mov	r5, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800613e:	2a39      	cmp	r2, #57	; 0x39
 8006140:	d06c      	beq.n	800621c <_dtoa_r+0xba4>
 8006142:	3201      	adds	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e747      	b.n	8005fd8 <_dtoa_r+0x960>
 8006148:	2a00      	cmp	r2, #0
 800614a:	dd07      	ble.n	800615c <_dtoa_r+0xae4>
 800614c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006150:	d0ed      	beq.n	800612e <_dtoa_r+0xab6>
 8006152:	9a01      	ldr	r2, [sp, #4]
 8006154:	f109 0301 	add.w	r3, r9, #1
 8006158:	7013      	strb	r3, [r2, #0]
 800615a:	e73d      	b.n	8005fd8 <_dtoa_r+0x960>
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	9a08      	ldr	r2, [sp, #32]
 8006160:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006164:	4293      	cmp	r3, r2
 8006166:	d043      	beq.n	80061f0 <_dtoa_r+0xb78>
 8006168:	4651      	mov	r1, sl
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f9d6 	bl	8006520 <__multadd>
 8006174:	45b8      	cmp	r8, r7
 8006176:	4682      	mov	sl, r0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f04f 020a 	mov.w	r2, #10
 8006180:	4641      	mov	r1, r8
 8006182:	4620      	mov	r0, r4
 8006184:	d107      	bne.n	8006196 <_dtoa_r+0xb1e>
 8006186:	f000 f9cb 	bl	8006520 <__multadd>
 800618a:	4680      	mov	r8, r0
 800618c:	4607      	mov	r7, r0
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	e775      	b.n	8006082 <_dtoa_r+0xa0a>
 8006196:	f000 f9c3 	bl	8006520 <__multadd>
 800619a:	4639      	mov	r1, r7
 800619c:	4680      	mov	r8, r0
 800619e:	2300      	movs	r3, #0
 80061a0:	220a      	movs	r2, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f9bc 	bl	8006520 <__multadd>
 80061a8:	4607      	mov	r7, r0
 80061aa:	e7f0      	b.n	800618e <_dtoa_r+0xb16>
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	9d00      	ldr	r5, [sp, #0]
 80061b2:	4631      	mov	r1, r6
 80061b4:	4650      	mov	r0, sl
 80061b6:	f7ff f9d7 	bl	8005568 <quorem>
 80061ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	f805 9b01 	strb.w	r9, [r5], #1
 80061c4:	1aea      	subs	r2, r5, r3
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	dd07      	ble.n	80061dc <_dtoa_r+0xb64>
 80061cc:	4651      	mov	r1, sl
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f9a4 	bl	8006520 <__multadd>
 80061d8:	4682      	mov	sl, r0
 80061da:	e7ea      	b.n	80061b2 <_dtoa_r+0xb3a>
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bfc8      	it	gt
 80061e2:	461d      	movgt	r5, r3
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	bfd8      	it	le
 80061e8:	2501      	movle	r5, #1
 80061ea:	441d      	add	r5, r3
 80061ec:	f04f 0800 	mov.w	r8, #0
 80061f0:	4651      	mov	r1, sl
 80061f2:	2201      	movs	r2, #1
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fb41 	bl	800687c <__lshift>
 80061fa:	4631      	mov	r1, r6
 80061fc:	4682      	mov	sl, r0
 80061fe:	f000 fba9 	bl	8006954 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	dc96      	bgt.n	8006134 <_dtoa_r+0xabc>
 8006206:	d102      	bne.n	800620e <_dtoa_r+0xb96>
 8006208:	f019 0f01 	tst.w	r9, #1
 800620c:	d192      	bne.n	8006134 <_dtoa_r+0xabc>
 800620e:	462b      	mov	r3, r5
 8006210:	461d      	mov	r5, r3
 8006212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006216:	2a30      	cmp	r2, #48	; 0x30
 8006218:	d0fa      	beq.n	8006210 <_dtoa_r+0xb98>
 800621a:	e6dd      	b.n	8005fd8 <_dtoa_r+0x960>
 800621c:	9a00      	ldr	r2, [sp, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d189      	bne.n	8006136 <_dtoa_r+0xabe>
 8006222:	f10b 0b01 	add.w	fp, fp, #1
 8006226:	2331      	movs	r3, #49	; 0x31
 8006228:	e796      	b.n	8006158 <_dtoa_r+0xae0>
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <_dtoa_r+0xbdc>)
 800622c:	f7ff ba99 	b.w	8005762 <_dtoa_r+0xea>
 8006230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f aa6d 	bne.w	8005712 <_dtoa_r+0x9a>
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <_dtoa_r+0xbe0>)
 800623a:	f7ff ba92 	b.w	8005762 <_dtoa_r+0xea>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dcb5      	bgt.n	80061b0 <_dtoa_r+0xb38>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	2b02      	cmp	r3, #2
 8006248:	f73f aeb1 	bgt.w	8005fae <_dtoa_r+0x936>
 800624c:	e7b0      	b.n	80061b0 <_dtoa_r+0xb38>
 800624e:	bf00      	nop
 8006250:	08007780 	.word	0x08007780
 8006254:	080076e0 	.word	0x080076e0
 8006258:	08007704 	.word	0x08007704

0800625c <_free_r>:
 800625c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625e:	2900      	cmp	r1, #0
 8006260:	d044      	beq.n	80062ec <_free_r+0x90>
 8006262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f1a1 0404 	sub.w	r4, r1, #4
 800626e:	bfb8      	it	lt
 8006270:	18e4      	addlt	r4, r4, r3
 8006272:	f000 f8e7 	bl	8006444 <__malloc_lock>
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <_free_r+0x94>)
 8006278:	9801      	ldr	r0, [sp, #4]
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x30>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	b003      	add	sp, #12
 8006284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006288:	f000 b8e2 	b.w	8006450 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x46>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1949      	addeq	r1, r1, r5
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x22>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x50>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x46>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1855      	adds	r5, r2, r1
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x70>
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	4421      	add	r1, r4
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x26>
 80062c0:	681c      	ldr	r4, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	440c      	add	r4, r1
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x26>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x78>
 80062ce:	230c      	movs	r3, #12
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x26>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7ca      	b.n	8006282 <_free_r+0x26>
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	200004e0 	.word	0x200004e0

080062f4 <malloc>:
 80062f4:	4b02      	ldr	r3, [pc, #8]	; (8006300 <malloc+0xc>)
 80062f6:	4601      	mov	r1, r0
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f000 b823 	b.w	8006344 <_malloc_r>
 80062fe:	bf00      	nop
 8006300:	20000064 	.word	0x20000064

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0e      	ldr	r6, [pc, #56]	; (8006340 <sbrk_aligned+0x3c>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 fe40 	bl	8006f94 <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fe3b 	bl	8006f94 <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d00a      	beq.n	8006338 <sbrk_aligned+0x34>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d007      	beq.n	800633c <sbrk_aligned+0x38>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fe30 	bl	8006f94 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d101      	bne.n	800633c <sbrk_aligned+0x38>
 8006338:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800633c:	4620      	mov	r0, r4
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	200004e4 	.word	0x200004e4

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4607      	mov	r7, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d905      	bls.n	800636c <_malloc_r+0x28>
 8006360:	230c      	movs	r3, #12
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2600      	movs	r6, #0
 8006366:	4630      	mov	r0, r6
 8006368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006440 <_malloc_r+0xfc>
 8006370:	f000 f868 	bl	8006444 <__malloc_lock>
 8006374:	f8d8 3000 	ldr.w	r3, [r8]
 8006378:	461c      	mov	r4, r3
 800637a:	bb5c      	cbnz	r4, 80063d4 <_malloc_r+0x90>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	f7ff ffc0 	bl	8006304 <sbrk_aligned>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	4604      	mov	r4, r0
 8006388:	d155      	bne.n	8006436 <_malloc_r+0xf2>
 800638a:	f8d8 4000 	ldr.w	r4, [r8]
 800638e:	4626      	mov	r6, r4
 8006390:	2e00      	cmp	r6, #0
 8006392:	d145      	bne.n	8006420 <_malloc_r+0xdc>
 8006394:	2c00      	cmp	r4, #0
 8006396:	d048      	beq.n	800642a <_malloc_r+0xe6>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	4631      	mov	r1, r6
 800639c:	4638      	mov	r0, r7
 800639e:	eb04 0903 	add.w	r9, r4, r3
 80063a2:	f000 fdf7 	bl	8006f94 <_sbrk_r>
 80063a6:	4581      	cmp	r9, r0
 80063a8:	d13f      	bne.n	800642a <_malloc_r+0xe6>
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	1a6d      	subs	r5, r5, r1
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa7 	bl	8006304 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d037      	beq.n	800642a <_malloc_r+0xe6>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f8d8 3000 	ldr.w	r3, [r8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d038      	beq.n	800643a <_malloc_r+0xf6>
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	42a2      	cmp	r2, r4
 80063cc:	d12b      	bne.n	8006426 <_malloc_r+0xe2>
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xb0>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d41f      	bmi.n	800641a <_malloc_r+0xd6>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xca>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4638      	mov	r0, r7
 80063f6:	f104 060b 	add.w	r6, r4, #11
 80063fa:	f000 f829 	bl	8006450 <__malloc_unlock>
 80063fe:	f026 0607 	bic.w	r6, r6, #7
 8006402:	1d23      	adds	r3, r4, #4
 8006404:	1af2      	subs	r2, r6, r3
 8006406:	d0ae      	beq.n	8006366 <_malloc_r+0x22>
 8006408:	1b9b      	subs	r3, r3, r6
 800640a:	50a3      	str	r3, [r4, r2]
 800640c:	e7ab      	b.n	8006366 <_malloc_r+0x22>
 800640e:	42a3      	cmp	r3, r4
 8006410:	6862      	ldr	r2, [r4, #4]
 8006412:	d1dd      	bne.n	80063d0 <_malloc_r+0x8c>
 8006414:	f8c8 2000 	str.w	r2, [r8]
 8006418:	e7ec      	b.n	80063f4 <_malloc_r+0xb0>
 800641a:	4623      	mov	r3, r4
 800641c:	6864      	ldr	r4, [r4, #4]
 800641e:	e7ac      	b.n	800637a <_malloc_r+0x36>
 8006420:	4634      	mov	r4, r6
 8006422:	6876      	ldr	r6, [r6, #4]
 8006424:	e7b4      	b.n	8006390 <_malloc_r+0x4c>
 8006426:	4613      	mov	r3, r2
 8006428:	e7cc      	b.n	80063c4 <_malloc_r+0x80>
 800642a:	230c      	movs	r3, #12
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	4638      	mov	r0, r7
 8006430:	f000 f80e 	bl	8006450 <__malloc_unlock>
 8006434:	e797      	b.n	8006366 <_malloc_r+0x22>
 8006436:	6025      	str	r5, [r4, #0]
 8006438:	e7dc      	b.n	80063f4 <_malloc_r+0xb0>
 800643a:	605b      	str	r3, [r3, #4]
 800643c:	deff      	udf	#255	; 0xff
 800643e:	bf00      	nop
 8006440:	200004e0 	.word	0x200004e0

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__malloc_lock+0x8>)
 8006446:	f7ff b88d 	b.w	8005564 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	200004dc 	.word	0x200004dc

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff b888 	b.w	8005566 <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	200004dc 	.word	0x200004dc

0800645c <_Balloc>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	69c6      	ldr	r6, [r0, #28]
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	b976      	cbnz	r6, 8006484 <_Balloc+0x28>
 8006466:	2010      	movs	r0, #16
 8006468:	f7ff ff44 	bl	80062f4 <malloc>
 800646c:	4602      	mov	r2, r0
 800646e:	61e0      	str	r0, [r4, #28]
 8006470:	b920      	cbnz	r0, 800647c <_Balloc+0x20>
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <_Balloc+0x78>)
 8006474:	4818      	ldr	r0, [pc, #96]	; (80064d8 <_Balloc+0x7c>)
 8006476:	216b      	movs	r1, #107	; 0x6b
 8006478:	f000 fdaa 	bl	8006fd0 <__assert_func>
 800647c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006480:	6006      	str	r6, [r0, #0]
 8006482:	60c6      	str	r6, [r0, #12]
 8006484:	69e6      	ldr	r6, [r4, #28]
 8006486:	68f3      	ldr	r3, [r6, #12]
 8006488:	b183      	cbz	r3, 80064ac <_Balloc+0x50>
 800648a:	69e3      	ldr	r3, [r4, #28]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006492:	b9b8      	cbnz	r0, 80064c4 <_Balloc+0x68>
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f605 	lsl.w	r6, r1, r5
 800649a:	1d72      	adds	r2, r6, #5
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fdb4 	bl	800700c <_calloc_r>
 80064a4:	b160      	cbz	r0, 80064c0 <_Balloc+0x64>
 80064a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064aa:	e00e      	b.n	80064ca <_Balloc+0x6e>
 80064ac:	2221      	movs	r2, #33	; 0x21
 80064ae:	2104      	movs	r1, #4
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fdab 	bl	800700c <_calloc_r>
 80064b6:	69e3      	ldr	r3, [r4, #28]
 80064b8:	60f0      	str	r0, [r6, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e4      	bne.n	800648a <_Balloc+0x2e>
 80064c0:	2000      	movs	r0, #0
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	6802      	ldr	r2, [r0, #0]
 80064c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064d0:	e7f7      	b.n	80064c2 <_Balloc+0x66>
 80064d2:	bf00      	nop
 80064d4:	08007711 	.word	0x08007711
 80064d8:	08007791 	.word	0x08007791

080064dc <_Bfree>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	69c6      	ldr	r6, [r0, #28]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b976      	cbnz	r6, 8006504 <_Bfree+0x28>
 80064e6:	2010      	movs	r0, #16
 80064e8:	f7ff ff04 	bl	80062f4 <malloc>
 80064ec:	4602      	mov	r2, r0
 80064ee:	61e8      	str	r0, [r5, #28]
 80064f0:	b920      	cbnz	r0, 80064fc <_Bfree+0x20>
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <_Bfree+0x3c>)
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <_Bfree+0x40>)
 80064f6:	218f      	movs	r1, #143	; 0x8f
 80064f8:	f000 fd6a 	bl	8006fd0 <__assert_func>
 80064fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006500:	6006      	str	r6, [r0, #0]
 8006502:	60c6      	str	r6, [r0, #12]
 8006504:	b13c      	cbz	r4, 8006516 <_Bfree+0x3a>
 8006506:	69eb      	ldr	r3, [r5, #28]
 8006508:	6862      	ldr	r2, [r4, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	08007711 	.word	0x08007711
 800651c:	08007791 	.word	0x08007791

08006520 <__multadd>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	690d      	ldr	r5, [r1, #16]
 8006526:	4607      	mov	r7, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461e      	mov	r6, r3
 800652c:	f101 0c14 	add.w	ip, r1, #20
 8006530:	2000      	movs	r0, #0
 8006532:	f8dc 3000 	ldr.w	r3, [ip]
 8006536:	b299      	uxth	r1, r3
 8006538:	fb02 6101 	mla	r1, r2, r1, r6
 800653c:	0c1e      	lsrs	r6, r3, #16
 800653e:	0c0b      	lsrs	r3, r1, #16
 8006540:	fb02 3306 	mla	r3, r2, r6, r3
 8006544:	b289      	uxth	r1, r1
 8006546:	3001      	adds	r0, #1
 8006548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800654c:	4285      	cmp	r5, r0
 800654e:	f84c 1b04 	str.w	r1, [ip], #4
 8006552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006556:	dcec      	bgt.n	8006532 <__multadd+0x12>
 8006558:	b30e      	cbz	r6, 800659e <__multadd+0x7e>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	42ab      	cmp	r3, r5
 800655e:	dc19      	bgt.n	8006594 <__multadd+0x74>
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	4638      	mov	r0, r7
 8006564:	3101      	adds	r1, #1
 8006566:	f7ff ff79 	bl	800645c <_Balloc>
 800656a:	4680      	mov	r8, r0
 800656c:	b928      	cbnz	r0, 800657a <__multadd+0x5a>
 800656e:	4602      	mov	r2, r0
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <__multadd+0x84>)
 8006572:	480d      	ldr	r0, [pc, #52]	; (80065a8 <__multadd+0x88>)
 8006574:	21ba      	movs	r1, #186	; 0xba
 8006576:	f000 fd2b 	bl	8006fd0 <__assert_func>
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	3202      	adds	r2, #2
 800657e:	f104 010c 	add.w	r1, r4, #12
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	300c      	adds	r0, #12
 8006586:	f000 fd15 	bl	8006fb4 <memcpy>
 800658a:	4621      	mov	r1, r4
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <_Bfree>
 8006592:	4644      	mov	r4, r8
 8006594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006598:	3501      	adds	r5, #1
 800659a:	615e      	str	r6, [r3, #20]
 800659c:	6125      	str	r5, [r4, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	08007780 	.word	0x08007780
 80065a8:	08007791 	.word	0x08007791

080065ac <__hi0bits>:
 80065ac:	0c03      	lsrs	r3, r0, #16
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	b9d3      	cbnz	r3, 80065e8 <__hi0bits+0x3c>
 80065b2:	0400      	lsls	r0, r0, #16
 80065b4:	2310      	movs	r3, #16
 80065b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065ba:	bf04      	itt	eq
 80065bc:	0200      	lsleq	r0, r0, #8
 80065be:	3308      	addeq	r3, #8
 80065c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065c4:	bf04      	itt	eq
 80065c6:	0100      	lsleq	r0, r0, #4
 80065c8:	3304      	addeq	r3, #4
 80065ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065ce:	bf04      	itt	eq
 80065d0:	0080      	lsleq	r0, r0, #2
 80065d2:	3302      	addeq	r3, #2
 80065d4:	2800      	cmp	r0, #0
 80065d6:	db05      	blt.n	80065e4 <__hi0bits+0x38>
 80065d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065dc:	f103 0301 	add.w	r3, r3, #1
 80065e0:	bf08      	it	eq
 80065e2:	2320      	moveq	r3, #32
 80065e4:	4618      	mov	r0, r3
 80065e6:	4770      	bx	lr
 80065e8:	2300      	movs	r3, #0
 80065ea:	e7e4      	b.n	80065b6 <__hi0bits+0xa>

080065ec <__lo0bits>:
 80065ec:	6803      	ldr	r3, [r0, #0]
 80065ee:	f013 0207 	ands.w	r2, r3, #7
 80065f2:	d00c      	beq.n	800660e <__lo0bits+0x22>
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	d422      	bmi.n	800663e <__lo0bits+0x52>
 80065f8:	079a      	lsls	r2, r3, #30
 80065fa:	bf49      	itett	mi
 80065fc:	085b      	lsrmi	r3, r3, #1
 80065fe:	089b      	lsrpl	r3, r3, #2
 8006600:	6003      	strmi	r3, [r0, #0]
 8006602:	2201      	movmi	r2, #1
 8006604:	bf5c      	itt	pl
 8006606:	6003      	strpl	r3, [r0, #0]
 8006608:	2202      	movpl	r2, #2
 800660a:	4610      	mov	r0, r2
 800660c:	4770      	bx	lr
 800660e:	b299      	uxth	r1, r3
 8006610:	b909      	cbnz	r1, 8006616 <__lo0bits+0x2a>
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	2210      	movs	r2, #16
 8006616:	b2d9      	uxtb	r1, r3
 8006618:	b909      	cbnz	r1, 800661e <__lo0bits+0x32>
 800661a:	3208      	adds	r2, #8
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	0719      	lsls	r1, r3, #28
 8006620:	bf04      	itt	eq
 8006622:	091b      	lsreq	r3, r3, #4
 8006624:	3204      	addeq	r2, #4
 8006626:	0799      	lsls	r1, r3, #30
 8006628:	bf04      	itt	eq
 800662a:	089b      	lsreq	r3, r3, #2
 800662c:	3202      	addeq	r2, #2
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d403      	bmi.n	800663a <__lo0bits+0x4e>
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	f102 0201 	add.w	r2, r2, #1
 8006638:	d003      	beq.n	8006642 <__lo0bits+0x56>
 800663a:	6003      	str	r3, [r0, #0]
 800663c:	e7e5      	b.n	800660a <__lo0bits+0x1e>
 800663e:	2200      	movs	r2, #0
 8006640:	e7e3      	b.n	800660a <__lo0bits+0x1e>
 8006642:	2220      	movs	r2, #32
 8006644:	e7e1      	b.n	800660a <__lo0bits+0x1e>
	...

08006648 <__i2b>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	2101      	movs	r1, #1
 800664e:	f7ff ff05 	bl	800645c <_Balloc>
 8006652:	4602      	mov	r2, r0
 8006654:	b928      	cbnz	r0, 8006662 <__i2b+0x1a>
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <__i2b+0x24>)
 8006658:	4805      	ldr	r0, [pc, #20]	; (8006670 <__i2b+0x28>)
 800665a:	f240 1145 	movw	r1, #325	; 0x145
 800665e:	f000 fcb7 	bl	8006fd0 <__assert_func>
 8006662:	2301      	movs	r3, #1
 8006664:	6144      	str	r4, [r0, #20]
 8006666:	6103      	str	r3, [r0, #16]
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	08007780 	.word	0x08007780
 8006670:	08007791 	.word	0x08007791

08006674 <__multiply>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4691      	mov	r9, r2
 800667a:	690a      	ldr	r2, [r1, #16]
 800667c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	bfb8      	it	lt
 8006684:	460b      	movlt	r3, r1
 8006686:	460c      	mov	r4, r1
 8006688:	bfbc      	itt	lt
 800668a:	464c      	movlt	r4, r9
 800668c:	4699      	movlt	r9, r3
 800668e:	6927      	ldr	r7, [r4, #16]
 8006690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	6861      	ldr	r1, [r4, #4]
 8006698:	eb07 060a 	add.w	r6, r7, sl
 800669c:	42b3      	cmp	r3, r6
 800669e:	b085      	sub	sp, #20
 80066a0:	bfb8      	it	lt
 80066a2:	3101      	addlt	r1, #1
 80066a4:	f7ff feda 	bl	800645c <_Balloc>
 80066a8:	b930      	cbnz	r0, 80066b8 <__multiply+0x44>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <__multiply+0x14c>)
 80066ae:	4845      	ldr	r0, [pc, #276]	; (80067c4 <__multiply+0x150>)
 80066b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066b4:	f000 fc8c 	bl	8006fd0 <__assert_func>
 80066b8:	f100 0514 	add.w	r5, r0, #20
 80066bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066c0:	462b      	mov	r3, r5
 80066c2:	2200      	movs	r2, #0
 80066c4:	4543      	cmp	r3, r8
 80066c6:	d321      	bcc.n	800670c <__multiply+0x98>
 80066c8:	f104 0314 	add.w	r3, r4, #20
 80066cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066d0:	f109 0314 	add.w	r3, r9, #20
 80066d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066d8:	9202      	str	r2, [sp, #8]
 80066da:	1b3a      	subs	r2, r7, r4
 80066dc:	3a15      	subs	r2, #21
 80066de:	f022 0203 	bic.w	r2, r2, #3
 80066e2:	3204      	adds	r2, #4
 80066e4:	f104 0115 	add.w	r1, r4, #21
 80066e8:	428f      	cmp	r7, r1
 80066ea:	bf38      	it	cc
 80066ec:	2204      	movcc	r2, #4
 80066ee:	9201      	str	r2, [sp, #4]
 80066f0:	9a02      	ldr	r2, [sp, #8]
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d80c      	bhi.n	8006712 <__multiply+0x9e>
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	dd03      	ble.n	8006704 <__multiply+0x90>
 80066fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006700:	2b00      	cmp	r3, #0
 8006702:	d05b      	beq.n	80067bc <__multiply+0x148>
 8006704:	6106      	str	r6, [r0, #16]
 8006706:	b005      	add	sp, #20
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	f843 2b04 	str.w	r2, [r3], #4
 8006710:	e7d8      	b.n	80066c4 <__multiply+0x50>
 8006712:	f8b3 a000 	ldrh.w	sl, [r3]
 8006716:	f1ba 0f00 	cmp.w	sl, #0
 800671a:	d024      	beq.n	8006766 <__multiply+0xf2>
 800671c:	f104 0e14 	add.w	lr, r4, #20
 8006720:	46a9      	mov	r9, r5
 8006722:	f04f 0c00 	mov.w	ip, #0
 8006726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800672a:	f8d9 1000 	ldr.w	r1, [r9]
 800672e:	fa1f fb82 	uxth.w	fp, r2
 8006732:	b289      	uxth	r1, r1
 8006734:	fb0a 110b 	mla	r1, sl, fp, r1
 8006738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800673c:	f8d9 2000 	ldr.w	r2, [r9]
 8006740:	4461      	add	r1, ip
 8006742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006746:	fb0a c20b 	mla	r2, sl, fp, ip
 800674a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800674e:	b289      	uxth	r1, r1
 8006750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006754:	4577      	cmp	r7, lr
 8006756:	f849 1b04 	str.w	r1, [r9], #4
 800675a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800675e:	d8e2      	bhi.n	8006726 <__multiply+0xb2>
 8006760:	9a01      	ldr	r2, [sp, #4]
 8006762:	f845 c002 	str.w	ip, [r5, r2]
 8006766:	9a03      	ldr	r2, [sp, #12]
 8006768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800676c:	3304      	adds	r3, #4
 800676e:	f1b9 0f00 	cmp.w	r9, #0
 8006772:	d021      	beq.n	80067b8 <__multiply+0x144>
 8006774:	6829      	ldr	r1, [r5, #0]
 8006776:	f104 0c14 	add.w	ip, r4, #20
 800677a:	46ae      	mov	lr, r5
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	f8bc b000 	ldrh.w	fp, [ip]
 8006784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006788:	fb09 220b 	mla	r2, r9, fp, r2
 800678c:	4452      	add	r2, sl
 800678e:	b289      	uxth	r1, r1
 8006790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006794:	f84e 1b04 	str.w	r1, [lr], #4
 8006798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800679c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067a0:	f8be 1000 	ldrh.w	r1, [lr]
 80067a4:	fb09 110a 	mla	r1, r9, sl, r1
 80067a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067ac:	4567      	cmp	r7, ip
 80067ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067b2:	d8e5      	bhi.n	8006780 <__multiply+0x10c>
 80067b4:	9a01      	ldr	r2, [sp, #4]
 80067b6:	50a9      	str	r1, [r5, r2]
 80067b8:	3504      	adds	r5, #4
 80067ba:	e799      	b.n	80066f0 <__multiply+0x7c>
 80067bc:	3e01      	subs	r6, #1
 80067be:	e79b      	b.n	80066f8 <__multiply+0x84>
 80067c0:	08007780 	.word	0x08007780
 80067c4:	08007791 	.word	0x08007791

080067c8 <__pow5mult>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4615      	mov	r5, r2
 80067ce:	f012 0203 	ands.w	r2, r2, #3
 80067d2:	4606      	mov	r6, r0
 80067d4:	460f      	mov	r7, r1
 80067d6:	d007      	beq.n	80067e8 <__pow5mult+0x20>
 80067d8:	4c25      	ldr	r4, [pc, #148]	; (8006870 <__pow5mult+0xa8>)
 80067da:	3a01      	subs	r2, #1
 80067dc:	2300      	movs	r3, #0
 80067de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067e2:	f7ff fe9d 	bl	8006520 <__multadd>
 80067e6:	4607      	mov	r7, r0
 80067e8:	10ad      	asrs	r5, r5, #2
 80067ea:	d03d      	beq.n	8006868 <__pow5mult+0xa0>
 80067ec:	69f4      	ldr	r4, [r6, #28]
 80067ee:	b97c      	cbnz	r4, 8006810 <__pow5mult+0x48>
 80067f0:	2010      	movs	r0, #16
 80067f2:	f7ff fd7f 	bl	80062f4 <malloc>
 80067f6:	4602      	mov	r2, r0
 80067f8:	61f0      	str	r0, [r6, #28]
 80067fa:	b928      	cbnz	r0, 8006808 <__pow5mult+0x40>
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <__pow5mult+0xac>)
 80067fe:	481e      	ldr	r0, [pc, #120]	; (8006878 <__pow5mult+0xb0>)
 8006800:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006804:	f000 fbe4 	bl	8006fd0 <__assert_func>
 8006808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800680c:	6004      	str	r4, [r0, #0]
 800680e:	60c4      	str	r4, [r0, #12]
 8006810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006818:	b94c      	cbnz	r4, 800682e <__pow5mult+0x66>
 800681a:	f240 2171 	movw	r1, #625	; 0x271
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ff12 	bl	8006648 <__i2b>
 8006824:	2300      	movs	r3, #0
 8006826:	f8c8 0008 	str.w	r0, [r8, #8]
 800682a:	4604      	mov	r4, r0
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	07eb      	lsls	r3, r5, #31
 8006834:	d50a      	bpl.n	800684c <__pow5mult+0x84>
 8006836:	4639      	mov	r1, r7
 8006838:	4622      	mov	r2, r4
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ff1a 	bl	8006674 <__multiply>
 8006840:	4639      	mov	r1, r7
 8006842:	4680      	mov	r8, r0
 8006844:	4630      	mov	r0, r6
 8006846:	f7ff fe49 	bl	80064dc <_Bfree>
 800684a:	4647      	mov	r7, r8
 800684c:	106d      	asrs	r5, r5, #1
 800684e:	d00b      	beq.n	8006868 <__pow5mult+0xa0>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	b938      	cbnz	r0, 8006864 <__pow5mult+0x9c>
 8006854:	4622      	mov	r2, r4
 8006856:	4621      	mov	r1, r4
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff ff0b 	bl	8006674 <__multiply>
 800685e:	6020      	str	r0, [r4, #0]
 8006860:	f8c0 9000 	str.w	r9, [r0]
 8006864:	4604      	mov	r4, r0
 8006866:	e7e4      	b.n	8006832 <__pow5mult+0x6a>
 8006868:	4638      	mov	r0, r7
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	bf00      	nop
 8006870:	080078e0 	.word	0x080078e0
 8006874:	08007711 	.word	0x08007711
 8006878:	08007791 	.word	0x08007791

0800687c <__lshift>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	6849      	ldr	r1, [r1, #4]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	4607      	mov	r7, r0
 800688e:	4691      	mov	r9, r2
 8006890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006894:	f108 0601 	add.w	r6, r8, #1
 8006898:	42b3      	cmp	r3, r6
 800689a:	db0b      	blt.n	80068b4 <__lshift+0x38>
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff fddd 	bl	800645c <_Balloc>
 80068a2:	4605      	mov	r5, r0
 80068a4:	b948      	cbnz	r0, 80068ba <__lshift+0x3e>
 80068a6:	4602      	mov	r2, r0
 80068a8:	4b28      	ldr	r3, [pc, #160]	; (800694c <__lshift+0xd0>)
 80068aa:	4829      	ldr	r0, [pc, #164]	; (8006950 <__lshift+0xd4>)
 80068ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068b0:	f000 fb8e 	bl	8006fd0 <__assert_func>
 80068b4:	3101      	adds	r1, #1
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	e7ee      	b.n	8006898 <__lshift+0x1c>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f100 0114 	add.w	r1, r0, #20
 80068c0:	f100 0210 	add.w	r2, r0, #16
 80068c4:	4618      	mov	r0, r3
 80068c6:	4553      	cmp	r3, sl
 80068c8:	db33      	blt.n	8006932 <__lshift+0xb6>
 80068ca:	6920      	ldr	r0, [r4, #16]
 80068cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068d0:	f104 0314 	add.w	r3, r4, #20
 80068d4:	f019 091f 	ands.w	r9, r9, #31
 80068d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068e0:	d02b      	beq.n	800693a <__lshift+0xbe>
 80068e2:	f1c9 0e20 	rsb	lr, r9, #32
 80068e6:	468a      	mov	sl, r1
 80068e8:	2200      	movs	r2, #0
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	fa00 f009 	lsl.w	r0, r0, r9
 80068f0:	4310      	orrs	r0, r2
 80068f2:	f84a 0b04 	str.w	r0, [sl], #4
 80068f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fa:	459c      	cmp	ip, r3
 80068fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006900:	d8f3      	bhi.n	80068ea <__lshift+0x6e>
 8006902:	ebac 0304 	sub.w	r3, ip, r4
 8006906:	3b15      	subs	r3, #21
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	3304      	adds	r3, #4
 800690e:	f104 0015 	add.w	r0, r4, #21
 8006912:	4584      	cmp	ip, r0
 8006914:	bf38      	it	cc
 8006916:	2304      	movcc	r3, #4
 8006918:	50ca      	str	r2, [r1, r3]
 800691a:	b10a      	cbz	r2, 8006920 <__lshift+0xa4>
 800691c:	f108 0602 	add.w	r6, r8, #2
 8006920:	3e01      	subs	r6, #1
 8006922:	4638      	mov	r0, r7
 8006924:	612e      	str	r6, [r5, #16]
 8006926:	4621      	mov	r1, r4
 8006928:	f7ff fdd8 	bl	80064dc <_Bfree>
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	f842 0f04 	str.w	r0, [r2, #4]!
 8006936:	3301      	adds	r3, #1
 8006938:	e7c5      	b.n	80068c6 <__lshift+0x4a>
 800693a:	3904      	subs	r1, #4
 800693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006940:	f841 2f04 	str.w	r2, [r1, #4]!
 8006944:	459c      	cmp	ip, r3
 8006946:	d8f9      	bhi.n	800693c <__lshift+0xc0>
 8006948:	e7ea      	b.n	8006920 <__lshift+0xa4>
 800694a:	bf00      	nop
 800694c:	08007780 	.word	0x08007780
 8006950:	08007791 	.word	0x08007791

08006954 <__mcmp>:
 8006954:	b530      	push	{r4, r5, lr}
 8006956:	6902      	ldr	r2, [r0, #16]
 8006958:	690c      	ldr	r4, [r1, #16]
 800695a:	1b12      	subs	r2, r2, r4
 800695c:	d10e      	bne.n	800697c <__mcmp+0x28>
 800695e:	f100 0314 	add.w	r3, r0, #20
 8006962:	3114      	adds	r1, #20
 8006964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800696c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006974:	42a5      	cmp	r5, r4
 8006976:	d003      	beq.n	8006980 <__mcmp+0x2c>
 8006978:	d305      	bcc.n	8006986 <__mcmp+0x32>
 800697a:	2201      	movs	r2, #1
 800697c:	4610      	mov	r0, r2
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	4283      	cmp	r3, r0
 8006982:	d3f3      	bcc.n	800696c <__mcmp+0x18>
 8006984:	e7fa      	b.n	800697c <__mcmp+0x28>
 8006986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800698a:	e7f7      	b.n	800697c <__mcmp+0x28>

0800698c <__mdiff>:
 800698c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	4606      	mov	r6, r0
 8006994:	4611      	mov	r1, r2
 8006996:	4620      	mov	r0, r4
 8006998:	4690      	mov	r8, r2
 800699a:	f7ff ffdb 	bl	8006954 <__mcmp>
 800699e:	1e05      	subs	r5, r0, #0
 80069a0:	d110      	bne.n	80069c4 <__mdiff+0x38>
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fd59 	bl	800645c <_Balloc>
 80069aa:	b930      	cbnz	r0, 80069ba <__mdiff+0x2e>
 80069ac:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <__mdiff+0x10c>)
 80069ae:	4602      	mov	r2, r0
 80069b0:	f240 2137 	movw	r1, #567	; 0x237
 80069b4:	4839      	ldr	r0, [pc, #228]	; (8006a9c <__mdiff+0x110>)
 80069b6:	f000 fb0b 	bl	8006fd0 <__assert_func>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	bfa4      	itt	ge
 80069c6:	4643      	movge	r3, r8
 80069c8:	46a0      	movge	r8, r4
 80069ca:	4630      	mov	r0, r6
 80069cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069d0:	bfa6      	itte	ge
 80069d2:	461c      	movge	r4, r3
 80069d4:	2500      	movge	r5, #0
 80069d6:	2501      	movlt	r5, #1
 80069d8:	f7ff fd40 	bl	800645c <_Balloc>
 80069dc:	b920      	cbnz	r0, 80069e8 <__mdiff+0x5c>
 80069de:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <__mdiff+0x10c>)
 80069e0:	4602      	mov	r2, r0
 80069e2:	f240 2145 	movw	r1, #581	; 0x245
 80069e6:	e7e5      	b.n	80069b4 <__mdiff+0x28>
 80069e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069ec:	6926      	ldr	r6, [r4, #16]
 80069ee:	60c5      	str	r5, [r0, #12]
 80069f0:	f104 0914 	add.w	r9, r4, #20
 80069f4:	f108 0514 	add.w	r5, r8, #20
 80069f8:	f100 0e14 	add.w	lr, r0, #20
 80069fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a04:	f108 0210 	add.w	r2, r8, #16
 8006a08:	46f2      	mov	sl, lr
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a14:	fa11 f88b 	uxtah	r8, r1, fp
 8006a18:	b299      	uxth	r1, r3
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	eba8 0801 	sub.w	r8, r8, r1
 8006a20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a28:	fa1f f888 	uxth.w	r8, r8
 8006a2c:	1419      	asrs	r1, r3, #16
 8006a2e:	454e      	cmp	r6, r9
 8006a30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a34:	f84a 3b04 	str.w	r3, [sl], #4
 8006a38:	d8e8      	bhi.n	8006a0c <__mdiff+0x80>
 8006a3a:	1b33      	subs	r3, r6, r4
 8006a3c:	3b15      	subs	r3, #21
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	3304      	adds	r3, #4
 8006a44:	3415      	adds	r4, #21
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	bf38      	it	cc
 8006a4a:	2304      	movcc	r3, #4
 8006a4c:	441d      	add	r5, r3
 8006a4e:	4473      	add	r3, lr
 8006a50:	469e      	mov	lr, r3
 8006a52:	462e      	mov	r6, r5
 8006a54:	4566      	cmp	r6, ip
 8006a56:	d30e      	bcc.n	8006a76 <__mdiff+0xea>
 8006a58:	f10c 0203 	add.w	r2, ip, #3
 8006a5c:	1b52      	subs	r2, r2, r5
 8006a5e:	f022 0203 	bic.w	r2, r2, #3
 8006a62:	3d03      	subs	r5, #3
 8006a64:	45ac      	cmp	ip, r5
 8006a66:	bf38      	it	cc
 8006a68:	2200      	movcc	r2, #0
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a70:	b17a      	cbz	r2, 8006a92 <__mdiff+0x106>
 8006a72:	6107      	str	r7, [r0, #16]
 8006a74:	e7a4      	b.n	80069c0 <__mdiff+0x34>
 8006a76:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a7a:	fa11 f288 	uxtah	r2, r1, r8
 8006a7e:	1414      	asrs	r4, r2, #16
 8006a80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a84:	b292      	uxth	r2, r2
 8006a86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a8a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a8e:	1421      	asrs	r1, r4, #16
 8006a90:	e7e0      	b.n	8006a54 <__mdiff+0xc8>
 8006a92:	3f01      	subs	r7, #1
 8006a94:	e7ea      	b.n	8006a6c <__mdiff+0xe0>
 8006a96:	bf00      	nop
 8006a98:	08007780 	.word	0x08007780
 8006a9c:	08007791 	.word	0x08007791

08006aa0 <__d2b>:
 8006aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	ec59 8b10 	vmov	r8, r9, d0
 8006aac:	4616      	mov	r6, r2
 8006aae:	f7ff fcd5 	bl	800645c <_Balloc>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	b930      	cbnz	r0, 8006ac4 <__d2b+0x24>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <__d2b+0xac>)
 8006aba:	4825      	ldr	r0, [pc, #148]	; (8006b50 <__d2b+0xb0>)
 8006abc:	f240 310f 	movw	r1, #783	; 0x30f
 8006ac0:	f000 fa86 	bl	8006fd0 <__assert_func>
 8006ac4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006acc:	bb2d      	cbnz	r5, 8006b1a <__d2b+0x7a>
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ad4:	d026      	beq.n	8006b24 <__d2b+0x84>
 8006ad6:	4668      	mov	r0, sp
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	f7ff fd87 	bl	80065ec <__lo0bits>
 8006ade:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ae2:	b1e8      	cbz	r0, 8006b20 <__d2b+0x80>
 8006ae4:	f1c0 0320 	rsb	r3, r0, #32
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	430b      	orrs	r3, r1
 8006aee:	40c2      	lsrs	r2, r0
 8006af0:	6163      	str	r3, [r4, #20]
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2202      	movne	r2, #2
 8006afe:	2201      	moveq	r2, #1
 8006b00:	6122      	str	r2, [r4, #16]
 8006b02:	b1bd      	cbz	r5, 8006b34 <__d2b+0x94>
 8006b04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b08:	4405      	add	r5, r0
 8006b0a:	603d      	str	r5, [r7, #0]
 8006b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b10:	6030      	str	r0, [r6, #0]
 8006b12:	4620      	mov	r0, r4
 8006b14:	b003      	add	sp, #12
 8006b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1e:	e7d6      	b.n	8006ace <__d2b+0x2e>
 8006b20:	6161      	str	r1, [r4, #20]
 8006b22:	e7e7      	b.n	8006af4 <__d2b+0x54>
 8006b24:	a801      	add	r0, sp, #4
 8006b26:	f7ff fd61 	bl	80065ec <__lo0bits>
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	6163      	str	r3, [r4, #20]
 8006b2e:	3020      	adds	r0, #32
 8006b30:	2201      	movs	r2, #1
 8006b32:	e7e5      	b.n	8006b00 <__d2b+0x60>
 8006b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b3c:	6038      	str	r0, [r7, #0]
 8006b3e:	6918      	ldr	r0, [r3, #16]
 8006b40:	f7ff fd34 	bl	80065ac <__hi0bits>
 8006b44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b48:	e7e2      	b.n	8006b10 <__d2b+0x70>
 8006b4a:	bf00      	nop
 8006b4c:	08007780 	.word	0x08007780
 8006b50:	08007791 	.word	0x08007791

08006b54 <__ssputs_r>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	688e      	ldr	r6, [r1, #8]
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	42be      	cmp	r6, r7
 8006b5e:	680b      	ldr	r3, [r1, #0]
 8006b60:	4682      	mov	sl, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	4690      	mov	r8, r2
 8006b66:	d82c      	bhi.n	8006bc2 <__ssputs_r+0x6e>
 8006b68:	898a      	ldrh	r2, [r1, #12]
 8006b6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b6e:	d026      	beq.n	8006bbe <__ssputs_r+0x6a>
 8006b70:	6965      	ldr	r5, [r4, #20]
 8006b72:	6909      	ldr	r1, [r1, #16]
 8006b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b78:	eba3 0901 	sub.w	r9, r3, r1
 8006b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b80:	1c7b      	adds	r3, r7, #1
 8006b82:	444b      	add	r3, r9
 8006b84:	106d      	asrs	r5, r5, #1
 8006b86:	429d      	cmp	r5, r3
 8006b88:	bf38      	it	cc
 8006b8a:	461d      	movcc	r5, r3
 8006b8c:	0553      	lsls	r3, r2, #21
 8006b8e:	d527      	bpl.n	8006be0 <__ssputs_r+0x8c>
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7ff fbd7 	bl	8006344 <_malloc_r>
 8006b96:	4606      	mov	r6, r0
 8006b98:	b360      	cbz	r0, 8006bf4 <__ssputs_r+0xa0>
 8006b9a:	6921      	ldr	r1, [r4, #16]
 8006b9c:	464a      	mov	r2, r9
 8006b9e:	f000 fa09 	bl	8006fb4 <memcpy>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	6126      	str	r6, [r4, #16]
 8006bb0:	6165      	str	r5, [r4, #20]
 8006bb2:	444e      	add	r6, r9
 8006bb4:	eba5 0509 	sub.w	r5, r5, r9
 8006bb8:	6026      	str	r6, [r4, #0]
 8006bba:	60a5      	str	r5, [r4, #8]
 8006bbc:	463e      	mov	r6, r7
 8006bbe:	42be      	cmp	r6, r7
 8006bc0:	d900      	bls.n	8006bc4 <__ssputs_r+0x70>
 8006bc2:	463e      	mov	r6, r7
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4641      	mov	r1, r8
 8006bca:	f000 f9c9 	bl	8006f60 <memmove>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	1b9b      	subs	r3, r3, r6
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	4433      	add	r3, r6
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be0:	462a      	mov	r2, r5
 8006be2:	f000 fa3b 	bl	800705c <_realloc_r>
 8006be6:	4606      	mov	r6, r0
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d1e0      	bne.n	8006bae <__ssputs_r+0x5a>
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	4650      	mov	r0, sl
 8006bf0:	f7ff fb34 	bl	800625c <_free_r>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	f8ca 3000 	str.w	r3, [sl]
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c06:	e7e9      	b.n	8006bdc <__ssputs_r+0x88>

08006c08 <_svfiprintf_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4698      	mov	r8, r3
 8006c0e:	898b      	ldrh	r3, [r1, #12]
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	b09d      	sub	sp, #116	; 0x74
 8006c14:	4607      	mov	r7, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	4614      	mov	r4, r2
 8006c1a:	d50e      	bpl.n	8006c3a <_svfiprintf_r+0x32>
 8006c1c:	690b      	ldr	r3, [r1, #16]
 8006c1e:	b963      	cbnz	r3, 8006c3a <_svfiprintf_r+0x32>
 8006c20:	2140      	movs	r1, #64	; 0x40
 8006c22:	f7ff fb8f 	bl	8006344 <_malloc_r>
 8006c26:	6028      	str	r0, [r5, #0]
 8006c28:	6128      	str	r0, [r5, #16]
 8006c2a:	b920      	cbnz	r0, 8006c36 <_svfiprintf_r+0x2e>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c34:	e0d0      	b.n	8006dd8 <_svfiprintf_r+0x1d0>
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	616b      	str	r3, [r5, #20]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3e:	2320      	movs	r3, #32
 8006c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c48:	2330      	movs	r3, #48	; 0x30
 8006c4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006df0 <_svfiprintf_r+0x1e8>
 8006c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c52:	f04f 0901 	mov.w	r9, #1
 8006c56:	4623      	mov	r3, r4
 8006c58:	469a      	mov	sl, r3
 8006c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c5e:	b10a      	cbz	r2, 8006c64 <_svfiprintf_r+0x5c>
 8006c60:	2a25      	cmp	r2, #37	; 0x25
 8006c62:	d1f9      	bne.n	8006c58 <_svfiprintf_r+0x50>
 8006c64:	ebba 0b04 	subs.w	fp, sl, r4
 8006c68:	d00b      	beq.n	8006c82 <_svfiprintf_r+0x7a>
 8006c6a:	465b      	mov	r3, fp
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4638      	mov	r0, r7
 8006c72:	f7ff ff6f 	bl	8006b54 <__ssputs_r>
 8006c76:	3001      	adds	r0, #1
 8006c78:	f000 80a9 	beq.w	8006dce <_svfiprintf_r+0x1c6>
 8006c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c7e:	445a      	add	r2, fp
 8006c80:	9209      	str	r2, [sp, #36]	; 0x24
 8006c82:	f89a 3000 	ldrb.w	r3, [sl]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80a1 	beq.w	8006dce <_svfiprintf_r+0x1c6>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c96:	f10a 0a01 	add.w	sl, sl, #1
 8006c9a:	9304      	str	r3, [sp, #16]
 8006c9c:	9307      	str	r3, [sp, #28]
 8006c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca4:	4654      	mov	r4, sl
 8006ca6:	2205      	movs	r2, #5
 8006ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cac:	4850      	ldr	r0, [pc, #320]	; (8006df0 <_svfiprintf_r+0x1e8>)
 8006cae:	f7f9 fa97 	bl	80001e0 <memchr>
 8006cb2:	9a04      	ldr	r2, [sp, #16]
 8006cb4:	b9d8      	cbnz	r0, 8006cee <_svfiprintf_r+0xe6>
 8006cb6:	06d0      	lsls	r0, r2, #27
 8006cb8:	bf44      	itt	mi
 8006cba:	2320      	movmi	r3, #32
 8006cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc0:	0711      	lsls	r1, r2, #28
 8006cc2:	bf44      	itt	mi
 8006cc4:	232b      	movmi	r3, #43	; 0x2b
 8006cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd0:	d015      	beq.n	8006cfe <_svfiprintf_r+0xf6>
 8006cd2:	9a07      	ldr	r2, [sp, #28]
 8006cd4:	4654      	mov	r4, sl
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f04f 0c0a 	mov.w	ip, #10
 8006cdc:	4621      	mov	r1, r4
 8006cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce2:	3b30      	subs	r3, #48	; 0x30
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	d94d      	bls.n	8006d84 <_svfiprintf_r+0x17c>
 8006ce8:	b1b0      	cbz	r0, 8006d18 <_svfiprintf_r+0x110>
 8006cea:	9207      	str	r2, [sp, #28]
 8006cec:	e014      	b.n	8006d18 <_svfiprintf_r+0x110>
 8006cee:	eba0 0308 	sub.w	r3, r0, r8
 8006cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	46a2      	mov	sl, r4
 8006cfc:	e7d2      	b.n	8006ca4 <_svfiprintf_r+0x9c>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	1d19      	adds	r1, r3, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	9103      	str	r1, [sp, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfbb      	ittet	lt
 8006d0a:	425b      	neglt	r3, r3
 8006d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d10:	9307      	strge	r3, [sp, #28]
 8006d12:	9307      	strlt	r3, [sp, #28]
 8006d14:	bfb8      	it	lt
 8006d16:	9204      	strlt	r2, [sp, #16]
 8006d18:	7823      	ldrb	r3, [r4, #0]
 8006d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d1c:	d10c      	bne.n	8006d38 <_svfiprintf_r+0x130>
 8006d1e:	7863      	ldrb	r3, [r4, #1]
 8006d20:	2b2a      	cmp	r3, #42	; 0x2a
 8006d22:	d134      	bne.n	8006d8e <_svfiprintf_r+0x186>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	9203      	str	r2, [sp, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bfb8      	it	lt
 8006d30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d34:	3402      	adds	r4, #2
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e00 <_svfiprintf_r+0x1f8>
 8006d3c:	7821      	ldrb	r1, [r4, #0]
 8006d3e:	2203      	movs	r2, #3
 8006d40:	4650      	mov	r0, sl
 8006d42:	f7f9 fa4d 	bl	80001e0 <memchr>
 8006d46:	b138      	cbz	r0, 8006d58 <_svfiprintf_r+0x150>
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	eba0 000a 	sub.w	r0, r0, sl
 8006d4e:	2240      	movs	r2, #64	; 0x40
 8006d50:	4082      	lsls	r2, r0
 8006d52:	4313      	orrs	r3, r2
 8006d54:	3401      	adds	r4, #1
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5c:	4825      	ldr	r0, [pc, #148]	; (8006df4 <_svfiprintf_r+0x1ec>)
 8006d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d62:	2206      	movs	r2, #6
 8006d64:	f7f9 fa3c 	bl	80001e0 <memchr>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d038      	beq.n	8006dde <_svfiprintf_r+0x1d6>
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <_svfiprintf_r+0x1f0>)
 8006d6e:	bb1b      	cbnz	r3, 8006db8 <_svfiprintf_r+0x1b0>
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	3307      	adds	r3, #7
 8006d74:	f023 0307 	bic.w	r3, r3, #7
 8006d78:	3308      	adds	r3, #8
 8006d7a:	9303      	str	r3, [sp, #12]
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	4433      	add	r3, r6
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	e768      	b.n	8006c56 <_svfiprintf_r+0x4e>
 8006d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d88:	460c      	mov	r4, r1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	e7a6      	b.n	8006cdc <_svfiprintf_r+0xd4>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	3401      	adds	r4, #1
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	4619      	mov	r1, r3
 8006d96:	f04f 0c0a 	mov.w	ip, #10
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da0:	3a30      	subs	r2, #48	; 0x30
 8006da2:	2a09      	cmp	r2, #9
 8006da4:	d903      	bls.n	8006dae <_svfiprintf_r+0x1a6>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0c6      	beq.n	8006d38 <_svfiprintf_r+0x130>
 8006daa:	9105      	str	r1, [sp, #20]
 8006dac:	e7c4      	b.n	8006d38 <_svfiprintf_r+0x130>
 8006dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db2:	4604      	mov	r4, r0
 8006db4:	2301      	movs	r3, #1
 8006db6:	e7f0      	b.n	8006d9a <_svfiprintf_r+0x192>
 8006db8:	ab03      	add	r3, sp, #12
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <_svfiprintf_r+0x1f4>)
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f7fd fe64 	bl	8004a90 <_printf_float>
 8006dc8:	1c42      	adds	r2, r0, #1
 8006dca:	4606      	mov	r6, r0
 8006dcc:	d1d6      	bne.n	8006d7c <_svfiprintf_r+0x174>
 8006dce:	89ab      	ldrh	r3, [r5, #12]
 8006dd0:	065b      	lsls	r3, r3, #25
 8006dd2:	f53f af2d 	bmi.w	8006c30 <_svfiprintf_r+0x28>
 8006dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd8:	b01d      	add	sp, #116	; 0x74
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <_svfiprintf_r+0x1f4>)
 8006de6:	a904      	add	r1, sp, #16
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7fe f8f5 	bl	8004fd8 <_printf_i>
 8006dee:	e7eb      	b.n	8006dc8 <_svfiprintf_r+0x1c0>
 8006df0:	080078ec 	.word	0x080078ec
 8006df4:	080078f6 	.word	0x080078f6
 8006df8:	08004a91 	.word	0x08004a91
 8006dfc:	08006b55 	.word	0x08006b55
 8006e00:	080078f2 	.word	0x080078f2

08006e04 <__sflush_r>:
 8006e04:	898a      	ldrh	r2, [r1, #12]
 8006e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	0710      	lsls	r0, r2, #28
 8006e0e:	460c      	mov	r4, r1
 8006e10:	d458      	bmi.n	8006ec4 <__sflush_r+0xc0>
 8006e12:	684b      	ldr	r3, [r1, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc05      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dc02      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d0f9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e30:	682f      	ldr	r7, [r5, #0]
 8006e32:	6a21      	ldr	r1, [r4, #32]
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	d032      	beq.n	8006e9e <__sflush_r+0x9a>
 8006e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	075a      	lsls	r2, r3, #29
 8006e3e:	d505      	bpl.n	8006e4c <__sflush_r+0x48>
 8006e40:	6863      	ldr	r3, [r4, #4]
 8006e42:	1ac0      	subs	r0, r0, r3
 8006e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e46:	b10b      	cbz	r3, 8006e4c <__sflush_r+0x48>
 8006e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e4a:	1ac0      	subs	r0, r0, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e52:	6a21      	ldr	r1, [r4, #32]
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b0      	blx	r6
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	d106      	bne.n	8006e6c <__sflush_r+0x68>
 8006e5e:	6829      	ldr	r1, [r5, #0]
 8006e60:	291d      	cmp	r1, #29
 8006e62:	d82b      	bhi.n	8006ebc <__sflush_r+0xb8>
 8006e64:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <__sflush_r+0x108>)
 8006e66:	410a      	asrs	r2, r1
 8006e68:	07d6      	lsls	r6, r2, #31
 8006e6a:	d427      	bmi.n	8006ebc <__sflush_r+0xb8>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	6062      	str	r2, [r4, #4]
 8006e70:	04d9      	lsls	r1, r3, #19
 8006e72:	6922      	ldr	r2, [r4, #16]
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	d504      	bpl.n	8006e82 <__sflush_r+0x7e>
 8006e78:	1c42      	adds	r2, r0, #1
 8006e7a:	d101      	bne.n	8006e80 <__sflush_r+0x7c>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b903      	cbnz	r3, 8006e82 <__sflush_r+0x7e>
 8006e80:	6560      	str	r0, [r4, #84]	; 0x54
 8006e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e84:	602f      	str	r7, [r5, #0]
 8006e86:	2900      	cmp	r1, #0
 8006e88:	d0c9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d002      	beq.n	8006e98 <__sflush_r+0x94>
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7ff f9e2 	bl	800625c <_free_r>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006e9c:	e7c0      	b.n	8006e20 <__sflush_r+0x1c>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c41      	adds	r1, r0, #1
 8006ea6:	d1c8      	bne.n	8006e3a <__sflush_r+0x36>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0c5      	beq.n	8006e3a <__sflush_r+0x36>
 8006eae:	2b1d      	cmp	r3, #29
 8006eb0:	d001      	beq.n	8006eb6 <__sflush_r+0xb2>
 8006eb2:	2b16      	cmp	r3, #22
 8006eb4:	d101      	bne.n	8006eba <__sflush_r+0xb6>
 8006eb6:	602f      	str	r7, [r5, #0]
 8006eb8:	e7b1      	b.n	8006e1e <__sflush_r+0x1a>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	81a3      	strh	r3, [r4, #12]
 8006ec2:	e7ad      	b.n	8006e20 <__sflush_r+0x1c>
 8006ec4:	690f      	ldr	r7, [r1, #16]
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	d0a9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006eca:	0793      	lsls	r3, r2, #30
 8006ecc:	680e      	ldr	r6, [r1, #0]
 8006ece:	bf08      	it	eq
 8006ed0:	694b      	ldreq	r3, [r1, #20]
 8006ed2:	600f      	str	r7, [r1, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	eba6 0807 	sub.w	r8, r6, r7
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	dd9c      	ble.n	8006e1e <__sflush_r+0x1a>
 8006ee4:	6a21      	ldr	r1, [r4, #32]
 8006ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee8:	4643      	mov	r3, r8
 8006eea:	463a      	mov	r2, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b0      	blx	r6
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc06      	bgt.n	8006f02 <__sflush_r+0xfe>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f00:	e78e      	b.n	8006e20 <__sflush_r+0x1c>
 8006f02:	4407      	add	r7, r0
 8006f04:	eba8 0800 	sub.w	r8, r8, r0
 8006f08:	e7e9      	b.n	8006ede <__sflush_r+0xda>
 8006f0a:	bf00      	nop
 8006f0c:	dfbffffe 	.word	0xdfbffffe

08006f10 <_fflush_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b913      	cbnz	r3, 8006f20 <_fflush_r+0x10>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	b118      	cbz	r0, 8006f2a <_fflush_r+0x1a>
 8006f22:	6a03      	ldr	r3, [r0, #32]
 8006f24:	b90b      	cbnz	r3, 8006f2a <_fflush_r+0x1a>
 8006f26:	f7fe f9f3 	bl	8005310 <__sinit>
 8006f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f3      	beq.n	8006f1a <_fflush_r+0xa>
 8006f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f34:	07d0      	lsls	r0, r2, #31
 8006f36:	d404      	bmi.n	8006f42 <_fflush_r+0x32>
 8006f38:	0599      	lsls	r1, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_fflush_r+0x32>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3e:	f7fe fb11 	bl	8005564 <__retarget_lock_acquire_recursive>
 8006f42:	4628      	mov	r0, r5
 8006f44:	4621      	mov	r1, r4
 8006f46:	f7ff ff5d 	bl	8006e04 <__sflush_r>
 8006f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f4c:	07da      	lsls	r2, r3, #31
 8006f4e:	4605      	mov	r5, r0
 8006f50:	d4e4      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	d4e1      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5a:	f7fe fb04 	bl	8005566 <__retarget_lock_release_recursive>
 8006f5e:	e7dd      	b.n	8006f1c <_fflush_r+0xc>

08006f60 <memmove>:
 8006f60:	4288      	cmp	r0, r1
 8006f62:	b510      	push	{r4, lr}
 8006f64:	eb01 0402 	add.w	r4, r1, r2
 8006f68:	d902      	bls.n	8006f70 <memmove+0x10>
 8006f6a:	4284      	cmp	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	d807      	bhi.n	8006f80 <memmove+0x20>
 8006f70:	1e43      	subs	r3, r0, #1
 8006f72:	42a1      	cmp	r1, r4
 8006f74:	d008      	beq.n	8006f88 <memmove+0x28>
 8006f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7e:	e7f8      	b.n	8006f72 <memmove+0x12>
 8006f80:	4402      	add	r2, r0
 8006f82:	4601      	mov	r1, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d100      	bne.n	8006f8a <memmove+0x2a>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f92:	e7f7      	b.n	8006f84 <memmove+0x24>

08006f94 <_sbrk_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	; (8006fb0 <_sbrk_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa fc4c 	bl	800183c <_sbrk>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_sbrk_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_sbrk_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200004d8 	.word	0x200004d8

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <__assert_func>:
 8006fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <__assert_func+0x2c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	68d8      	ldr	r0, [r3, #12]
 8006fde:	b14c      	cbz	r4, 8006ff4 <__assert_func+0x24>
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <__assert_func+0x30>)
 8006fe2:	9100      	str	r1, [sp, #0]
 8006fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fe8:	4906      	ldr	r1, [pc, #24]	; (8007004 <__assert_func+0x34>)
 8006fea:	462b      	mov	r3, r5
 8006fec:	f000 f872 	bl	80070d4 <fiprintf>
 8006ff0:	f000 f882 	bl	80070f8 <abort>
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <__assert_func+0x38>)
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e7f3      	b.n	8006fe2 <__assert_func+0x12>
 8006ffa:	bf00      	nop
 8006ffc:	20000064 	.word	0x20000064
 8007000:	08007907 	.word	0x08007907
 8007004:	08007914 	.word	0x08007914
 8007008:	08007942 	.word	0x08007942

0800700c <_calloc_r>:
 800700c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800700e:	fba1 2402 	umull	r2, r4, r1, r2
 8007012:	b94c      	cbnz	r4, 8007028 <_calloc_r+0x1c>
 8007014:	4611      	mov	r1, r2
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	f7ff f994 	bl	8006344 <_malloc_r>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	4605      	mov	r5, r0
 8007020:	b930      	cbnz	r0, 8007030 <_calloc_r+0x24>
 8007022:	4628      	mov	r0, r5
 8007024:	b003      	add	sp, #12
 8007026:	bd30      	pop	{r4, r5, pc}
 8007028:	220c      	movs	r2, #12
 800702a:	6002      	str	r2, [r0, #0]
 800702c:	2500      	movs	r5, #0
 800702e:	e7f8      	b.n	8007022 <_calloc_r+0x16>
 8007030:	4621      	mov	r1, r4
 8007032:	f7fe fa1a 	bl	800546a <memset>
 8007036:	e7f4      	b.n	8007022 <_calloc_r+0x16>

08007038 <__ascii_mbtowc>:
 8007038:	b082      	sub	sp, #8
 800703a:	b901      	cbnz	r1, 800703e <__ascii_mbtowc+0x6>
 800703c:	a901      	add	r1, sp, #4
 800703e:	b142      	cbz	r2, 8007052 <__ascii_mbtowc+0x1a>
 8007040:	b14b      	cbz	r3, 8007056 <__ascii_mbtowc+0x1e>
 8007042:	7813      	ldrb	r3, [r2, #0]
 8007044:	600b      	str	r3, [r1, #0]
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	1e10      	subs	r0, r2, #0
 800704a:	bf18      	it	ne
 800704c:	2001      	movne	r0, #1
 800704e:	b002      	add	sp, #8
 8007050:	4770      	bx	lr
 8007052:	4610      	mov	r0, r2
 8007054:	e7fb      	b.n	800704e <__ascii_mbtowc+0x16>
 8007056:	f06f 0001 	mvn.w	r0, #1
 800705a:	e7f8      	b.n	800704e <__ascii_mbtowc+0x16>

0800705c <_realloc_r>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	4680      	mov	r8, r0
 8007062:	4614      	mov	r4, r2
 8007064:	460e      	mov	r6, r1
 8007066:	b921      	cbnz	r1, 8007072 <_realloc_r+0x16>
 8007068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706c:	4611      	mov	r1, r2
 800706e:	f7ff b969 	b.w	8006344 <_malloc_r>
 8007072:	b92a      	cbnz	r2, 8007080 <_realloc_r+0x24>
 8007074:	f7ff f8f2 	bl	800625c <_free_r>
 8007078:	4625      	mov	r5, r4
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	f000 f841 	bl	8007106 <_malloc_usable_size_r>
 8007084:	4284      	cmp	r4, r0
 8007086:	4607      	mov	r7, r0
 8007088:	d802      	bhi.n	8007090 <_realloc_r+0x34>
 800708a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800708e:	d812      	bhi.n	80070b6 <_realloc_r+0x5a>
 8007090:	4621      	mov	r1, r4
 8007092:	4640      	mov	r0, r8
 8007094:	f7ff f956 	bl	8006344 <_malloc_r>
 8007098:	4605      	mov	r5, r0
 800709a:	2800      	cmp	r0, #0
 800709c:	d0ed      	beq.n	800707a <_realloc_r+0x1e>
 800709e:	42bc      	cmp	r4, r7
 80070a0:	4622      	mov	r2, r4
 80070a2:	4631      	mov	r1, r6
 80070a4:	bf28      	it	cs
 80070a6:	463a      	movcs	r2, r7
 80070a8:	f7ff ff84 	bl	8006fb4 <memcpy>
 80070ac:	4631      	mov	r1, r6
 80070ae:	4640      	mov	r0, r8
 80070b0:	f7ff f8d4 	bl	800625c <_free_r>
 80070b4:	e7e1      	b.n	800707a <_realloc_r+0x1e>
 80070b6:	4635      	mov	r5, r6
 80070b8:	e7df      	b.n	800707a <_realloc_r+0x1e>

080070ba <__ascii_wctomb>:
 80070ba:	b149      	cbz	r1, 80070d0 <__ascii_wctomb+0x16>
 80070bc:	2aff      	cmp	r2, #255	; 0xff
 80070be:	bf85      	ittet	hi
 80070c0:	238a      	movhi	r3, #138	; 0x8a
 80070c2:	6003      	strhi	r3, [r0, #0]
 80070c4:	700a      	strbls	r2, [r1, #0]
 80070c6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80070ca:	bf98      	it	ls
 80070cc:	2001      	movls	r0, #1
 80070ce:	4770      	bx	lr
 80070d0:	4608      	mov	r0, r1
 80070d2:	4770      	bx	lr

080070d4 <fiprintf>:
 80070d4:	b40e      	push	{r1, r2, r3}
 80070d6:	b503      	push	{r0, r1, lr}
 80070d8:	4601      	mov	r1, r0
 80070da:	ab03      	add	r3, sp, #12
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <fiprintf+0x20>)
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	6800      	ldr	r0, [r0, #0]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	f000 f83f 	bl	8007168 <_vfiprintf_r>
 80070ea:	b002      	add	sp, #8
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	20000064 	.word	0x20000064

080070f8 <abort>:
 80070f8:	b508      	push	{r3, lr}
 80070fa:	2006      	movs	r0, #6
 80070fc:	f000 fa0c 	bl	8007518 <raise>
 8007100:	2001      	movs	r0, #1
 8007102:	f7fa fb23 	bl	800174c <_exit>

08007106 <_malloc_usable_size_r>:
 8007106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710a:	1f18      	subs	r0, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfbc      	itt	lt
 8007110:	580b      	ldrlt	r3, [r1, r0]
 8007112:	18c0      	addlt	r0, r0, r3
 8007114:	4770      	bx	lr

08007116 <__sfputc_r>:
 8007116:	6893      	ldr	r3, [r2, #8]
 8007118:	3b01      	subs	r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	b410      	push	{r4}
 800711e:	6093      	str	r3, [r2, #8]
 8007120:	da08      	bge.n	8007134 <__sfputc_r+0x1e>
 8007122:	6994      	ldr	r4, [r2, #24]
 8007124:	42a3      	cmp	r3, r4
 8007126:	db01      	blt.n	800712c <__sfputc_r+0x16>
 8007128:	290a      	cmp	r1, #10
 800712a:	d103      	bne.n	8007134 <__sfputc_r+0x1e>
 800712c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007130:	f000 b934 	b.w	800739c <__swbuf_r>
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	1c58      	adds	r0, r3, #1
 8007138:	6010      	str	r0, [r2, #0]
 800713a:	7019      	strb	r1, [r3, #0]
 800713c:	4608      	mov	r0, r1
 800713e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007142:	4770      	bx	lr

08007144 <__sfputs_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4606      	mov	r6, r0
 8007148:	460f      	mov	r7, r1
 800714a:	4614      	mov	r4, r2
 800714c:	18d5      	adds	r5, r2, r3
 800714e:	42ac      	cmp	r4, r5
 8007150:	d101      	bne.n	8007156 <__sfputs_r+0x12>
 8007152:	2000      	movs	r0, #0
 8007154:	e007      	b.n	8007166 <__sfputs_r+0x22>
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	463a      	mov	r2, r7
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff ffda 	bl	8007116 <__sfputc_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d1f3      	bne.n	800714e <__sfputs_r+0xa>
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007168 <_vfiprintf_r>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	460d      	mov	r5, r1
 800716e:	b09d      	sub	sp, #116	; 0x74
 8007170:	4614      	mov	r4, r2
 8007172:	4698      	mov	r8, r3
 8007174:	4606      	mov	r6, r0
 8007176:	b118      	cbz	r0, 8007180 <_vfiprintf_r+0x18>
 8007178:	6a03      	ldr	r3, [r0, #32]
 800717a:	b90b      	cbnz	r3, 8007180 <_vfiprintf_r+0x18>
 800717c:	f7fe f8c8 	bl	8005310 <__sinit>
 8007180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007182:	07d9      	lsls	r1, r3, #31
 8007184:	d405      	bmi.n	8007192 <_vfiprintf_r+0x2a>
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	059a      	lsls	r2, r3, #22
 800718a:	d402      	bmi.n	8007192 <_vfiprintf_r+0x2a>
 800718c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718e:	f7fe f9e9 	bl	8005564 <__retarget_lock_acquire_recursive>
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	071b      	lsls	r3, r3, #28
 8007196:	d501      	bpl.n	800719c <_vfiprintf_r+0x34>
 8007198:	692b      	ldr	r3, [r5, #16]
 800719a:	b99b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x5c>
 800719c:	4629      	mov	r1, r5
 800719e:	4630      	mov	r0, r6
 80071a0:	f000 f93a 	bl	8007418 <__swsetup_r>
 80071a4:	b170      	cbz	r0, 80071c4 <_vfiprintf_r+0x5c>
 80071a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a8:	07dc      	lsls	r4, r3, #31
 80071aa:	d504      	bpl.n	80071b6 <_vfiprintf_r+0x4e>
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b0:	b01d      	add	sp, #116	; 0x74
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	0598      	lsls	r0, r3, #22
 80071ba:	d4f7      	bmi.n	80071ac <_vfiprintf_r+0x44>
 80071bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071be:	f7fe f9d2 	bl	8005566 <__retarget_lock_release_recursive>
 80071c2:	e7f3      	b.n	80071ac <_vfiprintf_r+0x44>
 80071c4:	2300      	movs	r3, #0
 80071c6:	9309      	str	r3, [sp, #36]	; 0x24
 80071c8:	2320      	movs	r3, #32
 80071ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d2:	2330      	movs	r3, #48	; 0x30
 80071d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007388 <_vfiprintf_r+0x220>
 80071d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071dc:	f04f 0901 	mov.w	r9, #1
 80071e0:	4623      	mov	r3, r4
 80071e2:	469a      	mov	sl, r3
 80071e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e8:	b10a      	cbz	r2, 80071ee <_vfiprintf_r+0x86>
 80071ea:	2a25      	cmp	r2, #37	; 0x25
 80071ec:	d1f9      	bne.n	80071e2 <_vfiprintf_r+0x7a>
 80071ee:	ebba 0b04 	subs.w	fp, sl, r4
 80071f2:	d00b      	beq.n	800720c <_vfiprintf_r+0xa4>
 80071f4:	465b      	mov	r3, fp
 80071f6:	4622      	mov	r2, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff ffa2 	bl	8007144 <__sfputs_r>
 8007200:	3001      	adds	r0, #1
 8007202:	f000 80a9 	beq.w	8007358 <_vfiprintf_r+0x1f0>
 8007206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007208:	445a      	add	r2, fp
 800720a:	9209      	str	r2, [sp, #36]	; 0x24
 800720c:	f89a 3000 	ldrb.w	r3, [sl]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80a1 	beq.w	8007358 <_vfiprintf_r+0x1f0>
 8007216:	2300      	movs	r3, #0
 8007218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800721c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007220:	f10a 0a01 	add.w	sl, sl, #1
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800722c:	931a      	str	r3, [sp, #104]	; 0x68
 800722e:	4654      	mov	r4, sl
 8007230:	2205      	movs	r2, #5
 8007232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007236:	4854      	ldr	r0, [pc, #336]	; (8007388 <_vfiprintf_r+0x220>)
 8007238:	f7f8 ffd2 	bl	80001e0 <memchr>
 800723c:	9a04      	ldr	r2, [sp, #16]
 800723e:	b9d8      	cbnz	r0, 8007278 <_vfiprintf_r+0x110>
 8007240:	06d1      	lsls	r1, r2, #27
 8007242:	bf44      	itt	mi
 8007244:	2320      	movmi	r3, #32
 8007246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800724a:	0713      	lsls	r3, r2, #28
 800724c:	bf44      	itt	mi
 800724e:	232b      	movmi	r3, #43	; 0x2b
 8007250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007254:	f89a 3000 	ldrb.w	r3, [sl]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d015      	beq.n	8007288 <_vfiprintf_r+0x120>
 800725c:	9a07      	ldr	r2, [sp, #28]
 800725e:	4654      	mov	r4, sl
 8007260:	2000      	movs	r0, #0
 8007262:	f04f 0c0a 	mov.w	ip, #10
 8007266:	4621      	mov	r1, r4
 8007268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800726c:	3b30      	subs	r3, #48	; 0x30
 800726e:	2b09      	cmp	r3, #9
 8007270:	d94d      	bls.n	800730e <_vfiprintf_r+0x1a6>
 8007272:	b1b0      	cbz	r0, 80072a2 <_vfiprintf_r+0x13a>
 8007274:	9207      	str	r2, [sp, #28]
 8007276:	e014      	b.n	80072a2 <_vfiprintf_r+0x13a>
 8007278:	eba0 0308 	sub.w	r3, r0, r8
 800727c:	fa09 f303 	lsl.w	r3, r9, r3
 8007280:	4313      	orrs	r3, r2
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	46a2      	mov	sl, r4
 8007286:	e7d2      	b.n	800722e <_vfiprintf_r+0xc6>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	1d19      	adds	r1, r3, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	9103      	str	r1, [sp, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	bfbb      	ittet	lt
 8007294:	425b      	neglt	r3, r3
 8007296:	f042 0202 	orrlt.w	r2, r2, #2
 800729a:	9307      	strge	r3, [sp, #28]
 800729c:	9307      	strlt	r3, [sp, #28]
 800729e:	bfb8      	it	lt
 80072a0:	9204      	strlt	r2, [sp, #16]
 80072a2:	7823      	ldrb	r3, [r4, #0]
 80072a4:	2b2e      	cmp	r3, #46	; 0x2e
 80072a6:	d10c      	bne.n	80072c2 <_vfiprintf_r+0x15a>
 80072a8:	7863      	ldrb	r3, [r4, #1]
 80072aa:	2b2a      	cmp	r3, #42	; 0x2a
 80072ac:	d134      	bne.n	8007318 <_vfiprintf_r+0x1b0>
 80072ae:	9b03      	ldr	r3, [sp, #12]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	9203      	str	r2, [sp, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bfb8      	it	lt
 80072ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072be:	3402      	adds	r4, #2
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007398 <_vfiprintf_r+0x230>
 80072c6:	7821      	ldrb	r1, [r4, #0]
 80072c8:	2203      	movs	r2, #3
 80072ca:	4650      	mov	r0, sl
 80072cc:	f7f8 ff88 	bl	80001e0 <memchr>
 80072d0:	b138      	cbz	r0, 80072e2 <_vfiprintf_r+0x17a>
 80072d2:	9b04      	ldr	r3, [sp, #16]
 80072d4:	eba0 000a 	sub.w	r0, r0, sl
 80072d8:	2240      	movs	r2, #64	; 0x40
 80072da:	4082      	lsls	r2, r0
 80072dc:	4313      	orrs	r3, r2
 80072de:	3401      	adds	r4, #1
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e6:	4829      	ldr	r0, [pc, #164]	; (800738c <_vfiprintf_r+0x224>)
 80072e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ec:	2206      	movs	r2, #6
 80072ee:	f7f8 ff77 	bl	80001e0 <memchr>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d03f      	beq.n	8007376 <_vfiprintf_r+0x20e>
 80072f6:	4b26      	ldr	r3, [pc, #152]	; (8007390 <_vfiprintf_r+0x228>)
 80072f8:	bb1b      	cbnz	r3, 8007342 <_vfiprintf_r+0x1da>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	3307      	adds	r3, #7
 80072fe:	f023 0307 	bic.w	r3, r3, #7
 8007302:	3308      	adds	r3, #8
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	443b      	add	r3, r7
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	e768      	b.n	80071e0 <_vfiprintf_r+0x78>
 800730e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007312:	460c      	mov	r4, r1
 8007314:	2001      	movs	r0, #1
 8007316:	e7a6      	b.n	8007266 <_vfiprintf_r+0xfe>
 8007318:	2300      	movs	r3, #0
 800731a:	3401      	adds	r4, #1
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	4619      	mov	r1, r3
 8007320:	f04f 0c0a 	mov.w	ip, #10
 8007324:	4620      	mov	r0, r4
 8007326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732a:	3a30      	subs	r2, #48	; 0x30
 800732c:	2a09      	cmp	r2, #9
 800732e:	d903      	bls.n	8007338 <_vfiprintf_r+0x1d0>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0c6      	beq.n	80072c2 <_vfiprintf_r+0x15a>
 8007334:	9105      	str	r1, [sp, #20]
 8007336:	e7c4      	b.n	80072c2 <_vfiprintf_r+0x15a>
 8007338:	fb0c 2101 	mla	r1, ip, r1, r2
 800733c:	4604      	mov	r4, r0
 800733e:	2301      	movs	r3, #1
 8007340:	e7f0      	b.n	8007324 <_vfiprintf_r+0x1bc>
 8007342:	ab03      	add	r3, sp, #12
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	462a      	mov	r2, r5
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <_vfiprintf_r+0x22c>)
 800734a:	a904      	add	r1, sp, #16
 800734c:	4630      	mov	r0, r6
 800734e:	f7fd fb9f 	bl	8004a90 <_printf_float>
 8007352:	4607      	mov	r7, r0
 8007354:	1c78      	adds	r0, r7, #1
 8007356:	d1d6      	bne.n	8007306 <_vfiprintf_r+0x19e>
 8007358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735a:	07d9      	lsls	r1, r3, #31
 800735c:	d405      	bmi.n	800736a <_vfiprintf_r+0x202>
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	059a      	lsls	r2, r3, #22
 8007362:	d402      	bmi.n	800736a <_vfiprintf_r+0x202>
 8007364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007366:	f7fe f8fe 	bl	8005566 <__retarget_lock_release_recursive>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	065b      	lsls	r3, r3, #25
 800736e:	f53f af1d 	bmi.w	80071ac <_vfiprintf_r+0x44>
 8007372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007374:	e71c      	b.n	80071b0 <_vfiprintf_r+0x48>
 8007376:	ab03      	add	r3, sp, #12
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	462a      	mov	r2, r5
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <_vfiprintf_r+0x22c>)
 800737e:	a904      	add	r1, sp, #16
 8007380:	4630      	mov	r0, r6
 8007382:	f7fd fe29 	bl	8004fd8 <_printf_i>
 8007386:	e7e4      	b.n	8007352 <_vfiprintf_r+0x1ea>
 8007388:	080078ec 	.word	0x080078ec
 800738c:	080078f6 	.word	0x080078f6
 8007390:	08004a91 	.word	0x08004a91
 8007394:	08007145 	.word	0x08007145
 8007398:	080078f2 	.word	0x080078f2

0800739c <__swbuf_r>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	460e      	mov	r6, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	4605      	mov	r5, r0
 80073a4:	b118      	cbz	r0, 80073ae <__swbuf_r+0x12>
 80073a6:	6a03      	ldr	r3, [r0, #32]
 80073a8:	b90b      	cbnz	r3, 80073ae <__swbuf_r+0x12>
 80073aa:	f7fd ffb1 	bl	8005310 <__sinit>
 80073ae:	69a3      	ldr	r3, [r4, #24]
 80073b0:	60a3      	str	r3, [r4, #8]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	071a      	lsls	r2, r3, #28
 80073b6:	d525      	bpl.n	8007404 <__swbuf_r+0x68>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	b31b      	cbz	r3, 8007404 <__swbuf_r+0x68>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	6922      	ldr	r2, [r4, #16]
 80073c0:	1a98      	subs	r0, r3, r2
 80073c2:	6963      	ldr	r3, [r4, #20]
 80073c4:	b2f6      	uxtb	r6, r6
 80073c6:	4283      	cmp	r3, r0
 80073c8:	4637      	mov	r7, r6
 80073ca:	dc04      	bgt.n	80073d6 <__swbuf_r+0x3a>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7ff fd9e 	bl	8006f10 <_fflush_r>
 80073d4:	b9e0      	cbnz	r0, 8007410 <__swbuf_r+0x74>
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	3b01      	subs	r3, #1
 80073da:	60a3      	str	r3, [r4, #8]
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	6022      	str	r2, [r4, #0]
 80073e2:	701e      	strb	r6, [r3, #0]
 80073e4:	6962      	ldr	r2, [r4, #20]
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d004      	beq.n	80073f6 <__swbuf_r+0x5a>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	07db      	lsls	r3, r3, #31
 80073f0:	d506      	bpl.n	8007400 <__swbuf_r+0x64>
 80073f2:	2e0a      	cmp	r6, #10
 80073f4:	d104      	bne.n	8007400 <__swbuf_r+0x64>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	f7ff fd89 	bl	8006f10 <_fflush_r>
 80073fe:	b938      	cbnz	r0, 8007410 <__swbuf_r+0x74>
 8007400:	4638      	mov	r0, r7
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f000 f806 	bl	8007418 <__swsetup_r>
 800740c:	2800      	cmp	r0, #0
 800740e:	d0d5      	beq.n	80073bc <__swbuf_r+0x20>
 8007410:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007414:	e7f4      	b.n	8007400 <__swbuf_r+0x64>
	...

08007418 <__swsetup_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <__swsetup_r+0xac>)
 800741c:	4605      	mov	r5, r0
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	460c      	mov	r4, r1
 8007422:	b118      	cbz	r0, 800742c <__swsetup_r+0x14>
 8007424:	6a03      	ldr	r3, [r0, #32]
 8007426:	b90b      	cbnz	r3, 800742c <__swsetup_r+0x14>
 8007428:	f7fd ff72 	bl	8005310 <__sinit>
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007432:	0718      	lsls	r0, r3, #28
 8007434:	d422      	bmi.n	800747c <__swsetup_r+0x64>
 8007436:	06d9      	lsls	r1, r3, #27
 8007438:	d407      	bmi.n	800744a <__swsetup_r+0x32>
 800743a:	2309      	movs	r3, #9
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007448:	e034      	b.n	80074b4 <__swsetup_r+0x9c>
 800744a:	0758      	lsls	r0, r3, #29
 800744c:	d512      	bpl.n	8007474 <__swsetup_r+0x5c>
 800744e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007450:	b141      	cbz	r1, 8007464 <__swsetup_r+0x4c>
 8007452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007456:	4299      	cmp	r1, r3
 8007458:	d002      	beq.n	8007460 <__swsetup_r+0x48>
 800745a:	4628      	mov	r0, r5
 800745c:	f7fe fefe 	bl	800625c <_free_r>
 8007460:	2300      	movs	r3, #0
 8007462:	6363      	str	r3, [r4, #52]	; 0x34
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	2300      	movs	r3, #0
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	b94b      	cbnz	r3, 8007494 <__swsetup_r+0x7c>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748a:	d003      	beq.n	8007494 <__swsetup_r+0x7c>
 800748c:	4621      	mov	r1, r4
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f884 	bl	800759c <__smakebuf_r>
 8007494:	89a0      	ldrh	r0, [r4, #12]
 8007496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800749a:	f010 0301 	ands.w	r3, r0, #1
 800749e:	d00a      	beq.n	80074b6 <__swsetup_r+0x9e>
 80074a0:	2300      	movs	r3, #0
 80074a2:	60a3      	str	r3, [r4, #8]
 80074a4:	6963      	ldr	r3, [r4, #20]
 80074a6:	425b      	negs	r3, r3
 80074a8:	61a3      	str	r3, [r4, #24]
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	b943      	cbnz	r3, 80074c0 <__swsetup_r+0xa8>
 80074ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074b2:	d1c4      	bne.n	800743e <__swsetup_r+0x26>
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	0781      	lsls	r1, r0, #30
 80074b8:	bf58      	it	pl
 80074ba:	6963      	ldrpl	r3, [r4, #20]
 80074bc:	60a3      	str	r3, [r4, #8]
 80074be:	e7f4      	b.n	80074aa <__swsetup_r+0x92>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e7f7      	b.n	80074b4 <__swsetup_r+0x9c>
 80074c4:	20000064 	.word	0x20000064

080074c8 <_raise_r>:
 80074c8:	291f      	cmp	r1, #31
 80074ca:	b538      	push	{r3, r4, r5, lr}
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	d904      	bls.n	80074dc <_raise_r+0x14>
 80074d2:	2316      	movs	r3, #22
 80074d4:	6003      	str	r3, [r0, #0]
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80074de:	b112      	cbz	r2, 80074e6 <_raise_r+0x1e>
 80074e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e4:	b94b      	cbnz	r3, 80074fa <_raise_r+0x32>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 f830 	bl	800754c <_getpid_r>
 80074ec:	462a      	mov	r2, r5
 80074ee:	4601      	mov	r1, r0
 80074f0:	4620      	mov	r0, r4
 80074f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f6:	f000 b817 	b.w	8007528 <_kill_r>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d00a      	beq.n	8007514 <_raise_r+0x4c>
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	d103      	bne.n	800750a <_raise_r+0x42>
 8007502:	2316      	movs	r3, #22
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	2001      	movs	r0, #1
 8007508:	e7e7      	b.n	80074da <_raise_r+0x12>
 800750a:	2400      	movs	r4, #0
 800750c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007510:	4628      	mov	r0, r5
 8007512:	4798      	blx	r3
 8007514:	2000      	movs	r0, #0
 8007516:	e7e0      	b.n	80074da <_raise_r+0x12>

08007518 <raise>:
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <raise+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f7ff bfd3 	b.w	80074c8 <_raise_r>
 8007522:	bf00      	nop
 8007524:	20000064 	.word	0x20000064

08007528 <_kill_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_kill_r+0x20>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f7fa f8f9 	bl	800172c <_kill>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d102      	bne.n	8007544 <_kill_r+0x1c>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b103      	cbz	r3, 8007544 <_kill_r+0x1c>
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	200004d8 	.word	0x200004d8

0800754c <_getpid_r>:
 800754c:	f7fa b8e6 	b.w	800171c <_getpid>

08007550 <__swhatbuf_r>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	460c      	mov	r4, r1
 8007554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007558:	2900      	cmp	r1, #0
 800755a:	b096      	sub	sp, #88	; 0x58
 800755c:	4615      	mov	r5, r2
 800755e:	461e      	mov	r6, r3
 8007560:	da0d      	bge.n	800757e <__swhatbuf_r+0x2e>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007568:	f04f 0100 	mov.w	r1, #0
 800756c:	bf0c      	ite	eq
 800756e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007572:	2340      	movne	r3, #64	; 0x40
 8007574:	2000      	movs	r0, #0
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	b016      	add	sp, #88	; 0x58
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	466a      	mov	r2, sp
 8007580:	f000 f848 	bl	8007614 <_fstat_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	dbec      	blt.n	8007562 <__swhatbuf_r+0x12>
 8007588:	9901      	ldr	r1, [sp, #4]
 800758a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800758e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007592:	4259      	negs	r1, r3
 8007594:	4159      	adcs	r1, r3
 8007596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759a:	e7eb      	b.n	8007574 <__swhatbuf_r+0x24>

0800759c <__smakebuf_r>:
 800759c:	898b      	ldrh	r3, [r1, #12]
 800759e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075a0:	079d      	lsls	r5, r3, #30
 80075a2:	4606      	mov	r6, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	d507      	bpl.n	80075b8 <__smakebuf_r+0x1c>
 80075a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	2301      	movs	r3, #1
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	b002      	add	sp, #8
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	ab01      	add	r3, sp, #4
 80075ba:	466a      	mov	r2, sp
 80075bc:	f7ff ffc8 	bl	8007550 <__swhatbuf_r>
 80075c0:	9900      	ldr	r1, [sp, #0]
 80075c2:	4605      	mov	r5, r0
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7fe febd 	bl	8006344 <_malloc_r>
 80075ca:	b948      	cbnz	r0, 80075e0 <__smakebuf_r+0x44>
 80075cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d0:	059a      	lsls	r2, r3, #22
 80075d2:	d4ef      	bmi.n	80075b4 <__smakebuf_r+0x18>
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	f043 0302 	orr.w	r3, r3, #2
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	e7e3      	b.n	80075a8 <__smakebuf_r+0xc>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	b15b      	cbz	r3, 800760c <__smakebuf_r+0x70>
 80075f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f81d 	bl	8007638 <_isatty_r>
 80075fe:	b128      	cbz	r0, 800760c <__smakebuf_r+0x70>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	431d      	orrs	r5, r3
 8007610:	81a5      	strh	r5, [r4, #12]
 8007612:	e7cf      	b.n	80075b4 <__smakebuf_r+0x18>

08007614 <_fstat_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_fstat_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7fa f8e2 	bl	80017ea <_fstat>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_fstat_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_fstat_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	200004d8 	.word	0x200004d8

08007638 <_isatty_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_isatty_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7fa f8e1 	bl	800180a <_isatty>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_isatty_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_isatty_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	200004d8 	.word	0x200004d8

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
