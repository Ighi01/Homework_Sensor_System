
HW_05_3b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007318  08007318  00017318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080076bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  200001fc  080078b8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  080078b8  00021444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7a1  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002486  00000000  00000000  0002fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb2  00000000  00000000  00032d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cb6  00000000  00000000  0003394a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e5d  00000000  00000000  0004c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b1e2  00000000  00000000  0005e45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ebc  00000000  00000000  000f9640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000fe4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007300 	.word	0x08007300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08007300 	.word	0x08007300

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <DWT_Delay_Init+0x58>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <DWT_Delay_Init+0x58>)
 8000ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <DWT_Delay_Init+0x58>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <DWT_Delay_Init+0x58>)
 8000eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ece:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000eee:	bf00      	nop
    __ASM volatile ("NOP");
 8000ef0:	bf00      	nop
    __ASM volatile ("NOP");
 8000ef2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <DWT_Delay_Init+0x5c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000efc:	2300      	movs	r3, #0
 8000efe:	e000      	b.n	8000f02 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000f00:	2301      	movs	r3, #1
    }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000edf0 	.word	0xe000edf0
 8000f10:	e0001000 	.word	0xe0001000

08000f14 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <DWT_Delay_us+0x48>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f22:	f002 fdeb 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <DWT_Delay_us+0x4c>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000f3c:	bf00      	nop
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <DWT_Delay_us+0x48>)
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1acb      	subs	r3, r1, r3
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3f6      	bcc.n	8000f3e <DWT_Delay_us+0x2a>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e0001000 	.word	0xe0001000
 8000f60:	431bde83 	.word	0x431bde83

08000f64 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <lcd_enable+0x28>)
 8000f6e:	f002 f947 	bl	8003200 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000f72:	2032      	movs	r0, #50	; 0x32
 8000f74:	f7ff ffce 	bl	8000f14 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <lcd_enable+0x28>)
 8000f7e:	f002 f93f 	bl	8003200 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000f82:	2032      	movs	r0, #50	; 0x32
 8000f84:	f7ff ffc6 	bl	8000f14 <DWT_Delay_us>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020400 	.word	0x40020400

08000f90 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <lcd_write4+0x74>)
 8000faa:	f002 f929 	bl	8003200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	105b      	asrs	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <lcd_write4+0x74>)
 8000fc2:	f002 f91d 	bl	8003200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	109b      	asrs	r3, r3, #2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <lcd_write4+0x74>)
 8000fda:	f002 f911 	bl	8003200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	10db      	asrs	r3, r3, #3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <lcd_write4+0x74>)
 8000ff2:	f002 f905 	bl	8003200 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000ff6:	f7ff ffb5 	bl	8000f64 <lcd_enable>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020400 	.word	0x40020400

08001008 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffb9 	bl	8000f90 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffb5 	bl	8000f90 <lcd_write4>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800103a:	2200      	movs	r2, #0
 800103c:	2104      	movs	r1, #4
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <lcd_command+0x24>)
 8001040:	f002 f8de 	bl	8003200 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ffde 	bl	8001008 <lcd_write>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020400 	.word	0x40020400

08001058 <lcd_clear>:

void lcd_clear(){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffe7 	bl	8001030 <lcd_command>
	DWT_Delay_us(2000);
 8001062:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001066:	f7ff ff55 	bl	8000f14 <DWT_Delay_us>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800107a:	2201      	movs	r2, #1
 800107c:	2104      	movs	r1, #4
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <lcd_data+0x24>)
 8001080:	f002 f8be 	bl	8003200 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffbe 	bl	8001008 <lcd_write>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020400 	.word	0x40020400

08001098 <writeCustomChar>:
	}
	setCursor(0, row);
	lcd_print(line);
}

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffb8 	bl	8001030 <lcd_command>
	for (int i = 0; i<8; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e009      	b.n	80010da <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffce 	bl	8001070 <lcd_data>
	for (int i = 0; i<8; i++){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	ddf2      	ble.n	80010c6 <writeCustomChar+0x2e>
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80010f0:	490a      	ldr	r1, [pc, #40]	; (800111c <loadCustomChars+0x30>)
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ffd0 	bl	8001098 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80010f8:	4909      	ldr	r1, [pc, #36]	; (8001120 <loadCustomChars+0x34>)
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff ffcc 	bl	8001098 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001100:	4908      	ldr	r1, [pc, #32]	; (8001124 <loadCustomChars+0x38>)
 8001102:	2003      	movs	r0, #3
 8001104:	f7ff ffc8 	bl	8001098 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <loadCustomChars+0x3c>)
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff ffc4 	bl	8001098 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001110:	4906      	ldr	r1, [pc, #24]	; (800112c <loadCustomChars+0x40>)
 8001112:	2005      	movs	r0, #5
 8001114:	f7ff ffc0 	bl	8001098 <writeCustomChar>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000010 	.word	0x20000010
 8001128:	20000018 	.word	0x20000018
 800112c:	20000020 	.word	0x20000020

08001130 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001134:	2032      	movs	r0, #50	; 0x32
 8001136:	f000 fd23 	bl	8001b80 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	4824      	ldr	r0, [pc, #144]	; (80011d0 <lcd_initialize+0xa0>)
 8001140:	f002 f85e 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2102      	movs	r1, #2
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <lcd_initialize+0xa0>)
 800114a:	f002 f859 	bl	8003200 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800114e:	f7ff feb1 	bl	8000eb4 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8001152:	2003      	movs	r0, #3
 8001154:	f7ff ff1c 	bl	8000f90 <lcd_write4>
	HAL_Delay(5);
 8001158:	2005      	movs	r0, #5
 800115a:	f000 fd11 	bl	8001b80 <HAL_Delay>
	lcd_write4(0x03);
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff ff16 	bl	8000f90 <lcd_write4>
	HAL_Delay(5);
 8001164:	2005      	movs	r0, #5
 8001166:	f000 fd0b 	bl	8001b80 <HAL_Delay>
	lcd_write4(0x03);
 800116a:	2003      	movs	r0, #3
 800116c:	f7ff ff10 	bl	8000f90 <lcd_write4>
	HAL_Delay(5);
 8001170:	2005      	movs	r0, #5
 8001172:	f000 fd05 	bl	8001b80 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001176:	2002      	movs	r0, #2
 8001178:	f7ff ff0a 	bl	8000f90 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f7ff ff43 	bl	8001008 <lcd_write>
	HAL_Delay(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f000 fcfc 	bl	8001b80 <HAL_Delay>
	lcd_write(0x08); //display off;
 8001188:	2008      	movs	r0, #8
 800118a:	f7ff ff3d 	bl	8001008 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff3a 	bl	8001008 <lcd_write>
	HAL_Delay(5);
 8001194:	2005      	movs	r0, #5
 8001196:	f000 fcf3 	bl	8001b80 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 800119a:	2006      	movs	r0, #6
 800119c:	f7ff ff34 	bl	8001008 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <lcd_initialize+0xa4>)
 80011a6:	f002 f82b 	bl	8003200 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <lcd_initialize+0xa8>)
 80011ac:	220c      	movs	r2, #12
 80011ae:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <lcd_initialize+0xa8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff27 	bl	8001008 <lcd_write>
	lcd_write(0x02); //go home
 80011ba:	2002      	movs	r0, #2
 80011bc:	f7ff ff24 	bl	8001008 <lcd_write>
	HAL_Delay(2);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f000 fcdd 	bl	8001b80 <HAL_Delay>
	loadCustomChars();
 80011c6:	f7ff ff91 	bl	80010ec <loadCustomChars>

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000218 	.word	0x20000218

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fc5c 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f820 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f97c 	bl	80014e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 f95a 	bl	80014a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 f92e 	bl	8001450 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011f4:	f000 f884 	bl	8001300 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011f8:	f000 f8d4 	bl	80013a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 80011fc:	f7ff ff98 	bl	8001130 <lcd_initialize>
  lcd_clear();
 8001200:	f7ff ff2a 	bl	8001058 <lcd_clear>
  HAL_ADC_Start_DMA(&hadc1,adc_val,2000);
 8001204:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001208:	4904      	ldr	r1, [pc, #16]	; (800121c <main+0x40>)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <main+0x44>)
 800120c:	f000 fe30 	bl	8001e70 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001210:	2100      	movs	r1, #0
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <main+0x48>)
 8001214:	f002 fcf6 	bl	8003c04 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x3c>
 800121a:	bf00      	nop
 800121c:	20000350 	.word	0x20000350
 8001220:	2000021c 	.word	0x2000021c
 8001224:	200002c4 	.word	0x200002c4

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 f911 	bl	800545e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <SystemClock_Config+0xd0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <SystemClock_Config+0xd4>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800129c:	2310      	movs	r3, #16
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 ffbe 	bl	8003234 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012be:	f000 f997 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fa20 	bl	8003724 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ea:	f000 f981 	bl	80015f0 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_ADC1_Init+0x9c>)
 8001314:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MX_ADC1_Init+0xa0>)
 8001316:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_ADC1_Init+0x9c>)
 800131a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_ADC1_Init+0x9c>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_ADC1_Init+0x9c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_ADC1_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_ADC1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_ADC1_Init+0x9c>)
 800133c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_ADC1_Init+0x9c>)
 8001344:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_ADC1_Init+0x9c>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_ADC1_Init+0x9c>)
 8001352:	2201      	movs	r2, #1
 8001354:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_ADC1_Init+0x9c>)
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_ADC1_Init+0x9c>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0x9c>)
 8001366:	f000 fc2f 	bl	8001bc8 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001370:	f000 f93e 	bl	80015f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_ADC1_Init+0x9c>)
 8001386:	f000 fe8b 	bl	80020a0 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001390:	f000 f92e 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000021c 	.word	0x2000021c
 80013a0:	40012000 	.word	0x40012000

080013a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_TIM2_Init+0xa8>)
 80013c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM2_Init+0xa8>)
 80013d0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80013d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_TIM2_Init+0xa8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_TIM2_Init+0xa8>)
 80013de:	2209      	movs	r2, #9
 80013e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM2_Init+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_TIM2_Init+0xa8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ee:	4817      	ldr	r0, [pc, #92]	; (800144c <MX_TIM2_Init+0xa8>)
 80013f0:	f002 fbb8 	bl	8003b64 <HAL_TIM_PWM_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013fa:	f000 f8f9 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	4619      	mov	r1, r3
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <MX_TIM2_Init+0xa8>)
 800140e:	f002 ff9d 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001418:	f000 f8ea 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141c:	2360      	movs	r3, #96	; 0x60
 800141e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_TIM2_Init+0xa8>)
 8001434:	f002 fc96 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800143e:	f000 f8d7 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200002c4 	.word	0x200002c4

08001450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_USART2_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_USART2_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART2_UART_Init+0x4c>)
 8001488:	f002 ffce 	bl	8004428 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f8ad 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000030c 	.word	0x2000030c
 80014a0:	40004400 	.word	0x40004400

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <MX_DMA_Init+0x3c>)
 80014b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_DMA_Init+0x3c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2038      	movs	r0, #56	; 0x38
 80014cc:	f001 f96d 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d0:	2038      	movs	r0, #56	; 0x38
 80014d2:	f001 f986 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <MX_GPIO_Init+0xfc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_GPIO_Init+0xfc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <MX_GPIO_Init+0xfc>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2130      	movs	r1, #48	; 0x30
 800156e:	481d      	ldr	r0, [pc, #116]	; (80015e4 <MX_GPIO_Init+0x100>)
 8001570:	f001 fe46 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001574:	2200      	movs	r2, #0
 8001576:	f24f 0106 	movw	r1, #61446	; 0xf006
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <MX_GPIO_Init+0x104>)
 800157c:	f001 fe40 	bl	8003200 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001586:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <MX_GPIO_Init+0x108>)
 8001598:	f001 fcae 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800159c:	2330      	movs	r3, #48	; 0x30
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_GPIO_Init+0x100>)
 80015b4:	f001 fca0 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80015b8:	f24f 0306 	movw	r3, #61446	; 0xf006
 80015bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_GPIO_Init+0x104>)
 80015d2:	f001 fc91 	bl	8002ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f001 f8aa 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a33      	ldr	r2, [pc, #204]	; (8001738 <HAL_ADC_MspInit+0xec>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d15f      	bne.n	800172e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_ADC_MspInit+0xf0>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_ADC_MspInit+0xf0>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_ADC_MspInit+0xf0>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_ADC_MspInit+0xf0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_ADC_MspInit+0xf0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_ADC_MspInit+0xf0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a6:	2301      	movs	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <HAL_ADC_MspInit+0xf4>)
 80016ba:	f001 fc1d 	bl	8002ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_ADC_MspInit+0xfc>)
 80016c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001702:	4810      	ldr	r0, [pc, #64]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001704:	f001 f888 	bl	8002818 <HAL_DMA_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800170e:	f7ff ff6f 	bl	80015f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2012      	movs	r0, #18
 8001724:	f001 f841 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001728:	2012      	movs	r0, #18
 800172a:	f001 f85a 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40012000 	.word	0x40012000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	20000264 	.word	0x20000264
 8001748:	40026410 	.word	0x40026410

0800174c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175c:	d10d      	bne.n	800177a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_TIM_PWM_MspInit+0x3c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_TIM_PWM_MspInit+0x3c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_TIM_PWM_MspInit+0x3c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_UART_MspInit+0x84>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12b      	bne.n	8001806 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_UART_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e6:	230c      	movs	r3, #12
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f6:	2307      	movs	r3, #7
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_UART_MspInit+0x8c>)
 8001802:	f001 fb79 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40004400 	.word	0x40004400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 f96a 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <ADC_IRQHandler+0x10>)
 8001876:	f000 f9ea 	bl	8001c4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000021c 	.word	0x2000021c

08001884 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <DMA2_Stream0_IRQHandler+0x10>)
 800188a:	f001 f8cb 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000264 	.word	0x20000264

08001898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_kill>:

int _kill(int pid, int sig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b2:	f003 fe27 	bl	8005504 <__errno>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2216      	movs	r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_exit>:

void _exit (int status)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe7 	bl	80018a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018da:	e7fe      	b.n	80018da <_exit+0x12>

080018dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00a      	b.n	8001904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ee:	f3af 8000 	nop.w
 80018f2:	4601      	mov	r1, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf0      	blt.n	80018ee <_read+0x12>
  }

  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e009      	b.n	800193c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf1      	blt.n	8001928 <_write+0x12>
  }
  return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_close>:

int _close(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001976:	605a      	str	r2, [r3, #4]
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f003 fd8c 	bl	8005504 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20018000 	.word	0x20018000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	200012f0 	.word	0x200012f0
 8001a20:	20001448 	.word	0x20001448

08001a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a64:	4c0b      	ldr	r4, [pc, #44]	; (8001a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a72:	f7ff ffd7 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f003 fd4b 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff fbaf 	bl	80011dc <main>
  bx  lr    
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001a8c:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 8001a90:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001a94:	20001444 	.word	0x20001444

08001a98 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <DMA1_Stream0_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <HAL_Init+0x40>)
 8001aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_Init+0x40>)
 8001ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_Init+0x40>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 fe65 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f808 	bl	8001ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad0:	f7ff fd94 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x54>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x58>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe7d 	bl	80027fe <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f000 fe45 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_InitTick+0x5c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000028 	.word	0x20000028
 8001b38:	20000030 	.word	0x20000030
 8001b3c:	2000002c 	.word	0x2000002c

08001b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x20>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x24>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_IncTick+0x24>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000030 	.word	0x20000030
 8001b64:	200012f4 	.word	0x200012f4

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200012f4 	.word	0x200012f4

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff ffee 	bl	8001b68 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_Delay+0x44>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ba6:	bf00      	nop
 8001ba8:	f7ff ffde 	bl	8001b68 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000030 	.word	0x20000030

08001bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e033      	b.n	8001c46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fd30 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c0e:	f023 0302 	bic.w	r3, r3, #2
 8001c12:	f043 0202 	orr.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fb62 	bl	80022e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
 8001c36:	e001      	b.n	8001c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d049      	beq.n	8001d18 <HAL_ADC_IRQHandler+0xca>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d046      	beq.n	8001d18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d12b      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d127      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0220 	bic.w	r2, r2, #32
 8001ce2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f9a1 	bl	8002050 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0212 	mvn.w	r2, #18
 8001d16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d057      	beq.n	8001dde <HAL_ADC_IRQHandler+0x190>
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d054      	beq.n	8001dde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d139      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12b      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d124      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11d      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fc06 	bl	80025e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 020c 	mvn.w	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10d      	bne.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f92f 	bl	8002078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0201 	mvn.w	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x218>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0220 	mvn.w	r2, #32
 8001e54:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f918 	bl	800208c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	601a      	str	r2, [r3, #0]
  }
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Start_DMA+0x1e>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e0ce      	b.n	800202c <HAL_ADC_Start_DMA+0x1bc>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d018      	beq.n	8001ed6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb4:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <HAL_ADC_Start_DMA+0x1c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <HAL_ADC_Start_DMA+0x1c8>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee4:	d107      	bne.n	8001ef6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	f040 8086 	bne.w	8002012 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f023 0206 	bic.w	r2, r3, #6
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
 8001f52:	e002      	b.n	8001f5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_ADC_Start_DMA+0x1cc>)
 8001f64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	4a35      	ldr	r2, [pc, #212]	; (8002040 <HAL_ADC_Start_DMA+0x1d0>)
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	4a34      	ldr	r2, [pc, #208]	; (8002044 <HAL_ADC_Start_DMA+0x1d4>)
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4a33      	ldr	r2, [pc, #204]	; (8002048 <HAL_ADC_Start_DMA+0x1d8>)
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	334c      	adds	r3, #76	; 0x4c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f000 fcdc 	bl	8002974 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d129      	bne.n	800202a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	e020      	b.n	800202a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_ADC_Start_DMA+0x1dc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d11b      	bne.n	800202a <HAL_ADC_Start_DMA+0x1ba>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d114      	bne.n	800202a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e00b      	b.n	800202a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f043 0210 	orr.w	r2, r3, #16
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000028 	.word	0x20000028
 8002038:	431bde83 	.word	0x431bde83
 800203c:	40012300 	.word	0x40012300
 8002040:	080024dd 	.word	0x080024dd
 8002044:	08002597 	.word	0x08002597
 8002048:	080025b3 	.word	0x080025b3
 800204c:	40012000 	.word	0x40012000

08002050 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1c>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e105      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x228>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d925      	bls.n	8002118 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	3b1e      	subs	r3, #30
 80020e2:	2207      	movs	r2, #7
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68d9      	ldr	r1, [r3, #12]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	4603      	mov	r3, r0
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4403      	add	r3, r0
 800210a:	3b1e      	subs	r3, #30
 800210c:	409a      	lsls	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	e022      	b.n	800215e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	2207      	movs	r2, #7
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	4603      	mov	r3, r0
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4403      	add	r3, r0
 8002154:	409a      	lsls	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b06      	cmp	r3, #6
 8002164:	d824      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b05      	subs	r3, #5
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b05      	subs	r3, #5
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	e04c      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	d824      	bhi.n	8002202 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b23      	subs	r3, #35	; 0x23
 80021ca:	221f      	movs	r2, #31
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b23      	subs	r3, #35	; 0x23
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002200:	e023      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b41      	subs	r3, #65	; 0x41
 8002214:	221f      	movs	r2, #31
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b41      	subs	r3, #65	; 0x41
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_ADC_ConfigChannel+0x234>)
 800224c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_ADC_ConfigChannel+0x238>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d109      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1cc>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b12      	cmp	r3, #18
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_ADC_ConfigChannel+0x238>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d123      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d003      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x1e6>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b11      	cmp	r3, #17
 8002284:	d11b      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b10      	cmp	r3, #16
 8002298:	d111      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_ADC_ConfigChannel+0x23c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_ADC_ConfigChannel+0x240>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9a      	lsrs	r2, r3, #18
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000
 80022dc:	20000028 	.word	0x20000028
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <ADC_Init+0x1f0>)
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800233c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <ADC_Init+0x1f4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e00f      	b.n	80023e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0202 	bic.w	r2, r2, #2
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
 80023fc:	005a      	lsls	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800242e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	3b01      	subs	r3, #1
 800243c:	035a      	lsls	r2, r3, #13
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e007      	b.n	8002458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	3b01      	subs	r3, #1
 8002474:	051a      	lsls	r2, r3, #20
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800248c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249a:	025a      	lsls	r2, r3, #9
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	029a      	lsls	r2, r3, #10
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012300 	.word	0x40012300
 80024d8:	0f000001 	.word	0x0f000001

080024dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d13c      	bne.n	8002570 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12b      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002514:	2b00      	cmp	r3, #0
 8002516:	d127      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0220 	bic.w	r2, r2, #32
 8002542:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fd71 	bl	8002050 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800256e:	e00e      	b.n	800258e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff fd85 	bl	800208c <HAL_ADC_ErrorCallback>
}
 8002582:	e004      	b.n	800258e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fd5d 	bl	8002064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff fd5a 	bl	800208c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff f9a0 	bl	8001b68 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e099      	b.n	8002968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002854:	e00f      	b.n	8002876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002856:	f7ff f987 	bl	8001b68 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b05      	cmp	r3, #5
 8002862:	d908      	bls.n	8002876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2203      	movs	r2, #3
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e078      	b.n	8002968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e8      	bne.n	8002856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_DMA_Init+0x158>)
 8002890:	4013      	ands	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d107      	bne.n	80028e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4313      	orrs	r3, r2
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 0307 	bic.w	r3, r3, #7
 80028f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b04      	cmp	r3, #4
 8002908:	d117      	bne.n	800293a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fa6f 	bl	8002e00 <DMA_CheckFifoParam>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002936:	2301      	movs	r3, #1
 8002938:	e016      	b.n	8002968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fa26 	bl	8002d94 <DMA_CalcBaseAndBitshift>
 8002948:	4603      	mov	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	f010803f 	.word	0xf010803f

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_DMA_Start_IT+0x26>
 8002996:	2302      	movs	r3, #2
 8002998:	e040      	b.n	8002a1c <HAL_DMA_Start_IT+0xa8>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12f      	bne.n	8002a0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f9b8 	bl	8002d38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	223f      	movs	r2, #63	; 0x3f
 80029ce:	409a      	lsls	r2, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0216 	orr.w	r2, r2, #22
 80029e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e005      	b.n	8002a1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
 8002a18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a30:	4b8e      	ldr	r3, [pc, #568]	; (8002c6c <HAL_DMA_IRQHandler+0x248>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a8e      	ldr	r2, [pc, #568]	; (8002c70 <HAL_DMA_IRQHandler+0x24c>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2208      	movs	r2, #8
 8002a50:	409a      	lsls	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0204 	bic.w	r2, r2, #4
 8002a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2201      	movs	r2, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f043 0202 	orr.w	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2204      	movs	r2, #4
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	2204      	movs	r2, #4
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2210      	movs	r2, #16
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d043      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d03c      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	2210      	movs	r2, #16
 8002b20:	409a      	lsls	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d018      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d024      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
 8002b52:	e01f      	b.n	8002b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
 8002b64:	e016      	b.n	8002b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0208 	bic.w	r2, r2, #8
 8002b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2220      	movs	r2, #32
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 808f 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8087 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2220      	movs	r2, #32
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d136      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0216 	bic.w	r2, r2, #22
 8002bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x1da>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0208 	bic.w	r2, r2, #8
 8002c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	223f      	movs	r2, #63	; 0x3f
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d07e      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
        }
        return;
 8002c3a:	e079      	b.n	8002d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01d      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d031      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e02c      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
 8002c6a:	bf00      	nop
 8002c6c:	20000028 	.word	0x20000028
 8002c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d023      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
 8002c84:	e01e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0210 	bic.w	r2, r2, #16
 8002ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d032      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2205      	movs	r2, #5
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d307      	bcc.n	8002d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x2cc>
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
 8002d2e:	e000      	b.n	8002d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d30:	bf00      	nop
    }
  }
}
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d108      	bne.n	8002d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d76:	e007      	b.n	8002d88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3b10      	subs	r3, #16
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <DMA_CalcBaseAndBitshift+0x64>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dae:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <DMA_CalcBaseAndBitshift+0x68>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d909      	bls.n	8002dd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	1d1a      	adds	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd4:	e007      	b.n	8002de6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	aaaaaaab 	.word	0xaaaaaaab
 8002dfc:	08007330 	.word	0x08007330

08002e00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11f      	bne.n	8002e5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d856      	bhi.n	8002ece <DMA_CheckFifoParam+0xce>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <DMA_CheckFifoParam+0x28>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e4b 	.word	0x08002e4b
 8002e30:	08002e39 	.word	0x08002e39
 8002e34:	08002ecf 	.word	0x08002ecf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d046      	beq.n	8002ed2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e48:	e043      	b.n	8002ed2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e52:	d140      	bne.n	8002ed6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e58:	e03d      	b.n	8002ed6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e62:	d121      	bne.n	8002ea8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d837      	bhi.n	8002eda <DMA_CheckFifoParam+0xda>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <DMA_CheckFifoParam+0x70>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e87 	.word	0x08002e87
 8002e78:	08002e81 	.word	0x08002e81
 8002e7c:	08002e99 	.word	0x08002e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      break;
 8002e84:	e030      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d025      	beq.n	8002ede <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e96:	e022      	b.n	8002ede <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea0:	d11f      	bne.n	8002ee2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea6:	e01c      	b.n	8002ee2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d903      	bls.n	8002eb6 <DMA_CheckFifoParam+0xb6>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d003      	beq.n	8002ebc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb4:	e018      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eba:	e015      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e00b      	b.n	8002ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e00a      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e008      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e006      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e004      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e159      	b.n	80031c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f14:	2201      	movs	r2, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f040 8148 	bne.w	80031c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d005      	beq.n	8002f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d130      	bne.n	8002fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0201 	and.w	r2, r3, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d017      	beq.n	8002fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d123      	bne.n	800303c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	220f      	movs	r2, #15
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	08da      	lsrs	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a2 	beq.w	80031c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b54      	ldr	r3, [pc, #336]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309a:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_GPIO_Init+0x2ec>)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_GPIO_Init+0x2f0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x202>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2f4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x1fe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a47      	ldr	r2, [pc, #284]	; (80031f0 <HAL_GPIO_Init+0x2f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <HAL_GPIO_Init+0x2fc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x1f6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a45      	ldr	r2, [pc, #276]	; (80031f8 <HAL_GPIO_Init+0x300>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x1f2>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e008      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030ea:	2307      	movs	r3, #7
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e004      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030fa:	2300      	movs	r3, #0
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	f002 0203 	and.w	r2, r2, #3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4093      	lsls	r3, r2
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310c:	4935      	ldr	r1, [pc, #212]	; (80031e4 <HAL_GPIO_Init+0x2ec>)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <HAL_GPIO_Init+0x304>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <HAL_GPIO_Init+0x304>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_GPIO_Init+0x304>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_GPIO_Init+0x304>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f67f aea2 	bls.w	8002f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e267      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e242      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x74>
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6f      	ldr	r2, [pc, #444]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fc3c 	bl	8001b68 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fc38 	bl	8001b68 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e207      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fc28 	bl	8001b68 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fc24 	bl	8001b68 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1f3      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b44      	ldr	r3, [pc, #272]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c7      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fe fbdd 	bl	8001b68 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe fbd9 	bl	8001b68 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a8      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fbbc 	bl	8001b68 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe fbb8 	bl	8001b68 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e187      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d036      	beq.n	800348c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe fb9c 	bl	8001b68 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe fb98 	bl	8001b68 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e167      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x200>
 8003452:	e01b      	b.n	800348c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7fe fb85 	bl	8001b68 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e00e      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fe fb81 	bl	8001b68 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d907      	bls.n	8003480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e150      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 8003474:	40023800 	.word	0x40023800
 8003478:	42470000 	.word	0x42470000
 800347c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ea      	bne.n	8003462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8097 	beq.w	80035c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	4b7d      	ldr	r3, [pc, #500]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a7c      	ldr	r2, [pc, #496]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b7a      	ldr	r3, [pc, #488]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a73      	ldr	r2, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fe fb41 	bl	8001b68 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe fb3d 	bl	8001b68 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e10c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x2ea>
 8003510:	4b64      	ldr	r3, [pc, #400]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	e01c      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x30c>
 8003526:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 8003540:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b55      	ldr	r3, [pc, #340]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a54      	ldr	r2, [pc, #336]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 0304 	bic.w	r3, r3, #4
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d015      	beq.n	800358c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fb02 	bl	8001b68 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe fafe 	bl	8001b68 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0cb      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <HAL_RCC_OscConfig+0x334>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe faec 	bl	8001b68 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe fae8 	bl	8001b68 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0b5      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ee      	bne.n	8003594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4a38      	ldr	r2, [pc, #224]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a1 	beq.w	8003714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d05c      	beq.n	8003698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d141      	bne.n	800366a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fabc 	bl	8001b68 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe fab8 	bl	8001b68 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e087      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fa91 	bl	8001b68 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe fa8d 	bl	8001b68 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e05c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x416>
 8003668:	e054      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fa7a 	bl	8001b68 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fa76 	bl	8001b68 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e045      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e038      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d028      	beq.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d121      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d11a      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7fe f9a8 	bl	8001b68 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe f9a4 	bl	8001b68 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe f908 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08007318 	.word	0x08007318
 80038e8:	20000028 	.word	0x20000028
 80038ec:	2000002c 	.word	0x2000002c

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b094      	sub	sp, #80	; 0x50
 80038f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
 80038fc:	2300      	movs	r3, #0
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003900:	2300      	movs	r3, #0
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003908:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d00d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x40>
 8003914:	2b08      	cmp	r3, #8
 8003916:	f200 80e1 	bhi.w	8003adc <HAL_RCC_GetSysClockFreq+0x1ec>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x3a>
 8003922:	e0db      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003926:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003928:	e0db      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x208>)
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800392e:	e0d8      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b6f      	ldr	r3, [pc, #444]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393a:	4b6d      	ldr	r3, [pc, #436]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	2200      	movs	r2, #0
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003950:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
 800395a:	2300      	movs	r3, #0
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
 800395e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	f04f 0000 	mov.w	r0, #0
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	0159      	lsls	r1, r3, #5
 8003970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003974:	0150      	lsls	r0, r2, #5
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4621      	mov	r1, r4
 800397c:	1a51      	subs	r1, r2, r1
 800397e:	6139      	str	r1, [r7, #16]
 8003980:	4629      	mov	r1, r5
 8003982:	eb63 0301 	sbc.w	r3, r3, r1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003994:	4659      	mov	r1, fp
 8003996:	018b      	lsls	r3, r1, #6
 8003998:	4651      	mov	r1, sl
 800399a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800399e:	4651      	mov	r1, sl
 80039a0:	018a      	lsls	r2, r1, #6
 80039a2:	4651      	mov	r1, sl
 80039a4:	ebb2 0801 	subs.w	r8, r2, r1
 80039a8:	4659      	mov	r1, fp
 80039aa:	eb63 0901 	sbc.w	r9, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	eb18 0303 	adds.w	r3, r8, r3
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	462b      	mov	r3, r5
 80039d0:	eb49 0303 	adc.w	r3, r9, r3
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039e2:	4629      	mov	r1, r5
 80039e4:	024b      	lsls	r3, r1, #9
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ec:	4621      	mov	r1, r4
 80039ee:	024a      	lsls	r2, r1, #9
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	2200      	movs	r2, #0
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a00:	f7fd f8da 	bl	8000bb8 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a0c:	e058      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	2200      	movs	r2, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	4611      	mov	r1, r2
 8003a1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
 8003a24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0159      	lsls	r1, r3, #5
 8003a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3a:	0150      	lsls	r0, r2, #5
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4641      	mov	r1, r8
 8003a42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a46:	4649      	mov	r1, r9
 8003a48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a60:	ebb2 040a 	subs.w	r4, r2, sl
 8003a64:	eb63 050b 	sbc.w	r5, r3, fp
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	00eb      	lsls	r3, r5, #3
 8003a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a76:	00e2      	lsls	r2, r4, #3
 8003a78:	4614      	mov	r4, r2
 8003a7a:	461d      	mov	r5, r3
 8003a7c:	4643      	mov	r3, r8
 8003a7e:	18e3      	adds	r3, r4, r3
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	464b      	mov	r3, r9
 8003a84:	eb45 0303 	adc.w	r3, r5, r3
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a96:	4629      	mov	r1, r5
 8003a98:	028b      	lsls	r3, r1, #10
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	028a      	lsls	r2, r1, #10
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	61fa      	str	r2, [r7, #28]
 8003ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab4:	f7fd f880 	bl	8000bb8 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3750      	adds	r7, #80	; 0x50
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200

08003afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000028 	.word	0x20000028

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a9b      	lsrs	r3, r3, #10
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08007328 	.word	0x08007328

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b40:	f7ff ffdc 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	08007328 	.word	0x08007328

08003b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e041      	b.n	8003bfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fdde 	bl	800174c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f000 f9a0 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x24>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e022      	b.n	8003c6e <HAL_TIM_PWM_Start+0x6a>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d109      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x3e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e015      	b.n	8003c6e <HAL_TIM_PWM_Start+0x6a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_PWM_Start+0x58>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e008      	b.n	8003c6e <HAL_TIM_PWM_Start+0x6a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e068      	b.n	8003d48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Start+0x82>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c84:	e013      	b.n	8003cae <HAL_TIM_PWM_Start+0xaa>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start+0x92>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c94:	e00b      	b.n	8003cae <HAL_TIM_PWM_Start+0xaa>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0xa2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	e003      	b.n	8003cae <HAL_TIM_PWM_Start+0xaa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb22 	bl	8004300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_TIM_PWM_Start+0x14c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_TIM_PWM_Start+0x14c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x10e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x10e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <HAL_TIM_PWM_Start+0x150>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x10e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_TIM_PWM_Start+0x154>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x10e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <HAL_TIM_PWM_Start+0x158>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x10e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_TIM_PWM_Start+0x15c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d010      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	e007      	b.n	8003d46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40014000 	.word	0x40014000

08003d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0ae      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	f200 809f 	bhi.w	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003ed1 	.word	0x08003ed1
 8003da0:	08003ed1 	.word	0x08003ed1
 8003da4:	08003ed1 	.word	0x08003ed1
 8003da8:	08003e0d 	.word	0x08003e0d
 8003dac:	08003ed1 	.word	0x08003ed1
 8003db0:	08003ed1 	.word	0x08003ed1
 8003db4:	08003ed1 	.word	0x08003ed1
 8003db8:	08003e4f 	.word	0x08003e4f
 8003dbc:	08003ed1 	.word	0x08003ed1
 8003dc0:	08003ed1 	.word	0x08003ed1
 8003dc4:	08003ed1 	.word	0x08003ed1
 8003dc8:	08003e8f 	.word	0x08003e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f908 	bl	8003fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	619a      	str	r2, [r3, #24]
      break;
 8003e0a:	e064      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f94e 	bl	80040b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      break;
 8003e4c:	e043      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f999 	bl	800418c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0208 	orr.w	r2, r2, #8
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0204 	bic.w	r2, r2, #4
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      break;
 8003e8c:	e023      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f9e3 	bl	8004260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	61da      	str	r2, [r3, #28]
      break;
 8003ece:	e002      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a34      	ldr	r2, [pc, #208]	; (8003fcc <TIM_Base_SetConfig+0xe4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00f      	beq.n	8003f20 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d00b      	beq.n	8003f20 <TIM_Base_SetConfig+0x38>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a31      	ldr	r2, [pc, #196]	; (8003fd0 <TIM_Base_SetConfig+0xe8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d007      	beq.n	8003f20 <TIM_Base_SetConfig+0x38>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a30      	ldr	r2, [pc, #192]	; (8003fd4 <TIM_Base_SetConfig+0xec>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0x38>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <TIM_Base_SetConfig+0xf0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d108      	bne.n	8003f32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <TIM_Base_SetConfig+0xe4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01b      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d017      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <TIM_Base_SetConfig+0xe8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_Base_SetConfig+0xec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <TIM_Base_SetConfig+0xf0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <TIM_Base_SetConfig+0xf4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <TIM_Base_SetConfig+0xf8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <TIM_Base_SetConfig+0xfc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <TIM_Base_SetConfig+0xe4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d103      	bne.n	8003fb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	615a      	str	r2, [r3, #20]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800

08003fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0302 	bic.w	r3, r3, #2
 8004030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <TIM_OC1_SetConfig+0xc8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10c      	bne.n	800405e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0308 	bic.w	r3, r3, #8
 800404a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <TIM_OC1_SetConfig+0xc8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010000 	.word	0x40010000

080040b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0210 	bic.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0320 	bic.w	r3, r3, #32
 80040fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <TIM_OC2_SetConfig+0xd4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10d      	bne.n	8004130 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <TIM_OC2_SetConfig+0xd4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d113      	bne.n	8004160 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000

0800418c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <TIM_OC3_SetConfig+0xd0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10d      	bne.n	8004206 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <TIM_OC3_SetConfig+0xd0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40010000 	.word	0x40010000

08004260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a10      	ldr	r2, [pc, #64]	; (80042fc <TIM_OC4_SetConfig+0x9c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000

08004300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e050      	b.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d013      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a13      	ldr	r2, [pc, #76]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10c      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40010000 	.word	0x40010000
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40000c00 	.word	0x40000c00
 8004424:	40014000 	.word	0x40014000

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd f99c 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f829 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	; 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff faea 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7ff fad1 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	; 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004608:	f7fc fad6 	bl	8000bb8 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	; 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469e:	f7fc fa8b 	bl	8000bb8 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	; 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475a:	f7fc fa2d 	bl	8000bb8 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e106      	b.n	800499c <UART_SetConfig+0x4d8>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800481c:	f7fc f9cc 	bl	8000bb8 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ba:	f7fc f97d 	bl	8000bb8 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2264      	movs	r2, #100	; 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	1acb      	subs	r3, r1, r3
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	3332      	adds	r3, #50	; 0x32
 80048d8:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	673b      	str	r3, [r7, #112]	; 0x70
 80048ee:	677a      	str	r2, [r7, #116]	; 0x74
 80048f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	415b      	adcs	r3, r3
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	464b      	mov	r3, r9
 8004938:	460a      	mov	r2, r1
 800493a:	eb42 0303 	adc.w	r3, r2, r3
 800493e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	663b      	str	r3, [r7, #96]	; 0x60
 800494a:	667a      	str	r2, [r7, #100]	; 0x64
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800496a:	f7fc f925 	bl	8000bb8 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a2:	46bd      	mov	sp, r7
 80049a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <__cvt>:
 80049ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	ec55 4b10 	vmov	r4, r5, d0
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	460e      	mov	r6, r1
 80049b8:	4619      	mov	r1, r3
 80049ba:	462b      	mov	r3, r5
 80049bc:	bfbb      	ittet	lt
 80049be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049c2:	461d      	movlt	r5, r3
 80049c4:	2300      	movge	r3, #0
 80049c6:	232d      	movlt	r3, #45	; 0x2d
 80049c8:	700b      	strb	r3, [r1, #0]
 80049ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049d0:	4691      	mov	r9, r2
 80049d2:	f023 0820 	bic.w	r8, r3, #32
 80049d6:	bfbc      	itt	lt
 80049d8:	4622      	movlt	r2, r4
 80049da:	4614      	movlt	r4, r2
 80049dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049e0:	d005      	beq.n	80049ee <__cvt+0x42>
 80049e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049e6:	d100      	bne.n	80049ea <__cvt+0x3e>
 80049e8:	3601      	adds	r6, #1
 80049ea:	2102      	movs	r1, #2
 80049ec:	e000      	b.n	80049f0 <__cvt+0x44>
 80049ee:	2103      	movs	r1, #3
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	ab02      	add	r3, sp, #8
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	ec45 4b10 	vmov	d0, r4, r5
 80049fc:	4653      	mov	r3, sl
 80049fe:	4632      	mov	r2, r6
 8004a00:	f000 fe36 	bl	8005670 <_dtoa_r>
 8004a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a08:	4607      	mov	r7, r0
 8004a0a:	d102      	bne.n	8004a12 <__cvt+0x66>
 8004a0c:	f019 0f01 	tst.w	r9, #1
 8004a10:	d022      	beq.n	8004a58 <__cvt+0xac>
 8004a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a16:	eb07 0906 	add.w	r9, r7, r6
 8004a1a:	d110      	bne.n	8004a3e <__cvt+0x92>
 8004a1c:	783b      	ldrb	r3, [r7, #0]
 8004a1e:	2b30      	cmp	r3, #48	; 0x30
 8004a20:	d10a      	bne.n	8004a38 <__cvt+0x8c>
 8004a22:	2200      	movs	r2, #0
 8004a24:	2300      	movs	r3, #0
 8004a26:	4620      	mov	r0, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7fc f855 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a2e:	b918      	cbnz	r0, 8004a38 <__cvt+0x8c>
 8004a30:	f1c6 0601 	rsb	r6, r6, #1
 8004a34:	f8ca 6000 	str.w	r6, [sl]
 8004a38:	f8da 3000 	ldr.w	r3, [sl]
 8004a3c:	4499      	add	r9, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2300      	movs	r3, #0
 8004a42:	4620      	mov	r0, r4
 8004a44:	4629      	mov	r1, r5
 8004a46:	f7fc f847 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a4a:	b108      	cbz	r0, 8004a50 <__cvt+0xa4>
 8004a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a50:	2230      	movs	r2, #48	; 0x30
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	454b      	cmp	r3, r9
 8004a56:	d307      	bcc.n	8004a68 <__cvt+0xbc>
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a5c:	1bdb      	subs	r3, r3, r7
 8004a5e:	4638      	mov	r0, r7
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	b004      	add	sp, #16
 8004a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	9103      	str	r1, [sp, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e7f0      	b.n	8004a52 <__cvt+0xa6>

08004a70 <__exponent>:
 8004a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a72:	4603      	mov	r3, r0
 8004a74:	2900      	cmp	r1, #0
 8004a76:	bfb8      	it	lt
 8004a78:	4249      	neglt	r1, r1
 8004a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8004a7e:	bfb4      	ite	lt
 8004a80:	222d      	movlt	r2, #45	; 0x2d
 8004a82:	222b      	movge	r2, #43	; 0x2b
 8004a84:	2909      	cmp	r1, #9
 8004a86:	7042      	strb	r2, [r0, #1]
 8004a88:	dd2a      	ble.n	8004ae0 <__exponent+0x70>
 8004a8a:	f10d 0207 	add.w	r2, sp, #7
 8004a8e:	4617      	mov	r7, r2
 8004a90:	260a      	movs	r6, #10
 8004a92:	4694      	mov	ip, r2
 8004a94:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a98:	fb06 1415 	mls	r4, r6, r5, r1
 8004a9c:	3430      	adds	r4, #48	; 0x30
 8004a9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	2c63      	cmp	r4, #99	; 0x63
 8004aa6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004aaa:	4629      	mov	r1, r5
 8004aac:	dcf1      	bgt.n	8004a92 <__exponent+0x22>
 8004aae:	3130      	adds	r1, #48	; 0x30
 8004ab0:	f1ac 0402 	sub.w	r4, ip, #2
 8004ab4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ab8:	1c41      	adds	r1, r0, #1
 8004aba:	4622      	mov	r2, r4
 8004abc:	42ba      	cmp	r2, r7
 8004abe:	d30a      	bcc.n	8004ad6 <__exponent+0x66>
 8004ac0:	f10d 0209 	add.w	r2, sp, #9
 8004ac4:	eba2 020c 	sub.w	r2, r2, ip
 8004ac8:	42bc      	cmp	r4, r7
 8004aca:	bf88      	it	hi
 8004acc:	2200      	movhi	r2, #0
 8004ace:	4413      	add	r3, r2
 8004ad0:	1a18      	subs	r0, r3, r0
 8004ad2:	b003      	add	sp, #12
 8004ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ada:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ade:	e7ed      	b.n	8004abc <__exponent+0x4c>
 8004ae0:	2330      	movs	r3, #48	; 0x30
 8004ae2:	3130      	adds	r1, #48	; 0x30
 8004ae4:	7083      	strb	r3, [r0, #2]
 8004ae6:	70c1      	strb	r1, [r0, #3]
 8004ae8:	1d03      	adds	r3, r0, #4
 8004aea:	e7f1      	b.n	8004ad0 <__exponent+0x60>

08004aec <_printf_float>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	ed2d 8b02 	vpush	{d8}
 8004af4:	b08d      	sub	sp, #52	; 0x34
 8004af6:	460c      	mov	r4, r1
 8004af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004afc:	4616      	mov	r6, r2
 8004afe:	461f      	mov	r7, r3
 8004b00:	4605      	mov	r5, r0
 8004b02:	f000 fcb5 	bl	8005470 <_localeconv_r>
 8004b06:	f8d0 a000 	ldr.w	sl, [r0]
 8004b0a:	4650      	mov	r0, sl
 8004b0c:	f7fb fbb8 	bl	8000280 <strlen>
 8004b10:	2300      	movs	r3, #0
 8004b12:	930a      	str	r3, [sp, #40]	; 0x28
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b20:	3307      	adds	r3, #7
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	f103 0208 	add.w	r2, r3, #8
 8004b2a:	f8c8 2000 	str.w	r2, [r8]
 8004b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b36:	9307      	str	r3, [sp, #28]
 8004b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b3c:	ee08 0a10 	vmov	s16, r0
 8004b40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b48:	4b9e      	ldr	r3, [pc, #632]	; (8004dc4 <_printf_float+0x2d8>)
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	f7fb fff5 	bl	8000b3c <__aeabi_dcmpun>
 8004b52:	bb88      	cbnz	r0, 8004bb8 <_printf_float+0xcc>
 8004b54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b58:	4b9a      	ldr	r3, [pc, #616]	; (8004dc4 <_printf_float+0x2d8>)
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	f7fb ffcf 	bl	8000b00 <__aeabi_dcmple>
 8004b62:	bb48      	cbnz	r0, 8004bb8 <_printf_float+0xcc>
 8004b64:	2200      	movs	r2, #0
 8004b66:	2300      	movs	r3, #0
 8004b68:	4640      	mov	r0, r8
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	f7fb ffbe 	bl	8000aec <__aeabi_dcmplt>
 8004b70:	b110      	cbz	r0, 8004b78 <_printf_float+0x8c>
 8004b72:	232d      	movs	r3, #45	; 0x2d
 8004b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b78:	4a93      	ldr	r2, [pc, #588]	; (8004dc8 <_printf_float+0x2dc>)
 8004b7a:	4b94      	ldr	r3, [pc, #592]	; (8004dcc <_printf_float+0x2e0>)
 8004b7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b80:	bf94      	ite	ls
 8004b82:	4690      	movls	r8, r2
 8004b84:	4698      	movhi	r8, r3
 8004b86:	2303      	movs	r3, #3
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	9b05      	ldr	r3, [sp, #20]
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	f04f 0900 	mov.w	r9, #0
 8004b96:	9700      	str	r7, [sp, #0]
 8004b98:	4633      	mov	r3, r6
 8004b9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 f9da 	bl	8004f58 <_printf_common>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f040 8090 	bne.w	8004cca <_printf_float+0x1de>
 8004baa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bae:	b00d      	add	sp, #52	; 0x34
 8004bb0:	ecbd 8b02 	vpop	{d8}
 8004bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	f7fb ffbc 	bl	8000b3c <__aeabi_dcmpun>
 8004bc4:	b140      	cbz	r0, 8004bd8 <_printf_float+0xec>
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfbc      	itt	lt
 8004bcc:	232d      	movlt	r3, #45	; 0x2d
 8004bce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bd2:	4a7f      	ldr	r2, [pc, #508]	; (8004dd0 <_printf_float+0x2e4>)
 8004bd4:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <_printf_float+0x2e8>)
 8004bd6:	e7d1      	b.n	8004b7c <_printf_float+0x90>
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bde:	9206      	str	r2, [sp, #24]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	d13f      	bne.n	8004c64 <_printf_float+0x178>
 8004be4:	2306      	movs	r3, #6
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	9b05      	ldr	r3, [sp, #20]
 8004bea:	6861      	ldr	r1, [r4, #4]
 8004bec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9303      	str	r3, [sp, #12]
 8004bf4:	ab0a      	add	r3, sp, #40	; 0x28
 8004bf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bfa:	ab09      	add	r3, sp, #36	; 0x24
 8004bfc:	ec49 8b10 	vmov	d0, r8, r9
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6022      	str	r2, [r4, #0]
 8004c04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7ff fecf 	bl	80049ac <__cvt>
 8004c0e:	9b06      	ldr	r3, [sp, #24]
 8004c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c12:	2b47      	cmp	r3, #71	; 0x47
 8004c14:	4680      	mov	r8, r0
 8004c16:	d108      	bne.n	8004c2a <_printf_float+0x13e>
 8004c18:	1cc8      	adds	r0, r1, #3
 8004c1a:	db02      	blt.n	8004c22 <_printf_float+0x136>
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	4299      	cmp	r1, r3
 8004c20:	dd41      	ble.n	8004ca6 <_printf_float+0x1ba>
 8004c22:	f1ab 0302 	sub.w	r3, fp, #2
 8004c26:	fa5f fb83 	uxtb.w	fp, r3
 8004c2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c2e:	d820      	bhi.n	8004c72 <_printf_float+0x186>
 8004c30:	3901      	subs	r1, #1
 8004c32:	465a      	mov	r2, fp
 8004c34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c38:	9109      	str	r1, [sp, #36]	; 0x24
 8004c3a:	f7ff ff19 	bl	8004a70 <__exponent>
 8004c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c40:	1813      	adds	r3, r2, r0
 8004c42:	2a01      	cmp	r2, #1
 8004c44:	4681      	mov	r9, r0
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	dc02      	bgt.n	8004c50 <_printf_float+0x164>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	07d2      	lsls	r2, r2, #31
 8004c4e:	d501      	bpl.n	8004c54 <_printf_float+0x168>
 8004c50:	3301      	adds	r3, #1
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d09c      	beq.n	8004b96 <_printf_float+0xaa>
 8004c5c:	232d      	movs	r3, #45	; 0x2d
 8004c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c62:	e798      	b.n	8004b96 <_printf_float+0xaa>
 8004c64:	9a06      	ldr	r2, [sp, #24]
 8004c66:	2a47      	cmp	r2, #71	; 0x47
 8004c68:	d1be      	bne.n	8004be8 <_printf_float+0xfc>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1bc      	bne.n	8004be8 <_printf_float+0xfc>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e7b9      	b.n	8004be6 <_printf_float+0xfa>
 8004c72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c76:	d118      	bne.n	8004caa <_printf_float+0x1be>
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	6863      	ldr	r3, [r4, #4]
 8004c7c:	dd0b      	ble.n	8004c96 <_printf_float+0x1aa>
 8004c7e:	6121      	str	r1, [r4, #16]
 8004c80:	b913      	cbnz	r3, 8004c88 <_printf_float+0x19c>
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	07d0      	lsls	r0, r2, #31
 8004c86:	d502      	bpl.n	8004c8e <_printf_float+0x1a2>
 8004c88:	3301      	adds	r3, #1
 8004c8a:	440b      	add	r3, r1
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c90:	f04f 0900 	mov.w	r9, #0
 8004c94:	e7de      	b.n	8004c54 <_printf_float+0x168>
 8004c96:	b913      	cbnz	r3, 8004c9e <_printf_float+0x1b2>
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	07d2      	lsls	r2, r2, #31
 8004c9c:	d501      	bpl.n	8004ca2 <_printf_float+0x1b6>
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	e7f4      	b.n	8004c8c <_printf_float+0x1a0>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e7f2      	b.n	8004c8c <_printf_float+0x1a0>
 8004ca6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cac:	4299      	cmp	r1, r3
 8004cae:	db05      	blt.n	8004cbc <_printf_float+0x1d0>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	6121      	str	r1, [r4, #16]
 8004cb4:	07d8      	lsls	r0, r3, #31
 8004cb6:	d5ea      	bpl.n	8004c8e <_printf_float+0x1a2>
 8004cb8:	1c4b      	adds	r3, r1, #1
 8004cba:	e7e7      	b.n	8004c8c <_printf_float+0x1a0>
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	bfd4      	ite	le
 8004cc0:	f1c1 0202 	rsble	r2, r1, #2
 8004cc4:	2201      	movgt	r2, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	e7e0      	b.n	8004c8c <_printf_float+0x1a0>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	055a      	lsls	r2, r3, #21
 8004cce:	d407      	bmi.n	8004ce0 <_printf_float+0x1f4>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	4642      	mov	r2, r8
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d12c      	bne.n	8004d38 <_printf_float+0x24c>
 8004cde:	e764      	b.n	8004baa <_printf_float+0xbe>
 8004ce0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ce4:	f240 80e0 	bls.w	8004ea8 <_printf_float+0x3bc>
 8004ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cec:	2200      	movs	r2, #0
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f7fb fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d034      	beq.n	8004d62 <_printf_float+0x276>
 8004cf8:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <_printf_float+0x2ec>)
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f af51 	beq.w	8004baa <_printf_float+0xbe>
 8004d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	db02      	blt.n	8004d16 <_printf_float+0x22a>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07d8      	lsls	r0, r3, #31
 8004d14:	d510      	bpl.n	8004d38 <_printf_float+0x24c>
 8004d16:	ee18 3a10 	vmov	r3, s16
 8004d1a:	4652      	mov	r2, sl
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f af41 	beq.w	8004baa <_printf_float+0xbe>
 8004d28:	f04f 0800 	mov.w	r8, #0
 8004d2c:	f104 091a 	add.w	r9, r4, #26
 8004d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4543      	cmp	r3, r8
 8004d36:	dc09      	bgt.n	8004d4c <_printf_float+0x260>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	079b      	lsls	r3, r3, #30
 8004d3c:	f100 8107 	bmi.w	8004f4e <_printf_float+0x462>
 8004d40:	68e0      	ldr	r0, [r4, #12]
 8004d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d44:	4298      	cmp	r0, r3
 8004d46:	bfb8      	it	lt
 8004d48:	4618      	movlt	r0, r3
 8004d4a:	e730      	b.n	8004bae <_printf_float+0xc2>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	464a      	mov	r2, r9
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af27 	beq.w	8004baa <_printf_float+0xbe>
 8004d5c:	f108 0801 	add.w	r8, r8, #1
 8004d60:	e7e6      	b.n	8004d30 <_printf_float+0x244>
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dc39      	bgt.n	8004ddc <_printf_float+0x2f0>
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <_printf_float+0x2ec>)
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af19 	beq.w	8004baa <_printf_float+0xbe>
 8004d78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d102      	bne.n	8004d86 <_printf_float+0x29a>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	07d9      	lsls	r1, r3, #31
 8004d84:	d5d8      	bpl.n	8004d38 <_printf_float+0x24c>
 8004d86:	ee18 3a10 	vmov	r3, s16
 8004d8a:	4652      	mov	r2, sl
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	f43f af09 	beq.w	8004baa <_printf_float+0xbe>
 8004d98:	f04f 0900 	mov.w	r9, #0
 8004d9c:	f104 0a1a 	add.w	sl, r4, #26
 8004da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da2:	425b      	negs	r3, r3
 8004da4:	454b      	cmp	r3, r9
 8004da6:	dc01      	bgt.n	8004dac <_printf_float+0x2c0>
 8004da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004daa:	e792      	b.n	8004cd2 <_printf_float+0x1e6>
 8004dac:	2301      	movs	r3, #1
 8004dae:	4652      	mov	r2, sl
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f aef7 	beq.w	8004baa <_printf_float+0xbe>
 8004dbc:	f109 0901 	add.w	r9, r9, #1
 8004dc0:	e7ee      	b.n	8004da0 <_printf_float+0x2b4>
 8004dc2:	bf00      	nop
 8004dc4:	7fefffff 	.word	0x7fefffff
 8004dc8:	08007338 	.word	0x08007338
 8004dcc:	0800733c 	.word	0x0800733c
 8004dd0:	08007340 	.word	0x08007340
 8004dd4:	08007344 	.word	0x08007344
 8004dd8:	08007348 	.word	0x08007348
 8004ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bfa8      	it	ge
 8004de4:	461a      	movge	r2, r3
 8004de6:	2a00      	cmp	r2, #0
 8004de8:	4691      	mov	r9, r2
 8004dea:	dc37      	bgt.n	8004e5c <_printf_float+0x370>
 8004dec:	f04f 0b00 	mov.w	fp, #0
 8004df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df4:	f104 021a 	add.w	r2, r4, #26
 8004df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	eba3 0309 	sub.w	r3, r3, r9
 8004e00:	455b      	cmp	r3, fp
 8004e02:	dc33      	bgt.n	8004e6c <_printf_float+0x380>
 8004e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	db3b      	blt.n	8004e84 <_printf_float+0x398>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	07da      	lsls	r2, r3, #31
 8004e10:	d438      	bmi.n	8004e84 <_printf_float+0x398>
 8004e12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e16:	eba2 0903 	sub.w	r9, r2, r3
 8004e1a:	9b05      	ldr	r3, [sp, #20]
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	4591      	cmp	r9, r2
 8004e20:	bfa8      	it	ge
 8004e22:	4691      	movge	r9, r2
 8004e24:	f1b9 0f00 	cmp.w	r9, #0
 8004e28:	dc35      	bgt.n	8004e96 <_printf_float+0x3aa>
 8004e2a:	f04f 0800 	mov.w	r8, #0
 8004e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e32:	f104 0a1a 	add.w	sl, r4, #26
 8004e36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	eba3 0309 	sub.w	r3, r3, r9
 8004e40:	4543      	cmp	r3, r8
 8004e42:	f77f af79 	ble.w	8004d38 <_printf_float+0x24c>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4652      	mov	r2, sl
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f aeaa 	beq.w	8004baa <_printf_float+0xbe>
 8004e56:	f108 0801 	add.w	r8, r8, #1
 8004e5a:	e7ec      	b.n	8004e36 <_printf_float+0x34a>
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4642      	mov	r2, r8
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	d1c0      	bne.n	8004dec <_printf_float+0x300>
 8004e6a:	e69e      	b.n	8004baa <_printf_float+0xbe>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	9205      	str	r2, [sp, #20]
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f ae97 	beq.w	8004baa <_printf_float+0xbe>
 8004e7c:	9a05      	ldr	r2, [sp, #20]
 8004e7e:	f10b 0b01 	add.w	fp, fp, #1
 8004e82:	e7b9      	b.n	8004df8 <_printf_float+0x30c>
 8004e84:	ee18 3a10 	vmov	r3, s16
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	d1be      	bne.n	8004e12 <_printf_float+0x326>
 8004e94:	e689      	b.n	8004baa <_printf_float+0xbe>
 8004e96:	9a05      	ldr	r2, [sp, #20]
 8004e98:	464b      	mov	r3, r9
 8004e9a:	4442      	add	r2, r8
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d1c1      	bne.n	8004e2a <_printf_float+0x33e>
 8004ea6:	e680      	b.n	8004baa <_printf_float+0xbe>
 8004ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eaa:	2a01      	cmp	r2, #1
 8004eac:	dc01      	bgt.n	8004eb2 <_printf_float+0x3c6>
 8004eae:	07db      	lsls	r3, r3, #31
 8004eb0:	d53a      	bpl.n	8004f28 <_printf_float+0x43c>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae74 	beq.w	8004baa <_printf_float+0xbe>
 8004ec2:	ee18 3a10 	vmov	r3, s16
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f ae6b 	beq.w	8004baa <_printf_float+0xbe>
 8004ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2300      	movs	r3, #0
 8004edc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ee0:	f7fb fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee4:	b9d8      	cbnz	r0, 8004f1e <_printf_float+0x432>
 8004ee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004eea:	f108 0201 	add.w	r2, r8, #1
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d10e      	bne.n	8004f16 <_printf_float+0x42a>
 8004ef8:	e657      	b.n	8004baa <_printf_float+0xbe>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f ae50 	beq.w	8004baa <_printf_float+0xbe>
 8004f0a:	f108 0801 	add.w	r8, r8, #1
 8004f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f10:	3b01      	subs	r3, #1
 8004f12:	4543      	cmp	r3, r8
 8004f14:	dcf1      	bgt.n	8004efa <_printf_float+0x40e>
 8004f16:	464b      	mov	r3, r9
 8004f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f1c:	e6da      	b.n	8004cd4 <_printf_float+0x1e8>
 8004f1e:	f04f 0800 	mov.w	r8, #0
 8004f22:	f104 0a1a 	add.w	sl, r4, #26
 8004f26:	e7f2      	b.n	8004f0e <_printf_float+0x422>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	e7df      	b.n	8004eee <_printf_float+0x402>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	464a      	mov	r2, r9
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f ae36 	beq.w	8004baa <_printf_float+0xbe>
 8004f3e:	f108 0801 	add.w	r8, r8, #1
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	4543      	cmp	r3, r8
 8004f4a:	dcf0      	bgt.n	8004f2e <_printf_float+0x442>
 8004f4c:	e6f8      	b.n	8004d40 <_printf_float+0x254>
 8004f4e:	f04f 0800 	mov.w	r8, #0
 8004f52:	f104 0919 	add.w	r9, r4, #25
 8004f56:	e7f4      	b.n	8004f42 <_printf_float+0x456>

08004f58 <_printf_common>:
 8004f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	4699      	mov	r9, r3
 8004f60:	688a      	ldr	r2, [r1, #8]
 8004f62:	690b      	ldr	r3, [r1, #16]
 8004f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	bfb8      	it	lt
 8004f6c:	4613      	movlt	r3, r2
 8004f6e:	6033      	str	r3, [r6, #0]
 8004f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f74:	4607      	mov	r7, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	b10a      	cbz	r2, 8004f7e <_printf_common+0x26>
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	0699      	lsls	r1, r3, #26
 8004f82:	bf42      	ittt	mi
 8004f84:	6833      	ldrmi	r3, [r6, #0]
 8004f86:	3302      	addmi	r3, #2
 8004f88:	6033      	strmi	r3, [r6, #0]
 8004f8a:	6825      	ldr	r5, [r4, #0]
 8004f8c:	f015 0506 	ands.w	r5, r5, #6
 8004f90:	d106      	bne.n	8004fa0 <_printf_common+0x48>
 8004f92:	f104 0a19 	add.w	sl, r4, #25
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	6832      	ldr	r2, [r6, #0]
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dc26      	bgt.n	8004fee <_printf_common+0x96>
 8004fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fa4:	1e13      	subs	r3, r2, #0
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	bf18      	it	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	0692      	lsls	r2, r2, #26
 8004fae:	d42b      	bmi.n	8005008 <_printf_common+0xb0>
 8004fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	47c0      	blx	r8
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d01e      	beq.n	8004ffc <_printf_common+0xa4>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6922      	ldr	r2, [r4, #16]
 8004fc2:	f003 0306 	and.w	r3, r3, #6
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf02      	ittt	eq
 8004fca:	68e5      	ldreq	r5, [r4, #12]
 8004fcc:	6833      	ldreq	r3, [r6, #0]
 8004fce:	1aed      	subeq	r5, r5, r3
 8004fd0:	68a3      	ldr	r3, [r4, #8]
 8004fd2:	bf0c      	ite	eq
 8004fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fd8:	2500      	movne	r5, #0
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bfc4      	itt	gt
 8004fde:	1a9b      	subgt	r3, r3, r2
 8004fe0:	18ed      	addgt	r5, r5, r3
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	341a      	adds	r4, #26
 8004fe6:	42b5      	cmp	r5, r6
 8004fe8:	d11a      	bne.n	8005020 <_printf_common+0xc8>
 8004fea:	2000      	movs	r0, #0
 8004fec:	e008      	b.n	8005000 <_printf_common+0xa8>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4652      	mov	r2, sl
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	47c0      	blx	r8
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d103      	bne.n	8005004 <_printf_common+0xac>
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	3501      	adds	r5, #1
 8005006:	e7c6      	b.n	8004f96 <_printf_common+0x3e>
 8005008:	18e1      	adds	r1, r4, r3
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	2030      	movs	r0, #48	; 0x30
 800500e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005012:	4422      	add	r2, r4
 8005014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800501c:	3302      	adds	r3, #2
 800501e:	e7c7      	b.n	8004fb0 <_printf_common+0x58>
 8005020:	2301      	movs	r3, #1
 8005022:	4622      	mov	r2, r4
 8005024:	4649      	mov	r1, r9
 8005026:	4638      	mov	r0, r7
 8005028:	47c0      	blx	r8
 800502a:	3001      	adds	r0, #1
 800502c:	d0e6      	beq.n	8004ffc <_printf_common+0xa4>
 800502e:	3601      	adds	r6, #1
 8005030:	e7d9      	b.n	8004fe6 <_printf_common+0x8e>
	...

08005034 <_printf_i>:
 8005034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	7e0f      	ldrb	r7, [r1, #24]
 800503a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800503c:	2f78      	cmp	r7, #120	; 0x78
 800503e:	4691      	mov	r9, r2
 8005040:	4680      	mov	r8, r0
 8005042:	460c      	mov	r4, r1
 8005044:	469a      	mov	sl, r3
 8005046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800504a:	d807      	bhi.n	800505c <_printf_i+0x28>
 800504c:	2f62      	cmp	r7, #98	; 0x62
 800504e:	d80a      	bhi.n	8005066 <_printf_i+0x32>
 8005050:	2f00      	cmp	r7, #0
 8005052:	f000 80d4 	beq.w	80051fe <_printf_i+0x1ca>
 8005056:	2f58      	cmp	r7, #88	; 0x58
 8005058:	f000 80c0 	beq.w	80051dc <_printf_i+0x1a8>
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005064:	e03a      	b.n	80050dc <_printf_i+0xa8>
 8005066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800506a:	2b15      	cmp	r3, #21
 800506c:	d8f6      	bhi.n	800505c <_printf_i+0x28>
 800506e:	a101      	add	r1, pc, #4	; (adr r1, 8005074 <_printf_i+0x40>)
 8005070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005074:	080050cd 	.word	0x080050cd
 8005078:	080050e1 	.word	0x080050e1
 800507c:	0800505d 	.word	0x0800505d
 8005080:	0800505d 	.word	0x0800505d
 8005084:	0800505d 	.word	0x0800505d
 8005088:	0800505d 	.word	0x0800505d
 800508c:	080050e1 	.word	0x080050e1
 8005090:	0800505d 	.word	0x0800505d
 8005094:	0800505d 	.word	0x0800505d
 8005098:	0800505d 	.word	0x0800505d
 800509c:	0800505d 	.word	0x0800505d
 80050a0:	080051e5 	.word	0x080051e5
 80050a4:	0800510d 	.word	0x0800510d
 80050a8:	0800519f 	.word	0x0800519f
 80050ac:	0800505d 	.word	0x0800505d
 80050b0:	0800505d 	.word	0x0800505d
 80050b4:	08005207 	.word	0x08005207
 80050b8:	0800505d 	.word	0x0800505d
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	0800505d 	.word	0x0800505d
 80050c4:	0800505d 	.word	0x0800505d
 80050c8:	080051a7 	.word	0x080051a7
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	1d1a      	adds	r2, r3, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	602a      	str	r2, [r5, #0]
 80050d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050dc:	2301      	movs	r3, #1
 80050de:	e09f      	b.n	8005220 <_printf_i+0x1ec>
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	0607      	lsls	r7, r0, #24
 80050e6:	f103 0104 	add.w	r1, r3, #4
 80050ea:	6029      	str	r1, [r5, #0]
 80050ec:	d501      	bpl.n	80050f2 <_printf_i+0xbe>
 80050ee:	681e      	ldr	r6, [r3, #0]
 80050f0:	e003      	b.n	80050fa <_printf_i+0xc6>
 80050f2:	0646      	lsls	r6, r0, #25
 80050f4:	d5fb      	bpl.n	80050ee <_printf_i+0xba>
 80050f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050fa:	2e00      	cmp	r6, #0
 80050fc:	da03      	bge.n	8005106 <_printf_i+0xd2>
 80050fe:	232d      	movs	r3, #45	; 0x2d
 8005100:	4276      	negs	r6, r6
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005106:	485a      	ldr	r0, [pc, #360]	; (8005270 <_printf_i+0x23c>)
 8005108:	230a      	movs	r3, #10
 800510a:	e012      	b.n	8005132 <_printf_i+0xfe>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	6820      	ldr	r0, [r4, #0]
 8005110:	1d19      	adds	r1, r3, #4
 8005112:	6029      	str	r1, [r5, #0]
 8005114:	0605      	lsls	r5, r0, #24
 8005116:	d501      	bpl.n	800511c <_printf_i+0xe8>
 8005118:	681e      	ldr	r6, [r3, #0]
 800511a:	e002      	b.n	8005122 <_printf_i+0xee>
 800511c:	0641      	lsls	r1, r0, #25
 800511e:	d5fb      	bpl.n	8005118 <_printf_i+0xe4>
 8005120:	881e      	ldrh	r6, [r3, #0]
 8005122:	4853      	ldr	r0, [pc, #332]	; (8005270 <_printf_i+0x23c>)
 8005124:	2f6f      	cmp	r7, #111	; 0x6f
 8005126:	bf0c      	ite	eq
 8005128:	2308      	moveq	r3, #8
 800512a:	230a      	movne	r3, #10
 800512c:	2100      	movs	r1, #0
 800512e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005132:	6865      	ldr	r5, [r4, #4]
 8005134:	60a5      	str	r5, [r4, #8]
 8005136:	2d00      	cmp	r5, #0
 8005138:	bfa2      	ittt	ge
 800513a:	6821      	ldrge	r1, [r4, #0]
 800513c:	f021 0104 	bicge.w	r1, r1, #4
 8005140:	6021      	strge	r1, [r4, #0]
 8005142:	b90e      	cbnz	r6, 8005148 <_printf_i+0x114>
 8005144:	2d00      	cmp	r5, #0
 8005146:	d04b      	beq.n	80051e0 <_printf_i+0x1ac>
 8005148:	4615      	mov	r5, r2
 800514a:	fbb6 f1f3 	udiv	r1, r6, r3
 800514e:	fb03 6711 	mls	r7, r3, r1, r6
 8005152:	5dc7      	ldrb	r7, [r0, r7]
 8005154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005158:	4637      	mov	r7, r6
 800515a:	42bb      	cmp	r3, r7
 800515c:	460e      	mov	r6, r1
 800515e:	d9f4      	bls.n	800514a <_printf_i+0x116>
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10b      	bne.n	800517c <_printf_i+0x148>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07de      	lsls	r6, r3, #31
 8005168:	d508      	bpl.n	800517c <_printf_i+0x148>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	6861      	ldr	r1, [r4, #4]
 800516e:	4299      	cmp	r1, r3
 8005170:	bfde      	ittt	le
 8005172:	2330      	movle	r3, #48	; 0x30
 8005174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800517c:	1b52      	subs	r2, r2, r5
 800517e:	6122      	str	r2, [r4, #16]
 8005180:	f8cd a000 	str.w	sl, [sp]
 8005184:	464b      	mov	r3, r9
 8005186:	aa03      	add	r2, sp, #12
 8005188:	4621      	mov	r1, r4
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff fee4 	bl	8004f58 <_printf_common>
 8005190:	3001      	adds	r0, #1
 8005192:	d14a      	bne.n	800522a <_printf_i+0x1f6>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	b004      	add	sp, #16
 800519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f043 0320 	orr.w	r3, r3, #32
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	4833      	ldr	r0, [pc, #204]	; (8005274 <_printf_i+0x240>)
 80051a8:	2778      	movs	r7, #120	; 0x78
 80051aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	6829      	ldr	r1, [r5, #0]
 80051b2:	061f      	lsls	r7, r3, #24
 80051b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051b8:	d402      	bmi.n	80051c0 <_printf_i+0x18c>
 80051ba:	065f      	lsls	r7, r3, #25
 80051bc:	bf48      	it	mi
 80051be:	b2b6      	uxthmi	r6, r6
 80051c0:	07df      	lsls	r7, r3, #31
 80051c2:	bf48      	it	mi
 80051c4:	f043 0320 	orrmi.w	r3, r3, #32
 80051c8:	6029      	str	r1, [r5, #0]
 80051ca:	bf48      	it	mi
 80051cc:	6023      	strmi	r3, [r4, #0]
 80051ce:	b91e      	cbnz	r6, 80051d8 <_printf_i+0x1a4>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	2310      	movs	r3, #16
 80051da:	e7a7      	b.n	800512c <_printf_i+0xf8>
 80051dc:	4824      	ldr	r0, [pc, #144]	; (8005270 <_printf_i+0x23c>)
 80051de:	e7e4      	b.n	80051aa <_printf_i+0x176>
 80051e0:	4615      	mov	r5, r2
 80051e2:	e7bd      	b.n	8005160 <_printf_i+0x12c>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	6826      	ldr	r6, [r4, #0]
 80051e8:	6961      	ldr	r1, [r4, #20]
 80051ea:	1d18      	adds	r0, r3, #4
 80051ec:	6028      	str	r0, [r5, #0]
 80051ee:	0635      	lsls	r5, r6, #24
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	d501      	bpl.n	80051f8 <_printf_i+0x1c4>
 80051f4:	6019      	str	r1, [r3, #0]
 80051f6:	e002      	b.n	80051fe <_printf_i+0x1ca>
 80051f8:	0670      	lsls	r0, r6, #25
 80051fa:	d5fb      	bpl.n	80051f4 <_printf_i+0x1c0>
 80051fc:	8019      	strh	r1, [r3, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	4615      	mov	r5, r2
 8005204:	e7bc      	b.n	8005180 <_printf_i+0x14c>
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	1d1a      	adds	r2, r3, #4
 800520a:	602a      	str	r2, [r5, #0]
 800520c:	681d      	ldr	r5, [r3, #0]
 800520e:	6862      	ldr	r2, [r4, #4]
 8005210:	2100      	movs	r1, #0
 8005212:	4628      	mov	r0, r5
 8005214:	f7fa ffe4 	bl	80001e0 <memchr>
 8005218:	b108      	cbz	r0, 800521e <_printf_i+0x1ea>
 800521a:	1b40      	subs	r0, r0, r5
 800521c:	6060      	str	r0, [r4, #4]
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	2300      	movs	r3, #0
 8005224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005228:	e7aa      	b.n	8005180 <_printf_i+0x14c>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	462a      	mov	r2, r5
 800522e:	4649      	mov	r1, r9
 8005230:	4640      	mov	r0, r8
 8005232:	47d0      	blx	sl
 8005234:	3001      	adds	r0, #1
 8005236:	d0ad      	beq.n	8005194 <_printf_i+0x160>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	079b      	lsls	r3, r3, #30
 800523c:	d413      	bmi.n	8005266 <_printf_i+0x232>
 800523e:	68e0      	ldr	r0, [r4, #12]
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	4298      	cmp	r0, r3
 8005244:	bfb8      	it	lt
 8005246:	4618      	movlt	r0, r3
 8005248:	e7a6      	b.n	8005198 <_printf_i+0x164>
 800524a:	2301      	movs	r3, #1
 800524c:	4632      	mov	r2, r6
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	47d0      	blx	sl
 8005254:	3001      	adds	r0, #1
 8005256:	d09d      	beq.n	8005194 <_printf_i+0x160>
 8005258:	3501      	adds	r5, #1
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	9903      	ldr	r1, [sp, #12]
 800525e:	1a5b      	subs	r3, r3, r1
 8005260:	42ab      	cmp	r3, r5
 8005262:	dcf2      	bgt.n	800524a <_printf_i+0x216>
 8005264:	e7eb      	b.n	800523e <_printf_i+0x20a>
 8005266:	2500      	movs	r5, #0
 8005268:	f104 0619 	add.w	r6, r4, #25
 800526c:	e7f5      	b.n	800525a <_printf_i+0x226>
 800526e:	bf00      	nop
 8005270:	0800734a 	.word	0x0800734a
 8005274:	0800735b 	.word	0x0800735b

08005278 <std>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	e9c0 3300 	strd	r3, r3, [r0]
 8005282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005286:	6083      	str	r3, [r0, #8]
 8005288:	8181      	strh	r1, [r0, #12]
 800528a:	6643      	str	r3, [r0, #100]	; 0x64
 800528c:	81c2      	strh	r2, [r0, #14]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	4619      	mov	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f000 f8e2 	bl	800545e <memset>
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std+0x38>)
 800529c:	6263      	str	r3, [r4, #36]	; 0x24
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std+0x3c>)
 80052a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x40>)
 80052a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x44>)
 80052a8:	6224      	str	r4, [r4, #32]
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	080053d9 	.word	0x080053d9
 80052b4:	080053fb 	.word	0x080053fb
 80052b8:	08005433 	.word	0x08005433
 80052bc:	08005457 	.word	0x08005457

080052c0 <stdio_exit_handler>:
 80052c0:	4a02      	ldr	r2, [pc, #8]	; (80052cc <stdio_exit_handler+0xc>)
 80052c2:	4903      	ldr	r1, [pc, #12]	; (80052d0 <stdio_exit_handler+0x10>)
 80052c4:	4803      	ldr	r0, [pc, #12]	; (80052d4 <stdio_exit_handler+0x14>)
 80052c6:	f000 b869 	b.w	800539c <_fwalk_sglue>
 80052ca:	bf00      	nop
 80052cc:	20000034 	.word	0x20000034
 80052d0:	08006c59 	.word	0x08006c59
 80052d4:	20000040 	.word	0x20000040

080052d8 <cleanup_stdio>:
 80052d8:	6841      	ldr	r1, [r0, #4]
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <cleanup_stdio+0x34>)
 80052dc:	4299      	cmp	r1, r3
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	d001      	beq.n	80052e8 <cleanup_stdio+0x10>
 80052e4:	f001 fcb8 	bl	8006c58 <_fflush_r>
 80052e8:	68a1      	ldr	r1, [r4, #8]
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <cleanup_stdio+0x38>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d002      	beq.n	80052f6 <cleanup_stdio+0x1e>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f001 fcb1 	bl	8006c58 <_fflush_r>
 80052f6:	68e1      	ldr	r1, [r4, #12]
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <cleanup_stdio+0x3c>)
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d004      	beq.n	8005308 <cleanup_stdio+0x30>
 80052fe:	4620      	mov	r0, r4
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	f001 bca8 	b.w	8006c58 <_fflush_r>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	200012f8 	.word	0x200012f8
 8005310:	20001360 	.word	0x20001360
 8005314:	200013c8 	.word	0x200013c8

08005318 <global_stdio_init.part.0>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <global_stdio_init.part.0+0x30>)
 800531c:	4c0b      	ldr	r4, [pc, #44]	; (800534c <global_stdio_init.part.0+0x34>)
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <global_stdio_init.part.0+0x38>)
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	2200      	movs	r2, #0
 8005326:	2104      	movs	r1, #4
 8005328:	f7ff ffa6 	bl	8005278 <std>
 800532c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005330:	2201      	movs	r2, #1
 8005332:	2109      	movs	r1, #9
 8005334:	f7ff ffa0 	bl	8005278 <std>
 8005338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800533c:	2202      	movs	r2, #2
 800533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005342:	2112      	movs	r1, #18
 8005344:	f7ff bf98 	b.w	8005278 <std>
 8005348:	20001430 	.word	0x20001430
 800534c:	200012f8 	.word	0x200012f8
 8005350:	080052c1 	.word	0x080052c1

08005354 <__sfp_lock_acquire>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__sfp_lock_acquire+0x8>)
 8005356:	f000 b8ff 	b.w	8005558 <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	20001439 	.word	0x20001439

08005360 <__sfp_lock_release>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__sfp_lock_release+0x8>)
 8005362:	f000 b8fa 	b.w	800555a <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	20001439 	.word	0x20001439

0800536c <__sinit>:
 800536c:	b510      	push	{r4, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f7ff fff0 	bl	8005354 <__sfp_lock_acquire>
 8005374:	6a23      	ldr	r3, [r4, #32]
 8005376:	b11b      	cbz	r3, 8005380 <__sinit+0x14>
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f7ff bff0 	b.w	8005360 <__sfp_lock_release>
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__sinit+0x28>)
 8005382:	6223      	str	r3, [r4, #32]
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__sinit+0x2c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f5      	bne.n	8005378 <__sinit+0xc>
 800538c:	f7ff ffc4 	bl	8005318 <global_stdio_init.part.0>
 8005390:	e7f2      	b.n	8005378 <__sinit+0xc>
 8005392:	bf00      	nop
 8005394:	080052d9 	.word	0x080052d9
 8005398:	20001430 	.word	0x20001430

0800539c <_fwalk_sglue>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	4607      	mov	r7, r0
 80053a2:	4688      	mov	r8, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	2600      	movs	r6, #0
 80053a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ac:	f1b9 0901 	subs.w	r9, r9, #1
 80053b0:	d505      	bpl.n	80053be <_fwalk_sglue+0x22>
 80053b2:	6824      	ldr	r4, [r4, #0]
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d1f7      	bne.n	80053a8 <_fwalk_sglue+0xc>
 80053b8:	4630      	mov	r0, r6
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d907      	bls.n	80053d4 <_fwalk_sglue+0x38>
 80053c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c8:	3301      	adds	r3, #1
 80053ca:	d003      	beq.n	80053d4 <_fwalk_sglue+0x38>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	4306      	orrs	r6, r0
 80053d4:	3568      	adds	r5, #104	; 0x68
 80053d6:	e7e9      	b.n	80053ac <_fwalk_sglue+0x10>

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 f86c 	bl	80054bc <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f000 f840 	bl	8005498 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b857 	b.w	80054e0 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f82d 	bl	8005498 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	; 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b80d 	b.w	8005478 <_close_r>

0800545e <memset>:
 800545e:	4402      	add	r2, r0
 8005460:	4603      	mov	r3, r0
 8005462:	4293      	cmp	r3, r2
 8005464:	d100      	bne.n	8005468 <memset+0xa>
 8005466:	4770      	bx	lr
 8005468:	f803 1b01 	strb.w	r1, [r3], #1
 800546c:	e7f9      	b.n	8005462 <memset+0x4>
	...

08005470 <_localeconv_r>:
 8005470:	4800      	ldr	r0, [pc, #0]	; (8005474 <_localeconv_r+0x4>)
 8005472:	4770      	bx	lr
 8005474:	20000180 	.word	0x20000180

08005478 <_close_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_close_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fc fa63 	bl	800194e <_close>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_close_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_close_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20001434 	.word	0x20001434

08005498 <_lseek_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d07      	ldr	r5, [pc, #28]	; (80054b8 <_lseek_r+0x20>)
 800549c:	4604      	mov	r4, r0
 800549e:	4608      	mov	r0, r1
 80054a0:	4611      	mov	r1, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f7fc fa78 	bl	800199c <_lseek>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_lseek_r+0x1e>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_lseek_r+0x1e>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20001434 	.word	0x20001434

080054bc <_read_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	; (80054dc <_read_r+0x20>)
 80054c0:	4604      	mov	r4, r0
 80054c2:	4608      	mov	r0, r1
 80054c4:	4611      	mov	r1, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fc fa06 	bl	80018dc <_read>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_read_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_read_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20001434 	.word	0x20001434

080054e0 <_write_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d07      	ldr	r5, [pc, #28]	; (8005500 <_write_r+0x20>)
 80054e4:	4604      	mov	r4, r0
 80054e6:	4608      	mov	r0, r1
 80054e8:	4611      	mov	r1, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f7fc fa11 	bl	8001916 <_write>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_write_r+0x1e>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_write_r+0x1e>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	20001434 	.word	0x20001434

08005504 <__errno>:
 8005504:	4b01      	ldr	r3, [pc, #4]	; (800550c <__errno+0x8>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	2000008c 	.word	0x2000008c

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	; (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	; (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	; (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	; (8005554 <__libc_init_array+0x44>)
 8005524:	f001 feec 	bl	8007300 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	080076b4 	.word	0x080076b4
 800554c:	080076b4 	.word	0x080076b4
 8005550:	080076b4 	.word	0x080076b4
 8005554:	080076b8 	.word	0x080076b8

08005558 <__retarget_lock_acquire_recursive>:
 8005558:	4770      	bx	lr

0800555a <__retarget_lock_release_recursive>:
 800555a:	4770      	bx	lr

0800555c <quorem>:
 800555c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	6903      	ldr	r3, [r0, #16]
 8005562:	690c      	ldr	r4, [r1, #16]
 8005564:	42a3      	cmp	r3, r4
 8005566:	4607      	mov	r7, r0
 8005568:	db7e      	blt.n	8005668 <quorem+0x10c>
 800556a:	3c01      	subs	r4, #1
 800556c:	f101 0814 	add.w	r8, r1, #20
 8005570:	f100 0514 	add.w	r5, r0, #20
 8005574:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800557e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005582:	3301      	adds	r3, #1
 8005584:	429a      	cmp	r2, r3
 8005586:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800558a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800558e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005592:	d331      	bcc.n	80055f8 <quorem+0x9c>
 8005594:	f04f 0e00 	mov.w	lr, #0
 8005598:	4640      	mov	r0, r8
 800559a:	46ac      	mov	ip, r5
 800559c:	46f2      	mov	sl, lr
 800559e:	f850 2b04 	ldr.w	r2, [r0], #4
 80055a2:	b293      	uxth	r3, r2
 80055a4:	fb06 e303 	mla	r3, r6, r3, lr
 80055a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ac:	0c1a      	lsrs	r2, r3, #16
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ebaa 0303 	sub.w	r3, sl, r3
 80055b4:	f8dc a000 	ldr.w	sl, [ip]
 80055b8:	fa13 f38a 	uxtah	r3, r3, sl
 80055bc:	fb06 220e 	mla	r2, r6, lr, r2
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	9b00      	ldr	r3, [sp, #0]
 80055c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055c8:	b292      	uxth	r2, r2
 80055ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80055d6:	4581      	cmp	r9, r0
 80055d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055dc:	f84c 3b04 	str.w	r3, [ip], #4
 80055e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055e4:	d2db      	bcs.n	800559e <quorem+0x42>
 80055e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80055ea:	b92b      	cbnz	r3, 80055f8 <quorem+0x9c>
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	429d      	cmp	r5, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	d32c      	bcc.n	8005650 <quorem+0xf4>
 80055f6:	613c      	str	r4, [r7, #16]
 80055f8:	4638      	mov	r0, r7
 80055fa:	f001 f9a7 	bl	800694c <__mcmp>
 80055fe:	2800      	cmp	r0, #0
 8005600:	db22      	blt.n	8005648 <quorem+0xec>
 8005602:	3601      	adds	r6, #1
 8005604:	4629      	mov	r1, r5
 8005606:	2000      	movs	r0, #0
 8005608:	f858 2b04 	ldr.w	r2, [r8], #4
 800560c:	f8d1 c000 	ldr.w	ip, [r1]
 8005610:	b293      	uxth	r3, r2
 8005612:	1ac3      	subs	r3, r0, r3
 8005614:	0c12      	lsrs	r2, r2, #16
 8005616:	fa13 f38c 	uxtah	r3, r3, ip
 800561a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800561e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005622:	b29b      	uxth	r3, r3
 8005624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005628:	45c1      	cmp	r9, r8
 800562a:	f841 3b04 	str.w	r3, [r1], #4
 800562e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005632:	d2e9      	bcs.n	8005608 <quorem+0xac>
 8005634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800563c:	b922      	cbnz	r2, 8005648 <quorem+0xec>
 800563e:	3b04      	subs	r3, #4
 8005640:	429d      	cmp	r5, r3
 8005642:	461a      	mov	r2, r3
 8005644:	d30a      	bcc.n	800565c <quorem+0x100>
 8005646:	613c      	str	r4, [r7, #16]
 8005648:	4630      	mov	r0, r6
 800564a:	b003      	add	sp, #12
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	3b04      	subs	r3, #4
 8005654:	2a00      	cmp	r2, #0
 8005656:	d1ce      	bne.n	80055f6 <quorem+0x9a>
 8005658:	3c01      	subs	r4, #1
 800565a:	e7c9      	b.n	80055f0 <quorem+0x94>
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	3b04      	subs	r3, #4
 8005660:	2a00      	cmp	r2, #0
 8005662:	d1f0      	bne.n	8005646 <quorem+0xea>
 8005664:	3c01      	subs	r4, #1
 8005666:	e7eb      	b.n	8005640 <quorem+0xe4>
 8005668:	2000      	movs	r0, #0
 800566a:	e7ee      	b.n	800564a <quorem+0xee>
 800566c:	0000      	movs	r0, r0
	...

08005670 <_dtoa_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b04 	vpush	{d8-d9}
 8005678:	69c5      	ldr	r5, [r0, #28]
 800567a:	b093      	sub	sp, #76	; 0x4c
 800567c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005680:	ec57 6b10 	vmov	r6, r7, d0
 8005684:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005688:	9107      	str	r1, [sp, #28]
 800568a:	4604      	mov	r4, r0
 800568c:	920a      	str	r2, [sp, #40]	; 0x28
 800568e:	930d      	str	r3, [sp, #52]	; 0x34
 8005690:	b975      	cbnz	r5, 80056b0 <_dtoa_r+0x40>
 8005692:	2010      	movs	r0, #16
 8005694:	f000 fe2a 	bl	80062ec <malloc>
 8005698:	4602      	mov	r2, r0
 800569a:	61e0      	str	r0, [r4, #28]
 800569c:	b920      	cbnz	r0, 80056a8 <_dtoa_r+0x38>
 800569e:	4bae      	ldr	r3, [pc, #696]	; (8005958 <_dtoa_r+0x2e8>)
 80056a0:	21ef      	movs	r1, #239	; 0xef
 80056a2:	48ae      	ldr	r0, [pc, #696]	; (800595c <_dtoa_r+0x2ec>)
 80056a4:	f001 fb1e 	bl	8006ce4 <__assert_func>
 80056a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ac:	6005      	str	r5, [r0, #0]
 80056ae:	60c5      	str	r5, [r0, #12]
 80056b0:	69e3      	ldr	r3, [r4, #28]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	b151      	cbz	r1, 80056cc <_dtoa_r+0x5c>
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	604a      	str	r2, [r1, #4]
 80056ba:	2301      	movs	r3, #1
 80056bc:	4093      	lsls	r3, r2
 80056be:	608b      	str	r3, [r1, #8]
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 ff07 	bl	80064d4 <_Bfree>
 80056c6:	69e3      	ldr	r3, [r4, #28]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	1e3b      	subs	r3, r7, #0
 80056ce:	bfbb      	ittet	lt
 80056d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056d4:	9303      	strlt	r3, [sp, #12]
 80056d6:	2300      	movge	r3, #0
 80056d8:	2201      	movlt	r2, #1
 80056da:	bfac      	ite	ge
 80056dc:	f8c8 3000 	strge.w	r3, [r8]
 80056e0:	f8c8 2000 	strlt.w	r2, [r8]
 80056e4:	4b9e      	ldr	r3, [pc, #632]	; (8005960 <_dtoa_r+0x2f0>)
 80056e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056ea:	ea33 0308 	bics.w	r3, r3, r8
 80056ee:	d11b      	bne.n	8005728 <_dtoa_r+0xb8>
 80056f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056fc:	4333      	orrs	r3, r6
 80056fe:	f000 8593 	beq.w	8006228 <_dtoa_r+0xbb8>
 8005702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005704:	b963      	cbnz	r3, 8005720 <_dtoa_r+0xb0>
 8005706:	4b97      	ldr	r3, [pc, #604]	; (8005964 <_dtoa_r+0x2f4>)
 8005708:	e027      	b.n	800575a <_dtoa_r+0xea>
 800570a:	4b97      	ldr	r3, [pc, #604]	; (8005968 <_dtoa_r+0x2f8>)
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	9800      	ldr	r0, [sp, #0]
 8005716:	b013      	add	sp, #76	; 0x4c
 8005718:	ecbd 8b04 	vpop	{d8-d9}
 800571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005720:	4b90      	ldr	r3, [pc, #576]	; (8005964 <_dtoa_r+0x2f4>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	3303      	adds	r3, #3
 8005726:	e7f3      	b.n	8005710 <_dtoa_r+0xa0>
 8005728:	ed9d 7b02 	vldr	d7, [sp, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	ec51 0b17 	vmov	r0, r1, d7
 8005732:	eeb0 8a47 	vmov.f32	s16, s14
 8005736:	eef0 8a67 	vmov.f32	s17, s15
 800573a:	2300      	movs	r3, #0
 800573c:	f7fb f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005740:	4681      	mov	r9, r0
 8005742:	b160      	cbz	r0, 800575e <_dtoa_r+0xee>
 8005744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005746:	2301      	movs	r3, #1
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8568 	beq.w	8006222 <_dtoa_r+0xbb2>
 8005752:	4b86      	ldr	r3, [pc, #536]	; (800596c <_dtoa_r+0x2fc>)
 8005754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	e7da      	b.n	8005714 <_dtoa_r+0xa4>
 800575e:	aa10      	add	r2, sp, #64	; 0x40
 8005760:	a911      	add	r1, sp, #68	; 0x44
 8005762:	4620      	mov	r0, r4
 8005764:	eeb0 0a48 	vmov.f32	s0, s16
 8005768:	eef0 0a68 	vmov.f32	s1, s17
 800576c:	f001 f994 	bl	8006a98 <__d2b>
 8005770:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005774:	4682      	mov	sl, r0
 8005776:	2d00      	cmp	r5, #0
 8005778:	d07f      	beq.n	800587a <_dtoa_r+0x20a>
 800577a:	ee18 3a90 	vmov	r3, s17
 800577e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005782:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005786:	ec51 0b18 	vmov	r0, r1, d8
 800578a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800578e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005792:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005796:	4619      	mov	r1, r3
 8005798:	2200      	movs	r2, #0
 800579a:	4b75      	ldr	r3, [pc, #468]	; (8005970 <_dtoa_r+0x300>)
 800579c:	f7fa fd7c 	bl	8000298 <__aeabi_dsub>
 80057a0:	a367      	add	r3, pc, #412	; (adr r3, 8005940 <_dtoa_r+0x2d0>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa ff2f 	bl	8000608 <__aeabi_dmul>
 80057aa:	a367      	add	r3, pc, #412	; (adr r3, 8005948 <_dtoa_r+0x2d8>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa fd74 	bl	800029c <__adddf3>
 80057b4:	4606      	mov	r6, r0
 80057b6:	4628      	mov	r0, r5
 80057b8:	460f      	mov	r7, r1
 80057ba:	f7fa febb 	bl	8000534 <__aeabi_i2d>
 80057be:	a364      	add	r3, pc, #400	; (adr r3, 8005950 <_dtoa_r+0x2e0>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f7fa ff20 	bl	8000608 <__aeabi_dmul>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4630      	mov	r0, r6
 80057ce:	4639      	mov	r1, r7
 80057d0:	f7fa fd64 	bl	800029c <__adddf3>
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	f7fb f9c6 	bl	8000b68 <__aeabi_d2iz>
 80057dc:	2200      	movs	r2, #0
 80057de:	4683      	mov	fp, r0
 80057e0:	2300      	movs	r3, #0
 80057e2:	4630      	mov	r0, r6
 80057e4:	4639      	mov	r1, r7
 80057e6:	f7fb f981 	bl	8000aec <__aeabi_dcmplt>
 80057ea:	b148      	cbz	r0, 8005800 <_dtoa_r+0x190>
 80057ec:	4658      	mov	r0, fp
 80057ee:	f7fa fea1 	bl	8000534 <__aeabi_i2d>
 80057f2:	4632      	mov	r2, r6
 80057f4:	463b      	mov	r3, r7
 80057f6:	f7fb f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80057fa:	b908      	cbnz	r0, 8005800 <_dtoa_r+0x190>
 80057fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005800:	f1bb 0f16 	cmp.w	fp, #22
 8005804:	d857      	bhi.n	80058b6 <_dtoa_r+0x246>
 8005806:	4b5b      	ldr	r3, [pc, #364]	; (8005974 <_dtoa_r+0x304>)
 8005808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	ec51 0b18 	vmov	r0, r1, d8
 8005814:	f7fb f96a 	bl	8000aec <__aeabi_dcmplt>
 8005818:	2800      	cmp	r0, #0
 800581a:	d04e      	beq.n	80058ba <_dtoa_r+0x24a>
 800581c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005820:	2300      	movs	r3, #0
 8005822:	930c      	str	r3, [sp, #48]	; 0x30
 8005824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005826:	1b5b      	subs	r3, r3, r5
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	bf45      	ittet	mi
 800582c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005830:	9305      	strmi	r3, [sp, #20]
 8005832:	2300      	movpl	r3, #0
 8005834:	2300      	movmi	r3, #0
 8005836:	9206      	str	r2, [sp, #24]
 8005838:	bf54      	ite	pl
 800583a:	9305      	strpl	r3, [sp, #20]
 800583c:	9306      	strmi	r3, [sp, #24]
 800583e:	f1bb 0f00 	cmp.w	fp, #0
 8005842:	db3c      	blt.n	80058be <_dtoa_r+0x24e>
 8005844:	9b06      	ldr	r3, [sp, #24]
 8005846:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800584a:	445b      	add	r3, fp
 800584c:	9306      	str	r3, [sp, #24]
 800584e:	2300      	movs	r3, #0
 8005850:	9308      	str	r3, [sp, #32]
 8005852:	9b07      	ldr	r3, [sp, #28]
 8005854:	2b09      	cmp	r3, #9
 8005856:	d868      	bhi.n	800592a <_dtoa_r+0x2ba>
 8005858:	2b05      	cmp	r3, #5
 800585a:	bfc4      	itt	gt
 800585c:	3b04      	subgt	r3, #4
 800585e:	9307      	strgt	r3, [sp, #28]
 8005860:	9b07      	ldr	r3, [sp, #28]
 8005862:	f1a3 0302 	sub.w	r3, r3, #2
 8005866:	bfcc      	ite	gt
 8005868:	2500      	movgt	r5, #0
 800586a:	2501      	movle	r5, #1
 800586c:	2b03      	cmp	r3, #3
 800586e:	f200 8085 	bhi.w	800597c <_dtoa_r+0x30c>
 8005872:	e8df f003 	tbb	[pc, r3]
 8005876:	3b2e      	.short	0x3b2e
 8005878:	5839      	.short	0x5839
 800587a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800587e:	441d      	add	r5, r3
 8005880:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005884:	2b20      	cmp	r3, #32
 8005886:	bfc1      	itttt	gt
 8005888:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800588c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005890:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005894:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005898:	bfd6      	itet	le
 800589a:	f1c3 0320 	rsble	r3, r3, #32
 800589e:	ea48 0003 	orrgt.w	r0, r8, r3
 80058a2:	fa06 f003 	lslle.w	r0, r6, r3
 80058a6:	f7fa fe35 	bl	8000514 <__aeabi_ui2d>
 80058aa:	2201      	movs	r2, #1
 80058ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058b0:	3d01      	subs	r5, #1
 80058b2:	920e      	str	r2, [sp, #56]	; 0x38
 80058b4:	e76f      	b.n	8005796 <_dtoa_r+0x126>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e7b3      	b.n	8005822 <_dtoa_r+0x1b2>
 80058ba:	900c      	str	r0, [sp, #48]	; 0x30
 80058bc:	e7b2      	b.n	8005824 <_dtoa_r+0x1b4>
 80058be:	9b05      	ldr	r3, [sp, #20]
 80058c0:	eba3 030b 	sub.w	r3, r3, fp
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	f1cb 0300 	rsb	r3, fp, #0
 80058ca:	9308      	str	r3, [sp, #32]
 80058cc:	2300      	movs	r3, #0
 80058ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d0:	e7bf      	b.n	8005852 <_dtoa_r+0x1e2>
 80058d2:	2300      	movs	r3, #0
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dc52      	bgt.n	8005982 <_dtoa_r+0x312>
 80058dc:	2301      	movs	r3, #1
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	461a      	mov	r2, r3
 80058e4:	920a      	str	r2, [sp, #40]	; 0x28
 80058e6:	e00b      	b.n	8005900 <_dtoa_r+0x290>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e7f3      	b.n	80058d4 <_dtoa_r+0x264>
 80058ec:	2300      	movs	r3, #0
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	445b      	add	r3, fp
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	3301      	adds	r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	bfb8      	it	lt
 80058fe:	2301      	movlt	r3, #1
 8005900:	69e0      	ldr	r0, [r4, #28]
 8005902:	2100      	movs	r1, #0
 8005904:	2204      	movs	r2, #4
 8005906:	f102 0614 	add.w	r6, r2, #20
 800590a:	429e      	cmp	r6, r3
 800590c:	d93d      	bls.n	800598a <_dtoa_r+0x31a>
 800590e:	6041      	str	r1, [r0, #4]
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fd9f 	bl	8006454 <_Balloc>
 8005916:	9000      	str	r0, [sp, #0]
 8005918:	2800      	cmp	r0, #0
 800591a:	d139      	bne.n	8005990 <_dtoa_r+0x320>
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <_dtoa_r+0x308>)
 800591e:	4602      	mov	r2, r0
 8005920:	f240 11af 	movw	r1, #431	; 0x1af
 8005924:	e6bd      	b.n	80056a2 <_dtoa_r+0x32>
 8005926:	2301      	movs	r3, #1
 8005928:	e7e1      	b.n	80058ee <_dtoa_r+0x27e>
 800592a:	2501      	movs	r5, #1
 800592c:	2300      	movs	r3, #0
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	9509      	str	r5, [sp, #36]	; 0x24
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	2200      	movs	r2, #0
 800593c:	2312      	movs	r3, #18
 800593e:	e7d1      	b.n	80058e4 <_dtoa_r+0x274>
 8005940:	636f4361 	.word	0x636f4361
 8005944:	3fd287a7 	.word	0x3fd287a7
 8005948:	8b60c8b3 	.word	0x8b60c8b3
 800594c:	3fc68a28 	.word	0x3fc68a28
 8005950:	509f79fb 	.word	0x509f79fb
 8005954:	3fd34413 	.word	0x3fd34413
 8005958:	08007379 	.word	0x08007379
 800595c:	08007390 	.word	0x08007390
 8005960:	7ff00000 	.word	0x7ff00000
 8005964:	08007375 	.word	0x08007375
 8005968:	0800736c 	.word	0x0800736c
 800596c:	08007349 	.word	0x08007349
 8005970:	3ff80000 	.word	0x3ff80000
 8005974:	08007480 	.word	0x08007480
 8005978:	080073e8 	.word	0x080073e8
 800597c:	2301      	movs	r3, #1
 800597e:	9309      	str	r3, [sp, #36]	; 0x24
 8005980:	e7d7      	b.n	8005932 <_dtoa_r+0x2c2>
 8005982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	e7ba      	b.n	8005900 <_dtoa_r+0x290>
 800598a:	3101      	adds	r1, #1
 800598c:	0052      	lsls	r2, r2, #1
 800598e:	e7ba      	b.n	8005906 <_dtoa_r+0x296>
 8005990:	69e3      	ldr	r3, [r4, #28]
 8005992:	9a00      	ldr	r2, [sp, #0]
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	9b04      	ldr	r3, [sp, #16]
 8005998:	2b0e      	cmp	r3, #14
 800599a:	f200 80a8 	bhi.w	8005aee <_dtoa_r+0x47e>
 800599e:	2d00      	cmp	r5, #0
 80059a0:	f000 80a5 	beq.w	8005aee <_dtoa_r+0x47e>
 80059a4:	f1bb 0f00 	cmp.w	fp, #0
 80059a8:	dd38      	ble.n	8005a1c <_dtoa_r+0x3ac>
 80059aa:	4bc0      	ldr	r3, [pc, #768]	; (8005cac <_dtoa_r+0x63c>)
 80059ac:	f00b 020f 	and.w	r2, fp, #15
 80059b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80059c0:	d019      	beq.n	80059f6 <_dtoa_r+0x386>
 80059c2:	4bbb      	ldr	r3, [pc, #748]	; (8005cb0 <_dtoa_r+0x640>)
 80059c4:	ec51 0b18 	vmov	r0, r1, d8
 80059c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059cc:	f7fa ff46 	bl	800085c <__aeabi_ddiv>
 80059d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d4:	f008 080f 	and.w	r8, r8, #15
 80059d8:	2503      	movs	r5, #3
 80059da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cb0 <_dtoa_r+0x640>
 80059de:	f1b8 0f00 	cmp.w	r8, #0
 80059e2:	d10a      	bne.n	80059fa <_dtoa_r+0x38a>
 80059e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e8:	4632      	mov	r2, r6
 80059ea:	463b      	mov	r3, r7
 80059ec:	f7fa ff36 	bl	800085c <__aeabi_ddiv>
 80059f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f4:	e02b      	b.n	8005a4e <_dtoa_r+0x3de>
 80059f6:	2502      	movs	r5, #2
 80059f8:	e7ef      	b.n	80059da <_dtoa_r+0x36a>
 80059fa:	f018 0f01 	tst.w	r8, #1
 80059fe:	d008      	beq.n	8005a12 <_dtoa_r+0x3a2>
 8005a00:	4630      	mov	r0, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a08:	f7fa fdfe 	bl	8000608 <__aeabi_dmul>
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460f      	mov	r7, r1
 8005a12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a16:	f109 0908 	add.w	r9, r9, #8
 8005a1a:	e7e0      	b.n	80059de <_dtoa_r+0x36e>
 8005a1c:	f000 809f 	beq.w	8005b5e <_dtoa_r+0x4ee>
 8005a20:	f1cb 0600 	rsb	r6, fp, #0
 8005a24:	4ba1      	ldr	r3, [pc, #644]	; (8005cac <_dtoa_r+0x63c>)
 8005a26:	4fa2      	ldr	r7, [pc, #648]	; (8005cb0 <_dtoa_r+0x640>)
 8005a28:	f006 020f 	and.w	r2, r6, #15
 8005a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	ec51 0b18 	vmov	r0, r1, d8
 8005a38:	f7fa fde6 	bl	8000608 <__aeabi_dmul>
 8005a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a40:	1136      	asrs	r6, r6, #4
 8005a42:	2300      	movs	r3, #0
 8005a44:	2502      	movs	r5, #2
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d17e      	bne.n	8005b48 <_dtoa_r+0x4d8>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1d0      	bne.n	80059f0 <_dtoa_r+0x380>
 8005a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8084 	beq.w	8005b62 <_dtoa_r+0x4f2>
 8005a5a:	4b96      	ldr	r3, [pc, #600]	; (8005cb4 <_dtoa_r+0x644>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fb f843 	bl	8000aec <__aeabi_dcmplt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d07b      	beq.n	8005b62 <_dtoa_r+0x4f2>
 8005a6a:	9b04      	ldr	r3, [sp, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d078      	beq.n	8005b62 <_dtoa_r+0x4f2>
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dd39      	ble.n	8005aea <_dtoa_r+0x47a>
 8005a76:	4b90      	ldr	r3, [pc, #576]	; (8005cb8 <_dtoa_r+0x648>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fa fdc3 	bl	8000608 <__aeabi_dmul>
 8005a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a86:	9e01      	ldr	r6, [sp, #4]
 8005a88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a92:	4628      	mov	r0, r5
 8005a94:	f7fa fd4e 	bl	8000534 <__aeabi_i2d>
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	f7fa fdb4 	bl	8000608 <__aeabi_dmul>
 8005aa0:	4b86      	ldr	r3, [pc, #536]	; (8005cbc <_dtoa_r+0x64c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f7fa fbfa 	bl	800029c <__adddf3>
 8005aa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab0:	9303      	str	r3, [sp, #12]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d158      	bne.n	8005b68 <_dtoa_r+0x4f8>
 8005ab6:	4b82      	ldr	r3, [pc, #520]	; (8005cc0 <_dtoa_r+0x650>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fa fbeb 	bl	8000298 <__aeabi_dsub>
 8005ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ac6:	4680      	mov	r8, r0
 8005ac8:	4689      	mov	r9, r1
 8005aca:	f7fb f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f040 8296 	bne.w	8006000 <_dtoa_r+0x990>
 8005ad4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ad8:	4640      	mov	r0, r8
 8005ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ade:	4649      	mov	r1, r9
 8005ae0:	f7fb f804 	bl	8000aec <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f040 8289 	bne.w	8005ffc <_dtoa_r+0x98c>
 8005aea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f2c0 814e 	blt.w	8005d92 <_dtoa_r+0x722>
 8005af6:	f1bb 0f0e 	cmp.w	fp, #14
 8005afa:	f300 814a 	bgt.w	8005d92 <_dtoa_r+0x722>
 8005afe:	4b6b      	ldr	r3, [pc, #428]	; (8005cac <_dtoa_r+0x63c>)
 8005b00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f280 80dc 	bge.w	8005cc8 <_dtoa_r+0x658>
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f300 80d8 	bgt.w	8005cc8 <_dtoa_r+0x658>
 8005b18:	f040 826f 	bne.w	8005ffa <_dtoa_r+0x98a>
 8005b1c:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <_dtoa_r+0x650>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa fd70 	bl	8000608 <__aeabi_dmul>
 8005b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b2c:	f7fa fff2 	bl	8000b14 <__aeabi_dcmpge>
 8005b30:	9e04      	ldr	r6, [sp, #16]
 8005b32:	4637      	mov	r7, r6
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f040 8245 	bne.w	8005fc4 <_dtoa_r+0x954>
 8005b3a:	9d00      	ldr	r5, [sp, #0]
 8005b3c:	2331      	movs	r3, #49	; 0x31
 8005b3e:	f805 3b01 	strb.w	r3, [r5], #1
 8005b42:	f10b 0b01 	add.w	fp, fp, #1
 8005b46:	e241      	b.n	8005fcc <_dtoa_r+0x95c>
 8005b48:	07f2      	lsls	r2, r6, #31
 8005b4a:	d505      	bpl.n	8005b58 <_dtoa_r+0x4e8>
 8005b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b50:	f7fa fd5a 	bl	8000608 <__aeabi_dmul>
 8005b54:	3501      	adds	r5, #1
 8005b56:	2301      	movs	r3, #1
 8005b58:	1076      	asrs	r6, r6, #1
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	e773      	b.n	8005a46 <_dtoa_r+0x3d6>
 8005b5e:	2502      	movs	r5, #2
 8005b60:	e775      	b.n	8005a4e <_dtoa_r+0x3de>
 8005b62:	9e04      	ldr	r6, [sp, #16]
 8005b64:	465f      	mov	r7, fp
 8005b66:	e792      	b.n	8005a8e <_dtoa_r+0x41e>
 8005b68:	9900      	ldr	r1, [sp, #0]
 8005b6a:	4b50      	ldr	r3, [pc, #320]	; (8005cac <_dtoa_r+0x63c>)
 8005b6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b70:	4431      	add	r1, r6
 8005b72:	9102      	str	r1, [sp, #8]
 8005b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b76:	eeb0 9a47 	vmov.f32	s18, s14
 8005b7a:	eef0 9a67 	vmov.f32	s19, s15
 8005b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d044      	beq.n	8005c14 <_dtoa_r+0x5a4>
 8005b8a:	494e      	ldr	r1, [pc, #312]	; (8005cc4 <_dtoa_r+0x654>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7fa fe65 	bl	800085c <__aeabi_ddiv>
 8005b92:	ec53 2b19 	vmov	r2, r3, d9
 8005b96:	f7fa fb7f 	bl	8000298 <__aeabi_dsub>
 8005b9a:	9d00      	ldr	r5, [sp, #0]
 8005b9c:	ec41 0b19 	vmov	d9, r0, r1
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7fa ffe0 	bl	8000b68 <__aeabi_d2iz>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	f7fa fcc3 	bl	8000534 <__aeabi_i2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	f7fa fb6f 	bl	8000298 <__aeabi_dsub>
 8005bba:	3630      	adds	r6, #48	; 0x30
 8005bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc0:	ec53 2b19 	vmov	r2, r3, d9
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	f7fa ff90 	bl	8000aec <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d164      	bne.n	8005c9a <_dtoa_r+0x62a>
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	4937      	ldr	r1, [pc, #220]	; (8005cb4 <_dtoa_r+0x644>)
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f7fa fb5e 	bl	8000298 <__aeabi_dsub>
 8005bdc:	ec53 2b19 	vmov	r2, r3, d9
 8005be0:	f7fa ff84 	bl	8000aec <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 80b6 	bne.w	8005d56 <_dtoa_r+0x6e6>
 8005bea:	9b02      	ldr	r3, [sp, #8]
 8005bec:	429d      	cmp	r5, r3
 8005bee:	f43f af7c 	beq.w	8005aea <_dtoa_r+0x47a>
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <_dtoa_r+0x648>)
 8005bf4:	ec51 0b19 	vmov	r0, r1, d9
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f7fa fd05 	bl	8000608 <__aeabi_dmul>
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <_dtoa_r+0x648>)
 8005c00:	ec41 0b19 	vmov	d9, r0, r1
 8005c04:	2200      	movs	r2, #0
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa fcfd 	bl	8000608 <__aeabi_dmul>
 8005c0e:	4680      	mov	r8, r0
 8005c10:	4689      	mov	r9, r1
 8005c12:	e7c5      	b.n	8005ba0 <_dtoa_r+0x530>
 8005c14:	ec51 0b17 	vmov	r0, r1, d7
 8005c18:	f7fa fcf6 	bl	8000608 <__aeabi_dmul>
 8005c1c:	9b02      	ldr	r3, [sp, #8]
 8005c1e:	9d00      	ldr	r5, [sp, #0]
 8005c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c22:	ec41 0b19 	vmov	d9, r0, r1
 8005c26:	4649      	mov	r1, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	f7fa ff9d 	bl	8000b68 <__aeabi_d2iz>
 8005c2e:	4606      	mov	r6, r0
 8005c30:	f7fa fc80 	bl	8000534 <__aeabi_i2d>
 8005c34:	3630      	adds	r6, #48	; 0x30
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fb2b 	bl	8000298 <__aeabi_dsub>
 8005c42:	f805 6b01 	strb.w	r6, [r5], #1
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	429d      	cmp	r5, r3
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	4689      	mov	r9, r1
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	d124      	bne.n	8005c9e <_dtoa_r+0x62e>
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <_dtoa_r+0x654>)
 8005c56:	ec51 0b19 	vmov	r0, r1, d9
 8005c5a:	f7fa fb1f 	bl	800029c <__adddf3>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4640      	mov	r0, r8
 8005c64:	4649      	mov	r1, r9
 8005c66:	f7fa ff5f 	bl	8000b28 <__aeabi_dcmpgt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d173      	bne.n	8005d56 <_dtoa_r+0x6e6>
 8005c6e:	ec53 2b19 	vmov	r2, r3, d9
 8005c72:	4914      	ldr	r1, [pc, #80]	; (8005cc4 <_dtoa_r+0x654>)
 8005c74:	2000      	movs	r0, #0
 8005c76:	f7fa fb0f 	bl	8000298 <__aeabi_dsub>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa ff33 	bl	8000aec <__aeabi_dcmplt>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f43f af2f 	beq.w	8005aea <_dtoa_r+0x47a>
 8005c8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c8e:	1e6b      	subs	r3, r5, #1
 8005c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c96:	2b30      	cmp	r3, #48	; 0x30
 8005c98:	d0f8      	beq.n	8005c8c <_dtoa_r+0x61c>
 8005c9a:	46bb      	mov	fp, r7
 8005c9c:	e04a      	b.n	8005d34 <_dtoa_r+0x6c4>
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <_dtoa_r+0x648>)
 8005ca0:	f7fa fcb2 	bl	8000608 <__aeabi_dmul>
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	4689      	mov	r9, r1
 8005ca8:	e7bd      	b.n	8005c26 <_dtoa_r+0x5b6>
 8005caa:	bf00      	nop
 8005cac:	08007480 	.word	0x08007480
 8005cb0:	08007458 	.word	0x08007458
 8005cb4:	3ff00000 	.word	0x3ff00000
 8005cb8:	40240000 	.word	0x40240000
 8005cbc:	401c0000 	.word	0x401c0000
 8005cc0:	40140000 	.word	0x40140000
 8005cc4:	3fe00000 	.word	0x3fe00000
 8005cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ccc:	9d00      	ldr	r5, [sp, #0]
 8005cce:	4642      	mov	r2, r8
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	f7fa fdc1 	bl	800085c <__aeabi_ddiv>
 8005cda:	f7fa ff45 	bl	8000b68 <__aeabi_d2iz>
 8005cde:	9001      	str	r0, [sp, #4]
 8005ce0:	f7fa fc28 	bl	8000534 <__aeabi_i2d>
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	f7fa fc8e 	bl	8000608 <__aeabi_dmul>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fad0 	bl	8000298 <__aeabi_dsub>
 8005cf8:	9e01      	ldr	r6, [sp, #4]
 8005cfa:	9f04      	ldr	r7, [sp, #16]
 8005cfc:	3630      	adds	r6, #48	; 0x30
 8005cfe:	f805 6b01 	strb.w	r6, [r5], #1
 8005d02:	9e00      	ldr	r6, [sp, #0]
 8005d04:	1bae      	subs	r6, r5, r6
 8005d06:	42b7      	cmp	r7, r6
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	d134      	bne.n	8005d78 <_dtoa_r+0x708>
 8005d0e:	f7fa fac5 	bl	800029c <__adddf3>
 8005d12:	4642      	mov	r2, r8
 8005d14:	464b      	mov	r3, r9
 8005d16:	4606      	mov	r6, r0
 8005d18:	460f      	mov	r7, r1
 8005d1a:	f7fa ff05 	bl	8000b28 <__aeabi_dcmpgt>
 8005d1e:	b9c8      	cbnz	r0, 8005d54 <_dtoa_r+0x6e4>
 8005d20:	4642      	mov	r2, r8
 8005d22:	464b      	mov	r3, r9
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d2c:	b110      	cbz	r0, 8005d34 <_dtoa_r+0x6c4>
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	07db      	lsls	r3, r3, #31
 8005d32:	d40f      	bmi.n	8005d54 <_dtoa_r+0x6e4>
 8005d34:	4651      	mov	r1, sl
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 fbcc 	bl	80064d4 <_Bfree>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d40:	702b      	strb	r3, [r5, #0]
 8005d42:	f10b 0301 	add.w	r3, fp, #1
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f43f ace2 	beq.w	8005714 <_dtoa_r+0xa4>
 8005d50:	601d      	str	r5, [r3, #0]
 8005d52:	e4df      	b.n	8005714 <_dtoa_r+0xa4>
 8005d54:	465f      	mov	r7, fp
 8005d56:	462b      	mov	r3, r5
 8005d58:	461d      	mov	r5, r3
 8005d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d5e:	2a39      	cmp	r2, #57	; 0x39
 8005d60:	d106      	bne.n	8005d70 <_dtoa_r+0x700>
 8005d62:	9a00      	ldr	r2, [sp, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1f7      	bne.n	8005d58 <_dtoa_r+0x6e8>
 8005d68:	9900      	ldr	r1, [sp, #0]
 8005d6a:	2230      	movs	r2, #48	; 0x30
 8005d6c:	3701      	adds	r7, #1
 8005d6e:	700a      	strb	r2, [r1, #0]
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	3201      	adds	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e790      	b.n	8005c9a <_dtoa_r+0x62a>
 8005d78:	4ba3      	ldr	r3, [pc, #652]	; (8006008 <_dtoa_r+0x998>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	f7fa fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d09e      	beq.n	8005cce <_dtoa_r+0x65e>
 8005d90:	e7d0      	b.n	8005d34 <_dtoa_r+0x6c4>
 8005d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f000 80ca 	beq.w	8005f2e <_dtoa_r+0x8be>
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	2a01      	cmp	r2, #1
 8005d9e:	f300 80ad 	bgt.w	8005efc <_dtoa_r+0x88c>
 8005da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	f000 80a5 	beq.w	8005ef4 <_dtoa_r+0x884>
 8005daa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dae:	9e08      	ldr	r6, [sp, #32]
 8005db0:	9d05      	ldr	r5, [sp, #20]
 8005db2:	9a05      	ldr	r2, [sp, #20]
 8005db4:	441a      	add	r2, r3
 8005db6:	9205      	str	r2, [sp, #20]
 8005db8:	9a06      	ldr	r2, [sp, #24]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	441a      	add	r2, r3
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	9206      	str	r2, [sp, #24]
 8005dc2:	f000 fc3d 	bl	8006640 <__i2b>
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	b165      	cbz	r5, 8005de4 <_dtoa_r+0x774>
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dd09      	ble.n	8005de4 <_dtoa_r+0x774>
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	9a05      	ldr	r2, [sp, #20]
 8005dd4:	bfa8      	it	ge
 8005dd6:	462b      	movge	r3, r5
 8005dd8:	1ad2      	subs	r2, r2, r3
 8005dda:	9205      	str	r2, [sp, #20]
 8005ddc:	9a06      	ldr	r2, [sp, #24]
 8005dde:	1aed      	subs	r5, r5, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	9306      	str	r3, [sp, #24]
 8005de4:	9b08      	ldr	r3, [sp, #32]
 8005de6:	b1f3      	cbz	r3, 8005e26 <_dtoa_r+0x7b6>
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80a3 	beq.w	8005f36 <_dtoa_r+0x8c6>
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	dd10      	ble.n	8005e16 <_dtoa_r+0x7a6>
 8005df4:	4639      	mov	r1, r7
 8005df6:	4632      	mov	r2, r6
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fce1 	bl	80067c0 <__pow5mult>
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4601      	mov	r1, r0
 8005e02:	4607      	mov	r7, r0
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fc31 	bl	800666c <__multiply>
 8005e0a:	4651      	mov	r1, sl
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 fb60 	bl	80064d4 <_Bfree>
 8005e14:	46c2      	mov	sl, r8
 8005e16:	9b08      	ldr	r3, [sp, #32]
 8005e18:	1b9a      	subs	r2, r3, r6
 8005e1a:	d004      	beq.n	8005e26 <_dtoa_r+0x7b6>
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 fcce 	bl	80067c0 <__pow5mult>
 8005e24:	4682      	mov	sl, r0
 8005e26:	2101      	movs	r1, #1
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fc09 	bl	8006640 <__i2b>
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	4606      	mov	r6, r0
 8005e34:	f340 8081 	ble.w	8005f3a <_dtoa_r+0x8ca>
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fcbf 	bl	80067c0 <__pow5mult>
 8005e42:	9b07      	ldr	r3, [sp, #28]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	4606      	mov	r6, r0
 8005e48:	dd7a      	ble.n	8005f40 <_dtoa_r+0x8d0>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	6933      	ldr	r3, [r6, #16]
 8005e50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e54:	6918      	ldr	r0, [r3, #16]
 8005e56:	f000 fba5 	bl	80065a4 <__hi0bits>
 8005e5a:	f1c0 0020 	rsb	r0, r0, #32
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	4418      	add	r0, r3
 8005e62:	f010 001f 	ands.w	r0, r0, #31
 8005e66:	f000 8094 	beq.w	8005f92 <_dtoa_r+0x922>
 8005e6a:	f1c0 0320 	rsb	r3, r0, #32
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	f340 8085 	ble.w	8005f7e <_dtoa_r+0x90e>
 8005e74:	9b05      	ldr	r3, [sp, #20]
 8005e76:	f1c0 001c 	rsb	r0, r0, #28
 8005e7a:	4403      	add	r3, r0
 8005e7c:	9305      	str	r3, [sp, #20]
 8005e7e:	9b06      	ldr	r3, [sp, #24]
 8005e80:	4403      	add	r3, r0
 8005e82:	4405      	add	r5, r0
 8005e84:	9306      	str	r3, [sp, #24]
 8005e86:	9b05      	ldr	r3, [sp, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd05      	ble.n	8005e98 <_dtoa_r+0x828>
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fcef 	bl	8006874 <__lshift>
 8005e96:	4682      	mov	sl, r0
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dd05      	ble.n	8005eaa <_dtoa_r+0x83a>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fce6 	bl	8006874 <__lshift>
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d072      	beq.n	8005f96 <_dtoa_r+0x926>
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f000 fd4a 	bl	800694c <__mcmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	da6c      	bge.n	8005f96 <_dtoa_r+0x926>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4651      	mov	r1, sl
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fb28 	bl	8006518 <__multadd>
 8005ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ece:	4682      	mov	sl, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 81b0 	beq.w	8006236 <_dtoa_r+0xbc6>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4639      	mov	r1, r7
 8005eda:	220a      	movs	r2, #10
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 fb1b 	bl	8006518 <__multadd>
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	f300 8096 	bgt.w	8006018 <_dtoa_r+0x9a8>
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	dc59      	bgt.n	8005fa6 <_dtoa_r+0x936>
 8005ef2:	e091      	b.n	8006018 <_dtoa_r+0x9a8>
 8005ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005efa:	e758      	b.n	8005dae <_dtoa_r+0x73e>
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	1e5e      	subs	r6, r3, #1
 8005f00:	9b08      	ldr	r3, [sp, #32]
 8005f02:	42b3      	cmp	r3, r6
 8005f04:	bfbf      	itttt	lt
 8005f06:	9b08      	ldrlt	r3, [sp, #32]
 8005f08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f0a:	9608      	strlt	r6, [sp, #32]
 8005f0c:	1af3      	sublt	r3, r6, r3
 8005f0e:	bfb4      	ite	lt
 8005f10:	18d2      	addlt	r2, r2, r3
 8005f12:	1b9e      	subge	r6, r3, r6
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	bfbc      	itt	lt
 8005f18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f1a:	2600      	movlt	r6, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb7      	itett	lt
 8005f20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f28:	1a9d      	sublt	r5, r3, r2
 8005f2a:	2300      	movlt	r3, #0
 8005f2c:	e741      	b.n	8005db2 <_dtoa_r+0x742>
 8005f2e:	9e08      	ldr	r6, [sp, #32]
 8005f30:	9d05      	ldr	r5, [sp, #20]
 8005f32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f34:	e748      	b.n	8005dc8 <_dtoa_r+0x758>
 8005f36:	9a08      	ldr	r2, [sp, #32]
 8005f38:	e770      	b.n	8005e1c <_dtoa_r+0x7ac>
 8005f3a:	9b07      	ldr	r3, [sp, #28]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	dc19      	bgt.n	8005f74 <_dtoa_r+0x904>
 8005f40:	9b02      	ldr	r3, [sp, #8]
 8005f42:	b9bb      	cbnz	r3, 8005f74 <_dtoa_r+0x904>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f4a:	b99b      	cbnz	r3, 8005f74 <_dtoa_r+0x904>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f52:	0d1b      	lsrs	r3, r3, #20
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	b183      	cbz	r3, 8005f7a <_dtoa_r+0x90a>
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	9305      	str	r3, [sp, #20]
 8005f5e:	9b06      	ldr	r3, [sp, #24]
 8005f60:	3301      	adds	r3, #1
 8005f62:	9306      	str	r3, [sp, #24]
 8005f64:	f04f 0801 	mov.w	r8, #1
 8005f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f47f af6f 	bne.w	8005e4e <_dtoa_r+0x7de>
 8005f70:	2001      	movs	r0, #1
 8005f72:	e774      	b.n	8005e5e <_dtoa_r+0x7ee>
 8005f74:	f04f 0800 	mov.w	r8, #0
 8005f78:	e7f6      	b.n	8005f68 <_dtoa_r+0x8f8>
 8005f7a:	4698      	mov	r8, r3
 8005f7c:	e7f4      	b.n	8005f68 <_dtoa_r+0x8f8>
 8005f7e:	d082      	beq.n	8005e86 <_dtoa_r+0x816>
 8005f80:	9a05      	ldr	r2, [sp, #20]
 8005f82:	331c      	adds	r3, #28
 8005f84:	441a      	add	r2, r3
 8005f86:	9205      	str	r2, [sp, #20]
 8005f88:	9a06      	ldr	r2, [sp, #24]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	441d      	add	r5, r3
 8005f8e:	9206      	str	r2, [sp, #24]
 8005f90:	e779      	b.n	8005e86 <_dtoa_r+0x816>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e7f4      	b.n	8005f80 <_dtoa_r+0x910>
 8005f96:	9b04      	ldr	r3, [sp, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dc37      	bgt.n	800600c <_dtoa_r+0x99c>
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	dd34      	ble.n	800600c <_dtoa_r+0x99c>
 8005fa2:	9b04      	ldr	r3, [sp, #16]
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	b963      	cbnz	r3, 8005fc4 <_dtoa_r+0x954>
 8005faa:	4631      	mov	r1, r6
 8005fac:	2205      	movs	r2, #5
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 fab2 	bl	8006518 <__multadd>
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f000 fcc7 	bl	800694c <__mcmp>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f73f adbb 	bgt.w	8005b3a <_dtoa_r+0x4ca>
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc6:	9d00      	ldr	r5, [sp, #0]
 8005fc8:	ea6f 0b03 	mvn.w	fp, r3
 8005fcc:	f04f 0800 	mov.w	r8, #0
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fa7e 	bl	80064d4 <_Bfree>
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	f43f aeab 	beq.w	8005d34 <_dtoa_r+0x6c4>
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	d005      	beq.n	8005ff0 <_dtoa_r+0x980>
 8005fe4:	45b8      	cmp	r8, r7
 8005fe6:	d003      	beq.n	8005ff0 <_dtoa_r+0x980>
 8005fe8:	4641      	mov	r1, r8
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fa72 	bl	80064d4 <_Bfree>
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fa6e 	bl	80064d4 <_Bfree>
 8005ff8:	e69c      	b.n	8005d34 <_dtoa_r+0x6c4>
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	4637      	mov	r7, r6
 8005ffe:	e7e1      	b.n	8005fc4 <_dtoa_r+0x954>
 8006000:	46bb      	mov	fp, r7
 8006002:	4637      	mov	r7, r6
 8006004:	e599      	b.n	8005b3a <_dtoa_r+0x4ca>
 8006006:	bf00      	nop
 8006008:	40240000 	.word	0x40240000
 800600c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80c8 	beq.w	80061a4 <_dtoa_r+0xb34>
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	2d00      	cmp	r5, #0
 800601a:	dd05      	ble.n	8006028 <_dtoa_r+0x9b8>
 800601c:	4639      	mov	r1, r7
 800601e:	462a      	mov	r2, r5
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fc27 	bl	8006874 <__lshift>
 8006026:	4607      	mov	r7, r0
 8006028:	f1b8 0f00 	cmp.w	r8, #0
 800602c:	d05b      	beq.n	80060e6 <_dtoa_r+0xa76>
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4620      	mov	r0, r4
 8006032:	f000 fa0f 	bl	8006454 <_Balloc>
 8006036:	4605      	mov	r5, r0
 8006038:	b928      	cbnz	r0, 8006046 <_dtoa_r+0x9d6>
 800603a:	4b83      	ldr	r3, [pc, #524]	; (8006248 <_dtoa_r+0xbd8>)
 800603c:	4602      	mov	r2, r0
 800603e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006042:	f7ff bb2e 	b.w	80056a2 <_dtoa_r+0x32>
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	3202      	adds	r2, #2
 800604a:	0092      	lsls	r2, r2, #2
 800604c:	f107 010c 	add.w	r1, r7, #12
 8006050:	300c      	adds	r0, #12
 8006052:	f000 fe39 	bl	8006cc8 <memcpy>
 8006056:	2201      	movs	r2, #1
 8006058:	4629      	mov	r1, r5
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fc0a 	bl	8006874 <__lshift>
 8006060:	9b00      	ldr	r3, [sp, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800606a:	4413      	add	r3, r2
 800606c:	9308      	str	r3, [sp, #32]
 800606e:	9b02      	ldr	r3, [sp, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	46b8      	mov	r8, r7
 8006076:	9306      	str	r3, [sp, #24]
 8006078:	4607      	mov	r7, r0
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	4631      	mov	r1, r6
 800607e:	3b01      	subs	r3, #1
 8006080:	4650      	mov	r0, sl
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	f7ff fa6a 	bl	800555c <quorem>
 8006088:	4641      	mov	r1, r8
 800608a:	9002      	str	r0, [sp, #8]
 800608c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006090:	4650      	mov	r0, sl
 8006092:	f000 fc5b 	bl	800694c <__mcmp>
 8006096:	463a      	mov	r2, r7
 8006098:	9005      	str	r0, [sp, #20]
 800609a:	4631      	mov	r1, r6
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fc71 	bl	8006984 <__mdiff>
 80060a2:	68c2      	ldr	r2, [r0, #12]
 80060a4:	4605      	mov	r5, r0
 80060a6:	bb02      	cbnz	r2, 80060ea <_dtoa_r+0xa7a>
 80060a8:	4601      	mov	r1, r0
 80060aa:	4650      	mov	r0, sl
 80060ac:	f000 fc4e 	bl	800694c <__mcmp>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4629      	mov	r1, r5
 80060b4:	4620      	mov	r0, r4
 80060b6:	9209      	str	r2, [sp, #36]	; 0x24
 80060b8:	f000 fa0c 	bl	80064d4 <_Bfree>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c0:	9d04      	ldr	r5, [sp, #16]
 80060c2:	ea43 0102 	orr.w	r1, r3, r2
 80060c6:	9b06      	ldr	r3, [sp, #24]
 80060c8:	4319      	orrs	r1, r3
 80060ca:	d110      	bne.n	80060ee <_dtoa_r+0xa7e>
 80060cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060d0:	d029      	beq.n	8006126 <_dtoa_r+0xab6>
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dd02      	ble.n	80060de <_dtoa_r+0xa6e>
 80060d8:	9b02      	ldr	r3, [sp, #8]
 80060da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	f883 9000 	strb.w	r9, [r3]
 80060e4:	e774      	b.n	8005fd0 <_dtoa_r+0x960>
 80060e6:	4638      	mov	r0, r7
 80060e8:	e7ba      	b.n	8006060 <_dtoa_r+0x9f0>
 80060ea:	2201      	movs	r2, #1
 80060ec:	e7e1      	b.n	80060b2 <_dtoa_r+0xa42>
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db04      	blt.n	80060fe <_dtoa_r+0xa8e>
 80060f4:	9907      	ldr	r1, [sp, #28]
 80060f6:	430b      	orrs	r3, r1
 80060f8:	9906      	ldr	r1, [sp, #24]
 80060fa:	430b      	orrs	r3, r1
 80060fc:	d120      	bne.n	8006140 <_dtoa_r+0xad0>
 80060fe:	2a00      	cmp	r2, #0
 8006100:	dded      	ble.n	80060de <_dtoa_r+0xa6e>
 8006102:	4651      	mov	r1, sl
 8006104:	2201      	movs	r2, #1
 8006106:	4620      	mov	r0, r4
 8006108:	f000 fbb4 	bl	8006874 <__lshift>
 800610c:	4631      	mov	r1, r6
 800610e:	4682      	mov	sl, r0
 8006110:	f000 fc1c 	bl	800694c <__mcmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	dc03      	bgt.n	8006120 <_dtoa_r+0xab0>
 8006118:	d1e1      	bne.n	80060de <_dtoa_r+0xa6e>
 800611a:	f019 0f01 	tst.w	r9, #1
 800611e:	d0de      	beq.n	80060de <_dtoa_r+0xa6e>
 8006120:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006124:	d1d8      	bne.n	80060d8 <_dtoa_r+0xa68>
 8006126:	9a01      	ldr	r2, [sp, #4]
 8006128:	2339      	movs	r3, #57	; 0x39
 800612a:	7013      	strb	r3, [r2, #0]
 800612c:	462b      	mov	r3, r5
 800612e:	461d      	mov	r5, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006136:	2a39      	cmp	r2, #57	; 0x39
 8006138:	d06c      	beq.n	8006214 <_dtoa_r+0xba4>
 800613a:	3201      	adds	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e747      	b.n	8005fd0 <_dtoa_r+0x960>
 8006140:	2a00      	cmp	r2, #0
 8006142:	dd07      	ble.n	8006154 <_dtoa_r+0xae4>
 8006144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006148:	d0ed      	beq.n	8006126 <_dtoa_r+0xab6>
 800614a:	9a01      	ldr	r2, [sp, #4]
 800614c:	f109 0301 	add.w	r3, r9, #1
 8006150:	7013      	strb	r3, [r2, #0]
 8006152:	e73d      	b.n	8005fd0 <_dtoa_r+0x960>
 8006154:	9b04      	ldr	r3, [sp, #16]
 8006156:	9a08      	ldr	r2, [sp, #32]
 8006158:	f803 9c01 	strb.w	r9, [r3, #-1]
 800615c:	4293      	cmp	r3, r2
 800615e:	d043      	beq.n	80061e8 <_dtoa_r+0xb78>
 8006160:	4651      	mov	r1, sl
 8006162:	2300      	movs	r3, #0
 8006164:	220a      	movs	r2, #10
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f9d6 	bl	8006518 <__multadd>
 800616c:	45b8      	cmp	r8, r7
 800616e:	4682      	mov	sl, r0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	f04f 020a 	mov.w	r2, #10
 8006178:	4641      	mov	r1, r8
 800617a:	4620      	mov	r0, r4
 800617c:	d107      	bne.n	800618e <_dtoa_r+0xb1e>
 800617e:	f000 f9cb 	bl	8006518 <__multadd>
 8006182:	4680      	mov	r8, r0
 8006184:	4607      	mov	r7, r0
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	e775      	b.n	800607a <_dtoa_r+0xa0a>
 800618e:	f000 f9c3 	bl	8006518 <__multadd>
 8006192:	4639      	mov	r1, r7
 8006194:	4680      	mov	r8, r0
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f9bc 	bl	8006518 <__multadd>
 80061a0:	4607      	mov	r7, r0
 80061a2:	e7f0      	b.n	8006186 <_dtoa_r+0xb16>
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	9d00      	ldr	r5, [sp, #0]
 80061aa:	4631      	mov	r1, r6
 80061ac:	4650      	mov	r0, sl
 80061ae:	f7ff f9d5 	bl	800555c <quorem>
 80061b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	f805 9b01 	strb.w	r9, [r5], #1
 80061bc:	1aea      	subs	r2, r5, r3
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	dd07      	ble.n	80061d4 <_dtoa_r+0xb64>
 80061c4:	4651      	mov	r1, sl
 80061c6:	2300      	movs	r3, #0
 80061c8:	220a      	movs	r2, #10
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f9a4 	bl	8006518 <__multadd>
 80061d0:	4682      	mov	sl, r0
 80061d2:	e7ea      	b.n	80061aa <_dtoa_r+0xb3a>
 80061d4:	9b01      	ldr	r3, [sp, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bfc8      	it	gt
 80061da:	461d      	movgt	r5, r3
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	bfd8      	it	le
 80061e0:	2501      	movle	r5, #1
 80061e2:	441d      	add	r5, r3
 80061e4:	f04f 0800 	mov.w	r8, #0
 80061e8:	4651      	mov	r1, sl
 80061ea:	2201      	movs	r2, #1
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 fb41 	bl	8006874 <__lshift>
 80061f2:	4631      	mov	r1, r6
 80061f4:	4682      	mov	sl, r0
 80061f6:	f000 fba9 	bl	800694c <__mcmp>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	dc96      	bgt.n	800612c <_dtoa_r+0xabc>
 80061fe:	d102      	bne.n	8006206 <_dtoa_r+0xb96>
 8006200:	f019 0f01 	tst.w	r9, #1
 8006204:	d192      	bne.n	800612c <_dtoa_r+0xabc>
 8006206:	462b      	mov	r3, r5
 8006208:	461d      	mov	r5, r3
 800620a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800620e:	2a30      	cmp	r2, #48	; 0x30
 8006210:	d0fa      	beq.n	8006208 <_dtoa_r+0xb98>
 8006212:	e6dd      	b.n	8005fd0 <_dtoa_r+0x960>
 8006214:	9a00      	ldr	r2, [sp, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d189      	bne.n	800612e <_dtoa_r+0xabe>
 800621a:	f10b 0b01 	add.w	fp, fp, #1
 800621e:	2331      	movs	r3, #49	; 0x31
 8006220:	e796      	b.n	8006150 <_dtoa_r+0xae0>
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <_dtoa_r+0xbdc>)
 8006224:	f7ff ba99 	b.w	800575a <_dtoa_r+0xea>
 8006228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800622a:	2b00      	cmp	r3, #0
 800622c:	f47f aa6d 	bne.w	800570a <_dtoa_r+0x9a>
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <_dtoa_r+0xbe0>)
 8006232:	f7ff ba92 	b.w	800575a <_dtoa_r+0xea>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	dcb5      	bgt.n	80061a8 <_dtoa_r+0xb38>
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	2b02      	cmp	r3, #2
 8006240:	f73f aeb1 	bgt.w	8005fa6 <_dtoa_r+0x936>
 8006244:	e7b0      	b.n	80061a8 <_dtoa_r+0xb38>
 8006246:	bf00      	nop
 8006248:	080073e8 	.word	0x080073e8
 800624c:	08007348 	.word	0x08007348
 8006250:	0800736c 	.word	0x0800736c

08006254 <_free_r>:
 8006254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006256:	2900      	cmp	r1, #0
 8006258:	d044      	beq.n	80062e4 <_free_r+0x90>
 800625a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625e:	9001      	str	r0, [sp, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f1a1 0404 	sub.w	r4, r1, #4
 8006266:	bfb8      	it	lt
 8006268:	18e4      	addlt	r4, r4, r3
 800626a:	f000 f8e7 	bl	800643c <__malloc_lock>
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <_free_r+0x94>)
 8006270:	9801      	ldr	r0, [sp, #4]
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	b933      	cbnz	r3, 8006284 <_free_r+0x30>
 8006276:	6063      	str	r3, [r4, #4]
 8006278:	6014      	str	r4, [r2, #0]
 800627a:	b003      	add	sp, #12
 800627c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006280:	f000 b8e2 	b.w	8006448 <__malloc_unlock>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d908      	bls.n	800629a <_free_r+0x46>
 8006288:	6825      	ldr	r5, [r4, #0]
 800628a:	1961      	adds	r1, r4, r5
 800628c:	428b      	cmp	r3, r1
 800628e:	bf01      	itttt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	1949      	addeq	r1, r1, r5
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	e7ed      	b.n	8006276 <_free_r+0x22>
 800629a:	461a      	mov	r2, r3
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b10b      	cbz	r3, 80062a4 <_free_r+0x50>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d9fa      	bls.n	800629a <_free_r+0x46>
 80062a4:	6811      	ldr	r1, [r2, #0]
 80062a6:	1855      	adds	r5, r2, r1
 80062a8:	42a5      	cmp	r5, r4
 80062aa:	d10b      	bne.n	80062c4 <_free_r+0x70>
 80062ac:	6824      	ldr	r4, [r4, #0]
 80062ae:	4421      	add	r1, r4
 80062b0:	1854      	adds	r4, r2, r1
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	d1e0      	bne.n	800627a <_free_r+0x26>
 80062b8:	681c      	ldr	r4, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	6053      	str	r3, [r2, #4]
 80062be:	440c      	add	r4, r1
 80062c0:	6014      	str	r4, [r2, #0]
 80062c2:	e7da      	b.n	800627a <_free_r+0x26>
 80062c4:	d902      	bls.n	80062cc <_free_r+0x78>
 80062c6:	230c      	movs	r3, #12
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	e7d6      	b.n	800627a <_free_r+0x26>
 80062cc:	6825      	ldr	r5, [r4, #0]
 80062ce:	1961      	adds	r1, r4, r5
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf04      	itt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	6063      	str	r3, [r4, #4]
 80062da:	bf04      	itt	eq
 80062dc:	1949      	addeq	r1, r1, r5
 80062de:	6021      	streq	r1, [r4, #0]
 80062e0:	6054      	str	r4, [r2, #4]
 80062e2:	e7ca      	b.n	800627a <_free_r+0x26>
 80062e4:	b003      	add	sp, #12
 80062e6:	bd30      	pop	{r4, r5, pc}
 80062e8:	2000143c 	.word	0x2000143c

080062ec <malloc>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <malloc+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f000 b823 	b.w	800633c <_malloc_r>
 80062f6:	bf00      	nop
 80062f8:	2000008c 	.word	0x2000008c

080062fc <sbrk_aligned>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4e0e      	ldr	r6, [pc, #56]	; (8006338 <sbrk_aligned+0x3c>)
 8006300:	460c      	mov	r4, r1
 8006302:	6831      	ldr	r1, [r6, #0]
 8006304:	4605      	mov	r5, r0
 8006306:	b911      	cbnz	r1, 800630e <sbrk_aligned+0x12>
 8006308:	f000 fcce 	bl	8006ca8 <_sbrk_r>
 800630c:	6030      	str	r0, [r6, #0]
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fcc9 	bl	8006ca8 <_sbrk_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d00a      	beq.n	8006330 <sbrk_aligned+0x34>
 800631a:	1cc4      	adds	r4, r0, #3
 800631c:	f024 0403 	bic.w	r4, r4, #3
 8006320:	42a0      	cmp	r0, r4
 8006322:	d007      	beq.n	8006334 <sbrk_aligned+0x38>
 8006324:	1a21      	subs	r1, r4, r0
 8006326:	4628      	mov	r0, r5
 8006328:	f000 fcbe 	bl	8006ca8 <_sbrk_r>
 800632c:	3001      	adds	r0, #1
 800632e:	d101      	bne.n	8006334 <sbrk_aligned+0x38>
 8006330:	f04f 34ff 	mov.w	r4, #4294967295
 8006334:	4620      	mov	r0, r4
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	20001440 	.word	0x20001440

0800633c <_malloc_r>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	1ccd      	adds	r5, r1, #3
 8006342:	f025 0503 	bic.w	r5, r5, #3
 8006346:	3508      	adds	r5, #8
 8006348:	2d0c      	cmp	r5, #12
 800634a:	bf38      	it	cc
 800634c:	250c      	movcc	r5, #12
 800634e:	2d00      	cmp	r5, #0
 8006350:	4607      	mov	r7, r0
 8006352:	db01      	blt.n	8006358 <_malloc_r+0x1c>
 8006354:	42a9      	cmp	r1, r5
 8006356:	d905      	bls.n	8006364 <_malloc_r+0x28>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	2600      	movs	r6, #0
 800635e:	4630      	mov	r0, r6
 8006360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006364:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006438 <_malloc_r+0xfc>
 8006368:	f000 f868 	bl	800643c <__malloc_lock>
 800636c:	f8d8 3000 	ldr.w	r3, [r8]
 8006370:	461c      	mov	r4, r3
 8006372:	bb5c      	cbnz	r4, 80063cc <_malloc_r+0x90>
 8006374:	4629      	mov	r1, r5
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ffc0 	bl	80062fc <sbrk_aligned>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	4604      	mov	r4, r0
 8006380:	d155      	bne.n	800642e <_malloc_r+0xf2>
 8006382:	f8d8 4000 	ldr.w	r4, [r8]
 8006386:	4626      	mov	r6, r4
 8006388:	2e00      	cmp	r6, #0
 800638a:	d145      	bne.n	8006418 <_malloc_r+0xdc>
 800638c:	2c00      	cmp	r4, #0
 800638e:	d048      	beq.n	8006422 <_malloc_r+0xe6>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	4631      	mov	r1, r6
 8006394:	4638      	mov	r0, r7
 8006396:	eb04 0903 	add.w	r9, r4, r3
 800639a:	f000 fc85 	bl	8006ca8 <_sbrk_r>
 800639e:	4581      	cmp	r9, r0
 80063a0:	d13f      	bne.n	8006422 <_malloc_r+0xe6>
 80063a2:	6821      	ldr	r1, [r4, #0]
 80063a4:	1a6d      	subs	r5, r5, r1
 80063a6:	4629      	mov	r1, r5
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff ffa7 	bl	80062fc <sbrk_aligned>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d037      	beq.n	8006422 <_malloc_r+0xe6>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	442b      	add	r3, r5
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	f8d8 3000 	ldr.w	r3, [r8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d038      	beq.n	8006432 <_malloc_r+0xf6>
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	42a2      	cmp	r2, r4
 80063c4:	d12b      	bne.n	800641e <_malloc_r+0xe2>
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	e00f      	b.n	80063ec <_malloc_r+0xb0>
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	1b52      	subs	r2, r2, r5
 80063d0:	d41f      	bmi.n	8006412 <_malloc_r+0xd6>
 80063d2:	2a0b      	cmp	r2, #11
 80063d4:	d917      	bls.n	8006406 <_malloc_r+0xca>
 80063d6:	1961      	adds	r1, r4, r5
 80063d8:	42a3      	cmp	r3, r4
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	6059      	strne	r1, [r3, #4]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	bf08      	it	eq
 80063e4:	f8c8 1000 	streq.w	r1, [r8]
 80063e8:	5162      	str	r2, [r4, r5]
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	4638      	mov	r0, r7
 80063ee:	f104 060b 	add.w	r6, r4, #11
 80063f2:	f000 f829 	bl	8006448 <__malloc_unlock>
 80063f6:	f026 0607 	bic.w	r6, r6, #7
 80063fa:	1d23      	adds	r3, r4, #4
 80063fc:	1af2      	subs	r2, r6, r3
 80063fe:	d0ae      	beq.n	800635e <_malloc_r+0x22>
 8006400:	1b9b      	subs	r3, r3, r6
 8006402:	50a3      	str	r3, [r4, r2]
 8006404:	e7ab      	b.n	800635e <_malloc_r+0x22>
 8006406:	42a3      	cmp	r3, r4
 8006408:	6862      	ldr	r2, [r4, #4]
 800640a:	d1dd      	bne.n	80063c8 <_malloc_r+0x8c>
 800640c:	f8c8 2000 	str.w	r2, [r8]
 8006410:	e7ec      	b.n	80063ec <_malloc_r+0xb0>
 8006412:	4623      	mov	r3, r4
 8006414:	6864      	ldr	r4, [r4, #4]
 8006416:	e7ac      	b.n	8006372 <_malloc_r+0x36>
 8006418:	4634      	mov	r4, r6
 800641a:	6876      	ldr	r6, [r6, #4]
 800641c:	e7b4      	b.n	8006388 <_malloc_r+0x4c>
 800641e:	4613      	mov	r3, r2
 8006420:	e7cc      	b.n	80063bc <_malloc_r+0x80>
 8006422:	230c      	movs	r3, #12
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	4638      	mov	r0, r7
 8006428:	f000 f80e 	bl	8006448 <__malloc_unlock>
 800642c:	e797      	b.n	800635e <_malloc_r+0x22>
 800642e:	6025      	str	r5, [r4, #0]
 8006430:	e7dc      	b.n	80063ec <_malloc_r+0xb0>
 8006432:	605b      	str	r3, [r3, #4]
 8006434:	deff      	udf	#255	; 0xff
 8006436:	bf00      	nop
 8006438:	2000143c 	.word	0x2000143c

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	; (8006444 <__malloc_lock+0x8>)
 800643e:	f7ff b88b 	b.w	8005558 <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	20001438 	.word	0x20001438

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__malloc_unlock+0x8>)
 800644a:	f7ff b886 	b.w	800555a <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	20001438 	.word	0x20001438

08006454 <_Balloc>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	69c6      	ldr	r6, [r0, #28]
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	b976      	cbnz	r6, 800647c <_Balloc+0x28>
 800645e:	2010      	movs	r0, #16
 8006460:	f7ff ff44 	bl	80062ec <malloc>
 8006464:	4602      	mov	r2, r0
 8006466:	61e0      	str	r0, [r4, #28]
 8006468:	b920      	cbnz	r0, 8006474 <_Balloc+0x20>
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <_Balloc+0x78>)
 800646c:	4818      	ldr	r0, [pc, #96]	; (80064d0 <_Balloc+0x7c>)
 800646e:	216b      	movs	r1, #107	; 0x6b
 8006470:	f000 fc38 	bl	8006ce4 <__assert_func>
 8006474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006478:	6006      	str	r6, [r0, #0]
 800647a:	60c6      	str	r6, [r0, #12]
 800647c:	69e6      	ldr	r6, [r4, #28]
 800647e:	68f3      	ldr	r3, [r6, #12]
 8006480:	b183      	cbz	r3, 80064a4 <_Balloc+0x50>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800648a:	b9b8      	cbnz	r0, 80064bc <_Balloc+0x68>
 800648c:	2101      	movs	r1, #1
 800648e:	fa01 f605 	lsl.w	r6, r1, r5
 8006492:	1d72      	adds	r2, r6, #5
 8006494:	0092      	lsls	r2, r2, #2
 8006496:	4620      	mov	r0, r4
 8006498:	f000 fc42 	bl	8006d20 <_calloc_r>
 800649c:	b160      	cbz	r0, 80064b8 <_Balloc+0x64>
 800649e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064a2:	e00e      	b.n	80064c2 <_Balloc+0x6e>
 80064a4:	2221      	movs	r2, #33	; 0x21
 80064a6:	2104      	movs	r1, #4
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fc39 	bl	8006d20 <_calloc_r>
 80064ae:	69e3      	ldr	r3, [r4, #28]
 80064b0:	60f0      	str	r0, [r6, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e4      	bne.n	8006482 <_Balloc+0x2e>
 80064b8:	2000      	movs	r0, #0
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	6802      	ldr	r2, [r0, #0]
 80064be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064c2:	2300      	movs	r3, #0
 80064c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064c8:	e7f7      	b.n	80064ba <_Balloc+0x66>
 80064ca:	bf00      	nop
 80064cc:	08007379 	.word	0x08007379
 80064d0:	080073f9 	.word	0x080073f9

080064d4 <_Bfree>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	69c6      	ldr	r6, [r0, #28]
 80064d8:	4605      	mov	r5, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	b976      	cbnz	r6, 80064fc <_Bfree+0x28>
 80064de:	2010      	movs	r0, #16
 80064e0:	f7ff ff04 	bl	80062ec <malloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	61e8      	str	r0, [r5, #28]
 80064e8:	b920      	cbnz	r0, 80064f4 <_Bfree+0x20>
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <_Bfree+0x3c>)
 80064ec:	4809      	ldr	r0, [pc, #36]	; (8006514 <_Bfree+0x40>)
 80064ee:	218f      	movs	r1, #143	; 0x8f
 80064f0:	f000 fbf8 	bl	8006ce4 <__assert_func>
 80064f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	60c6      	str	r6, [r0, #12]
 80064fc:	b13c      	cbz	r4, 800650e <_Bfree+0x3a>
 80064fe:	69eb      	ldr	r3, [r5, #28]
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006508:	6021      	str	r1, [r4, #0]
 800650a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	08007379 	.word	0x08007379
 8006514:	080073f9 	.word	0x080073f9

08006518 <__multadd>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	690d      	ldr	r5, [r1, #16]
 800651e:	4607      	mov	r7, r0
 8006520:	460c      	mov	r4, r1
 8006522:	461e      	mov	r6, r3
 8006524:	f101 0c14 	add.w	ip, r1, #20
 8006528:	2000      	movs	r0, #0
 800652a:	f8dc 3000 	ldr.w	r3, [ip]
 800652e:	b299      	uxth	r1, r3
 8006530:	fb02 6101 	mla	r1, r2, r1, r6
 8006534:	0c1e      	lsrs	r6, r3, #16
 8006536:	0c0b      	lsrs	r3, r1, #16
 8006538:	fb02 3306 	mla	r3, r2, r6, r3
 800653c:	b289      	uxth	r1, r1
 800653e:	3001      	adds	r0, #1
 8006540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006544:	4285      	cmp	r5, r0
 8006546:	f84c 1b04 	str.w	r1, [ip], #4
 800654a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800654e:	dcec      	bgt.n	800652a <__multadd+0x12>
 8006550:	b30e      	cbz	r6, 8006596 <__multadd+0x7e>
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc19      	bgt.n	800658c <__multadd+0x74>
 8006558:	6861      	ldr	r1, [r4, #4]
 800655a:	4638      	mov	r0, r7
 800655c:	3101      	adds	r1, #1
 800655e:	f7ff ff79 	bl	8006454 <_Balloc>
 8006562:	4680      	mov	r8, r0
 8006564:	b928      	cbnz	r0, 8006572 <__multadd+0x5a>
 8006566:	4602      	mov	r2, r0
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <__multadd+0x84>)
 800656a:	480d      	ldr	r0, [pc, #52]	; (80065a0 <__multadd+0x88>)
 800656c:	21ba      	movs	r1, #186	; 0xba
 800656e:	f000 fbb9 	bl	8006ce4 <__assert_func>
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	3202      	adds	r2, #2
 8006576:	f104 010c 	add.w	r1, r4, #12
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	300c      	adds	r0, #12
 800657e:	f000 fba3 	bl	8006cc8 <memcpy>
 8006582:	4621      	mov	r1, r4
 8006584:	4638      	mov	r0, r7
 8006586:	f7ff ffa5 	bl	80064d4 <_Bfree>
 800658a:	4644      	mov	r4, r8
 800658c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006590:	3501      	adds	r5, #1
 8006592:	615e      	str	r6, [r3, #20]
 8006594:	6125      	str	r5, [r4, #16]
 8006596:	4620      	mov	r0, r4
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	080073e8 	.word	0x080073e8
 80065a0:	080073f9 	.word	0x080073f9

080065a4 <__hi0bits>:
 80065a4:	0c03      	lsrs	r3, r0, #16
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	b9d3      	cbnz	r3, 80065e0 <__hi0bits+0x3c>
 80065aa:	0400      	lsls	r0, r0, #16
 80065ac:	2310      	movs	r3, #16
 80065ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065b2:	bf04      	itt	eq
 80065b4:	0200      	lsleq	r0, r0, #8
 80065b6:	3308      	addeq	r3, #8
 80065b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065bc:	bf04      	itt	eq
 80065be:	0100      	lsleq	r0, r0, #4
 80065c0:	3304      	addeq	r3, #4
 80065c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065c6:	bf04      	itt	eq
 80065c8:	0080      	lsleq	r0, r0, #2
 80065ca:	3302      	addeq	r3, #2
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db05      	blt.n	80065dc <__hi0bits+0x38>
 80065d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065d4:	f103 0301 	add.w	r3, r3, #1
 80065d8:	bf08      	it	eq
 80065da:	2320      	moveq	r3, #32
 80065dc:	4618      	mov	r0, r3
 80065de:	4770      	bx	lr
 80065e0:	2300      	movs	r3, #0
 80065e2:	e7e4      	b.n	80065ae <__hi0bits+0xa>

080065e4 <__lo0bits>:
 80065e4:	6803      	ldr	r3, [r0, #0]
 80065e6:	f013 0207 	ands.w	r2, r3, #7
 80065ea:	d00c      	beq.n	8006606 <__lo0bits+0x22>
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d422      	bmi.n	8006636 <__lo0bits+0x52>
 80065f0:	079a      	lsls	r2, r3, #30
 80065f2:	bf49      	itett	mi
 80065f4:	085b      	lsrmi	r3, r3, #1
 80065f6:	089b      	lsrpl	r3, r3, #2
 80065f8:	6003      	strmi	r3, [r0, #0]
 80065fa:	2201      	movmi	r2, #1
 80065fc:	bf5c      	itt	pl
 80065fe:	6003      	strpl	r3, [r0, #0]
 8006600:	2202      	movpl	r2, #2
 8006602:	4610      	mov	r0, r2
 8006604:	4770      	bx	lr
 8006606:	b299      	uxth	r1, r3
 8006608:	b909      	cbnz	r1, 800660e <__lo0bits+0x2a>
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	2210      	movs	r2, #16
 800660e:	b2d9      	uxtb	r1, r3
 8006610:	b909      	cbnz	r1, 8006616 <__lo0bits+0x32>
 8006612:	3208      	adds	r2, #8
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	0719      	lsls	r1, r3, #28
 8006618:	bf04      	itt	eq
 800661a:	091b      	lsreq	r3, r3, #4
 800661c:	3204      	addeq	r2, #4
 800661e:	0799      	lsls	r1, r3, #30
 8006620:	bf04      	itt	eq
 8006622:	089b      	lsreq	r3, r3, #2
 8006624:	3202      	addeq	r2, #2
 8006626:	07d9      	lsls	r1, r3, #31
 8006628:	d403      	bmi.n	8006632 <__lo0bits+0x4e>
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	f102 0201 	add.w	r2, r2, #1
 8006630:	d003      	beq.n	800663a <__lo0bits+0x56>
 8006632:	6003      	str	r3, [r0, #0]
 8006634:	e7e5      	b.n	8006602 <__lo0bits+0x1e>
 8006636:	2200      	movs	r2, #0
 8006638:	e7e3      	b.n	8006602 <__lo0bits+0x1e>
 800663a:	2220      	movs	r2, #32
 800663c:	e7e1      	b.n	8006602 <__lo0bits+0x1e>
	...

08006640 <__i2b>:
 8006640:	b510      	push	{r4, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	2101      	movs	r1, #1
 8006646:	f7ff ff05 	bl	8006454 <_Balloc>
 800664a:	4602      	mov	r2, r0
 800664c:	b928      	cbnz	r0, 800665a <__i2b+0x1a>
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <__i2b+0x24>)
 8006650:	4805      	ldr	r0, [pc, #20]	; (8006668 <__i2b+0x28>)
 8006652:	f240 1145 	movw	r1, #325	; 0x145
 8006656:	f000 fb45 	bl	8006ce4 <__assert_func>
 800665a:	2301      	movs	r3, #1
 800665c:	6144      	str	r4, [r0, #20]
 800665e:	6103      	str	r3, [r0, #16]
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	080073e8 	.word	0x080073e8
 8006668:	080073f9 	.word	0x080073f9

0800666c <__multiply>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	4691      	mov	r9, r2
 8006672:	690a      	ldr	r2, [r1, #16]
 8006674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	bfb8      	it	lt
 800667c:	460b      	movlt	r3, r1
 800667e:	460c      	mov	r4, r1
 8006680:	bfbc      	itt	lt
 8006682:	464c      	movlt	r4, r9
 8006684:	4699      	movlt	r9, r3
 8006686:	6927      	ldr	r7, [r4, #16]
 8006688:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	6861      	ldr	r1, [r4, #4]
 8006690:	eb07 060a 	add.w	r6, r7, sl
 8006694:	42b3      	cmp	r3, r6
 8006696:	b085      	sub	sp, #20
 8006698:	bfb8      	it	lt
 800669a:	3101      	addlt	r1, #1
 800669c:	f7ff feda 	bl	8006454 <_Balloc>
 80066a0:	b930      	cbnz	r0, 80066b0 <__multiply+0x44>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b44      	ldr	r3, [pc, #272]	; (80067b8 <__multiply+0x14c>)
 80066a6:	4845      	ldr	r0, [pc, #276]	; (80067bc <__multiply+0x150>)
 80066a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066ac:	f000 fb1a 	bl	8006ce4 <__assert_func>
 80066b0:	f100 0514 	add.w	r5, r0, #20
 80066b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066b8:	462b      	mov	r3, r5
 80066ba:	2200      	movs	r2, #0
 80066bc:	4543      	cmp	r3, r8
 80066be:	d321      	bcc.n	8006704 <__multiply+0x98>
 80066c0:	f104 0314 	add.w	r3, r4, #20
 80066c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066c8:	f109 0314 	add.w	r3, r9, #20
 80066cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	1b3a      	subs	r2, r7, r4
 80066d4:	3a15      	subs	r2, #21
 80066d6:	f022 0203 	bic.w	r2, r2, #3
 80066da:	3204      	adds	r2, #4
 80066dc:	f104 0115 	add.w	r1, r4, #21
 80066e0:	428f      	cmp	r7, r1
 80066e2:	bf38      	it	cc
 80066e4:	2204      	movcc	r2, #4
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	9a02      	ldr	r2, [sp, #8]
 80066ea:	9303      	str	r3, [sp, #12]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d80c      	bhi.n	800670a <__multiply+0x9e>
 80066f0:	2e00      	cmp	r6, #0
 80066f2:	dd03      	ble.n	80066fc <__multiply+0x90>
 80066f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05b      	beq.n	80067b4 <__multiply+0x148>
 80066fc:	6106      	str	r6, [r0, #16]
 80066fe:	b005      	add	sp, #20
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	f843 2b04 	str.w	r2, [r3], #4
 8006708:	e7d8      	b.n	80066bc <__multiply+0x50>
 800670a:	f8b3 a000 	ldrh.w	sl, [r3]
 800670e:	f1ba 0f00 	cmp.w	sl, #0
 8006712:	d024      	beq.n	800675e <__multiply+0xf2>
 8006714:	f104 0e14 	add.w	lr, r4, #20
 8006718:	46a9      	mov	r9, r5
 800671a:	f04f 0c00 	mov.w	ip, #0
 800671e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006722:	f8d9 1000 	ldr.w	r1, [r9]
 8006726:	fa1f fb82 	uxth.w	fp, r2
 800672a:	b289      	uxth	r1, r1
 800672c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006734:	f8d9 2000 	ldr.w	r2, [r9]
 8006738:	4461      	add	r1, ip
 800673a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800673e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006746:	b289      	uxth	r1, r1
 8006748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800674c:	4577      	cmp	r7, lr
 800674e:	f849 1b04 	str.w	r1, [r9], #4
 8006752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006756:	d8e2      	bhi.n	800671e <__multiply+0xb2>
 8006758:	9a01      	ldr	r2, [sp, #4]
 800675a:	f845 c002 	str.w	ip, [r5, r2]
 800675e:	9a03      	ldr	r2, [sp, #12]
 8006760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006764:	3304      	adds	r3, #4
 8006766:	f1b9 0f00 	cmp.w	r9, #0
 800676a:	d021      	beq.n	80067b0 <__multiply+0x144>
 800676c:	6829      	ldr	r1, [r5, #0]
 800676e:	f104 0c14 	add.w	ip, r4, #20
 8006772:	46ae      	mov	lr, r5
 8006774:	f04f 0a00 	mov.w	sl, #0
 8006778:	f8bc b000 	ldrh.w	fp, [ip]
 800677c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006780:	fb09 220b 	mla	r2, r9, fp, r2
 8006784:	4452      	add	r2, sl
 8006786:	b289      	uxth	r1, r1
 8006788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800678c:	f84e 1b04 	str.w	r1, [lr], #4
 8006790:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006794:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006798:	f8be 1000 	ldrh.w	r1, [lr]
 800679c:	fb09 110a 	mla	r1, r9, sl, r1
 80067a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067a4:	4567      	cmp	r7, ip
 80067a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067aa:	d8e5      	bhi.n	8006778 <__multiply+0x10c>
 80067ac:	9a01      	ldr	r2, [sp, #4]
 80067ae:	50a9      	str	r1, [r5, r2]
 80067b0:	3504      	adds	r5, #4
 80067b2:	e799      	b.n	80066e8 <__multiply+0x7c>
 80067b4:	3e01      	subs	r6, #1
 80067b6:	e79b      	b.n	80066f0 <__multiply+0x84>
 80067b8:	080073e8 	.word	0x080073e8
 80067bc:	080073f9 	.word	0x080073f9

080067c0 <__pow5mult>:
 80067c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	4615      	mov	r5, r2
 80067c6:	f012 0203 	ands.w	r2, r2, #3
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	d007      	beq.n	80067e0 <__pow5mult+0x20>
 80067d0:	4c25      	ldr	r4, [pc, #148]	; (8006868 <__pow5mult+0xa8>)
 80067d2:	3a01      	subs	r2, #1
 80067d4:	2300      	movs	r3, #0
 80067d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067da:	f7ff fe9d 	bl	8006518 <__multadd>
 80067de:	4607      	mov	r7, r0
 80067e0:	10ad      	asrs	r5, r5, #2
 80067e2:	d03d      	beq.n	8006860 <__pow5mult+0xa0>
 80067e4:	69f4      	ldr	r4, [r6, #28]
 80067e6:	b97c      	cbnz	r4, 8006808 <__pow5mult+0x48>
 80067e8:	2010      	movs	r0, #16
 80067ea:	f7ff fd7f 	bl	80062ec <malloc>
 80067ee:	4602      	mov	r2, r0
 80067f0:	61f0      	str	r0, [r6, #28]
 80067f2:	b928      	cbnz	r0, 8006800 <__pow5mult+0x40>
 80067f4:	4b1d      	ldr	r3, [pc, #116]	; (800686c <__pow5mult+0xac>)
 80067f6:	481e      	ldr	r0, [pc, #120]	; (8006870 <__pow5mult+0xb0>)
 80067f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80067fc:	f000 fa72 	bl	8006ce4 <__assert_func>
 8006800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006804:	6004      	str	r4, [r0, #0]
 8006806:	60c4      	str	r4, [r0, #12]
 8006808:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800680c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006810:	b94c      	cbnz	r4, 8006826 <__pow5mult+0x66>
 8006812:	f240 2171 	movw	r1, #625	; 0x271
 8006816:	4630      	mov	r0, r6
 8006818:	f7ff ff12 	bl	8006640 <__i2b>
 800681c:	2300      	movs	r3, #0
 800681e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006822:	4604      	mov	r4, r0
 8006824:	6003      	str	r3, [r0, #0]
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	07eb      	lsls	r3, r5, #31
 800682c:	d50a      	bpl.n	8006844 <__pow5mult+0x84>
 800682e:	4639      	mov	r1, r7
 8006830:	4622      	mov	r2, r4
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ff1a 	bl	800666c <__multiply>
 8006838:	4639      	mov	r1, r7
 800683a:	4680      	mov	r8, r0
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff fe49 	bl	80064d4 <_Bfree>
 8006842:	4647      	mov	r7, r8
 8006844:	106d      	asrs	r5, r5, #1
 8006846:	d00b      	beq.n	8006860 <__pow5mult+0xa0>
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	b938      	cbnz	r0, 800685c <__pow5mult+0x9c>
 800684c:	4622      	mov	r2, r4
 800684e:	4621      	mov	r1, r4
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff ff0b 	bl	800666c <__multiply>
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	f8c0 9000 	str.w	r9, [r0]
 800685c:	4604      	mov	r4, r0
 800685e:	e7e4      	b.n	800682a <__pow5mult+0x6a>
 8006860:	4638      	mov	r0, r7
 8006862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006866:	bf00      	nop
 8006868:	08007548 	.word	0x08007548
 800686c:	08007379 	.word	0x08007379
 8006870:	080073f9 	.word	0x080073f9

08006874 <__lshift>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	460c      	mov	r4, r1
 800687a:	6849      	ldr	r1, [r1, #4]
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	4607      	mov	r7, r0
 8006886:	4691      	mov	r9, r2
 8006888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800688c:	f108 0601 	add.w	r6, r8, #1
 8006890:	42b3      	cmp	r3, r6
 8006892:	db0b      	blt.n	80068ac <__lshift+0x38>
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff fddd 	bl	8006454 <_Balloc>
 800689a:	4605      	mov	r5, r0
 800689c:	b948      	cbnz	r0, 80068b2 <__lshift+0x3e>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b28      	ldr	r3, [pc, #160]	; (8006944 <__lshift+0xd0>)
 80068a2:	4829      	ldr	r0, [pc, #164]	; (8006948 <__lshift+0xd4>)
 80068a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068a8:	f000 fa1c 	bl	8006ce4 <__assert_func>
 80068ac:	3101      	adds	r1, #1
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	e7ee      	b.n	8006890 <__lshift+0x1c>
 80068b2:	2300      	movs	r3, #0
 80068b4:	f100 0114 	add.w	r1, r0, #20
 80068b8:	f100 0210 	add.w	r2, r0, #16
 80068bc:	4618      	mov	r0, r3
 80068be:	4553      	cmp	r3, sl
 80068c0:	db33      	blt.n	800692a <__lshift+0xb6>
 80068c2:	6920      	ldr	r0, [r4, #16]
 80068c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068c8:	f104 0314 	add.w	r3, r4, #20
 80068cc:	f019 091f 	ands.w	r9, r9, #31
 80068d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068d8:	d02b      	beq.n	8006932 <__lshift+0xbe>
 80068da:	f1c9 0e20 	rsb	lr, r9, #32
 80068de:	468a      	mov	sl, r1
 80068e0:	2200      	movs	r2, #0
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	fa00 f009 	lsl.w	r0, r0, r9
 80068e8:	4310      	orrs	r0, r2
 80068ea:	f84a 0b04 	str.w	r0, [sl], #4
 80068ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f2:	459c      	cmp	ip, r3
 80068f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068f8:	d8f3      	bhi.n	80068e2 <__lshift+0x6e>
 80068fa:	ebac 0304 	sub.w	r3, ip, r4
 80068fe:	3b15      	subs	r3, #21
 8006900:	f023 0303 	bic.w	r3, r3, #3
 8006904:	3304      	adds	r3, #4
 8006906:	f104 0015 	add.w	r0, r4, #21
 800690a:	4584      	cmp	ip, r0
 800690c:	bf38      	it	cc
 800690e:	2304      	movcc	r3, #4
 8006910:	50ca      	str	r2, [r1, r3]
 8006912:	b10a      	cbz	r2, 8006918 <__lshift+0xa4>
 8006914:	f108 0602 	add.w	r6, r8, #2
 8006918:	3e01      	subs	r6, #1
 800691a:	4638      	mov	r0, r7
 800691c:	612e      	str	r6, [r5, #16]
 800691e:	4621      	mov	r1, r4
 8006920:	f7ff fdd8 	bl	80064d4 <_Bfree>
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692a:	f842 0f04 	str.w	r0, [r2, #4]!
 800692e:	3301      	adds	r3, #1
 8006930:	e7c5      	b.n	80068be <__lshift+0x4a>
 8006932:	3904      	subs	r1, #4
 8006934:	f853 2b04 	ldr.w	r2, [r3], #4
 8006938:	f841 2f04 	str.w	r2, [r1, #4]!
 800693c:	459c      	cmp	ip, r3
 800693e:	d8f9      	bhi.n	8006934 <__lshift+0xc0>
 8006940:	e7ea      	b.n	8006918 <__lshift+0xa4>
 8006942:	bf00      	nop
 8006944:	080073e8 	.word	0x080073e8
 8006948:	080073f9 	.word	0x080073f9

0800694c <__mcmp>:
 800694c:	b530      	push	{r4, r5, lr}
 800694e:	6902      	ldr	r2, [r0, #16]
 8006950:	690c      	ldr	r4, [r1, #16]
 8006952:	1b12      	subs	r2, r2, r4
 8006954:	d10e      	bne.n	8006974 <__mcmp+0x28>
 8006956:	f100 0314 	add.w	r3, r0, #20
 800695a:	3114      	adds	r1, #20
 800695c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006960:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006964:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006968:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800696c:	42a5      	cmp	r5, r4
 800696e:	d003      	beq.n	8006978 <__mcmp+0x2c>
 8006970:	d305      	bcc.n	800697e <__mcmp+0x32>
 8006972:	2201      	movs	r2, #1
 8006974:	4610      	mov	r0, r2
 8006976:	bd30      	pop	{r4, r5, pc}
 8006978:	4283      	cmp	r3, r0
 800697a:	d3f3      	bcc.n	8006964 <__mcmp+0x18>
 800697c:	e7fa      	b.n	8006974 <__mcmp+0x28>
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	e7f7      	b.n	8006974 <__mcmp+0x28>

08006984 <__mdiff>:
 8006984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	4606      	mov	r6, r0
 800698c:	4611      	mov	r1, r2
 800698e:	4620      	mov	r0, r4
 8006990:	4690      	mov	r8, r2
 8006992:	f7ff ffdb 	bl	800694c <__mcmp>
 8006996:	1e05      	subs	r5, r0, #0
 8006998:	d110      	bne.n	80069bc <__mdiff+0x38>
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff fd59 	bl	8006454 <_Balloc>
 80069a2:	b930      	cbnz	r0, 80069b2 <__mdiff+0x2e>
 80069a4:	4b3a      	ldr	r3, [pc, #232]	; (8006a90 <__mdiff+0x10c>)
 80069a6:	4602      	mov	r2, r0
 80069a8:	f240 2137 	movw	r1, #567	; 0x237
 80069ac:	4839      	ldr	r0, [pc, #228]	; (8006a94 <__mdiff+0x110>)
 80069ae:	f000 f999 	bl	8006ce4 <__assert_func>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	bfa4      	itt	ge
 80069be:	4643      	movge	r3, r8
 80069c0:	46a0      	movge	r8, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069c8:	bfa6      	itte	ge
 80069ca:	461c      	movge	r4, r3
 80069cc:	2500      	movge	r5, #0
 80069ce:	2501      	movlt	r5, #1
 80069d0:	f7ff fd40 	bl	8006454 <_Balloc>
 80069d4:	b920      	cbnz	r0, 80069e0 <__mdiff+0x5c>
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <__mdiff+0x10c>)
 80069d8:	4602      	mov	r2, r0
 80069da:	f240 2145 	movw	r1, #581	; 0x245
 80069de:	e7e5      	b.n	80069ac <__mdiff+0x28>
 80069e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069e4:	6926      	ldr	r6, [r4, #16]
 80069e6:	60c5      	str	r5, [r0, #12]
 80069e8:	f104 0914 	add.w	r9, r4, #20
 80069ec:	f108 0514 	add.w	r5, r8, #20
 80069f0:	f100 0e14 	add.w	lr, r0, #20
 80069f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069fc:	f108 0210 	add.w	r2, r8, #16
 8006a00:	46f2      	mov	sl, lr
 8006a02:	2100      	movs	r1, #0
 8006a04:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a0c:	fa11 f88b 	uxtah	r8, r1, fp
 8006a10:	b299      	uxth	r1, r3
 8006a12:	0c1b      	lsrs	r3, r3, #16
 8006a14:	eba8 0801 	sub.w	r8, r8, r1
 8006a18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a20:	fa1f f888 	uxth.w	r8, r8
 8006a24:	1419      	asrs	r1, r3, #16
 8006a26:	454e      	cmp	r6, r9
 8006a28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a2c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a30:	d8e8      	bhi.n	8006a04 <__mdiff+0x80>
 8006a32:	1b33      	subs	r3, r6, r4
 8006a34:	3b15      	subs	r3, #21
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	3415      	adds	r4, #21
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	bf38      	it	cc
 8006a42:	2304      	movcc	r3, #4
 8006a44:	441d      	add	r5, r3
 8006a46:	4473      	add	r3, lr
 8006a48:	469e      	mov	lr, r3
 8006a4a:	462e      	mov	r6, r5
 8006a4c:	4566      	cmp	r6, ip
 8006a4e:	d30e      	bcc.n	8006a6e <__mdiff+0xea>
 8006a50:	f10c 0203 	add.w	r2, ip, #3
 8006a54:	1b52      	subs	r2, r2, r5
 8006a56:	f022 0203 	bic.w	r2, r2, #3
 8006a5a:	3d03      	subs	r5, #3
 8006a5c:	45ac      	cmp	ip, r5
 8006a5e:	bf38      	it	cc
 8006a60:	2200      	movcc	r2, #0
 8006a62:	4413      	add	r3, r2
 8006a64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a68:	b17a      	cbz	r2, 8006a8a <__mdiff+0x106>
 8006a6a:	6107      	str	r7, [r0, #16]
 8006a6c:	e7a4      	b.n	80069b8 <__mdiff+0x34>
 8006a6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a72:	fa11 f288 	uxtah	r2, r1, r8
 8006a76:	1414      	asrs	r4, r2, #16
 8006a78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a82:	f84e 2b04 	str.w	r2, [lr], #4
 8006a86:	1421      	asrs	r1, r4, #16
 8006a88:	e7e0      	b.n	8006a4c <__mdiff+0xc8>
 8006a8a:	3f01      	subs	r7, #1
 8006a8c:	e7ea      	b.n	8006a64 <__mdiff+0xe0>
 8006a8e:	bf00      	nop
 8006a90:	080073e8 	.word	0x080073e8
 8006a94:	080073f9 	.word	0x080073f9

08006a98 <__d2b>:
 8006a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	ec59 8b10 	vmov	r8, r9, d0
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	f7ff fcd5 	bl	8006454 <_Balloc>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	b930      	cbnz	r0, 8006abc <__d2b+0x24>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <__d2b+0xac>)
 8006ab2:	4825      	ldr	r0, [pc, #148]	; (8006b48 <__d2b+0xb0>)
 8006ab4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ab8:	f000 f914 	bl	8006ce4 <__assert_func>
 8006abc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ac4:	bb2d      	cbnz	r5, 8006b12 <__d2b+0x7a>
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	f1b8 0300 	subs.w	r3, r8, #0
 8006acc:	d026      	beq.n	8006b1c <__d2b+0x84>
 8006ace:	4668      	mov	r0, sp
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	f7ff fd87 	bl	80065e4 <__lo0bits>
 8006ad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ada:	b1e8      	cbz	r0, 8006b18 <__d2b+0x80>
 8006adc:	f1c0 0320 	rsb	r3, r0, #32
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	40c2      	lsrs	r2, r0
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	9201      	str	r2, [sp, #4]
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	61a3      	str	r3, [r4, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bf14      	ite	ne
 8006af4:	2202      	movne	r2, #2
 8006af6:	2201      	moveq	r2, #1
 8006af8:	6122      	str	r2, [r4, #16]
 8006afa:	b1bd      	cbz	r5, 8006b2c <__d2b+0x94>
 8006afc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b00:	4405      	add	r5, r0
 8006b02:	603d      	str	r5, [r7, #0]
 8006b04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	b003      	add	sp, #12
 8006b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b16:	e7d6      	b.n	8006ac6 <__d2b+0x2e>
 8006b18:	6161      	str	r1, [r4, #20]
 8006b1a:	e7e7      	b.n	8006aec <__d2b+0x54>
 8006b1c:	a801      	add	r0, sp, #4
 8006b1e:	f7ff fd61 	bl	80065e4 <__lo0bits>
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	6163      	str	r3, [r4, #20]
 8006b26:	3020      	adds	r0, #32
 8006b28:	2201      	movs	r2, #1
 8006b2a:	e7e5      	b.n	8006af8 <__d2b+0x60>
 8006b2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b34:	6038      	str	r0, [r7, #0]
 8006b36:	6918      	ldr	r0, [r3, #16]
 8006b38:	f7ff fd34 	bl	80065a4 <__hi0bits>
 8006b3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b40:	e7e2      	b.n	8006b08 <__d2b+0x70>
 8006b42:	bf00      	nop
 8006b44:	080073e8 	.word	0x080073e8
 8006b48:	080073f9 	.word	0x080073f9

08006b4c <__sflush_r>:
 8006b4c:	898a      	ldrh	r2, [r1, #12]
 8006b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	4605      	mov	r5, r0
 8006b54:	0710      	lsls	r0, r2, #28
 8006b56:	460c      	mov	r4, r1
 8006b58:	d458      	bmi.n	8006c0c <__sflush_r+0xc0>
 8006b5a:	684b      	ldr	r3, [r1, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc05      	bgt.n	8006b6c <__sflush_r+0x20>
 8006b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dc02      	bgt.n	8006b6c <__sflush_r+0x20>
 8006b66:	2000      	movs	r0, #0
 8006b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	d0f9      	beq.n	8006b66 <__sflush_r+0x1a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b78:	682f      	ldr	r7, [r5, #0]
 8006b7a:	6a21      	ldr	r1, [r4, #32]
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	d032      	beq.n	8006be6 <__sflush_r+0x9a>
 8006b80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	075a      	lsls	r2, r3, #29
 8006b86:	d505      	bpl.n	8006b94 <__sflush_r+0x48>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	1ac0      	subs	r0, r0, r3
 8006b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b8e:	b10b      	cbz	r3, 8006b94 <__sflush_r+0x48>
 8006b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b92:	1ac0      	subs	r0, r0, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	4602      	mov	r2, r0
 8006b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b0      	blx	r6
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	d106      	bne.n	8006bb4 <__sflush_r+0x68>
 8006ba6:	6829      	ldr	r1, [r5, #0]
 8006ba8:	291d      	cmp	r1, #29
 8006baa:	d82b      	bhi.n	8006c04 <__sflush_r+0xb8>
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <__sflush_r+0x108>)
 8006bae:	410a      	asrs	r2, r1
 8006bb0:	07d6      	lsls	r6, r2, #31
 8006bb2:	d427      	bmi.n	8006c04 <__sflush_r+0xb8>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6062      	str	r2, [r4, #4]
 8006bb8:	04d9      	lsls	r1, r3, #19
 8006bba:	6922      	ldr	r2, [r4, #16]
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	d504      	bpl.n	8006bca <__sflush_r+0x7e>
 8006bc0:	1c42      	adds	r2, r0, #1
 8006bc2:	d101      	bne.n	8006bc8 <__sflush_r+0x7c>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b903      	cbnz	r3, 8006bca <__sflush_r+0x7e>
 8006bc8:	6560      	str	r0, [r4, #84]	; 0x54
 8006bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bcc:	602f      	str	r7, [r5, #0]
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	d0c9      	beq.n	8006b66 <__sflush_r+0x1a>
 8006bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bd6:	4299      	cmp	r1, r3
 8006bd8:	d002      	beq.n	8006be0 <__sflush_r+0x94>
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7ff fb3a 	bl	8006254 <_free_r>
 8006be0:	2000      	movs	r0, #0
 8006be2:	6360      	str	r0, [r4, #52]	; 0x34
 8006be4:	e7c0      	b.n	8006b68 <__sflush_r+0x1c>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b0      	blx	r6
 8006bec:	1c41      	adds	r1, r0, #1
 8006bee:	d1c8      	bne.n	8006b82 <__sflush_r+0x36>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c5      	beq.n	8006b82 <__sflush_r+0x36>
 8006bf6:	2b1d      	cmp	r3, #29
 8006bf8:	d001      	beq.n	8006bfe <__sflush_r+0xb2>
 8006bfa:	2b16      	cmp	r3, #22
 8006bfc:	d101      	bne.n	8006c02 <__sflush_r+0xb6>
 8006bfe:	602f      	str	r7, [r5, #0]
 8006c00:	e7b1      	b.n	8006b66 <__sflush_r+0x1a>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e7ad      	b.n	8006b68 <__sflush_r+0x1c>
 8006c0c:	690f      	ldr	r7, [r1, #16]
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	d0a9      	beq.n	8006b66 <__sflush_r+0x1a>
 8006c12:	0793      	lsls	r3, r2, #30
 8006c14:	680e      	ldr	r6, [r1, #0]
 8006c16:	bf08      	it	eq
 8006c18:	694b      	ldreq	r3, [r1, #20]
 8006c1a:	600f      	str	r7, [r1, #0]
 8006c1c:	bf18      	it	ne
 8006c1e:	2300      	movne	r3, #0
 8006c20:	eba6 0807 	sub.w	r8, r6, r7
 8006c24:	608b      	str	r3, [r1, #8]
 8006c26:	f1b8 0f00 	cmp.w	r8, #0
 8006c2a:	dd9c      	ble.n	8006b66 <__sflush_r+0x1a>
 8006c2c:	6a21      	ldr	r1, [r4, #32]
 8006c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c30:	4643      	mov	r3, r8
 8006c32:	463a      	mov	r2, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b0      	blx	r6
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	dc06      	bgt.n	8006c4a <__sflush_r+0xfe>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e78e      	b.n	8006b68 <__sflush_r+0x1c>
 8006c4a:	4407      	add	r7, r0
 8006c4c:	eba8 0800 	sub.w	r8, r8, r0
 8006c50:	e7e9      	b.n	8006c26 <__sflush_r+0xda>
 8006c52:	bf00      	nop
 8006c54:	dfbffffe 	.word	0xdfbffffe

08006c58 <_fflush_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	690b      	ldr	r3, [r1, #16]
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	b913      	cbnz	r3, 8006c68 <_fflush_r+0x10>
 8006c62:	2500      	movs	r5, #0
 8006c64:	4628      	mov	r0, r5
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	b118      	cbz	r0, 8006c72 <_fflush_r+0x1a>
 8006c6a:	6a03      	ldr	r3, [r0, #32]
 8006c6c:	b90b      	cbnz	r3, 8006c72 <_fflush_r+0x1a>
 8006c6e:	f7fe fb7d 	bl	800536c <__sinit>
 8006c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f3      	beq.n	8006c62 <_fflush_r+0xa>
 8006c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c7c:	07d0      	lsls	r0, r2, #31
 8006c7e:	d404      	bmi.n	8006c8a <_fflush_r+0x32>
 8006c80:	0599      	lsls	r1, r3, #22
 8006c82:	d402      	bmi.n	8006c8a <_fflush_r+0x32>
 8006c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c86:	f7fe fc67 	bl	8005558 <__retarget_lock_acquire_recursive>
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	f7ff ff5d 	bl	8006b4c <__sflush_r>
 8006c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c94:	07da      	lsls	r2, r3, #31
 8006c96:	4605      	mov	r5, r0
 8006c98:	d4e4      	bmi.n	8006c64 <_fflush_r+0xc>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	059b      	lsls	r3, r3, #22
 8006c9e:	d4e1      	bmi.n	8006c64 <_fflush_r+0xc>
 8006ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ca2:	f7fe fc5a 	bl	800555a <__retarget_lock_release_recursive>
 8006ca6:	e7dd      	b.n	8006c64 <_fflush_r+0xc>

08006ca8 <_sbrk_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d06      	ldr	r5, [pc, #24]	; (8006cc4 <_sbrk_r+0x1c>)
 8006cac:	2300      	movs	r3, #0
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	f7fa fe80 	bl	80019b8 <_sbrk>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_sbrk_r+0x1a>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_sbrk_r+0x1a>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	20001434 	.word	0x20001434

08006cc8 <memcpy>:
 8006cc8:	440a      	add	r2, r1
 8006cca:	4291      	cmp	r1, r2
 8006ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd0:	d100      	bne.n	8006cd4 <memcpy+0xc>
 8006cd2:	4770      	bx	lr
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	d1f9      	bne.n	8006cd6 <memcpy+0xe>
 8006ce2:	bd10      	pop	{r4, pc}

08006ce4 <__assert_func>:
 8006ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <__assert_func+0x2c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	68d8      	ldr	r0, [r3, #12]
 8006cf2:	b14c      	cbz	r4, 8006d08 <__assert_func+0x24>
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <__assert_func+0x30>)
 8006cf6:	9100      	str	r1, [sp, #0]
 8006cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cfc:	4906      	ldr	r1, [pc, #24]	; (8006d18 <__assert_func+0x34>)
 8006cfe:	462b      	mov	r3, r5
 8006d00:	f000 f844 	bl	8006d8c <fiprintf>
 8006d04:	f000 f854 	bl	8006db0 <abort>
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <__assert_func+0x38>)
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	e7f3      	b.n	8006cf6 <__assert_func+0x12>
 8006d0e:	bf00      	nop
 8006d10:	2000008c 	.word	0x2000008c
 8006d14:	0800755e 	.word	0x0800755e
 8006d18:	0800756b 	.word	0x0800756b
 8006d1c:	08007599 	.word	0x08007599

08006d20 <_calloc_r>:
 8006d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d22:	fba1 2402 	umull	r2, r4, r1, r2
 8006d26:	b94c      	cbnz	r4, 8006d3c <_calloc_r+0x1c>
 8006d28:	4611      	mov	r1, r2
 8006d2a:	9201      	str	r2, [sp, #4]
 8006d2c:	f7ff fb06 	bl	800633c <_malloc_r>
 8006d30:	9a01      	ldr	r2, [sp, #4]
 8006d32:	4605      	mov	r5, r0
 8006d34:	b930      	cbnz	r0, 8006d44 <_calloc_r+0x24>
 8006d36:	4628      	mov	r0, r5
 8006d38:	b003      	add	sp, #12
 8006d3a:	bd30      	pop	{r4, r5, pc}
 8006d3c:	220c      	movs	r2, #12
 8006d3e:	6002      	str	r2, [r0, #0]
 8006d40:	2500      	movs	r5, #0
 8006d42:	e7f8      	b.n	8006d36 <_calloc_r+0x16>
 8006d44:	4621      	mov	r1, r4
 8006d46:	f7fe fb8a 	bl	800545e <memset>
 8006d4a:	e7f4      	b.n	8006d36 <_calloc_r+0x16>

08006d4c <__ascii_mbtowc>:
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	b901      	cbnz	r1, 8006d52 <__ascii_mbtowc+0x6>
 8006d50:	a901      	add	r1, sp, #4
 8006d52:	b142      	cbz	r2, 8006d66 <__ascii_mbtowc+0x1a>
 8006d54:	b14b      	cbz	r3, 8006d6a <__ascii_mbtowc+0x1e>
 8006d56:	7813      	ldrb	r3, [r2, #0]
 8006d58:	600b      	str	r3, [r1, #0]
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	1e10      	subs	r0, r2, #0
 8006d5e:	bf18      	it	ne
 8006d60:	2001      	movne	r0, #1
 8006d62:	b002      	add	sp, #8
 8006d64:	4770      	bx	lr
 8006d66:	4610      	mov	r0, r2
 8006d68:	e7fb      	b.n	8006d62 <__ascii_mbtowc+0x16>
 8006d6a:	f06f 0001 	mvn.w	r0, #1
 8006d6e:	e7f8      	b.n	8006d62 <__ascii_mbtowc+0x16>

08006d70 <__ascii_wctomb>:
 8006d70:	b149      	cbz	r1, 8006d86 <__ascii_wctomb+0x16>
 8006d72:	2aff      	cmp	r2, #255	; 0xff
 8006d74:	bf85      	ittet	hi
 8006d76:	238a      	movhi	r3, #138	; 0x8a
 8006d78:	6003      	strhi	r3, [r0, #0]
 8006d7a:	700a      	strbls	r2, [r1, #0]
 8006d7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d80:	bf98      	it	ls
 8006d82:	2001      	movls	r0, #1
 8006d84:	4770      	bx	lr
 8006d86:	4608      	mov	r0, r1
 8006d88:	4770      	bx	lr
	...

08006d8c <fiprintf>:
 8006d8c:	b40e      	push	{r1, r2, r3}
 8006d8e:	b503      	push	{r0, r1, lr}
 8006d90:	4601      	mov	r1, r0
 8006d92:	ab03      	add	r3, sp, #12
 8006d94:	4805      	ldr	r0, [pc, #20]	; (8006dac <fiprintf+0x20>)
 8006d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	f000 f837 	bl	8006e10 <_vfiprintf_r>
 8006da2:	b002      	add	sp, #8
 8006da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da8:	b003      	add	sp, #12
 8006daa:	4770      	bx	lr
 8006dac:	2000008c 	.word	0x2000008c

08006db0 <abort>:
 8006db0:	b508      	push	{r3, lr}
 8006db2:	2006      	movs	r0, #6
 8006db4:	f000 fa04 	bl	80071c0 <raise>
 8006db8:	2001      	movs	r0, #1
 8006dba:	f7fa fd85 	bl	80018c8 <_exit>

08006dbe <__sfputc_r>:
 8006dbe:	6893      	ldr	r3, [r2, #8]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	b410      	push	{r4}
 8006dc6:	6093      	str	r3, [r2, #8]
 8006dc8:	da08      	bge.n	8006ddc <__sfputc_r+0x1e>
 8006dca:	6994      	ldr	r4, [r2, #24]
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	db01      	blt.n	8006dd4 <__sfputc_r+0x16>
 8006dd0:	290a      	cmp	r1, #10
 8006dd2:	d103      	bne.n	8006ddc <__sfputc_r+0x1e>
 8006dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd8:	f000 b934 	b.w	8007044 <__swbuf_r>
 8006ddc:	6813      	ldr	r3, [r2, #0]
 8006dde:	1c58      	adds	r0, r3, #1
 8006de0:	6010      	str	r0, [r2, #0]
 8006de2:	7019      	strb	r1, [r3, #0]
 8006de4:	4608      	mov	r0, r1
 8006de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <__sfputs_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	4606      	mov	r6, r0
 8006df0:	460f      	mov	r7, r1
 8006df2:	4614      	mov	r4, r2
 8006df4:	18d5      	adds	r5, r2, r3
 8006df6:	42ac      	cmp	r4, r5
 8006df8:	d101      	bne.n	8006dfe <__sfputs_r+0x12>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e007      	b.n	8006e0e <__sfputs_r+0x22>
 8006dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e02:	463a      	mov	r2, r7
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ffda 	bl	8006dbe <__sfputc_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d1f3      	bne.n	8006df6 <__sfputs_r+0xa>
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e10 <_vfiprintf_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	460d      	mov	r5, r1
 8006e16:	b09d      	sub	sp, #116	; 0x74
 8006e18:	4614      	mov	r4, r2
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	b118      	cbz	r0, 8006e28 <_vfiprintf_r+0x18>
 8006e20:	6a03      	ldr	r3, [r0, #32]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_vfiprintf_r+0x18>
 8006e24:	f7fe faa2 	bl	800536c <__sinit>
 8006e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f7fe fb8f 	bl	8005558 <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x34>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b99b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x5c>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f93a 	bl	80070c0 <__swsetup_r>
 8006e4c:	b170      	cbz	r0, 8006e6c <_vfiprintf_r+0x5c>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d504      	bpl.n	8006e5e <_vfiprintf_r+0x4e>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	; 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	89ab      	ldrh	r3, [r5, #12]
 8006e60:	0598      	lsls	r0, r3, #22
 8006e62:	d4f7      	bmi.n	8006e54 <_vfiprintf_r+0x44>
 8006e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e66:	f7fe fb78 	bl	800555a <__retarget_lock_release_recursive>
 8006e6a:	e7f3      	b.n	8006e54 <_vfiprintf_r+0x44>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	2320      	movs	r3, #32
 8006e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e7a:	2330      	movs	r3, #48	; 0x30
 8006e7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007030 <_vfiprintf_r+0x220>
 8006e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e84:	f04f 0901 	mov.w	r9, #1
 8006e88:	4623      	mov	r3, r4
 8006e8a:	469a      	mov	sl, r3
 8006e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e90:	b10a      	cbz	r2, 8006e96 <_vfiprintf_r+0x86>
 8006e92:	2a25      	cmp	r2, #37	; 0x25
 8006e94:	d1f9      	bne.n	8006e8a <_vfiprintf_r+0x7a>
 8006e96:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9a:	d00b      	beq.n	8006eb4 <_vfiprintf_r+0xa4>
 8006e9c:	465b      	mov	r3, fp
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffa2 	bl	8006dec <__sfputs_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f000 80a9 	beq.w	8007000 <_vfiprintf_r+0x1f0>
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	445a      	add	r2, fp
 8006eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80a1 	beq.w	8007000 <_vfiprintf_r+0x1f0>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec8:	f10a 0a01 	add.w	sl, sl, #1
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed6:	4654      	mov	r4, sl
 8006ed8:	2205      	movs	r2, #5
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	4854      	ldr	r0, [pc, #336]	; (8007030 <_vfiprintf_r+0x220>)
 8006ee0:	f7f9 f97e 	bl	80001e0 <memchr>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	b9d8      	cbnz	r0, 8006f20 <_vfiprintf_r+0x110>
 8006ee8:	06d1      	lsls	r1, r2, #27
 8006eea:	bf44      	itt	mi
 8006eec:	2320      	movmi	r3, #32
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef2:	0713      	lsls	r3, r2, #28
 8006ef4:	bf44      	itt	mi
 8006ef6:	232b      	movmi	r3, #43	; 0x2b
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b2a      	cmp	r3, #42	; 0x2a
 8006f02:	d015      	beq.n	8006f30 <_vfiprintf_r+0x120>
 8006f04:	9a07      	ldr	r2, [sp, #28]
 8006f06:	4654      	mov	r4, sl
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f04f 0c0a 	mov.w	ip, #10
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f14:	3b30      	subs	r3, #48	; 0x30
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d94d      	bls.n	8006fb6 <_vfiprintf_r+0x1a6>
 8006f1a:	b1b0      	cbz	r0, 8006f4a <_vfiprintf_r+0x13a>
 8006f1c:	9207      	str	r2, [sp, #28]
 8006f1e:	e014      	b.n	8006f4a <_vfiprintf_r+0x13a>
 8006f20:	eba0 0308 	sub.w	r3, r0, r8
 8006f24:	fa09 f303 	lsl.w	r3, r9, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	46a2      	mov	sl, r4
 8006f2e:	e7d2      	b.n	8006ed6 <_vfiprintf_r+0xc6>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	1d19      	adds	r1, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfbb      	ittet	lt
 8006f3c:	425b      	neglt	r3, r3
 8006f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f42:	9307      	strge	r3, [sp, #28]
 8006f44:	9307      	strlt	r3, [sp, #28]
 8006f46:	bfb8      	it	lt
 8006f48:	9204      	strlt	r2, [sp, #16]
 8006f4a:	7823      	ldrb	r3, [r4, #0]
 8006f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4e:	d10c      	bne.n	8006f6a <_vfiprintf_r+0x15a>
 8006f50:	7863      	ldrb	r3, [r4, #1]
 8006f52:	2b2a      	cmp	r3, #42	; 0x2a
 8006f54:	d134      	bne.n	8006fc0 <_vfiprintf_r+0x1b0>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	1d1a      	adds	r2, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	9203      	str	r2, [sp, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f66:	3402      	adds	r4, #2
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007040 <_vfiprintf_r+0x230>
 8006f6e:	7821      	ldrb	r1, [r4, #0]
 8006f70:	2203      	movs	r2, #3
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 f934 	bl	80001e0 <memchr>
 8006f78:	b138      	cbz	r0, 8006f8a <_vfiprintf_r+0x17a>
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	eba0 000a 	sub.w	r0, r0, sl
 8006f80:	2240      	movs	r2, #64	; 0x40
 8006f82:	4082      	lsls	r2, r0
 8006f84:	4313      	orrs	r3, r2
 8006f86:	3401      	adds	r4, #1
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8e:	4829      	ldr	r0, [pc, #164]	; (8007034 <_vfiprintf_r+0x224>)
 8006f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f94:	2206      	movs	r2, #6
 8006f96:	f7f9 f923 	bl	80001e0 <memchr>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d03f      	beq.n	800701e <_vfiprintf_r+0x20e>
 8006f9e:	4b26      	ldr	r3, [pc, #152]	; (8007038 <_vfiprintf_r+0x228>)
 8006fa0:	bb1b      	cbnz	r3, 8006fea <_vfiprintf_r+0x1da>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	3307      	adds	r3, #7
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	3308      	adds	r3, #8
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb0:	443b      	add	r3, r7
 8006fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb4:	e768      	b.n	8006e88 <_vfiprintf_r+0x78>
 8006fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fba:	460c      	mov	r4, r1
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	e7a6      	b.n	8006f0e <_vfiprintf_r+0xfe>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9305      	str	r3, [sp, #20]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	f04f 0c0a 	mov.w	ip, #10
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd2:	3a30      	subs	r2, #48	; 0x30
 8006fd4:	2a09      	cmp	r2, #9
 8006fd6:	d903      	bls.n	8006fe0 <_vfiprintf_r+0x1d0>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0c6      	beq.n	8006f6a <_vfiprintf_r+0x15a>
 8006fdc:	9105      	str	r1, [sp, #20]
 8006fde:	e7c4      	b.n	8006f6a <_vfiprintf_r+0x15a>
 8006fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7f0      	b.n	8006fcc <_vfiprintf_r+0x1bc>
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <_vfiprintf_r+0x22c>)
 8006ff2:	a904      	add	r1, sp, #16
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7fd fd79 	bl	8004aec <_printf_float>
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	1c78      	adds	r0, r7, #1
 8006ffe:	d1d6      	bne.n	8006fae <_vfiprintf_r+0x19e>
 8007000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	d405      	bmi.n	8007012 <_vfiprintf_r+0x202>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	059a      	lsls	r2, r3, #22
 800700a:	d402      	bmi.n	8007012 <_vfiprintf_r+0x202>
 800700c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700e:	f7fe faa4 	bl	800555a <__retarget_lock_release_recursive>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	065b      	lsls	r3, r3, #25
 8007016:	f53f af1d 	bmi.w	8006e54 <_vfiprintf_r+0x44>
 800701a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800701c:	e71c      	b.n	8006e58 <_vfiprintf_r+0x48>
 800701e:	ab03      	add	r3, sp, #12
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	462a      	mov	r2, r5
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <_vfiprintf_r+0x22c>)
 8007026:	a904      	add	r1, sp, #16
 8007028:	4630      	mov	r0, r6
 800702a:	f7fe f803 	bl	8005034 <_printf_i>
 800702e:	e7e4      	b.n	8006ffa <_vfiprintf_r+0x1ea>
 8007030:	0800769b 	.word	0x0800769b
 8007034:	080076a5 	.word	0x080076a5
 8007038:	08004aed 	.word	0x08004aed
 800703c:	08006ded 	.word	0x08006ded
 8007040:	080076a1 	.word	0x080076a1

08007044 <__swbuf_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	460e      	mov	r6, r1
 8007048:	4614      	mov	r4, r2
 800704a:	4605      	mov	r5, r0
 800704c:	b118      	cbz	r0, 8007056 <__swbuf_r+0x12>
 800704e:	6a03      	ldr	r3, [r0, #32]
 8007050:	b90b      	cbnz	r3, 8007056 <__swbuf_r+0x12>
 8007052:	f7fe f98b 	bl	800536c <__sinit>
 8007056:	69a3      	ldr	r3, [r4, #24]
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	071a      	lsls	r2, r3, #28
 800705e:	d525      	bpl.n	80070ac <__swbuf_r+0x68>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b31b      	cbz	r3, 80070ac <__swbuf_r+0x68>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	1a98      	subs	r0, r3, r2
 800706a:	6963      	ldr	r3, [r4, #20]
 800706c:	b2f6      	uxtb	r6, r6
 800706e:	4283      	cmp	r3, r0
 8007070:	4637      	mov	r7, r6
 8007072:	dc04      	bgt.n	800707e <__swbuf_r+0x3a>
 8007074:	4621      	mov	r1, r4
 8007076:	4628      	mov	r0, r5
 8007078:	f7ff fdee 	bl	8006c58 <_fflush_r>
 800707c:	b9e0      	cbnz	r0, 80070b8 <__swbuf_r+0x74>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	3b01      	subs	r3, #1
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	701e      	strb	r6, [r3, #0]
 800708c:	6962      	ldr	r2, [r4, #20]
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	429a      	cmp	r2, r3
 8007092:	d004      	beq.n	800709e <__swbuf_r+0x5a>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d506      	bpl.n	80070a8 <__swbuf_r+0x64>
 800709a:	2e0a      	cmp	r6, #10
 800709c:	d104      	bne.n	80070a8 <__swbuf_r+0x64>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7ff fdd9 	bl	8006c58 <_fflush_r>
 80070a6:	b938      	cbnz	r0, 80070b8 <__swbuf_r+0x74>
 80070a8:	4638      	mov	r0, r7
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	4621      	mov	r1, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f806 	bl	80070c0 <__swsetup_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d0d5      	beq.n	8007064 <__swbuf_r+0x20>
 80070b8:	f04f 37ff 	mov.w	r7, #4294967295
 80070bc:	e7f4      	b.n	80070a8 <__swbuf_r+0x64>
	...

080070c0 <__swsetup_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <__swsetup_r+0xac>)
 80070c4:	4605      	mov	r5, r0
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	460c      	mov	r4, r1
 80070ca:	b118      	cbz	r0, 80070d4 <__swsetup_r+0x14>
 80070cc:	6a03      	ldr	r3, [r0, #32]
 80070ce:	b90b      	cbnz	r3, 80070d4 <__swsetup_r+0x14>
 80070d0:	f7fe f94c 	bl	800536c <__sinit>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070da:	0718      	lsls	r0, r3, #28
 80070dc:	d422      	bmi.n	8007124 <__swsetup_r+0x64>
 80070de:	06d9      	lsls	r1, r3, #27
 80070e0:	d407      	bmi.n	80070f2 <__swsetup_r+0x32>
 80070e2:	2309      	movs	r3, #9
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e034      	b.n	800715c <__swsetup_r+0x9c>
 80070f2:	0758      	lsls	r0, r3, #29
 80070f4:	d512      	bpl.n	800711c <__swsetup_r+0x5c>
 80070f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070f8:	b141      	cbz	r1, 800710c <__swsetup_r+0x4c>
 80070fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070fe:	4299      	cmp	r1, r3
 8007100:	d002      	beq.n	8007108 <__swsetup_r+0x48>
 8007102:	4628      	mov	r0, r5
 8007104:	f7ff f8a6 	bl	8006254 <_free_r>
 8007108:	2300      	movs	r3, #0
 800710a:	6363      	str	r3, [r4, #52]	; 0x34
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	2300      	movs	r3, #0
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	f043 0308 	orr.w	r3, r3, #8
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	b94b      	cbnz	r3, 800713c <__swsetup_r+0x7c>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800712e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007132:	d003      	beq.n	800713c <__swsetup_r+0x7c>
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f884 	bl	8007244 <__smakebuf_r>
 800713c:	89a0      	ldrh	r0, [r4, #12]
 800713e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007142:	f010 0301 	ands.w	r3, r0, #1
 8007146:	d00a      	beq.n	800715e <__swsetup_r+0x9e>
 8007148:	2300      	movs	r3, #0
 800714a:	60a3      	str	r3, [r4, #8]
 800714c:	6963      	ldr	r3, [r4, #20]
 800714e:	425b      	negs	r3, r3
 8007150:	61a3      	str	r3, [r4, #24]
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	b943      	cbnz	r3, 8007168 <__swsetup_r+0xa8>
 8007156:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800715a:	d1c4      	bne.n	80070e6 <__swsetup_r+0x26>
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	0781      	lsls	r1, r0, #30
 8007160:	bf58      	it	pl
 8007162:	6963      	ldrpl	r3, [r4, #20]
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	e7f4      	b.n	8007152 <__swsetup_r+0x92>
 8007168:	2000      	movs	r0, #0
 800716a:	e7f7      	b.n	800715c <__swsetup_r+0x9c>
 800716c:	2000008c 	.word	0x2000008c

08007170 <_raise_r>:
 8007170:	291f      	cmp	r1, #31
 8007172:	b538      	push	{r3, r4, r5, lr}
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	d904      	bls.n	8007184 <_raise_r+0x14>
 800717a:	2316      	movs	r3, #22
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007186:	b112      	cbz	r2, 800718e <_raise_r+0x1e>
 8007188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800718c:	b94b      	cbnz	r3, 80071a2 <_raise_r+0x32>
 800718e:	4620      	mov	r0, r4
 8007190:	f000 f830 	bl	80071f4 <_getpid_r>
 8007194:	462a      	mov	r2, r5
 8007196:	4601      	mov	r1, r0
 8007198:	4620      	mov	r0, r4
 800719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719e:	f000 b817 	b.w	80071d0 <_kill_r>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00a      	beq.n	80071bc <_raise_r+0x4c>
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	d103      	bne.n	80071b2 <_raise_r+0x42>
 80071aa:	2316      	movs	r3, #22
 80071ac:	6003      	str	r3, [r0, #0]
 80071ae:	2001      	movs	r0, #1
 80071b0:	e7e7      	b.n	8007182 <_raise_r+0x12>
 80071b2:	2400      	movs	r4, #0
 80071b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071b8:	4628      	mov	r0, r5
 80071ba:	4798      	blx	r3
 80071bc:	2000      	movs	r0, #0
 80071be:	e7e0      	b.n	8007182 <_raise_r+0x12>

080071c0 <raise>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <raise+0xc>)
 80071c2:	4601      	mov	r1, r0
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	f7ff bfd3 	b.w	8007170 <_raise_r>
 80071ca:	bf00      	nop
 80071cc:	2000008c 	.word	0x2000008c

080071d0 <_kill_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	; (80071f0 <_kill_r+0x20>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	602b      	str	r3, [r5, #0]
 80071de:	f7fa fb63 	bl	80018a8 <_kill>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d102      	bne.n	80071ec <_kill_r+0x1c>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b103      	cbz	r3, 80071ec <_kill_r+0x1c>
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	20001434 	.word	0x20001434

080071f4 <_getpid_r>:
 80071f4:	f7fa bb50 	b.w	8001898 <_getpid>

080071f8 <__swhatbuf_r>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	460c      	mov	r4, r1
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2900      	cmp	r1, #0
 8007202:	b096      	sub	sp, #88	; 0x58
 8007204:	4615      	mov	r5, r2
 8007206:	461e      	mov	r6, r3
 8007208:	da0d      	bge.n	8007226 <__swhatbuf_r+0x2e>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007210:	f04f 0100 	mov.w	r1, #0
 8007214:	bf0c      	ite	eq
 8007216:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800721a:	2340      	movne	r3, #64	; 0x40
 800721c:	2000      	movs	r0, #0
 800721e:	6031      	str	r1, [r6, #0]
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	b016      	add	sp, #88	; 0x58
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	466a      	mov	r2, sp
 8007228:	f000 f848 	bl	80072bc <_fstat_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	dbec      	blt.n	800720a <__swhatbuf_r+0x12>
 8007230:	9901      	ldr	r1, [sp, #4]
 8007232:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007236:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800723a:	4259      	negs	r1, r3
 800723c:	4159      	adcs	r1, r3
 800723e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007242:	e7eb      	b.n	800721c <__swhatbuf_r+0x24>

08007244 <__smakebuf_r>:
 8007244:	898b      	ldrh	r3, [r1, #12]
 8007246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007248:	079d      	lsls	r5, r3, #30
 800724a:	4606      	mov	r6, r0
 800724c:	460c      	mov	r4, r1
 800724e:	d507      	bpl.n	8007260 <__smakebuf_r+0x1c>
 8007250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	2301      	movs	r3, #1
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	b002      	add	sp, #8
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	ab01      	add	r3, sp, #4
 8007262:	466a      	mov	r2, sp
 8007264:	f7ff ffc8 	bl	80071f8 <__swhatbuf_r>
 8007268:	9900      	ldr	r1, [sp, #0]
 800726a:	4605      	mov	r5, r0
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff f865 	bl	800633c <_malloc_r>
 8007272:	b948      	cbnz	r0, 8007288 <__smakebuf_r+0x44>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	059a      	lsls	r2, r3, #22
 800727a:	d4ef      	bmi.n	800725c <__smakebuf_r+0x18>
 800727c:	f023 0303 	bic.w	r3, r3, #3
 8007280:	f043 0302 	orr.w	r3, r3, #2
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	e7e3      	b.n	8007250 <__smakebuf_r+0xc>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	6020      	str	r0, [r4, #0]
 800728c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	6163      	str	r3, [r4, #20]
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	6120      	str	r0, [r4, #16]
 800729a:	b15b      	cbz	r3, 80072b4 <__smakebuf_r+0x70>
 800729c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f81d 	bl	80072e0 <_isatty_r>
 80072a6:	b128      	cbz	r0, 80072b4 <__smakebuf_r+0x70>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	431d      	orrs	r5, r3
 80072b8:	81a5      	strh	r5, [r4, #12]
 80072ba:	e7cf      	b.n	800725c <__smakebuf_r+0x18>

080072bc <_fstat_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_fstat_r+0x20>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f7fa fb4c 	bl	8001966 <_fstat>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d102      	bne.n	80072d8 <_fstat_r+0x1c>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	b103      	cbz	r3, 80072d8 <_fstat_r+0x1c>
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20001434 	.word	0x20001434

080072e0 <_isatty_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_isatty_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fa fb4b 	bl	8001986 <_isatty>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_isatty_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_isatty_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	20001434 	.word	0x20001434

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
