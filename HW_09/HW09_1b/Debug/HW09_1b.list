
HW09_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c8  080032c8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032d0  080032d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080032d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08003334  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08003334  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c24d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a77  00000000  00000000  0002c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000926  00000000  00000000  0002e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001650c  00000000  00000000  0002f266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9f5  00000000  00000000  00045772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9ce  00000000  00000000  00052167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000362c  00000000  00000000  000dfb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e3164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800325c 	.word	0x0800325c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800325c 	.word	0x0800325c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	int row;
	//Based on which pin triggered the interrupt, row is assigned its correct value
	switch(GPIO_Pin){
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800058c:	d016      	beq.n	80005bc <HAL_GPIO_EXTI_Callback+0x40>
 800058e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000592:	dc16      	bgt.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_EXTI_Callback+0x3a>
 800059a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800059e:	dc10      	bgt.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d002      	beq.n	80005aa <HAL_GPIO_EXTI_Callback+0x2e>
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d003      	beq.n	80005b0 <HAL_GPIO_EXTI_Callback+0x34>
 80005a8:	e00b      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
		case GPIO_PIN_2:
			row = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
			break;
 80005ae:	e008      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
		case GPIO_PIN_3:
			row = 3;
 80005b0:	2303      	movs	r3, #3
 80005b2:	617b      	str	r3, [r7, #20]
			break;
 80005b4:	e005      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
		case GPIO_PIN_12:
			row = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
			break;
 80005ba:	e002      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x46>
		case GPIO_PIN_13:
			row = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
			break;
 80005c0:	bf00      	nop
	}
	//current time is acquired
	uint32_t now = HAL_GetTick();
 80005c2:	f000 fbef 	bl	8000da4 <HAL_GetTick>
 80005c6:	6138      	str	r0, [r7, #16]
	//if difference between previous and current press time is > than 60ms, button has been pressed
	if(now - press_time[row][column]> 60)
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_GPIO_EXTI_Callback+0xb0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4918      	ldr	r1, [pc, #96]	; (8000630 <HAL_GPIO_EXTI_Callback+0xb4>)
 80005ce:	697a      	ldr	r2, [r7, #20]
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	2b3c      	cmp	r3, #60	; 0x3c
 80005de:	d917      	bls.n	8000610 <HAL_GPIO_EXTI_Callback+0x94>
	{
		//Button pressed! Print through UART the corresponding number
		int len = snprintf(buff, sizeof(buff),"%x \n", column + row*4-1);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	009a      	lsls	r2, r3, #2
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_GPIO_EXTI_Callback+0xb0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005ee:	2132      	movs	r1, #50	; 0x32
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <HAL_GPIO_EXTI_Callback+0xbc>)
 80005f2:	f002 f97b 	bl	80028ec <sniprintf>
 80005f6:	60f8      	str	r0, [r7, #12]
		if(HAL_UART_Transmit(&huart2, (uint8_t*) &buff, len, 100) != HAL_OK)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	490e      	ldr	r1, [pc, #56]	; (8000638 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000600:	480e      	ldr	r0, [pc, #56]	; (800063c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000602:	f001 fdfe 	bl	8002202 <HAL_UART_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <HAL_GPIO_EXTI_Callback+0x94>
			Error_Handler();
 800060c:	f000 fa06 	bl	8000a1c <Error_Handler>
	}
	//assign current time to time matrix
	press_time[row][column] = now;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	4413      	add	r3, r2
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000104 	.word	0x20000104
 8000630:	20000108 	.word	0x20000108
 8000634:	08003274 	.word	0x08003274
 8000638:	20000148 	.word	0x20000148
 800063c:	200000c0 	.word	0x200000c0

08000640 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d14f      	bne.n	80006f0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		//switch measured column
		switch(column){
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d846      	bhi.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	08000683 	.word	0x08000683
 8000668:	0800069d 	.word	0x0800069d
 800066c:	080006b7 	.word	0x080006b7
 8000670:	080006d1 	.word	0x080006d1
			case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800067c:	f000 fe34 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 8000680:	e031      	b.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xa6>
			case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	481d      	ldr	r0, [pc, #116]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800068a:	f000 fe2d 	bl	80012e8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000696:	f000 fe27 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 800069a:	e024      	b.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xa6>
			case 2:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006a4:	f000 fe20 	bl	80012e8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006b0:	f000 fe1a 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 80006b4:	e017      	b.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xa6>
			case 3:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006be:	f000 fe13 	bl	80012e8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006ca:	f000 fe0d 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 80006ce:	e00a      	b.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xa6>
			case 4:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006d8:	f000 fe06 	bl	80012e8 <HAL_GPIO_WritePin>
				column=-1;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e2:	601a      	str	r2, [r3, #0]
			break;
 80006e4:	bf00      	nop
		}
		column++;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006ee:	6013      	str	r3, [r2, #0]
	}
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000078 	.word	0x20000078
 80006fc:	20000104 	.word	0x20000104
 8000700:	40020800 	.word	0x40020800

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  //initialization of the time matrix
  for(int h=0;h<3;h++){
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e014      	b.n	800073a <main+0x36>
	  for(int k=0;k<3;k++){
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e00b      	b.n	800072e <main+0x2a>
		  press_time[h][k]=-1;
 8000716:	4914      	ldr	r1, [pc, #80]	; (8000768 <main+0x64>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	009a      	lsls	r2, r3, #2
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4413      	add	r3, r2
 8000720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int k=0;k<3;k++){
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	ddf0      	ble.n	8000716 <main+0x12>
  for(int h=0;h<3;h++){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b02      	cmp	r3, #2
 800073e:	dde7      	ble.n	8000710 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 faca 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f814 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f8cc 	bl	80008e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074c:	f000 f8a0 	bl	8000890 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000750:	f000 f87a 	bl	8000848 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim10)!= HAL_OK)
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <main+0x68>)
 8000756:	f001 fae1 	bl	8001d1c <HAL_TIM_Base_Start_IT>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <main+0x60>
      	  Error_Handler();
 8000760:	f000 f95c 	bl	8000a1c <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x60>
 8000766:	bf00      	nop
 8000768:	20000108 	.word	0x20000108
 800076c:	20000078 	.word	0x20000078

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f8e8 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <SystemClock_Config+0xd0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd4>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e4:	2310      	movs	r3, #16
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fda6 	bl	800134c <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f808 	bl	800183c <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000832:	f000 f8f3 	bl	8000a1c <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_TIM10_Init+0x40>)
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_TIM10_Init+0x44>)
 8000850:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_TIM10_Init+0x40>)
 8000854:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000858:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_TIM10_Init+0x40>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_TIM10_Init+0x40>)
 8000862:	2263      	movs	r2, #99	; 0x63
 8000864:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_TIM10_Init+0x40>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_TIM10_Init+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM10_Init+0x40>)
 8000874:	f001 fa02 	bl	8001c7c <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800087e:	f000 f8cd 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000078 	.word	0x20000078
 800088c:	40014400 	.word	0x40014400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART2_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c8:	f001 fc4e 	bl	8002168 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f8a3 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000c0 	.word	0x200000c0
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a43      	ldr	r2, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <MX_GPIO_Init+0x12c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <MX_GPIO_Init+0x12c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a35      	ldr	r2, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x12c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_GPIO_Init+0x12c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x130>)
 8000970:	f000 fcba 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800097a:	4827      	ldr	r0, [pc, #156]	; (8000a18 <MX_GPIO_Init+0x134>)
 800097c:	f000 fcb4 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8000980:	f243 030c 	movw	r3, #12300	; 0x300c
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000998:	f000 fb22 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x130>)
 80009b4:	f000 fb14 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_GPIO_Init+0x134>)
 80009d2:	f000 fb05 	bl	8000fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2008      	movs	r0, #8
 80009dc:	f000 fac9 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009e0:	2008      	movs	r0, #8
 80009e2:	f000 fae2 	bl	8000faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2009      	movs	r0, #9
 80009ec:	f000 fac1 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009f0:	2009      	movs	r0, #9
 80009f2:	f000 fada 	bl	8000faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f000 fab9 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f000 fad2 	bl	8000faa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fa78 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_TIM_Base_MspInit+0x48>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d115      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2019      	movs	r0, #25
 8000aac:	f000 fa61 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 fa7a 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40014400 	.word	0x40014400
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f000 fa4f 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f8ea 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f000 fbb3 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000bbe:	2008      	movs	r0, #8
 8000bc0:	f000 fbac 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bce:	f001 f907 	bl	8001de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000078 	.word	0x20000078

08000bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000be0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000be4:	f000 fb9a 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bec:	f000 fb96 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f001 fe9e 	bl	8002964 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20018000 	.word	0x20018000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	2000017c 	.word	0x2000017c
 8000c5c:	200002d0 	.word	0x200002d0

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8a:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca0:	4c0b      	ldr	r4, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cae:	f7ff ffd7 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f001 fe5d 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fd25 	bl	8000704 <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cc8:	080032d8 	.word	0x080032d8
  ldr r2, =_sbss
 8000ccc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cd0:	200002cc 	.word	0x200002cc

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f92b 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fe8c 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f943 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d58:	f000 f90b 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000180 	.word	0x20000180

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000180 	.word	0x20000180

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e159      	b.n	80012b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8148 	bne.w	80012aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80a2 	beq.w	80012aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001182:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_GPIO_Init+0x2f0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x202>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x1fe>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_GPIO_Init+0x2f8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1fa>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1f6>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a45      	ldr	r2, [pc, #276]	; (80012e0 <HAL_GPIO_Init+0x300>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1f2>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127a:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_GPIO_Init+0x304>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f aea2 	bls.w	8000ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f91e 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e267      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d075      	beq.n	8001456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d00c      	beq.n	8001390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d112      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138e:	d10b      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05b      	beq.n	8001454 <HAL_RCC_OscConfig+0x108>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d157      	bne.n	8001454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e242      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d106      	bne.n	80013c0 <HAL_RCC_OscConfig+0x74>
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6f      	ldr	r2, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a68      	ldr	r2, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fcce 	bl	8000da4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fcca 	bl	8000da4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e207      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xc0>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fcba 	bl	8000da4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fcb6 	bl	8000da4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1f3      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0xe8>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1c7      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc6f 	bl	8000da4 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc6b 	bl	8000da4 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1a8      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4925      	ldr	r1, [pc, #148]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc4e 	bl	8000da4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc4a 	bl	8000da4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e187      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d036      	beq.n	80015a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d016      	beq.n	800156c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fc2e 	bl	8000da4 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fc2a 	bl	8000da4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e167      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x200>
 800156a:	e01b      	b.n	80015a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fc17 	bl	8000da4 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	e00e      	b.n	8001598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fc13 	bl	8000da4 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d907      	bls.n	8001598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e150      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ea      	bne.n	800157a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8097 	beq.w	80016e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b7d      	ldr	r3, [pc, #500]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a7c      	ldr	r2, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fbd3 	bl	8000da4 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fbcf 	bl	8000da4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e10c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ea>
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x30c>
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb94 	bl	8000da4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb90 	bl	8000da4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0cb      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ee      	beq.n	8001680 <HAL_RCC_OscConfig+0x334>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb7e 	bl	8000da4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb7a 	bl	8000da4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0b5      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a1 	beq.w	800182c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d05c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d141      	bne.n	8001782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb4e 	bl	8000da4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb4a 	bl	8000da4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e087      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	491b      	ldr	r1, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fb23 	bl	8000da4 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fb1f 	bl	8000da4 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e05c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x416>
 8001780:	e054      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb0c 	bl	8000da4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fb08 	bl	8000da4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e045      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e038      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000
 80017c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x4ec>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d028      	beq.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0cc      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d90c      	bls.n	8001878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0b8      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	494d      	ldr	r1, [pc, #308]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d044      	beq.n	800195c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d119      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e067      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff fa3a 	bl	8000da4 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff fa36 	bl	8000da4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e04f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d20c      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e032      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4916      	ldr	r1, [pc, #88]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c2:	f000 f821 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	490a      	ldr	r1, [pc, #40]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f99a 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	0800327c 	.word	0x0800327c
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	b094      	sub	sp, #80	; 0x50
 8001a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
 8001a14:	2300      	movs	r3, #0
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d00d      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	f200 80e1 	bhi.w	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3a:	e0db      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a40:	e0db      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a46:	e0d8      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d063      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
 8001a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	f04f 0000 	mov.w	r0, #0
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	0159      	lsls	r1, r3, #5
 8001a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8c:	0150      	lsls	r0, r2, #5
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4621      	mov	r1, r4
 8001a94:	1a51      	subs	r1, r2, r1
 8001a96:	6139      	str	r1, [r7, #16]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aac:	4659      	mov	r1, fp
 8001aae:	018b      	lsls	r3, r1, #6
 8001ab0:	4651      	mov	r1, sl
 8001ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	018a      	lsls	r2, r1, #6
 8001aba:	4651      	mov	r1, sl
 8001abc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	eb18 0303 	adds.w	r3, r8, r3
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	eb49 0303 	adc.w	r3, r9, r3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001afa:	4629      	mov	r1, r5
 8001afc:	024b      	lsls	r3, r1, #9
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b04:	4621      	mov	r1, r4
 8001b06:	024a      	lsls	r2, r1, #9
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0e:	2200      	movs	r2, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b18:	f7fe fbb2 	bl	8000280 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b24:	e058      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4611      	mov	r1, r2
 8001b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b40:	4642      	mov	r2, r8
 8001b42:	464b      	mov	r3, r9
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b52:	0150      	lsls	r0, r2, #5
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4641      	mov	r1, r8
 8001b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5e:	4649      	mov	r1, r9
 8001b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b78:	ebb2 040a 	subs.w	r4, r2, sl
 8001b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	00eb      	lsls	r3, r5, #3
 8001b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8e:	00e2      	lsls	r2, r4, #3
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	61fa      	str	r2, [r7, #28]
 8001bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bcc:	f7fe fb58 	bl	8000280 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	0800328c 	.word	0x0800328c

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	0800328c 	.word	0x0800328c

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e041      	b.n	8001d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fee8 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 f9c0 	bl	8002040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d001      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e044      	b.n	8001dbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_TIM_Base_Start_IT+0xb0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d018      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x6c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5e:	d013      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x6c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x6c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x6c>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x6c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_TIM_Base_Start_IT+0xc0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d010      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	e007      	b.n	8001dbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40014000 	.word	0x40014000

08001de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0202 	mvn.w	r2, #2
 8001e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8ee 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8e0 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8f1 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0204 	mvn.w	r2, #4
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8c4 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8b6 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8c7 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0208 	mvn.w	r2, #8
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f89a 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f88c 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f89d 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0210 	mvn.w	r2, #16
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f870 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f862 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f873 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fb6e 	bl	8000640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8e2 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f838 	bl	800202c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0220 	mvn.w	r2, #32
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8ac 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a34      	ldr	r2, [pc, #208]	; (8002124 <TIM_Base_SetConfig+0xe4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00f      	beq.n	8002078 <TIM_Base_SetConfig+0x38>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d00b      	beq.n	8002078 <TIM_Base_SetConfig+0x38>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a31      	ldr	r2, [pc, #196]	; (8002128 <TIM_Base_SetConfig+0xe8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_Base_SetConfig+0x38>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a30      	ldr	r2, [pc, #192]	; (800212c <TIM_Base_SetConfig+0xec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0x38>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <TIM_Base_SetConfig+0xf0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d108      	bne.n	800208a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <TIM_Base_SetConfig+0xe4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d017      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <TIM_Base_SetConfig+0xe8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <TIM_Base_SetConfig+0xec>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <TIM_Base_SetConfig+0xf0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <TIM_Base_SetConfig+0xf4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <TIM_Base_SetConfig+0xf8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0x8a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <TIM_Base_SetConfig+0xfc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d108      	bne.n	80020dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <TIM_Base_SetConfig+0xe4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d103      	bne.n	8002110 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	615a      	str	r2, [r3, #20]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e03f      	b.n	80021fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fc9a 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f929 	bl	8002404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b08a      	sub	sp, #40	; 0x28
 8002206:	af02      	add	r7, sp, #8
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	d17c      	bne.n	800231c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_UART_Transmit+0x2c>
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e075      	b.n	800231e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_UART_Transmit+0x3e>
 800223c:	2302      	movs	r3, #2
 800223e:	e06e      	b.n	800231e <HAL_UART_Transmit+0x11c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002256:	f7fe fda5 	bl	8000da4 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	d108      	bne.n	8002284 <HAL_UART_Transmit+0x82>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002294:	e02a      	b.n	80022ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f840 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e036      	b.n	800231e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3302      	adds	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	e007      	b.n	80022de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1cf      	bne.n	8002296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f810 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b090      	sub	sp, #64	; 0x40
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002336:	e050      	b.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233e:	d04c      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <UART_WaitOnFlagUntilTimeout+0x30>
 8002346:	f7fe fd2d 	bl	8000da4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002352:	429a      	cmp	r2, r3
 8002354:	d241      	bcs.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	637a      	str	r2, [r7, #52]	; 0x34
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800237c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e5      	bne.n	8002356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	613b      	str	r3, [r7, #16]
   return(result);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023aa:	623a      	str	r2, [r7, #32]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	69f9      	ldr	r1, [r7, #28]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e5      	bne.n	800238a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d09f      	beq.n	8002338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3740      	adds	r7, #64	; 0x40
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b0c0      	sub	sp, #256	; 0x100
 800240a:	af00      	add	r7, sp, #0
 800240c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	ea40 0301 	orr.w	r3, r0, r1
 800242c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	431a      	orrs	r2, r3
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800245c:	f021 010c 	bic.w	r1, r1, #12
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800246a:	430b      	orrs	r3, r1
 800246c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247e:	6999      	ldr	r1, [r3, #24]
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	ea40 0301 	orr.w	r3, r0, r1
 800248a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <UART_SetConfig+0x2cc>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d005      	beq.n	80024a4 <UART_SetConfig+0xa0>
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <UART_SetConfig+0x2d0>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d104      	bne.n	80024ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024a4:	f7ff fbd6 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 80024a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024ac:	e003      	b.n	80024b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff fbbd 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 80024b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c0:	f040 810c 	bne.w	80026dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024d6:	4622      	mov	r2, r4
 80024d8:	462b      	mov	r3, r5
 80024da:	1891      	adds	r1, r2, r2
 80024dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80024de:	415b      	adcs	r3, r3
 80024e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024e6:	4621      	mov	r1, r4
 80024e8:	eb12 0801 	adds.w	r8, r2, r1
 80024ec:	4629      	mov	r1, r5
 80024ee:	eb43 0901 	adc.w	r9, r3, r1
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002506:	4690      	mov	r8, r2
 8002508:	4699      	mov	r9, r3
 800250a:	4623      	mov	r3, r4
 800250c:	eb18 0303 	adds.w	r3, r8, r3
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002514:	462b      	mov	r3, r5
 8002516:	eb49 0303 	adc.w	r3, r9, r3
 800251a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800252a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800252e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002532:	460b      	mov	r3, r1
 8002534:	18db      	adds	r3, r3, r3
 8002536:	653b      	str	r3, [r7, #80]	; 0x50
 8002538:	4613      	mov	r3, r2
 800253a:	eb42 0303 	adc.w	r3, r2, r3
 800253e:	657b      	str	r3, [r7, #84]	; 0x54
 8002540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002548:	f7fd fe9a 	bl	8000280 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <UART_SetConfig+0x2d4>)
 8002552:	fba3 2302 	umull	r2, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	011c      	lsls	r4, r3, #4
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	64b9      	str	r1, [r7, #72]	; 0x48
 8002574:	415b      	adcs	r3, r3
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800257c:	4641      	mov	r1, r8
 800257e:	eb12 0a01 	adds.w	sl, r2, r1
 8002582:	4649      	mov	r1, r9
 8002584:	eb43 0b01 	adc.w	fp, r3, r1
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259c:	4692      	mov	sl, r2
 800259e:	469b      	mov	fp, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	eb1a 0303 	adds.w	r3, sl, r3
 80025a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025aa:	464b      	mov	r3, r9
 80025ac:	eb4b 0303 	adc.w	r3, fp, r3
 80025b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025c8:	460b      	mov	r3, r1
 80025ca:	18db      	adds	r3, r3, r3
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
 80025ce:	4613      	mov	r3, r2
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
 80025d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025de:	f7fd fe4f 	bl	8000280 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <UART_SetConfig+0x2d4>)
 80025ea:	fba3 2301 	umull	r2, r3, r3, r1
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2264      	movs	r2, #100	; 0x64
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	1acb      	subs	r3, r1, r3
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <UART_SetConfig+0x2d4>)
 8002600:	fba3 2302 	umull	r2, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800260c:	441c      	add	r4, r3
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800261c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	63b9      	str	r1, [r7, #56]	; 0x38
 8002628:	415b      	adcs	r3, r3
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800262c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002630:	4641      	mov	r1, r8
 8002632:	1851      	adds	r1, r2, r1
 8002634:	6339      	str	r1, [r7, #48]	; 0x30
 8002636:	4649      	mov	r1, r9
 8002638:	414b      	adcs	r3, r1
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002648:	4659      	mov	r1, fp
 800264a:	00cb      	lsls	r3, r1, #3
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002652:	4651      	mov	r1, sl
 8002654:	00ca      	lsls	r2, r1, #3
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	4603      	mov	r3, r0
 800265c:	4642      	mov	r2, r8
 800265e:	189b      	adds	r3, r3, r2
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002664:	464b      	mov	r3, r9
 8002666:	460a      	mov	r2, r1
 8002668:	eb42 0303 	adc.w	r3, r2, r3
 800266c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800267c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002684:	460b      	mov	r3, r1
 8002686:	18db      	adds	r3, r3, r3
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	4613      	mov	r3, r2
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800269a:	f7fd fdf1 	bl	8000280 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <UART_SetConfig+0x2d4>)
 80026a4:	fba3 1302 	umull	r1, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	2164      	movs	r1, #100	; 0x64
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	3332      	adds	r3, #50	; 0x32
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <UART_SetConfig+0x2d4>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4422      	add	r2, r4
 80026ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026cc:	e106      	b.n	80028dc <UART_SetConfig+0x4d8>
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026ee:	4642      	mov	r2, r8
 80026f0:	464b      	mov	r3, r9
 80026f2:	1891      	adds	r1, r2, r2
 80026f4:	6239      	str	r1, [r7, #32]
 80026f6:	415b      	adcs	r3, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026fe:	4641      	mov	r1, r8
 8002700:	1854      	adds	r4, r2, r1
 8002702:	4649      	mov	r1, r9
 8002704:	eb43 0501 	adc.w	r5, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00eb      	lsls	r3, r5, #3
 8002712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	4643      	mov	r3, r8
 800271e:	18e3      	adds	r3, r4, r3
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002724:	464b      	mov	r3, r9
 8002726:	eb45 0303 	adc.w	r3, r5, r3
 800272a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800273a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800274a:	4629      	mov	r1, r5
 800274c:	008b      	lsls	r3, r1, #2
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002754:	4621      	mov	r1, r4
 8002756:	008a      	lsls	r2, r1, #2
 8002758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800275c:	f7fd fd90 	bl	8000280 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <UART_SetConfig+0x4e4>)
 8002766:	fba3 2302 	umull	r2, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	011c      	lsls	r4, r3, #4
 800276e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800277c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	1891      	adds	r1, r2, r2
 8002786:	61b9      	str	r1, [r7, #24]
 8002788:	415b      	adcs	r3, r3
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002790:	4641      	mov	r1, r8
 8002792:	1851      	adds	r1, r2, r1
 8002794:	6139      	str	r1, [r7, #16]
 8002796:	4649      	mov	r1, r9
 8002798:	414b      	adcs	r3, r1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a8:	4659      	mov	r1, fp
 80027aa:	00cb      	lsls	r3, r1, #3
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b2:	4651      	mov	r1, sl
 80027b4:	00ca      	lsls	r2, r1, #3
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	4642      	mov	r2, r8
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c4:	464b      	mov	r3, r9
 80027c6:	460a      	mov	r2, r1
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027e8:	4649      	mov	r1, r9
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	4641      	mov	r1, r8
 80027ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f2:	4641      	mov	r1, r8
 80027f4:	008a      	lsls	r2, r1, #2
 80027f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027fa:	f7fd fd41 	bl	8000280 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4611      	mov	r1, r2
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <UART_SetConfig+0x4e4>)
 8002806:	fba3 2301 	umull	r2, r3, r3, r1
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	3332      	adds	r3, #50	; 0x32
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <UART_SetConfig+0x4e4>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002824:	441c      	add	r4, r3
 8002826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282a:	2200      	movs	r2, #0
 800282c:	673b      	str	r3, [r7, #112]	; 0x70
 800282e:	677a      	str	r2, [r7, #116]	; 0x74
 8002830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002834:	4642      	mov	r2, r8
 8002836:	464b      	mov	r3, r9
 8002838:	1891      	adds	r1, r2, r2
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	415b      	adcs	r3, r3
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002844:	4641      	mov	r1, r8
 8002846:	1851      	adds	r1, r2, r1
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	4649      	mov	r1, r9
 800284c:	414b      	adcs	r3, r1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800285c:	4659      	mov	r1, fp
 800285e:	00cb      	lsls	r3, r1, #3
 8002860:	4651      	mov	r1, sl
 8002862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002866:	4651      	mov	r1, sl
 8002868:	00ca      	lsls	r2, r1, #3
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	4603      	mov	r3, r0
 8002870:	4642      	mov	r2, r8
 8002872:	189b      	adds	r3, r3, r2
 8002874:	66bb      	str	r3, [r7, #104]	; 0x68
 8002876:	464b      	mov	r3, r9
 8002878:	460a      	mov	r2, r1
 800287a:	eb42 0303 	adc.w	r3, r2, r3
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	663b      	str	r3, [r7, #96]	; 0x60
 800288a:	667a      	str	r2, [r7, #100]	; 0x64
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002898:	4649      	mov	r1, r9
 800289a:	008b      	lsls	r3, r1, #2
 800289c:	4641      	mov	r1, r8
 800289e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a2:	4641      	mov	r1, r8
 80028a4:	008a      	lsls	r2, r1, #2
 80028a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028aa:	f7fd fce9 	bl	8000280 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <UART_SetConfig+0x4e4>)
 80028b4:	fba3 1302 	umull	r1, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	2164      	movs	r1, #100	; 0x64
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	3332      	adds	r3, #50	; 0x32
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <UART_SetConfig+0x4e4>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	f003 020f 	and.w	r2, r3, #15
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4422      	add	r2, r4
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e8:	51eb851f 	.word	0x51eb851f

080028ec <sniprintf>:
 80028ec:	b40c      	push	{r2, r3}
 80028ee:	b530      	push	{r4, r5, lr}
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <sniprintf+0x64>)
 80028f2:	1e0c      	subs	r4, r1, #0
 80028f4:	681d      	ldr	r5, [r3, #0]
 80028f6:	b09d      	sub	sp, #116	; 0x74
 80028f8:	da08      	bge.n	800290c <sniprintf+0x20>
 80028fa:	238b      	movs	r3, #139	; 0x8b
 80028fc:	602b      	str	r3, [r5, #0]
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002902:	b01d      	add	sp, #116	; 0x74
 8002904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002908:	b002      	add	sp, #8
 800290a:	4770      	bx	lr
 800290c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002914:	bf14      	ite	ne
 8002916:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800291a:	4623      	moveq	r3, r4
 800291c:	9304      	str	r3, [sp, #16]
 800291e:	9307      	str	r3, [sp, #28]
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	9002      	str	r0, [sp, #8]
 8002926:	9006      	str	r0, [sp, #24]
 8002928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800292c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800292e:	ab21      	add	r3, sp, #132	; 0x84
 8002930:	a902      	add	r1, sp, #8
 8002932:	4628      	mov	r0, r5
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	f000 f993 	bl	8002c60 <_svfiprintf_r>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	bfbc      	itt	lt
 800293e:	238b      	movlt	r3, #139	; 0x8b
 8002940:	602b      	strlt	r3, [r5, #0]
 8002942:	2c00      	cmp	r4, #0
 8002944:	d0dd      	beq.n	8002902 <sniprintf+0x16>
 8002946:	9b02      	ldr	r3, [sp, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e7d9      	b.n	8002902 <sniprintf+0x16>
 800294e:	bf00      	nop
 8002950:	20000058 	.word	0x20000058

08002954 <memset>:
 8002954:	4402      	add	r2, r0
 8002956:	4603      	mov	r3, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000058 	.word	0x20000058

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4d0d      	ldr	r5, [pc, #52]	; (80029a8 <__libc_init_array+0x38>)
 8002974:	4c0d      	ldr	r4, [pc, #52]	; (80029ac <__libc_init_array+0x3c>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	2600      	movs	r6, #0
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	4d0b      	ldr	r5, [pc, #44]	; (80029b0 <__libc_init_array+0x40>)
 8002982:	4c0c      	ldr	r4, [pc, #48]	; (80029b4 <__libc_init_array+0x44>)
 8002984:	f000 fc6a 	bl	800325c <_init>
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	2600      	movs	r6, #0
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f855 3b04 	ldr.w	r3, [r5], #4
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	080032d0 	.word	0x080032d0
 80029ac:	080032d0 	.word	0x080032d0
 80029b0:	080032d0 	.word	0x080032d0
 80029b4:	080032d4 	.word	0x080032d4

080029b8 <__retarget_lock_acquire_recursive>:
 80029b8:	4770      	bx	lr

080029ba <__retarget_lock_release_recursive>:
 80029ba:	4770      	bx	lr

080029bc <_free_r>:
 80029bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029be:	2900      	cmp	r1, #0
 80029c0:	d044      	beq.n	8002a4c <_free_r+0x90>
 80029c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c6:	9001      	str	r0, [sp, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f1a1 0404 	sub.w	r4, r1, #4
 80029ce:	bfb8      	it	lt
 80029d0:	18e4      	addlt	r4, r4, r3
 80029d2:	f000 f8df 	bl	8002b94 <__malloc_lock>
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <_free_r+0x94>)
 80029d8:	9801      	ldr	r0, [sp, #4]
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	b933      	cbnz	r3, 80029ec <_free_r+0x30>
 80029de:	6063      	str	r3, [r4, #4]
 80029e0:	6014      	str	r4, [r2, #0]
 80029e2:	b003      	add	sp, #12
 80029e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029e8:	f000 b8da 	b.w	8002ba0 <__malloc_unlock>
 80029ec:	42a3      	cmp	r3, r4
 80029ee:	d908      	bls.n	8002a02 <_free_r+0x46>
 80029f0:	6825      	ldr	r5, [r4, #0]
 80029f2:	1961      	adds	r1, r4, r5
 80029f4:	428b      	cmp	r3, r1
 80029f6:	bf01      	itttt	eq
 80029f8:	6819      	ldreq	r1, [r3, #0]
 80029fa:	685b      	ldreq	r3, [r3, #4]
 80029fc:	1949      	addeq	r1, r1, r5
 80029fe:	6021      	streq	r1, [r4, #0]
 8002a00:	e7ed      	b.n	80029de <_free_r+0x22>
 8002a02:	461a      	mov	r2, r3
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	b10b      	cbz	r3, 8002a0c <_free_r+0x50>
 8002a08:	42a3      	cmp	r3, r4
 8002a0a:	d9fa      	bls.n	8002a02 <_free_r+0x46>
 8002a0c:	6811      	ldr	r1, [r2, #0]
 8002a0e:	1855      	adds	r5, r2, r1
 8002a10:	42a5      	cmp	r5, r4
 8002a12:	d10b      	bne.n	8002a2c <_free_r+0x70>
 8002a14:	6824      	ldr	r4, [r4, #0]
 8002a16:	4421      	add	r1, r4
 8002a18:	1854      	adds	r4, r2, r1
 8002a1a:	42a3      	cmp	r3, r4
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	d1e0      	bne.n	80029e2 <_free_r+0x26>
 8002a20:	681c      	ldr	r4, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	6053      	str	r3, [r2, #4]
 8002a26:	440c      	add	r4, r1
 8002a28:	6014      	str	r4, [r2, #0]
 8002a2a:	e7da      	b.n	80029e2 <_free_r+0x26>
 8002a2c:	d902      	bls.n	8002a34 <_free_r+0x78>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	6003      	str	r3, [r0, #0]
 8002a32:	e7d6      	b.n	80029e2 <_free_r+0x26>
 8002a34:	6825      	ldr	r5, [r4, #0]
 8002a36:	1961      	adds	r1, r4, r5
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	bf04      	itt	eq
 8002a3c:	6819      	ldreq	r1, [r3, #0]
 8002a3e:	685b      	ldreq	r3, [r3, #4]
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	bf04      	itt	eq
 8002a44:	1949      	addeq	r1, r1, r5
 8002a46:	6021      	streq	r1, [r4, #0]
 8002a48:	6054      	str	r4, [r2, #4]
 8002a4a:	e7ca      	b.n	80029e2 <_free_r+0x26>
 8002a4c:	b003      	add	sp, #12
 8002a4e:	bd30      	pop	{r4, r5, pc}
 8002a50:	200002c4 	.word	0x200002c4

08002a54 <sbrk_aligned>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	4e0e      	ldr	r6, [pc, #56]	; (8002a90 <sbrk_aligned+0x3c>)
 8002a58:	460c      	mov	r4, r1
 8002a5a:	6831      	ldr	r1, [r6, #0]
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	b911      	cbnz	r1, 8002a66 <sbrk_aligned+0x12>
 8002a60:	f000 fba6 	bl	80031b0 <_sbrk_r>
 8002a64:	6030      	str	r0, [r6, #0]
 8002a66:	4621      	mov	r1, r4
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f000 fba1 	bl	80031b0 <_sbrk_r>
 8002a6e:	1c43      	adds	r3, r0, #1
 8002a70:	d00a      	beq.n	8002a88 <sbrk_aligned+0x34>
 8002a72:	1cc4      	adds	r4, r0, #3
 8002a74:	f024 0403 	bic.w	r4, r4, #3
 8002a78:	42a0      	cmp	r0, r4
 8002a7a:	d007      	beq.n	8002a8c <sbrk_aligned+0x38>
 8002a7c:	1a21      	subs	r1, r4, r0
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f000 fb96 	bl	80031b0 <_sbrk_r>
 8002a84:	3001      	adds	r0, #1
 8002a86:	d101      	bne.n	8002a8c <sbrk_aligned+0x38>
 8002a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	200002c8 	.word	0x200002c8

08002a94 <_malloc_r>:
 8002a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a98:	1ccd      	adds	r5, r1, #3
 8002a9a:	f025 0503 	bic.w	r5, r5, #3
 8002a9e:	3508      	adds	r5, #8
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	bf38      	it	cc
 8002aa4:	250c      	movcc	r5, #12
 8002aa6:	2d00      	cmp	r5, #0
 8002aa8:	4607      	mov	r7, r0
 8002aaa:	db01      	blt.n	8002ab0 <_malloc_r+0x1c>
 8002aac:	42a9      	cmp	r1, r5
 8002aae:	d905      	bls.n	8002abc <_malloc_r+0x28>
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b90 <_malloc_r+0xfc>
 8002ac0:	f000 f868 	bl	8002b94 <__malloc_lock>
 8002ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac8:	461c      	mov	r4, r3
 8002aca:	bb5c      	cbnz	r4, 8002b24 <_malloc_r+0x90>
 8002acc:	4629      	mov	r1, r5
 8002ace:	4638      	mov	r0, r7
 8002ad0:	f7ff ffc0 	bl	8002a54 <sbrk_aligned>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	d155      	bne.n	8002b86 <_malloc_r+0xf2>
 8002ada:	f8d8 4000 	ldr.w	r4, [r8]
 8002ade:	4626      	mov	r6, r4
 8002ae0:	2e00      	cmp	r6, #0
 8002ae2:	d145      	bne.n	8002b70 <_malloc_r+0xdc>
 8002ae4:	2c00      	cmp	r4, #0
 8002ae6:	d048      	beq.n	8002b7a <_malloc_r+0xe6>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	4631      	mov	r1, r6
 8002aec:	4638      	mov	r0, r7
 8002aee:	eb04 0903 	add.w	r9, r4, r3
 8002af2:	f000 fb5d 	bl	80031b0 <_sbrk_r>
 8002af6:	4581      	cmp	r9, r0
 8002af8:	d13f      	bne.n	8002b7a <_malloc_r+0xe6>
 8002afa:	6821      	ldr	r1, [r4, #0]
 8002afc:	1a6d      	subs	r5, r5, r1
 8002afe:	4629      	mov	r1, r5
 8002b00:	4638      	mov	r0, r7
 8002b02:	f7ff ffa7 	bl	8002a54 <sbrk_aligned>
 8002b06:	3001      	adds	r0, #1
 8002b08:	d037      	beq.n	8002b7a <_malloc_r+0xe6>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	442b      	add	r3, r5
 8002b0e:	6023      	str	r3, [r4, #0]
 8002b10:	f8d8 3000 	ldr.w	r3, [r8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d038      	beq.n	8002b8a <_malloc_r+0xf6>
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	42a2      	cmp	r2, r4
 8002b1c:	d12b      	bne.n	8002b76 <_malloc_r+0xe2>
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e00f      	b.n	8002b44 <_malloc_r+0xb0>
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	1b52      	subs	r2, r2, r5
 8002b28:	d41f      	bmi.n	8002b6a <_malloc_r+0xd6>
 8002b2a:	2a0b      	cmp	r2, #11
 8002b2c:	d917      	bls.n	8002b5e <_malloc_r+0xca>
 8002b2e:	1961      	adds	r1, r4, r5
 8002b30:	42a3      	cmp	r3, r4
 8002b32:	6025      	str	r5, [r4, #0]
 8002b34:	bf18      	it	ne
 8002b36:	6059      	strne	r1, [r3, #4]
 8002b38:	6863      	ldr	r3, [r4, #4]
 8002b3a:	bf08      	it	eq
 8002b3c:	f8c8 1000 	streq.w	r1, [r8]
 8002b40:	5162      	str	r2, [r4, r5]
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	4638      	mov	r0, r7
 8002b46:	f104 060b 	add.w	r6, r4, #11
 8002b4a:	f000 f829 	bl	8002ba0 <__malloc_unlock>
 8002b4e:	f026 0607 	bic.w	r6, r6, #7
 8002b52:	1d23      	adds	r3, r4, #4
 8002b54:	1af2      	subs	r2, r6, r3
 8002b56:	d0ae      	beq.n	8002ab6 <_malloc_r+0x22>
 8002b58:	1b9b      	subs	r3, r3, r6
 8002b5a:	50a3      	str	r3, [r4, r2]
 8002b5c:	e7ab      	b.n	8002ab6 <_malloc_r+0x22>
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	6862      	ldr	r2, [r4, #4]
 8002b62:	d1dd      	bne.n	8002b20 <_malloc_r+0x8c>
 8002b64:	f8c8 2000 	str.w	r2, [r8]
 8002b68:	e7ec      	b.n	8002b44 <_malloc_r+0xb0>
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	6864      	ldr	r4, [r4, #4]
 8002b6e:	e7ac      	b.n	8002aca <_malloc_r+0x36>
 8002b70:	4634      	mov	r4, r6
 8002b72:	6876      	ldr	r6, [r6, #4]
 8002b74:	e7b4      	b.n	8002ae0 <_malloc_r+0x4c>
 8002b76:	4613      	mov	r3, r2
 8002b78:	e7cc      	b.n	8002b14 <_malloc_r+0x80>
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4638      	mov	r0, r7
 8002b80:	f000 f80e 	bl	8002ba0 <__malloc_unlock>
 8002b84:	e797      	b.n	8002ab6 <_malloc_r+0x22>
 8002b86:	6025      	str	r5, [r4, #0]
 8002b88:	e7dc      	b.n	8002b44 <_malloc_r+0xb0>
 8002b8a:	605b      	str	r3, [r3, #4]
 8002b8c:	deff      	udf	#255	; 0xff
 8002b8e:	bf00      	nop
 8002b90:	200002c4 	.word	0x200002c4

08002b94 <__malloc_lock>:
 8002b94:	4801      	ldr	r0, [pc, #4]	; (8002b9c <__malloc_lock+0x8>)
 8002b96:	f7ff bf0f 	b.w	80029b8 <__retarget_lock_acquire_recursive>
 8002b9a:	bf00      	nop
 8002b9c:	200002c0 	.word	0x200002c0

08002ba0 <__malloc_unlock>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__malloc_unlock+0x8>)
 8002ba2:	f7ff bf0a 	b.w	80029ba <__retarget_lock_release_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	200002c0 	.word	0x200002c0

08002bac <__ssputs_r>:
 8002bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb0:	688e      	ldr	r6, [r1, #8]
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	42be      	cmp	r6, r7
 8002bb6:	680b      	ldr	r3, [r1, #0]
 8002bb8:	4682      	mov	sl, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4690      	mov	r8, r2
 8002bbe:	d82c      	bhi.n	8002c1a <__ssputs_r+0x6e>
 8002bc0:	898a      	ldrh	r2, [r1, #12]
 8002bc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bc6:	d026      	beq.n	8002c16 <__ssputs_r+0x6a>
 8002bc8:	6965      	ldr	r5, [r4, #20]
 8002bca:	6909      	ldr	r1, [r1, #16]
 8002bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bd0:	eba3 0901 	sub.w	r9, r3, r1
 8002bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bd8:	1c7b      	adds	r3, r7, #1
 8002bda:	444b      	add	r3, r9
 8002bdc:	106d      	asrs	r5, r5, #1
 8002bde:	429d      	cmp	r5, r3
 8002be0:	bf38      	it	cc
 8002be2:	461d      	movcc	r5, r3
 8002be4:	0553      	lsls	r3, r2, #21
 8002be6:	d527      	bpl.n	8002c38 <__ssputs_r+0x8c>
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7ff ff53 	bl	8002a94 <_malloc_r>
 8002bee:	4606      	mov	r6, r0
 8002bf0:	b360      	cbz	r0, 8002c4c <__ssputs_r+0xa0>
 8002bf2:	6921      	ldr	r1, [r4, #16]
 8002bf4:	464a      	mov	r2, r9
 8002bf6:	f000 faeb 	bl	80031d0 <memcpy>
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	81a3      	strh	r3, [r4, #12]
 8002c06:	6126      	str	r6, [r4, #16]
 8002c08:	6165      	str	r5, [r4, #20]
 8002c0a:	444e      	add	r6, r9
 8002c0c:	eba5 0509 	sub.w	r5, r5, r9
 8002c10:	6026      	str	r6, [r4, #0]
 8002c12:	60a5      	str	r5, [r4, #8]
 8002c14:	463e      	mov	r6, r7
 8002c16:	42be      	cmp	r6, r7
 8002c18:	d900      	bls.n	8002c1c <__ssputs_r+0x70>
 8002c1a:	463e      	mov	r6, r7
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4641      	mov	r1, r8
 8002c22:	f000 faab 	bl	800317c <memmove>
 8002c26:	68a3      	ldr	r3, [r4, #8]
 8002c28:	1b9b      	subs	r3, r3, r6
 8002c2a:	60a3      	str	r3, [r4, #8]
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	4433      	add	r3, r6
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	2000      	movs	r0, #0
 8002c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c38:	462a      	mov	r2, r5
 8002c3a:	f000 fad7 	bl	80031ec <_realloc_r>
 8002c3e:	4606      	mov	r6, r0
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1e0      	bne.n	8002c06 <__ssputs_r+0x5a>
 8002c44:	6921      	ldr	r1, [r4, #16]
 8002c46:	4650      	mov	r0, sl
 8002c48:	f7ff feb8 	bl	80029bc <_free_r>
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	f8ca 3000 	str.w	r3, [sl]
 8002c52:	89a3      	ldrh	r3, [r4, #12]
 8002c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c58:	81a3      	strh	r3, [r4, #12]
 8002c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c5e:	e7e9      	b.n	8002c34 <__ssputs_r+0x88>

08002c60 <_svfiprintf_r>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	4698      	mov	r8, r3
 8002c66:	898b      	ldrh	r3, [r1, #12]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	b09d      	sub	sp, #116	; 0x74
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	460d      	mov	r5, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	d50e      	bpl.n	8002c92 <_svfiprintf_r+0x32>
 8002c74:	690b      	ldr	r3, [r1, #16]
 8002c76:	b963      	cbnz	r3, 8002c92 <_svfiprintf_r+0x32>
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	f7ff ff0b 	bl	8002a94 <_malloc_r>
 8002c7e:	6028      	str	r0, [r5, #0]
 8002c80:	6128      	str	r0, [r5, #16]
 8002c82:	b920      	cbnz	r0, 8002c8e <_svfiprintf_r+0x2e>
 8002c84:	230c      	movs	r3, #12
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8c:	e0d0      	b.n	8002e30 <_svfiprintf_r+0x1d0>
 8002c8e:	2340      	movs	r3, #64	; 0x40
 8002c90:	616b      	str	r3, [r5, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9309      	str	r3, [sp, #36]	; 0x24
 8002c96:	2320      	movs	r3, #32
 8002c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca0:	2330      	movs	r3, #48	; 0x30
 8002ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e48 <_svfiprintf_r+0x1e8>
 8002ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002caa:	f04f 0901 	mov.w	r9, #1
 8002cae:	4623      	mov	r3, r4
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cb6:	b10a      	cbz	r2, 8002cbc <_svfiprintf_r+0x5c>
 8002cb8:	2a25      	cmp	r2, #37	; 0x25
 8002cba:	d1f9      	bne.n	8002cb0 <_svfiprintf_r+0x50>
 8002cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8002cc0:	d00b      	beq.n	8002cda <_svfiprintf_r+0x7a>
 8002cc2:	465b      	mov	r3, fp
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	4638      	mov	r0, r7
 8002cca:	f7ff ff6f 	bl	8002bac <__ssputs_r>
 8002cce:	3001      	adds	r0, #1
 8002cd0:	f000 80a9 	beq.w	8002e26 <_svfiprintf_r+0x1c6>
 8002cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cd6:	445a      	add	r2, fp
 8002cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8002cda:	f89a 3000 	ldrb.w	r3, [sl]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a1 	beq.w	8002e26 <_svfiprintf_r+0x1c6>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cee:	f10a 0a01 	add.w	sl, sl, #1
 8002cf2:	9304      	str	r3, [sp, #16]
 8002cf4:	9307      	str	r3, [sp, #28]
 8002cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8002cfc:	4654      	mov	r4, sl
 8002cfe:	2205      	movs	r2, #5
 8002d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d04:	4850      	ldr	r0, [pc, #320]	; (8002e48 <_svfiprintf_r+0x1e8>)
 8002d06:	f7fd fa6b 	bl	80001e0 <memchr>
 8002d0a:	9a04      	ldr	r2, [sp, #16]
 8002d0c:	b9d8      	cbnz	r0, 8002d46 <_svfiprintf_r+0xe6>
 8002d0e:	06d0      	lsls	r0, r2, #27
 8002d10:	bf44      	itt	mi
 8002d12:	2320      	movmi	r3, #32
 8002d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d18:	0711      	lsls	r1, r2, #28
 8002d1a:	bf44      	itt	mi
 8002d1c:	232b      	movmi	r3, #43	; 0x2b
 8002d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d22:	f89a 3000 	ldrb.w	r3, [sl]
 8002d26:	2b2a      	cmp	r3, #42	; 0x2a
 8002d28:	d015      	beq.n	8002d56 <_svfiprintf_r+0xf6>
 8002d2a:	9a07      	ldr	r2, [sp, #28]
 8002d2c:	4654      	mov	r4, sl
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f04f 0c0a 	mov.w	ip, #10
 8002d34:	4621      	mov	r1, r4
 8002d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d3a:	3b30      	subs	r3, #48	; 0x30
 8002d3c:	2b09      	cmp	r3, #9
 8002d3e:	d94d      	bls.n	8002ddc <_svfiprintf_r+0x17c>
 8002d40:	b1b0      	cbz	r0, 8002d70 <_svfiprintf_r+0x110>
 8002d42:	9207      	str	r2, [sp, #28]
 8002d44:	e014      	b.n	8002d70 <_svfiprintf_r+0x110>
 8002d46:	eba0 0308 	sub.w	r3, r0, r8
 8002d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	9304      	str	r3, [sp, #16]
 8002d52:	46a2      	mov	sl, r4
 8002d54:	e7d2      	b.n	8002cfc <_svfiprintf_r+0x9c>
 8002d56:	9b03      	ldr	r3, [sp, #12]
 8002d58:	1d19      	adds	r1, r3, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	9103      	str	r1, [sp, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bfbb      	ittet	lt
 8002d62:	425b      	neglt	r3, r3
 8002d64:	f042 0202 	orrlt.w	r2, r2, #2
 8002d68:	9307      	strge	r3, [sp, #28]
 8002d6a:	9307      	strlt	r3, [sp, #28]
 8002d6c:	bfb8      	it	lt
 8002d6e:	9204      	strlt	r2, [sp, #16]
 8002d70:	7823      	ldrb	r3, [r4, #0]
 8002d72:	2b2e      	cmp	r3, #46	; 0x2e
 8002d74:	d10c      	bne.n	8002d90 <_svfiprintf_r+0x130>
 8002d76:	7863      	ldrb	r3, [r4, #1]
 8002d78:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7a:	d134      	bne.n	8002de6 <_svfiprintf_r+0x186>
 8002d7c:	9b03      	ldr	r3, [sp, #12]
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	9203      	str	r2, [sp, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb8      	it	lt
 8002d88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d8c:	3402      	adds	r4, #2
 8002d8e:	9305      	str	r3, [sp, #20]
 8002d90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002e58 <_svfiprintf_r+0x1f8>
 8002d94:	7821      	ldrb	r1, [r4, #0]
 8002d96:	2203      	movs	r2, #3
 8002d98:	4650      	mov	r0, sl
 8002d9a:	f7fd fa21 	bl	80001e0 <memchr>
 8002d9e:	b138      	cbz	r0, 8002db0 <_svfiprintf_r+0x150>
 8002da0:	9b04      	ldr	r3, [sp, #16]
 8002da2:	eba0 000a 	sub.w	r0, r0, sl
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	4082      	lsls	r2, r0
 8002daa:	4313      	orrs	r3, r2
 8002dac:	3401      	adds	r4, #1
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db4:	4825      	ldr	r0, [pc, #148]	; (8002e4c <_svfiprintf_r+0x1ec>)
 8002db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dba:	2206      	movs	r2, #6
 8002dbc:	f7fd fa10 	bl	80001e0 <memchr>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d038      	beq.n	8002e36 <_svfiprintf_r+0x1d6>
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <_svfiprintf_r+0x1f0>)
 8002dc6:	bb1b      	cbnz	r3, 8002e10 <_svfiprintf_r+0x1b0>
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd6:	4433      	add	r3, r6
 8002dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dda:	e768      	b.n	8002cae <_svfiprintf_r+0x4e>
 8002ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002de0:	460c      	mov	r4, r1
 8002de2:	2001      	movs	r0, #1
 8002de4:	e7a6      	b.n	8002d34 <_svfiprintf_r+0xd4>
 8002de6:	2300      	movs	r3, #0
 8002de8:	3401      	adds	r4, #1
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0c0a 	mov.w	ip, #10
 8002df2:	4620      	mov	r0, r4
 8002df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df8:	3a30      	subs	r2, #48	; 0x30
 8002dfa:	2a09      	cmp	r2, #9
 8002dfc:	d903      	bls.n	8002e06 <_svfiprintf_r+0x1a6>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0c6      	beq.n	8002d90 <_svfiprintf_r+0x130>
 8002e02:	9105      	str	r1, [sp, #20]
 8002e04:	e7c4      	b.n	8002d90 <_svfiprintf_r+0x130>
 8002e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e7f0      	b.n	8002df2 <_svfiprintf_r+0x192>
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	462a      	mov	r2, r5
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <_svfiprintf_r+0x1f4>)
 8002e18:	a904      	add	r1, sp, #16
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	f3af 8000 	nop.w
 8002e20:	1c42      	adds	r2, r0, #1
 8002e22:	4606      	mov	r6, r0
 8002e24:	d1d6      	bne.n	8002dd4 <_svfiprintf_r+0x174>
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	065b      	lsls	r3, r3, #25
 8002e2a:	f53f af2d 	bmi.w	8002c88 <_svfiprintf_r+0x28>
 8002e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e30:	b01d      	add	sp, #116	; 0x74
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e36:	ab03      	add	r3, sp, #12
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	462a      	mov	r2, r5
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <_svfiprintf_r+0x1f4>)
 8002e3e:	a904      	add	r1, sp, #16
 8002e40:	4638      	mov	r0, r7
 8002e42:	f000 f879 	bl	8002f38 <_printf_i>
 8002e46:	e7eb      	b.n	8002e20 <_svfiprintf_r+0x1c0>
 8002e48:	08003294 	.word	0x08003294
 8002e4c:	0800329e 	.word	0x0800329e
 8002e50:	00000000 	.word	0x00000000
 8002e54:	08002bad 	.word	0x08002bad
 8002e58:	0800329a 	.word	0x0800329a

08002e5c <_printf_common>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	4616      	mov	r6, r2
 8002e62:	4699      	mov	r9, r3
 8002e64:	688a      	ldr	r2, [r1, #8]
 8002e66:	690b      	ldr	r3, [r1, #16]
 8002e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bfb8      	it	lt
 8002e70:	4613      	movlt	r3, r2
 8002e72:	6033      	str	r3, [r6, #0]
 8002e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e78:	4607      	mov	r7, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	b10a      	cbz	r2, 8002e82 <_printf_common+0x26>
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6033      	str	r3, [r6, #0]
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	0699      	lsls	r1, r3, #26
 8002e86:	bf42      	ittt	mi
 8002e88:	6833      	ldrmi	r3, [r6, #0]
 8002e8a:	3302      	addmi	r3, #2
 8002e8c:	6033      	strmi	r3, [r6, #0]
 8002e8e:	6825      	ldr	r5, [r4, #0]
 8002e90:	f015 0506 	ands.w	r5, r5, #6
 8002e94:	d106      	bne.n	8002ea4 <_printf_common+0x48>
 8002e96:	f104 0a19 	add.w	sl, r4, #25
 8002e9a:	68e3      	ldr	r3, [r4, #12]
 8002e9c:	6832      	ldr	r2, [r6, #0]
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	42ab      	cmp	r3, r5
 8002ea2:	dc26      	bgt.n	8002ef2 <_printf_common+0x96>
 8002ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ea8:	1e13      	subs	r3, r2, #0
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	bf18      	it	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	0692      	lsls	r2, r2, #26
 8002eb2:	d42b      	bmi.n	8002f0c <_printf_common+0xb0>
 8002eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eb8:	4649      	mov	r1, r9
 8002eba:	4638      	mov	r0, r7
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d01e      	beq.n	8002f00 <_printf_common+0xa4>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	6922      	ldr	r2, [r4, #16]
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf02      	ittt	eq
 8002ece:	68e5      	ldreq	r5, [r4, #12]
 8002ed0:	6833      	ldreq	r3, [r6, #0]
 8002ed2:	1aed      	subeq	r5, r5, r3
 8002ed4:	68a3      	ldr	r3, [r4, #8]
 8002ed6:	bf0c      	ite	eq
 8002ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002edc:	2500      	movne	r5, #0
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bfc4      	itt	gt
 8002ee2:	1a9b      	subgt	r3, r3, r2
 8002ee4:	18ed      	addgt	r5, r5, r3
 8002ee6:	2600      	movs	r6, #0
 8002ee8:	341a      	adds	r4, #26
 8002eea:	42b5      	cmp	r5, r6
 8002eec:	d11a      	bne.n	8002f24 <_printf_common+0xc8>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e008      	b.n	8002f04 <_printf_common+0xa8>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	4638      	mov	r0, r7
 8002efa:	47c0      	blx	r8
 8002efc:	3001      	adds	r0, #1
 8002efe:	d103      	bne.n	8002f08 <_printf_common+0xac>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f08:	3501      	adds	r5, #1
 8002f0a:	e7c6      	b.n	8002e9a <_printf_common+0x3e>
 8002f0c:	18e1      	adds	r1, r4, r3
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	2030      	movs	r0, #48	; 0x30
 8002f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f16:	4422      	add	r2, r4
 8002f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f20:	3302      	adds	r3, #2
 8002f22:	e7c7      	b.n	8002eb4 <_printf_common+0x58>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4622      	mov	r2, r4
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	47c0      	blx	r8
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d0e6      	beq.n	8002f00 <_printf_common+0xa4>
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7d9      	b.n	8002eea <_printf_common+0x8e>
	...

08002f38 <_printf_i>:
 8002f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f3c:	7e0f      	ldrb	r7, [r1, #24]
 8002f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f40:	2f78      	cmp	r7, #120	; 0x78
 8002f42:	4691      	mov	r9, r2
 8002f44:	4680      	mov	r8, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	469a      	mov	sl, r3
 8002f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f4e:	d807      	bhi.n	8002f60 <_printf_i+0x28>
 8002f50:	2f62      	cmp	r7, #98	; 0x62
 8002f52:	d80a      	bhi.n	8002f6a <_printf_i+0x32>
 8002f54:	2f00      	cmp	r7, #0
 8002f56:	f000 80d4 	beq.w	8003102 <_printf_i+0x1ca>
 8002f5a:	2f58      	cmp	r7, #88	; 0x58
 8002f5c:	f000 80c0 	beq.w	80030e0 <_printf_i+0x1a8>
 8002f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f68:	e03a      	b.n	8002fe0 <_printf_i+0xa8>
 8002f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f6e:	2b15      	cmp	r3, #21
 8002f70:	d8f6      	bhi.n	8002f60 <_printf_i+0x28>
 8002f72:	a101      	add	r1, pc, #4	; (adr r1, 8002f78 <_printf_i+0x40>)
 8002f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08002f61 	.word	0x08002f61
 8002f84:	08002f61 	.word	0x08002f61
 8002f88:	08002f61 	.word	0x08002f61
 8002f8c:	08002f61 	.word	0x08002f61
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002f61 	.word	0x08002f61
 8002f98:	08002f61 	.word	0x08002f61
 8002f9c:	08002f61 	.word	0x08002f61
 8002fa0:	08002f61 	.word	0x08002f61
 8002fa4:	080030e9 	.word	0x080030e9
 8002fa8:	08003011 	.word	0x08003011
 8002fac:	080030a3 	.word	0x080030a3
 8002fb0:	08002f61 	.word	0x08002f61
 8002fb4:	08002f61 	.word	0x08002f61
 8002fb8:	0800310b 	.word	0x0800310b
 8002fbc:	08002f61 	.word	0x08002f61
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08002f61 	.word	0x08002f61
 8002fc8:	08002f61 	.word	0x08002f61
 8002fcc:	080030ab 	.word	0x080030ab
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	602a      	str	r2, [r5, #0]
 8002fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e09f      	b.n	8003124 <_printf_i+0x1ec>
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	0607      	lsls	r7, r0, #24
 8002fea:	f103 0104 	add.w	r1, r3, #4
 8002fee:	6029      	str	r1, [r5, #0]
 8002ff0:	d501      	bpl.n	8002ff6 <_printf_i+0xbe>
 8002ff2:	681e      	ldr	r6, [r3, #0]
 8002ff4:	e003      	b.n	8002ffe <_printf_i+0xc6>
 8002ff6:	0646      	lsls	r6, r0, #25
 8002ff8:	d5fb      	bpl.n	8002ff2 <_printf_i+0xba>
 8002ffa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	da03      	bge.n	800300a <_printf_i+0xd2>
 8003002:	232d      	movs	r3, #45	; 0x2d
 8003004:	4276      	negs	r6, r6
 8003006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800300a:	485a      	ldr	r0, [pc, #360]	; (8003174 <_printf_i+0x23c>)
 800300c:	230a      	movs	r3, #10
 800300e:	e012      	b.n	8003036 <_printf_i+0xfe>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	6820      	ldr	r0, [r4, #0]
 8003014:	1d19      	adds	r1, r3, #4
 8003016:	6029      	str	r1, [r5, #0]
 8003018:	0605      	lsls	r5, r0, #24
 800301a:	d501      	bpl.n	8003020 <_printf_i+0xe8>
 800301c:	681e      	ldr	r6, [r3, #0]
 800301e:	e002      	b.n	8003026 <_printf_i+0xee>
 8003020:	0641      	lsls	r1, r0, #25
 8003022:	d5fb      	bpl.n	800301c <_printf_i+0xe4>
 8003024:	881e      	ldrh	r6, [r3, #0]
 8003026:	4853      	ldr	r0, [pc, #332]	; (8003174 <_printf_i+0x23c>)
 8003028:	2f6f      	cmp	r7, #111	; 0x6f
 800302a:	bf0c      	ite	eq
 800302c:	2308      	moveq	r3, #8
 800302e:	230a      	movne	r3, #10
 8003030:	2100      	movs	r1, #0
 8003032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003036:	6865      	ldr	r5, [r4, #4]
 8003038:	60a5      	str	r5, [r4, #8]
 800303a:	2d00      	cmp	r5, #0
 800303c:	bfa2      	ittt	ge
 800303e:	6821      	ldrge	r1, [r4, #0]
 8003040:	f021 0104 	bicge.w	r1, r1, #4
 8003044:	6021      	strge	r1, [r4, #0]
 8003046:	b90e      	cbnz	r6, 800304c <_printf_i+0x114>
 8003048:	2d00      	cmp	r5, #0
 800304a:	d04b      	beq.n	80030e4 <_printf_i+0x1ac>
 800304c:	4615      	mov	r5, r2
 800304e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003052:	fb03 6711 	mls	r7, r3, r1, r6
 8003056:	5dc7      	ldrb	r7, [r0, r7]
 8003058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800305c:	4637      	mov	r7, r6
 800305e:	42bb      	cmp	r3, r7
 8003060:	460e      	mov	r6, r1
 8003062:	d9f4      	bls.n	800304e <_printf_i+0x116>
 8003064:	2b08      	cmp	r3, #8
 8003066:	d10b      	bne.n	8003080 <_printf_i+0x148>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	07de      	lsls	r6, r3, #31
 800306c:	d508      	bpl.n	8003080 <_printf_i+0x148>
 800306e:	6923      	ldr	r3, [r4, #16]
 8003070:	6861      	ldr	r1, [r4, #4]
 8003072:	4299      	cmp	r1, r3
 8003074:	bfde      	ittt	le
 8003076:	2330      	movle	r3, #48	; 0x30
 8003078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800307c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003080:	1b52      	subs	r2, r2, r5
 8003082:	6122      	str	r2, [r4, #16]
 8003084:	f8cd a000 	str.w	sl, [sp]
 8003088:	464b      	mov	r3, r9
 800308a:	aa03      	add	r2, sp, #12
 800308c:	4621      	mov	r1, r4
 800308e:	4640      	mov	r0, r8
 8003090:	f7ff fee4 	bl	8002e5c <_printf_common>
 8003094:	3001      	adds	r0, #1
 8003096:	d14a      	bne.n	800312e <_printf_i+0x1f6>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800309c:	b004      	add	sp, #16
 800309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	f043 0320 	orr.w	r3, r3, #32
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	4833      	ldr	r0, [pc, #204]	; (8003178 <_printf_i+0x240>)
 80030ac:	2778      	movs	r7, #120	; 0x78
 80030ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	6829      	ldr	r1, [r5, #0]
 80030b6:	061f      	lsls	r7, r3, #24
 80030b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80030bc:	d402      	bmi.n	80030c4 <_printf_i+0x18c>
 80030be:	065f      	lsls	r7, r3, #25
 80030c0:	bf48      	it	mi
 80030c2:	b2b6      	uxthmi	r6, r6
 80030c4:	07df      	lsls	r7, r3, #31
 80030c6:	bf48      	it	mi
 80030c8:	f043 0320 	orrmi.w	r3, r3, #32
 80030cc:	6029      	str	r1, [r5, #0]
 80030ce:	bf48      	it	mi
 80030d0:	6023      	strmi	r3, [r4, #0]
 80030d2:	b91e      	cbnz	r6, 80030dc <_printf_i+0x1a4>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f023 0320 	bic.w	r3, r3, #32
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	2310      	movs	r3, #16
 80030de:	e7a7      	b.n	8003030 <_printf_i+0xf8>
 80030e0:	4824      	ldr	r0, [pc, #144]	; (8003174 <_printf_i+0x23c>)
 80030e2:	e7e4      	b.n	80030ae <_printf_i+0x176>
 80030e4:	4615      	mov	r5, r2
 80030e6:	e7bd      	b.n	8003064 <_printf_i+0x12c>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	6826      	ldr	r6, [r4, #0]
 80030ec:	6961      	ldr	r1, [r4, #20]
 80030ee:	1d18      	adds	r0, r3, #4
 80030f0:	6028      	str	r0, [r5, #0]
 80030f2:	0635      	lsls	r5, r6, #24
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	d501      	bpl.n	80030fc <_printf_i+0x1c4>
 80030f8:	6019      	str	r1, [r3, #0]
 80030fa:	e002      	b.n	8003102 <_printf_i+0x1ca>
 80030fc:	0670      	lsls	r0, r6, #25
 80030fe:	d5fb      	bpl.n	80030f8 <_printf_i+0x1c0>
 8003100:	8019      	strh	r1, [r3, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	6123      	str	r3, [r4, #16]
 8003106:	4615      	mov	r5, r2
 8003108:	e7bc      	b.n	8003084 <_printf_i+0x14c>
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	1d1a      	adds	r2, r3, #4
 800310e:	602a      	str	r2, [r5, #0]
 8003110:	681d      	ldr	r5, [r3, #0]
 8003112:	6862      	ldr	r2, [r4, #4]
 8003114:	2100      	movs	r1, #0
 8003116:	4628      	mov	r0, r5
 8003118:	f7fd f862 	bl	80001e0 <memchr>
 800311c:	b108      	cbz	r0, 8003122 <_printf_i+0x1ea>
 800311e:	1b40      	subs	r0, r0, r5
 8003120:	6060      	str	r0, [r4, #4]
 8003122:	6863      	ldr	r3, [r4, #4]
 8003124:	6123      	str	r3, [r4, #16]
 8003126:	2300      	movs	r3, #0
 8003128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800312c:	e7aa      	b.n	8003084 <_printf_i+0x14c>
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	462a      	mov	r2, r5
 8003132:	4649      	mov	r1, r9
 8003134:	4640      	mov	r0, r8
 8003136:	47d0      	blx	sl
 8003138:	3001      	adds	r0, #1
 800313a:	d0ad      	beq.n	8003098 <_printf_i+0x160>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	079b      	lsls	r3, r3, #30
 8003140:	d413      	bmi.n	800316a <_printf_i+0x232>
 8003142:	68e0      	ldr	r0, [r4, #12]
 8003144:	9b03      	ldr	r3, [sp, #12]
 8003146:	4298      	cmp	r0, r3
 8003148:	bfb8      	it	lt
 800314a:	4618      	movlt	r0, r3
 800314c:	e7a6      	b.n	800309c <_printf_i+0x164>
 800314e:	2301      	movs	r3, #1
 8003150:	4632      	mov	r2, r6
 8003152:	4649      	mov	r1, r9
 8003154:	4640      	mov	r0, r8
 8003156:	47d0      	blx	sl
 8003158:	3001      	adds	r0, #1
 800315a:	d09d      	beq.n	8003098 <_printf_i+0x160>
 800315c:	3501      	adds	r5, #1
 800315e:	68e3      	ldr	r3, [r4, #12]
 8003160:	9903      	ldr	r1, [sp, #12]
 8003162:	1a5b      	subs	r3, r3, r1
 8003164:	42ab      	cmp	r3, r5
 8003166:	dcf2      	bgt.n	800314e <_printf_i+0x216>
 8003168:	e7eb      	b.n	8003142 <_printf_i+0x20a>
 800316a:	2500      	movs	r5, #0
 800316c:	f104 0619 	add.w	r6, r4, #25
 8003170:	e7f5      	b.n	800315e <_printf_i+0x226>
 8003172:	bf00      	nop
 8003174:	080032a5 	.word	0x080032a5
 8003178:	080032b6 	.word	0x080032b6

0800317c <memmove>:
 800317c:	4288      	cmp	r0, r1
 800317e:	b510      	push	{r4, lr}
 8003180:	eb01 0402 	add.w	r4, r1, r2
 8003184:	d902      	bls.n	800318c <memmove+0x10>
 8003186:	4284      	cmp	r4, r0
 8003188:	4623      	mov	r3, r4
 800318a:	d807      	bhi.n	800319c <memmove+0x20>
 800318c:	1e43      	subs	r3, r0, #1
 800318e:	42a1      	cmp	r1, r4
 8003190:	d008      	beq.n	80031a4 <memmove+0x28>
 8003192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800319a:	e7f8      	b.n	800318e <memmove+0x12>
 800319c:	4402      	add	r2, r0
 800319e:	4601      	mov	r1, r0
 80031a0:	428a      	cmp	r2, r1
 80031a2:	d100      	bne.n	80031a6 <memmove+0x2a>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ae:	e7f7      	b.n	80031a0 <memmove+0x24>

080031b0 <_sbrk_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4d06      	ldr	r5, [pc, #24]	; (80031cc <_sbrk_r+0x1c>)
 80031b4:	2300      	movs	r3, #0
 80031b6:	4604      	mov	r4, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fd fd1a 	bl	8000bf4 <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_sbrk_r+0x1a>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_sbrk_r+0x1a>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	200002bc 	.word	0x200002bc

080031d0 <memcpy>:
 80031d0:	440a      	add	r2, r1
 80031d2:	4291      	cmp	r1, r2
 80031d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80031d8:	d100      	bne.n	80031dc <memcpy+0xc>
 80031da:	4770      	bx	lr
 80031dc:	b510      	push	{r4, lr}
 80031de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e6:	4291      	cmp	r1, r2
 80031e8:	d1f9      	bne.n	80031de <memcpy+0xe>
 80031ea:	bd10      	pop	{r4, pc}

080031ec <_realloc_r>:
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f0:	4680      	mov	r8, r0
 80031f2:	4614      	mov	r4, r2
 80031f4:	460e      	mov	r6, r1
 80031f6:	b921      	cbnz	r1, 8003202 <_realloc_r+0x16>
 80031f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031fc:	4611      	mov	r1, r2
 80031fe:	f7ff bc49 	b.w	8002a94 <_malloc_r>
 8003202:	b92a      	cbnz	r2, 8003210 <_realloc_r+0x24>
 8003204:	f7ff fbda 	bl	80029bc <_free_r>
 8003208:	4625      	mov	r5, r4
 800320a:	4628      	mov	r0, r5
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003210:	f000 f81b 	bl	800324a <_malloc_usable_size_r>
 8003214:	4284      	cmp	r4, r0
 8003216:	4607      	mov	r7, r0
 8003218:	d802      	bhi.n	8003220 <_realloc_r+0x34>
 800321a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800321e:	d812      	bhi.n	8003246 <_realloc_r+0x5a>
 8003220:	4621      	mov	r1, r4
 8003222:	4640      	mov	r0, r8
 8003224:	f7ff fc36 	bl	8002a94 <_malloc_r>
 8003228:	4605      	mov	r5, r0
 800322a:	2800      	cmp	r0, #0
 800322c:	d0ed      	beq.n	800320a <_realloc_r+0x1e>
 800322e:	42bc      	cmp	r4, r7
 8003230:	4622      	mov	r2, r4
 8003232:	4631      	mov	r1, r6
 8003234:	bf28      	it	cs
 8003236:	463a      	movcs	r2, r7
 8003238:	f7ff ffca 	bl	80031d0 <memcpy>
 800323c:	4631      	mov	r1, r6
 800323e:	4640      	mov	r0, r8
 8003240:	f7ff fbbc 	bl	80029bc <_free_r>
 8003244:	e7e1      	b.n	800320a <_realloc_r+0x1e>
 8003246:	4635      	mov	r5, r6
 8003248:	e7df      	b.n	800320a <_realloc_r+0x1e>

0800324a <_malloc_usable_size_r>:
 800324a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324e:	1f18      	subs	r0, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	bfbc      	itt	lt
 8003254:	580b      	ldrlt	r3, [r1, r0]
 8003256:	18c0      	addlt	r0, r0, r3
 8003258:	4770      	bx	lr
	...

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
