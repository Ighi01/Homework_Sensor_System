
03_class_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003760  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000018  0800393c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  0800393c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbf1  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be1  00000000  00000000  0002cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097b  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001564e  00000000  00000000  0002fdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfd5  00000000  00000000  00045439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008968f  00000000  00000000  0005240e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032e8  00000000  00000000  000dbaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000ded88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038dc 	.word	0x080038dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080038dc 	.word	0x080038dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Handle elapsed timer and don't give a ### about the interrupt, since it will be resettet by the HAL function
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	// Check if the timer of interest was triggered
	if(htim == &htim10){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a13      	ldr	r2, [pc, #76]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d11f      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x50>
		// Stop timer, so we start counting from the last send executed
		if(HAL_TIM_Base_Stop_IT(&htim10) != HAL_OK)
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80004e2:	f001 ff53 	bl	800238c <HAL_TIM_Base_Stop_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>
			Error_Handler();
 80004ec:	f000 f984 	bl	80007f8 <Error_Handler>

		// Check if DMA is ready for transmitting data again
		if(HAL_UART_GetState(&huart2) == HAL_UART_STATE_READY){
 80004f0:	480e      	ldr	r0, [pc, #56]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80004f2:	f002 fccd 	bl	8002e90 <HAL_UART_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b20      	cmp	r3, #32
 80004fa:	d111      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x50>

			// Advise DMA to transmit the buffer and check if ok
			if(HAL_UART_Transmit_DMA(&huart2, buff, sizeof(buff)) != HAL_OK)
 80004fc:	220b      	movs	r2, #11
 80004fe:	490c      	ldr	r1, [pc, #48]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000502:	f002 f985 	bl	8002810 <HAL_UART_Transmit_DMA>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <HAL_TIM_PeriodElapsedCallback+0x40>
				Error_Handler();
 800050c:	f000 f974 	bl	80007f8 <Error_Handler>

			// Restart the one second timer and check if executed correctly
			if(HAL_TIM_Base_Start_IT(&htim10) != HAL_OK)
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000512:	f001 fed9 	bl	80022c8 <HAL_TIM_Base_Start_IT>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x50>
				Error_Handler();
 800051c:	f000 f96c 	bl	80007f8 <Error_Handler>

		}
	}
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000034 	.word	0x20000034
 800052c:	2000007c 	.word	0x2000007c
 8000530:	20000000 	.word	0x20000000

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 faba 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f814 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8ec 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f8ca 	bl	80006dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000548:	f000 f89e 	bl	8000688 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800054c:	f000 f878 	bl	8000640 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  // Start the Timer10 interrupt (freq = 1 Hz) and check if executed correctly, otherwise call Error_Handler
  if(HAL_TIM_Base_Start_IT(&htim10) != HAL_OK)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x30>)
 8000552:	f001 feb9 	bl	80022c8 <HAL_TIM_Base_Start_IT>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <main+0x2c>
	  Error_Handler();
 800055c:	f000 f94c 	bl	80007f8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x2c>
 8000562:	bf00      	nop
 8000564:	20000034 	.word	0x20000034

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 f984 	bl	8003884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f980 	bl	80018f8 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f8fb 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fbe2 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f8e5 	bl	80007f8 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_TIM10_Init+0x40>)
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <MX_TIM10_Init+0x44>)
 8000648:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_TIM10_Init+0x40>)
 800064c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000650:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_TIM10_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_TIM10_Init+0x40>)
 800065a:	f242 720f 	movw	r2, #9999	; 0x270f
 800065e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_TIM10_Init+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_TIM10_Init+0x40>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_TIM10_Init+0x40>)
 800066e:	f001 fddb 	bl	8002228 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000678:	f000 f8be 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000034 	.word	0x20000034
 8000684:	40014400 	.word	0x40014400

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f002 f858 	bl	8002774 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f895 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x3c>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2011      	movs	r0, #17
 8000704:	f000 fb21 	bl	8000d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000708:	2011      	movs	r0, #17
 800070a:	f000 fb3a 	bl	8000d82 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <MX_GPIO_Init+0xd0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <MX_GPIO_Init+0xd4>)
 80007a8:	f001 f88c 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_GPIO_Init+0xd8>)
 80007c4:	f000 fefa 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xd4>)
 80007e0:	f000 feec 	bl	80015bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000842:	2007      	movs	r0, #7
 8000844:	f000 fa76 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_TIM_Base_MspInit+0x48>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d115      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2019      	movs	r0, #25
 8000888:	f000 fa5f 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800088c:	2019      	movs	r0, #25
 800088e:	f000 fa78 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40014400 	.word	0x40014400
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a34      	ldr	r2, [pc, #208]	; (8000994 <HAL_UART_MspInit+0xf0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d161      	bne.n	800098a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <HAL_UART_MspInit+0xf4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <HAL_UART_MspInit+0xf8>)
 800091a:	f000 fe4f 	bl	80015bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <HAL_UART_MspInit+0x100>)
 8000922:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 800093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000960:	f000 fa2a 	bl	8000db8 <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800096a:	f7ff ff45 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_UART_MspInit+0xfc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2026      	movs	r0, #38	; 0x26
 8000980:	f000 f9e3 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000984:	2026      	movs	r0, #38	; 0x26
 8000986:	f000 f9fc 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40004400 	.word	0x40004400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	200000c0 	.word	0x200000c0
 80009a4:	400260a0 	.word	0x400260a0

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8ae 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Stream6_IRQHandler+0x10>)
 8000a02:	f000 fb71 	bl	80010e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000c0 	.word	0x200000c0

08000a10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a16:	f001 fce8 	bl	80023ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000034 	.word	0x20000034

08000a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART2_IRQHandler+0x10>)
 8000a2a:	f001 ff6f 	bl	800290c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000007c 	.word	0x2000007c

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a86:	f7ff ffd7 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 ff03 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd51 	bl	8000534 <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000aa0:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 8000aa4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000aa8:	20000124 	.word	0x20000124

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f92b 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe8e 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f943 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	f000 f90b 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000014 	.word	0x20000014
 8000b50:	20000010 	.word	0x20000010

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000014 	.word	0x20000014
 8000b78:	20000120 	.word	0x20000120

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000120 	.word	0x20000120

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff feda 	bl	8000b7c <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e099      	b.n	8000f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df4:	e00f      	b.n	8000e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df6:	f7ff fec1 	bl	8000b7c <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d908      	bls.n	8000e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2220      	movs	r2, #32
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e078      	b.n	8000f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1e8      	bne.n	8000df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <HAL_DMA_Init+0x158>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d107      	bne.n	8000e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f023 0307 	bic.w	r3, r3, #7
 8000e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d117      	bne.n	8000eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00e      	beq.n	8000eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fb01 	bl	80014c4 <DMA_CheckFifoParam>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2240      	movs	r2, #64	; 0x40
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e016      	b.n	8000f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 fab8 	bl	8001458 <DMA_CalcBaseAndBitshift>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef0:	223f      	movs	r2, #63	; 0x3f
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	f010803f 	.word	0xf010803f

08000f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_DMA_Start_IT+0x26>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e040      	b.n	8000fbc <HAL_DMA_Start_IT+0xa8>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12f      	bne.n	8000fae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 fa4a 	bl	80013fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f6c:	223f      	movs	r2, #63	; 0x3f
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0216 	orr.w	r2, r2, #22
 8000f82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0208 	orr.w	r2, r2, #8
 8000f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e005      	b.n	8000fba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd2:	f7ff fdd3 	bl	8000b7c <HAL_GetTick>
 8000fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e052      	b.n	800109c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0216 	bic.w	r2, r2, #22
 8001004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <HAL_DMA_Abort+0x62>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	e013      	b.n	8001070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001048:	f7ff fd98 	bl	8000b7c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b05      	cmp	r3, #5
 8001054:	d90c      	bls.n	8001070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2220      	movs	r2, #32
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e015      	b.n	800109c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e4      	bne.n	8001048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	223f      	movs	r2, #63	; 0x3f
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d004      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00c      	b.n	80010dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010f4:	4b8e      	ldr	r3, [pc, #568]	; (8001330 <HAL_DMA_IRQHandler+0x248>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a8e      	ldr	r2, [pc, #568]	; (8001334 <HAL_DMA_IRQHandler+0x24c>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0a9b      	lsrs	r3, r3, #10
 8001100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001112:	2208      	movs	r2, #8
 8001114:	409a      	lsls	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01a      	beq.n	8001154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0204 	bic.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	2208      	movs	r2, #8
 8001142:	409a      	lsls	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001158:	2201      	movs	r2, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d012      	beq.n	800118a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	f043 0202 	orr.w	r2, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118e:	2204      	movs	r2, #4
 8001190:	409a      	lsls	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	2204      	movs	r2, #4
 80011ae:	409a      	lsls	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f043 0204 	orr.w	r2, r3, #4
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2210      	movs	r2, #16
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d043      	beq.n	8001258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d03c      	beq.n	8001258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	2210      	movs	r2, #16
 80011e4:	409a      	lsls	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d018      	beq.n	800122a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d024      	beq.n	8001258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
 8001216:	e01f      	b.n	8001258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01b      	beq.n	8001258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	4798      	blx	r3
 8001228:	e016      	b.n	8001258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d107      	bne.n	8001248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0208 	bic.w	r2, r2, #8
 8001246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2220      	movs	r2, #32
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 808f 	beq.w	8001388 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8087 	beq.w	8001388 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2220      	movs	r2, #32
 8001280:	409a      	lsls	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b05      	cmp	r3, #5
 8001290:	d136      	bne.n	8001300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0216 	bic.w	r2, r2, #22
 80012a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <HAL_DMA_IRQHandler+0x1da>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0208 	bic.w	r2, r2, #8
 80012d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	223f      	movs	r2, #63	; 0x3f
 80012d8:	409a      	lsls	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d07e      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
        }
        return;
 80012fe:	e079      	b.n	80013f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01d      	beq.n	800134a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10d      	bne.n	8001338 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	2b00      	cmp	r3, #0
 8001322:	d031      	beq.n	8001388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
 800132c:	e02c      	b.n	8001388 <HAL_DMA_IRQHandler+0x2a0>
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
 8001348:	e01e      	b.n	8001388 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10f      	bne.n	8001378 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0210 	bic.w	r2, r2, #16
 8001366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	2b00      	cmp	r3, #0
 800138e:	d032      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d022      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2205      	movs	r2, #5
 80013a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d307      	bcc.n	80013d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f2      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x2cc>
 80013ce:	e000      	b.n	80013d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
 80013f2:	e000      	b.n	80013f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80013f4:	bf00      	nop
    }
  }
}
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b40      	cmp	r3, #64	; 0x40
 8001428:	d108      	bne.n	800143c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800143a:	e007      	b.n	800144c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3b10      	subs	r3, #16
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <DMA_CalcBaseAndBitshift+0x64>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d909      	bls.n	800149a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	1d1a      	adds	r2, r3, #4
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	659a      	str	r2, [r3, #88]	; 0x58
 8001498:	e007      	b.n	80014aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	aaaaaaab 	.word	0xaaaaaaab
 80014c0:	0800390c 	.word	0x0800390c

080014c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d11f      	bne.n	800151e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d856      	bhi.n	8001592 <DMA_CheckFifoParam+0xce>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <DMA_CheckFifoParam+0x28>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	0800150f 	.word	0x0800150f
 80014f4:	080014fd 	.word	0x080014fd
 80014f8:	08001593 	.word	0x08001593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d046      	beq.n	8001596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800150c:	e043      	b.n	8001596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001516:	d140      	bne.n	800159a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800151c:	e03d      	b.n	800159a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001526:	d121      	bne.n	800156c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d837      	bhi.n	800159e <DMA_CheckFifoParam+0xda>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <DMA_CheckFifoParam+0x70>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	0800154b 	.word	0x0800154b
 800153c:	08001545 	.word	0x08001545
 8001540:	0800155d 	.word	0x0800155d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
      break;
 8001548:	e030      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d025      	beq.n	80015a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800155a:	e022      	b.n	80015a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001564:	d11f      	bne.n	80015a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800156a:	e01c      	b.n	80015a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d903      	bls.n	800157a <DMA_CheckFifoParam+0xb6>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d003      	beq.n	8001580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001578:	e018      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      break;
 800157e:	e015      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00e      	beq.n	80015aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
      break;
 8001590:	e00b      	b.n	80015aa <DMA_CheckFifoParam+0xe6>
      break;
 8001592:	bf00      	nop
 8001594:	e00a      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
 8001598:	e008      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;
 800159a:	bf00      	nop
 800159c:	e006      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;
 800159e:	bf00      	nop
 80015a0:	e004      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;
 80015a2:	bf00      	nop
 80015a4:	e002      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;   
 80015a6:	bf00      	nop
 80015a8:	e000      	b.n	80015ac <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
    }
  } 
  
  return status; 
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e159      	b.n	800188c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8148 	bne.w	8001886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	2b02      	cmp	r3, #2
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a2 	beq.w	8001886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_GPIO_Init+0x2ec>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a49      	ldr	r2, [pc, #292]	; (80018ac <HAL_GPIO_Init+0x2f0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d019      	beq.n	80017be <HAL_GPIO_Init+0x202>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_GPIO_Init+0x2f4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x1fe>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a47      	ldr	r2, [pc, #284]	; (80018b4 <HAL_GPIO_Init+0x2f8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x1fa>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a45      	ldr	r2, [pc, #276]	; (80018bc <HAL_GPIO_Init+0x300>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x1f2>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x2ec>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x304>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_GPIO_Init+0x304>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <HAL_GPIO_Init+0x304>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_GPIO_Init+0x304>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f aea2 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e267      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d075      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192a:	2b08      	cmp	r3, #8
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d05b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x108>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d157      	bne.n	8001a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e242      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x74>
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6f      	ldr	r2, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6c      	ldr	r2, [pc, #432]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a68      	ldr	r2, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f8e4 	bl	8000b7c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f8e0 	bl	8000b7c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e207      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xc0>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8d0 	bl	8000b7c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f8cc 	bl	8000b7c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1f3      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe8>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1c7      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f885 	bl	8000b7c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff f881 	bl	8000b7c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1a8      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4925      	ldr	r1, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f864 	bl	8000b7c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f860 	bl	8000b7c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e187      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d036      	beq.n	8001b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f844 	bl	8000b7c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff f840 	bl	8000b7c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e167      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x200>
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f82d 	bl	8000b7c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	e00e      	b.n	8001b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff f829 	bl	8000b7c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d907      	bls.n	8001b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e150      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	42470000 	.word	0x42470000
 8001b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ea      	bne.n	8001b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8097 	beq.w	8001c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a73      	ldr	r2, [pc, #460]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7fe ffe9 	bl	8000b7c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7fe ffe5 	bl	8000b7c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e10c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2ea>
 8001bd4:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x30c>
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a5e      	ldr	r2, [pc, #376]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffaa 	bl	8000b7c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7fe ffa6 	bl	8000b7c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0cb      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7fe ff94 	bl	8000b7c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7fe ff90 	bl	8000b7c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0b5      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a1 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d05c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d141      	bne.n	8001d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe ff64 	bl	8000b7c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ff60 	bl	8000b7c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e087      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	491b      	ldr	r1, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff39 	bl	8000b7c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7fe ff35 	bl	8000b7c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e05c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x416>
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff22 	bl	8000b7c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff1e 	bl	8000b7c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e045      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e038      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4ec>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d121      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11a      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cc      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d90c      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d044      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e067      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4934      	ldr	r1, [pc, #208]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fe50 	bl	8000b7c <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe fe4c 	bl	8000b7c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20c      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fdb0 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	080038f4 	.word	0x080038f4
 8001fac:	2000000c 	.word	0x2000000c
 8001fb0:	20000010 	.word	0x20000010

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	b094      	sub	sp, #80	; 0x50
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fcc:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	f200 80e1 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e0db      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fec:	e0db      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_GetSysClockFreq+0x208>)
 8001ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff2:	e0d8      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
 8002014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
 8002022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002038:	0150      	lsls	r0, r2, #5
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4621      	mov	r1, r4
 8002040:	1a51      	subs	r1, r2, r1
 8002042:	6139      	str	r1, [r7, #16]
 8002044:	4629      	mov	r1, r5
 8002046:	eb63 0301 	sbc.w	r3, r3, r1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002058:	4659      	mov	r1, fp
 800205a:	018b      	lsls	r3, r1, #6
 800205c:	4651      	mov	r1, sl
 800205e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002062:	4651      	mov	r1, sl
 8002064:	018a      	lsls	r2, r1, #6
 8002066:	4651      	mov	r1, sl
 8002068:	ebb2 0801 	subs.w	r8, r2, r1
 800206c:	4659      	mov	r1, fp
 800206e:	eb63 0901 	sbc.w	r9, r3, r1
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800207e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002086:	4690      	mov	r8, r2
 8002088:	4699      	mov	r9, r3
 800208a:	4623      	mov	r3, r4
 800208c:	eb18 0303 	adds.w	r3, r8, r3
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	462b      	mov	r3, r5
 8002094:	eb49 0303 	adc.w	r3, r9, r3
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020a6:	4629      	mov	r1, r5
 80020a8:	024b      	lsls	r3, r1, #9
 80020aa:	4621      	mov	r1, r4
 80020ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b0:	4621      	mov	r1, r4
 80020b2:	024a      	lsls	r2, r1, #9
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	2200      	movs	r2, #0
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020c4:	f7fe f886 	bl	80001d4 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d0:	e058      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	2200      	movs	r2, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	4611      	mov	r1, r2
 80020de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	f04f 0000 	mov.w	r0, #0
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	0159      	lsls	r1, r3, #5
 80020fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020fe:	0150      	lsls	r0, r2, #5
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4641      	mov	r1, r8
 8002106:	ebb2 0a01 	subs.w	sl, r2, r1
 800210a:	4649      	mov	r1, r9
 800210c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800211c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002124:	ebb2 040a 	subs.w	r4, r2, sl
 8002128:	eb63 050b 	sbc.w	r5, r3, fp
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	00eb      	lsls	r3, r5, #3
 8002136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800213a:	00e2      	lsls	r2, r4, #3
 800213c:	4614      	mov	r4, r2
 800213e:	461d      	mov	r5, r3
 8002140:	4643      	mov	r3, r8
 8002142:	18e3      	adds	r3, r4, r3
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	464b      	mov	r3, r9
 8002148:	eb45 0303 	adc.w	r3, r5, r3
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215a:	4629      	mov	r1, r5
 800215c:	028b      	lsls	r3, r1, #10
 800215e:	4621      	mov	r1, r4
 8002160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002164:	4621      	mov	r1, r4
 8002166:	028a      	lsls	r2, r1, #10
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216e:	2200      	movs	r2, #0
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	61fa      	str	r2, [r7, #28]
 8002174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002178:	f7fe f82c 	bl	80001d4 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	3301      	adds	r3, #1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3750      	adds	r7, #80	; 0x50
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	08003904 	.word	0x08003904

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffdc 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0b5b      	lsrs	r3, r3, #13
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	08003904 	.word	0x08003904

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fb00 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 f9f0 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e044      	b.n	800236a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_TIM_Base_Start_IT+0xb0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d013      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_TIM_Base_Start_IT+0xb4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_TIM_Base_Start_IT+0xb8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_TIM_Base_Start_IT+0xbc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <HAL_TIM_Base_Start_IT+0xc0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d010      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	e007      	b.n	8002368 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800
 8002384:	40000c00 	.word	0x40000c00
 8002388:	40014000 	.word	0x40014000

0800238c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_TIM_Base_Stop_IT+0x48>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	f240 4344 	movw	r3, #1092	; 0x444
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_Base_Stop_IT+0x48>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d122      	bne.n	8002446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d11b      	bne.n	8002446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0202 	mvn.w	r2, #2
 8002416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8ee 	bl	800260e <HAL_TIM_IC_CaptureCallback>
 8002432:	e005      	b.n	8002440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8e0 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8f1 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0204 	mvn.w	r2, #4
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8c4 	bl	800260e <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f8b6 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8c7 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d122      	bne.n	80024ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11b      	bne.n	80024ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0208 	mvn.w	r2, #8
 80024be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2204      	movs	r2, #4
 80024c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f89a 	bl	800260e <HAL_TIM_IC_CaptureCallback>
 80024da:	e005      	b.n	80024e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f88c 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f89d 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d122      	bne.n	8002542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d11b      	bne.n	8002542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0210 	mvn.w	r2, #16
 8002512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2208      	movs	r2, #8
 8002518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f870 	bl	800260e <HAL_TIM_IC_CaptureCallback>
 800252e:	e005      	b.n	800253c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f862 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f873 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10e      	bne.n	800256e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0201 	mvn.w	r2, #1
 8002566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fd ffb1 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d10e      	bne.n	800259a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d107      	bne.n	800259a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8e3 	bl	8002760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d10e      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d107      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f838 	bl	8002636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d10e      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d107      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0220 	mvn.w	r2, #32
 80025ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8ad 	bl	800274c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a34      	ldr	r2, [pc, #208]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00f      	beq.n	8002684 <TIM_Base_SetConfig+0x38>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d00b      	beq.n	8002684 <TIM_Base_SetConfig+0x38>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a31      	ldr	r2, [pc, #196]	; (8002734 <TIM_Base_SetConfig+0xe8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <TIM_Base_SetConfig+0x38>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a30      	ldr	r2, [pc, #192]	; (8002738 <TIM_Base_SetConfig+0xec>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_Base_SetConfig+0x38>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <TIM_Base_SetConfig+0xf0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d108      	bne.n	8002696 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01b      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d017      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <TIM_Base_SetConfig+0xe8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <TIM_Base_SetConfig+0xec>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a20      	ldr	r2, [pc, #128]	; (800273c <TIM_Base_SetConfig+0xf0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <TIM_Base_SetConfig+0xf4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <TIM_Base_SetConfig+0xf8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x8a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <TIM_Base_SetConfig+0xfc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40010000 	.word	0x40010000
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800
 800273c:	40000c00 	.word	0x40000c00
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400
 8002748:	40014800 	.word	0x40014800

0800274c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e03f      	b.n	8002806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f882 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fdef 	bl	800339c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b20      	cmp	r3, #32
 8002828:	d165      	bne.n	80028f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_Transmit_DMA+0x26>
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e05e      	b.n	80028f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_UART_Transmit_DMA+0x38>
 8002844:	2302      	movs	r3, #2
 8002846:	e057      	b.n	80028f8 <HAL_UART_Transmit_DMA+0xe8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2221      	movs	r2, #33	; 0x21
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_UART_Transmit_DMA+0xf0>)
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_UART_Transmit_DMA+0xf4>)
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_UART_Transmit_DMA+0xf8>)
 8002886:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	2200      	movs	r2, #0
 800288e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3304      	adds	r3, #4
 80028a4:	461a      	mov	r2, r3
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	f7fe fb34 	bl	8000f14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	617b      	str	r3, [r7, #20]
   return(result);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3314      	adds	r3, #20
 80028dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028de:	627a      	str	r2, [r7, #36]	; 0x24
 80028e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6a39      	ldr	r1, [r7, #32]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e5      	bne.n	80028be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3730      	adds	r7, #48	; 0x30
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	08002ecd 	.word	0x08002ecd
 8002904:	08002f67 	.word	0x08002f67
 8002908:	08002f83 	.word	0x08002f83

0800290c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0ba      	sub	sp, #232	; 0xe8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800293e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800294a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_UART_IRQHandler+0x66>
 800295e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fc5a 	bl	8003224 <UART_Receive_IT>
      return;
 8002970:	e256      	b.n	8002e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80de 	beq.w	8002b38 <HAL_UART_IRQHandler+0x22c>
 800297c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800298c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80d1 	beq.w	8002b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_UART_IRQHandler+0xae>
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_UART_IRQHandler+0xd2>
 80029c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_UART_IRQHandler+0xf6>
 80029ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d011      	beq.n	8002a32 <HAL_UART_IRQHandler+0x126>
 8002a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0208 	orr.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 81ed 	beq.w	8002e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_UART_IRQHandler+0x14e>
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fbe5 	bl	8003224 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d103      	bne.n	8002a86 <HAL_UART_IRQHandler+0x17a>
 8002a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d04f      	beq.n	8002b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 faed 	bl	8003066 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d141      	bne.n	8002b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1d9      	bne.n	8002a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4a7d      	ldr	r2, [pc, #500]	; (8002ce8 <HAL_UART_IRQHandler+0x3dc>)
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fad2 	bl	80010a4 <HAL_DMA_Abort_IT>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b10:	4610      	mov	r0, r2
 8002b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e00e      	b.n	8002b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9a4 	bl	8002e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	e00a      	b.n	8002b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9a0 	bl	8002e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e006      	b.n	8002b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f99c 	bl	8002e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b32:	e170      	b.n	8002e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	bf00      	nop
    return;
 8002b36:	e16e      	b.n	8002e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 814a 	bne.w	8002dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8143 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 813c 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	f040 80b4 	bne.w	8002cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8140 	beq.w	8002e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	f080 8139 	bcs.w	8002e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	f000 8088 	beq.w	8002cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1d9      	bne.n	8002bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3314      	adds	r3, #20
 8002c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3314      	adds	r3, #20
 8002c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e1      	bne.n	8002c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e3      	bne.n	8002c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9e:	f023 0310 	bic.w	r3, r3, #16
 8002ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e3      	bne.n	8002c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe f97b 	bl	8000fc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8ca 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ce4:	e099      	b.n	8002e1a <HAL_UART_IRQHandler+0x50e>
 8002ce6:	bf00      	nop
 8002ce8:	0800312d 	.word	0x0800312d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 808b 	beq.w	8002e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d36:	647a      	str	r2, [r7, #68]	; 0x44
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e3      	bne.n	8002d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	623b      	str	r3, [r7, #32]
   return(result);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e3      	bne.n	8002d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0310 	bic.w	r3, r3, #16
 8002da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002db4:	61fa      	str	r2, [r7, #28]
 8002db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	69b9      	ldr	r1, [r7, #24]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	e841 2300 	strex	r3, r2, [r1]
 8002dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e3      	bne.n	8002d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f852 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dd4:	e023      	b.n	8002e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_UART_IRQHandler+0x4ea>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9b0 	bl	8003154 <UART_Transmit_IT>
    return;
 8002df4:	e014      	b.n	8002e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <HAL_UART_IRQHandler+0x514>
 8002e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9f0 	bl	80031f4 <UART_EndTransmit_IT>
    return;
 8002e14:	e004      	b.n	8002e20 <HAL_UART_IRQHandler+0x514>
    return;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <HAL_UART_IRQHandler+0x514>
      return;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <HAL_UART_IRQHandler+0x514>
      return;
 8002e1e:	bf00      	nop
  }
}
 8002e20:	37e8      	adds	r7, #232	; 0xe8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	b2db      	uxtb	r3, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b090      	sub	sp, #64	; 0x40
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d137      	bne.n	8002f58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	2200      	movs	r2, #0
 8002eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	623b      	str	r3, [r7, #32]
   return(result);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f56:	e002      	b.n	8002f5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002f58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f5a:	f7ff ff65 	bl	8002e28 <HAL_UART_TxCpltCallback>
}
 8002f5e:	bf00      	nop
 8002f60:	3740      	adds	r7, #64	; 0x40
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ff61 	bl	8002e3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b21      	cmp	r3, #33	; 0x21
 8002fb4:	d108      	bne.n	8002fc8 <UART_DMAError+0x46>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002fc2:	68b8      	ldr	r0, [r7, #8]
 8002fc4:	f000 f827 	bl	8003016 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b22      	cmp	r3, #34	; 0x22
 8002fe8:	d108      	bne.n	8002ffc <UART_DMAError+0x7a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ff6:	68b8      	ldr	r0, [r7, #8]
 8002ff8:	f000 f835 	bl	8003066 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0210 	orr.w	r2, r3, #16
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f7ff ff2b 	bl	8002e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003016:	b480      	push	{r7}
 8003018:	b089      	sub	sp, #36	; 0x24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	60bb      	str	r3, [r7, #8]
   return(result);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	61ba      	str	r2, [r7, #24]
 8003040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	613b      	str	r3, [r7, #16]
   return(result);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800305a:	bf00      	nop
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003066:	b480      	push	{r7}
 8003068:	b095      	sub	sp, #84	; 0x54
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800308e:	643a      	str	r2, [r7, #64]	; 0x40
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e5      	bne.n	800306e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d119      	bne.n	8003112 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030fe:	61ba      	str	r2, [r7, #24]
 8003100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	6979      	ldr	r1, [r7, #20]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	613b      	str	r3, [r7, #16]
   return(result);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003120:	bf00      	nop
 8003122:	3754      	adds	r7, #84	; 0x54
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fe8c 	bl	8002e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b21      	cmp	r3, #33	; 0x21
 8003166:	d13e      	bne.n	80031e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d114      	bne.n	800319c <UART_Transmit_IT+0x48>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d110      	bne.n	800319c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]
 800319a:	e008      	b.n	80031ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	1c59      	adds	r1, r3, #1
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6211      	str	r1, [r2, #32]
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe07 	bl	8002e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b22      	cmp	r3, #34	; 0x22
 8003236:	f040 80ab 	bne.w	8003390 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	d117      	bne.n	8003274 <UART_Receive_IT+0x50>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d113      	bne.n	8003274 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	b29a      	uxth	r2, r3
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
 8003272:	e026      	b.n	80032c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d007      	beq.n	8003298 <UART_Receive_IT+0x74>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <UART_Receive_IT+0x82>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e008      	b.n	80032b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4619      	mov	r1, r3
 80032d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d15a      	bne.n	800338c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0220 	bic.w	r2, r2, #32
 80032e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	2b01      	cmp	r3, #1
 8003314:	d135      	bne.n	8003382 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	613b      	str	r3, [r7, #16]
   return(result);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 0310 	bic.w	r3, r3, #16
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	623a      	str	r2, [r7, #32]
 800333e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	69f9      	ldr	r1, [r7, #28]
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	61bb      	str	r3, [r7, #24]
   return(result);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	d10a      	bne.n	8003374 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fd7c 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
 8003380:	e002      	b.n	8003388 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fd64 	bl	8002e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e002      	b.n	8003392 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	; 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b0c0      	sub	sp, #256	; 0x100
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	ea40 0301 	orr.w	r3, r0, r1
 80033c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033f4:	f021 010c 	bic.w	r1, r1, #12
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003402:	430b      	orrs	r3, r1
 8003404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	6999      	ldr	r1, [r3, #24]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	ea40 0301 	orr.w	r3, r0, r1
 8003422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <UART_SetConfig+0x2cc>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d005      	beq.n	800343c <UART_SetConfig+0xa0>
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <UART_SetConfig+0x2d0>)
 8003438:	429a      	cmp	r2, r3
 800343a:	d104      	bne.n	8003446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7fe fee0 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003440:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003444:	e003      	b.n	800344e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003446:	f7fe fec7 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 800344a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003458:	f040 810c 	bne.w	8003674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003466:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800346a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	1891      	adds	r1, r2, r2
 8003474:	65b9      	str	r1, [r7, #88]	; 0x58
 8003476:	415b      	adcs	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800347e:	4621      	mov	r1, r4
 8003480:	eb12 0801 	adds.w	r8, r2, r1
 8003484:	4629      	mov	r1, r5
 8003486:	eb43 0901 	adc.w	r9, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb18 0303 	adds.w	r3, r8, r3
 80034a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034ac:	462b      	mov	r3, r5
 80034ae:	eb49 0303 	adc.w	r3, r9, r3
 80034b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ca:	460b      	mov	r3, r1
 80034cc:	18db      	adds	r3, r3, r3
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
 80034d0:	4613      	mov	r3, r2
 80034d2:	eb42 0303 	adc.w	r3, r2, r3
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
 80034d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034e0:	f7fc fe78 	bl	80001d4 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2302 	umull	r2, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	011c      	lsls	r4, r3, #4
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	64b9      	str	r1, [r7, #72]	; 0x48
 800350c:	415b      	adcs	r3, r3
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003514:	4641      	mov	r1, r8
 8003516:	eb12 0a01 	adds.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb43 0b01 	adc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800352c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003534:	4692      	mov	sl, r2
 8003536:	469b      	mov	fp, r3
 8003538:	4643      	mov	r3, r8
 800353a:	eb1a 0303 	adds.w	r3, sl, r3
 800353e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003542:	464b      	mov	r3, r9
 8003544:	eb4b 0303 	adc.w	r3, fp, r3
 8003548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003558:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800355c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003560:	460b      	mov	r3, r1
 8003562:	18db      	adds	r3, r3, r3
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
 8003566:	4613      	mov	r3, r2
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	647b      	str	r3, [r7, #68]	; 0x44
 800356e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003576:	f7fc fe2d 	bl	80001d4 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4611      	mov	r1, r2
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2301 	umull	r2, r3, r3, r1
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2264      	movs	r2, #100	; 0x64
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	1acb      	subs	r3, r1, r3
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <UART_SetConfig+0x2d4>)
 8003598:	fba3 2302 	umull	r2, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a4:	441c      	add	r4, r3
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c0:	415b      	adcs	r3, r3
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c8:	4641      	mov	r1, r8
 80035ca:	1851      	adds	r1, r2, r1
 80035cc:	6339      	str	r1, [r7, #48]	; 0x30
 80035ce:	4649      	mov	r1, r9
 80035d0:	414b      	adcs	r3, r1
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035e0:	4659      	mov	r1, fp
 80035e2:	00cb      	lsls	r3, r1, #3
 80035e4:	4651      	mov	r1, sl
 80035e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ea:	4651      	mov	r1, sl
 80035ec:	00ca      	lsls	r2, r1, #3
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	4642      	mov	r2, r8
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035fc:	464b      	mov	r3, r9
 80035fe:	460a      	mov	r2, r1
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003614:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800361c:	460b      	mov	r3, r1
 800361e:	18db      	adds	r3, r3, r3
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
 8003622:	4613      	mov	r3, r2
 8003624:	eb42 0303 	adc.w	r3, r2, r3
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800362e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003632:	f7fc fdcf 	bl	80001d4 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <UART_SetConfig+0x2d4>)
 800363c:	fba3 1302 	umull	r1, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <UART_SetConfig+0x2d4>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4422      	add	r2, r4
 8003662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003664:	e106      	b.n	8003874 <UART_SetConfig+0x4d8>
 8003666:	bf00      	nop
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800367e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003686:	4642      	mov	r2, r8
 8003688:	464b      	mov	r3, r9
 800368a:	1891      	adds	r1, r2, r2
 800368c:	6239      	str	r1, [r7, #32]
 800368e:	415b      	adcs	r3, r3
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003696:	4641      	mov	r1, r8
 8003698:	1854      	adds	r4, r2, r1
 800369a:	4649      	mov	r1, r9
 800369c:	eb43 0501 	adc.w	r5, r3, r1
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	00eb      	lsls	r3, r5, #3
 80036aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ae:	00e2      	lsls	r2, r4, #3
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036bc:	464b      	mov	r3, r9
 80036be:	eb45 0303 	adc.w	r3, r5, r3
 80036c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036e2:	4629      	mov	r1, r5
 80036e4:	008b      	lsls	r3, r1, #2
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ec:	4621      	mov	r1, r4
 80036ee:	008a      	lsls	r2, r1, #2
 80036f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036f4:	f7fc fd6e 	bl	80001d4 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4b60      	ldr	r3, [pc, #384]	; (8003880 <UART_SetConfig+0x4e4>)
 80036fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	011c      	lsls	r4, r3, #4
 8003706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003710:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	61b9      	str	r1, [r7, #24]
 8003720:	415b      	adcs	r3, r3
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6139      	str	r1, [r7, #16]
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800375c:	464b      	mov	r3, r9
 800375e:	460a      	mov	r2, r1
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	67bb      	str	r3, [r7, #120]	; 0x78
 8003772:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003780:	4649      	mov	r1, r9
 8003782:	008b      	lsls	r3, r1, #2
 8003784:	4641      	mov	r1, r8
 8003786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800378a:	4641      	mov	r1, r8
 800378c:	008a      	lsls	r2, r1, #2
 800378e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003792:	f7fc fd1f 	bl	80001d4 <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4611      	mov	r1, r2
 800379c:	4b38      	ldr	r3, [pc, #224]	; (8003880 <UART_SetConfig+0x4e4>)
 800379e:	fba3 2301 	umull	r2, r3, r3, r1
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2264      	movs	r2, #100	; 0x64
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	1acb      	subs	r3, r1, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a33      	ldr	r2, [pc, #204]	; (8003880 <UART_SetConfig+0x4e4>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037bc:	441c      	add	r4, r3
 80037be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c2:	2200      	movs	r2, #0
 80037c4:	673b      	str	r3, [r7, #112]	; 0x70
 80037c6:	677a      	str	r2, [r7, #116]	; 0x74
 80037c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	415b      	adcs	r3, r3
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037dc:	4641      	mov	r1, r8
 80037de:	1851      	adds	r1, r2, r1
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	4649      	mov	r1, r9
 80037e4:	414b      	adcs	r3, r1
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037f4:	4659      	mov	r1, fp
 80037f6:	00cb      	lsls	r3, r1, #3
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fe:	4651      	mov	r1, sl
 8003800:	00ca      	lsls	r2, r1, #3
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4603      	mov	r3, r0
 8003808:	4642      	mov	r2, r8
 800380a:	189b      	adds	r3, r3, r2
 800380c:	66bb      	str	r3, [r7, #104]	; 0x68
 800380e:	464b      	mov	r3, r9
 8003810:	460a      	mov	r2, r1
 8003812:	eb42 0303 	adc.w	r3, r2, r3
 8003816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
 8003822:	667a      	str	r2, [r7, #100]	; 0x64
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003830:	4649      	mov	r1, r9
 8003832:	008b      	lsls	r3, r1, #2
 8003834:	4641      	mov	r1, r8
 8003836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383a:	4641      	mov	r1, r8
 800383c:	008a      	lsls	r2, r1, #2
 800383e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003842:	f7fc fcc7 	bl	80001d4 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <UART_SetConfig+0x4e4>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <UART_SetConfig+0x4e4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4422      	add	r2, r4
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800387a:	46bd      	mov	sp, r7
 800387c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003880:	51eb851f 	.word	0x51eb851f

08003884 <memset>:
 8003884:	4402      	add	r2, r0
 8003886:	4603      	mov	r3, r0
 8003888:	4293      	cmp	r3, r2
 800388a:	d100      	bne.n	800388e <memset+0xa>
 800388c:	4770      	bx	lr
 800388e:	f803 1b01 	strb.w	r1, [r3], #1
 8003892:	e7f9      	b.n	8003888 <memset+0x4>

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4d0d      	ldr	r5, [pc, #52]	; (80038cc <__libc_init_array+0x38>)
 8003898:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	2600      	movs	r6, #0
 80038a0:	42a6      	cmp	r6, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	4d0b      	ldr	r5, [pc, #44]	; (80038d4 <__libc_init_array+0x40>)
 80038a6:	4c0c      	ldr	r4, [pc, #48]	; (80038d8 <__libc_init_array+0x44>)
 80038a8:	f000 f818 	bl	80038dc <_init>
 80038ac:	1b64      	subs	r4, r4, r5
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	2600      	movs	r6, #0
 80038b2:	42a6      	cmp	r6, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038bc:	4798      	blx	r3
 80038be:	3601      	adds	r6, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c6:	4798      	blx	r3
 80038c8:	3601      	adds	r6, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	0800391c 	.word	0x0800391c
 80038d0:	0800391c 	.word	0x0800391c
 80038d4:	0800391c 	.word	0x0800391c
 80038d8:	08003920 	.word	0x08003920

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr
