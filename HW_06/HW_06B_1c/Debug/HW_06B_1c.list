
HW_06B_1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009d50  08009d50  00019d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a104  0800a104  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a10c  0800a10c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e0  0800a2f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800a2f4  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010362  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002184  00000000  00000000  000305b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c63  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017679  00000000  00000000  0003434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c64  00000000  00000000  0004b9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091693  00000000  00000000  0005d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b0  00000000  00000000  000eecbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d38 	.word	0x08009d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009d38 	.word	0x08009d38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d117      	bne.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		//tell to LIS2DE which register you want to read from
		//the MSB of the subaddress is set to 1 to activate the auto increment, see datasheet pag.22
		if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, &ACC_OUT_X, 1, 50) != HAL_OK)
 8000f64:	2332      	movs	r3, #50	; 0x32
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f6c:	2150      	movs	r1, #80	; 0x50
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f70:	f001 fdac 	bl	8002acc <HAL_I2C_Master_Transmit>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x2a>
			Error_Handler();
 8000f7a:	f000 fa6f 	bl	800145c <Error_Handler>

		//Read data from the register (x)
		//1 is summed to the address to tell the slave that we need to read data (see datasheet pag.22)
		if(HAL_I2C_Master_Receive_DMA(&hi2c1, LIS2DE_ADD+1, (uint8_t*)directions, 5) != HAL_OK)
 8000f7e:	2305      	movs	r3, #5
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f82:	2151      	movs	r1, #81	; 0x51
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f86:	f001 fe9f 	bl	8002cc8 <HAL_I2C_Master_Receive_DMA>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>
			Error_Handler();
 8000f90:	f000 fa64 	bl	800145c <Error_Handler>

		//Read data from the register (z)
		//if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &z, sizeof(z), 50) != HAL_OK)
			//Error_Handler();
	}
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002b0 	.word	0x200002b0
 8000fa0:	2000000a 	.word	0x2000000a
 8000fa4:	200001fc 	.word	0x200001fc
 8000fa8:	2000039c 	.word	0x2000039c

08000fac <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb0:	b0a6      	sub	sp, #152	; 0x98
 8000fb2:	af06      	add	r7, sp, #24
 8000fb4:	6078      	str	r0, [r7, #4]
	//conversion in g
	float x_g = directions[0]/64.0;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8000fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fab9 	bl	8000534 <__aeabi_i2d>
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8000fc8:	f7ff fc48 	bl	800085c <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fdf0 	bl	8000bb8 <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	67fb      	str	r3, [r7, #124]	; 0x7c
	float y_g = directions[2]/64.0;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8000fde:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff faa6 	bl	8000534 <__aeabi_i2d>
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8000fee:	f7ff fc35 	bl	800085c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fddd 	bl	8000bb8 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	67bb      	str	r3, [r7, #120]	; 0x78
	float z_g = directions[4]/64.0;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8001004:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa93 	bl	8000534 <__aeabi_i2d>
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8001014:	f7ff fc22 	bl	800085c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fdca 	bl	8000bb8 <__aeabi_d2f>
 8001024:	4603      	mov	r3, r0
 8001026:	677b      	str	r3, [r7, #116]	; 0x74
	char string[100];
	int length = snprintf(string,sizeof(string),"X: %1.2f, Y: %1.2f, Z: %1.2f\n",x_g,y_g,z_g);
 8001028:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800102a:	f7ff fa95 	bl	8000558 <__aeabi_f2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001034:	f7ff fa90 	bl	8000558 <__aeabi_f2d>
 8001038:	4680      	mov	r8, r0
 800103a:	4689      	mov	r9, r1
 800103c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800103e:	f7ff fa8b 	bl	8000558 <__aeabi_f2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	f107 000c 	add.w	r0, r7, #12
 800104a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800104e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001052:	e9cd 4500 	strd	r4, r5, [sp]
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8001058:	2164      	movs	r1, #100	; 0x64
 800105a:	f006 fcff 	bl	8007a5c <sniprintf>
 800105e:	6738      	str	r0, [r7, #112]	; 0x70
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)string, length);
 8001060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800106c:	f004 ffc4 	bl	8005ff8 <HAL_UART_Transmit_DMA>
}
 8001070:	bf00      	nop
 8001072:	3780      	adds	r7, #128	; 0x80
 8001074:	46bd      	mov	sp, r7
 8001076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800107a:	bf00      	nop
 800107c:	2000039c 	.word	0x2000039c
 8001080:	40500000 	.word	0x40500000
 8001084:	08009d50 	.word	0x08009d50
 8001088:	200002f8 	.word	0x200002f8

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f000 fc99 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f831 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f000 f971 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 800109e:	f000 f947 	bl	8001330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010a2:	f000 f91b 	bl	80012dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010a6:	f000 f895 	bl	80011d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010aa:	f000 f8c1 	bl	8001230 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <main+0x5c>)
 80010b0:	f004 fa88 	bl	80055c4 <HAL_TIM_Base_Start_IT>
  // send the configuration values to the 3 registers
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG1, 2, 100);
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2302      	movs	r3, #2
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <main+0x60>)
 80010bc:	2150      	movs	r1, #80	; 0x50
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <main+0x64>)
 80010c0:	f001 fd04 	bl	8002acc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG2, 2, 100);
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <main+0x68>)
 80010cc:	2150      	movs	r1, #80	; 0x50
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <main+0x64>)
 80010d0:	f001 fcfc 	bl	8002acc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG4, 2, 100);
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2302      	movs	r3, #2
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <main+0x6c>)
 80010dc:	2150      	movs	r1, #80	; 0x50
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <main+0x64>)
 80010e0:	f001 fcf4 	bl	8002acc <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x58>
 80010e6:	bf00      	nop
 80010e8:	200002b0 	.word	0x200002b0
 80010ec:	20000000 	.word	0x20000000
 80010f0:	200001fc 	.word	0x200001fc
 80010f4:	20000004 	.word	0x20000004
 80010f8:	20000008 	.word	0x20000008

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f006 fd1d 	bl	8007b4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <SystemClock_Config+0xd0>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <SystemClock_Config+0xd0>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemClock_Config+0xd4>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <SystemClock_Config+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001170:	2310      	movs	r3, #16
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001174:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800117a:	2304      	movs	r3, #4
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800117e:	2307      	movs	r3, #7
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fd84 	bl	8004c94 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001192:	f000 f963 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2102      	movs	r1, #2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 ffe6 	bl	8005184 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011be:	f000 f94d 	bl	800145c <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	; 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_I2C1_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_I2C1_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_I2C1_Init+0x50>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C1_Init+0x50>)
 8001212:	f001 fb17 	bl	8002844 <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f91e 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001fc 	.word	0x200001fc
 8001228:	40005400 	.word	0x40005400
 800122c:	000186a0 	.word	0x000186a0

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_TIM2_Init+0xa8>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_TIM2_Init+0xa8>)
 800125c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_TIM2_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_TIM2_Init+0xa8>)
 800126a:	f242 720f 	movw	r2, #9999	; 0x270f
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_TIM2_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_TIM2_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_TIM2_Init+0xa8>)
 800127e:	f004 fa03 	bl	8005688 <HAL_TIM_OC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001288:	f000 f8e8 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800128c:	2320      	movs	r3, #32
 800128e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4619      	mov	r1, r3
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <MX_TIM2_Init+0xa8>)
 800129c:	f004 fddc 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012a6:	f000 f8d9 	bl	800145c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_TIM2_Init+0xa8>)
 80012c2:	f004 fb39 	bl	8005938 <HAL_TIM_OC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012cc:	f000 f8c6 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002b0 	.word	0x200002b0

080012dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_USART2_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001314:	f004 fe22 	bl	8005f5c <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f000 f89d 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002f8 	.word	0x200002f8
 800132c:	40004400 	.word	0x40004400

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_DMA_Init+0x4c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_DMA_Init+0x4c>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_DMA_Init+0x4c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	200b      	movs	r0, #11
 8001358:	f000 fc83 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800135c:	200b      	movs	r0, #11
 800135e:	f000 fc9c 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2011      	movs	r0, #17
 8001368:	f000 fc7b 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800136c:	2011      	movs	r0, #17
 800136e:	f000 fc94 	bl	8001c9a <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <MX_GPIO_Init+0xd4>)
 800140c:	f001 fa00 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_GPIO_Init+0xd8>)
 8001428:	f001 f86e 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800142c:	2320      	movs	r3, #32
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_GPIO_Init+0xd4>)
 8001444:	f001 f860 	bl	8002508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_MspInit+0x4c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x4c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014a6:	2007      	movs	r0, #7
 80014a8:	f000 fbd0 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <HAL_I2C_MspInit+0xf0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d162      	bne.n	80015a0 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001508:	2304      	movs	r3, #4
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4827      	ldr	r0, [pc, #156]	; (80015b0 <HAL_I2C_MspInit+0xf8>)
 8001514:	f000 fff8 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 8001522:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_I2C_MspInit+0xf4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_I2C_MspInit+0x100>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 800153c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001540:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001576:	f000 fbab 	bl	8001cd0 <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001580:	f7ff ff6c 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_I2C_MspInit+0xfc>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	201f      	movs	r0, #31
 8001596:	f000 fb64 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800159a:	201f      	movs	r0, #31
 800159c:	f000 fb7d 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	20000250 	.word	0x20000250
 80015b8:	40026010 	.word	0x40026010

080015bc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d115      	bne.n	80015fa <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_TIM_OC_MspInit+0x48>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_TIM_OC_MspInit+0x48>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_TIM_OC_MspInit+0x48>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201c      	movs	r0, #28
 80015f0:	f000 fb37 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f4:	201c      	movs	r0, #28
 80015f6:	f000 fb50 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <HAL_UART_MspInit+0xf0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d161      	bne.n	80016ee <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_UART_MspInit+0xf4>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a32      	ldr	r2, [pc, #200]	; (80016fc <HAL_UART_MspInit+0xf4>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_UART_MspInit+0xf4>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HAL_UART_MspInit+0xf4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <HAL_UART_MspInit+0xf4>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_UART_MspInit+0xf4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001662:	230c      	movs	r3, #12
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001672:	2307      	movs	r3, #7
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <HAL_UART_MspInit+0xf8>)
 800167e:	f000 ff43 	bl	8002508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_UART_MspInit+0xfc>)
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_UART_MspInit+0x100>)
 8001686:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_UART_MspInit+0xfc>)
 800168a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_UART_MspInit+0xfc>)
 8001692:	2240      	movs	r2, #64	; 0x40
 8001694:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_MspInit+0xfc>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_UART_MspInit+0xfc>)
 800169e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016c2:	4810      	ldr	r0, [pc, #64]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016c4:	f000 fb04 	bl	8001cd0 <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80016ce:	f7ff fec5 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_UART_MspInit+0xfc>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2026      	movs	r0, #38	; 0x26
 80016e4:	f000 fabd 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016e8:	2026      	movs	r0, #38	; 0x26
 80016ea:	f000 fad6 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000
 8001704:	2000033c 	.word	0x2000033c
 8001708:	400260a0 	.word	0x400260a0

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f988 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Stream0_IRQHandler+0x10>)
 8001766:	f000 fc4b 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000250 	.word	0x20000250

08001774 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Stream6_IRQHandler+0x10>)
 800177a:	f000 fc41 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000033c 	.word	0x2000033c

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f003 ffca 	bl	8005726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002b0 	.word	0x200002b0

0800179c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C1_EV_IRQHandler+0x10>)
 80017a2:	f001 fbc1 	bl	8002f28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001fc 	.word	0x200001fc

080017b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <USART2_IRQHandler+0x10>)
 80017b6:	f004 fc9d 	bl	80060f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002f8 	.word	0x200002f8

080017c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_kill>:

int _kill(int pid, int sig)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017de:	f006 fa07 	bl	8007bf0 <__errno>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2216      	movs	r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
  return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_exit>:

void _exit (int status)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffe7 	bl	80017d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001806:	e7fe      	b.n	8001806 <_exit+0x12>

08001808 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e00a      	b.n	8001830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181a:	f3af 8000 	nop.w
 800181e:	4601      	mov	r1, r0
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf0      	blt.n	800181a <_read+0x12>
  }

  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e009      	b.n	8001868 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf1      	blt.n	8001854 <_write+0x12>
  }
  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_close>:

int _close(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	605a      	str	r2, [r3, #4]
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_isatty>:

int _isatty(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f006 f96c 	bl	8007bf0 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20018000 	.word	0x20018000
 8001944:	00000400 	.word	0x00000400
 8001948:	200003a4 	.word	0x200003a4
 800194c:	200004f8 	.word	0x200004f8

08001950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197a:	490e      	ldr	r1, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001990:	4c0b      	ldr	r4, [pc, #44]	; (80019c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199e:	f7ff ffd7 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f006 f92b 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7ff fb71 	bl	800108c <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019b8:	0800a114 	.word	0x0800a114
  ldr r2, =_sbss
 80019bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c0:	200004f8 	.word	0x200004f8

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f92b 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fd34 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f943 	bl	8001cb6 <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f000 f90b 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	20000014 	.word	0x20000014
 8001a68:	20000010 	.word	0x20000010

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	200003a8 	.word	0x200003a8

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200003a8 	.word	0x200003a8

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff feda 	bl	8001a94 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e099      	b.n	8001e20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0c:	e00f      	b.n	8001d2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0e:	f7ff fec1 	bl	8001a94 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d908      	bls.n	8001d2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e078      	b.n	8001e20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e8      	bne.n	8001d0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_DMA_Init+0x158>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d107      	bne.n	8001d98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4313      	orrs	r3, r2
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0307 	bic.w	r3, r3, #7
 8001dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d117      	bne.n	8001df2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb1b 	bl	8002410 <DMA_CheckFifoParam>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dee:	2301      	movs	r3, #1
 8001df0:	e016      	b.n	8001e20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fad2 	bl	80023a4 <DMA_CalcBaseAndBitshift>
 8001e00:	4603      	mov	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	223f      	movs	r2, #63	; 0x3f
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	f010803f 	.word	0xf010803f

08001e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Start_IT+0x26>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e040      	b.n	8001ed4 <HAL_DMA_Start_IT+0xa8>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d12f      	bne.n	8001ec6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fa64 	bl	8002348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	223f      	movs	r2, #63	; 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0216 	orr.w	r2, r2, #22
 8001e9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e005      	b.n	8001ed2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff fdd3 	bl	8001a94 <HAL_GetTick>
 8001eee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e052      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_Abort+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5e:	e013      	b.n	8001f88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f60:	f7ff fd98 	bl	8001a94 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d90c      	bls.n	8001f88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e015      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e4      	bne.n	8001f60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	223f      	movs	r2, #63	; 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d004      	beq.n	8001fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00c      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800200c:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_DMA_IRQHandler+0x248>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a8e      	ldr	r2, [pc, #568]	; (800224c <HAL_DMA_IRQHandler+0x24c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01a      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2208      	movs	r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2204      	movs	r2, #4
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2204      	movs	r2, #4
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2210      	movs	r2, #16
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2210      	movs	r2, #16
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e01f      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e016      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2220      	movs	r2, #32
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808f 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8087 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2220      	movs	r2, #32
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d136      	bne.n	8002218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_IRQHandler+0x1da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	223f      	movs	r2, #63	; 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07e      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
        }
        return;
 8002216:	e079      	b.n	800230c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d031      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e02c      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e01e      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10f      	bne.n	8002290 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0210 	bic.w	r2, r2, #16
 800227e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d307      	bcc.n	80022e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f2      	bne.n	80022cc <HAL_DMA_IRQHandler+0x2cc>
 80022e6:	e000      	b.n	80022ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e000      	b.n	800230e <HAL_DMA_IRQHandler+0x30e>
        return;
 800230c:	bf00      	nop
    }
  }
}
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002322:	b2db      	uxtb	r3, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3b10      	subs	r3, #16
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <DMA_CalcBaseAndBitshift+0x64>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <DMA_CalcBaseAndBitshift+0x68>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d909      	bls.n	80023e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	; 0x58
 80023e4:	e007      	b.n	80023f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	aaaaaaab 	.word	0xaaaaaaab
 800240c:	08009d88 	.word	0x08009d88

08002410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d856      	bhi.n	80024de <DMA_CheckFifoParam+0xce>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <DMA_CheckFifoParam+0x28>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002449 	.word	0x08002449
 8002444:	080024df 	.word	0x080024df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d046      	beq.n	80024e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e043      	b.n	80024e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002462:	d140      	bne.n	80024e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e03d      	b.n	80024e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	d121      	bne.n	80024b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d837      	bhi.n	80024ea <DMA_CheckFifoParam+0xda>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <DMA_CheckFifoParam+0x70>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002491 	.word	0x08002491
 8002484:	08002497 	.word	0x08002497
 8002488:	08002491 	.word	0x08002491
 800248c:	080024a9 	.word	0x080024a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e030      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a6:	e022      	b.n	80024ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b0:	d11f      	bne.n	80024f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b6:	e01c      	b.n	80024f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <DMA_CheckFifoParam+0xb6>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024c4:	e018      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ca:	e015      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e00b      	b.n	80024f6 <DMA_CheckFifoParam+0xe6>
      break;
 80024de:	bf00      	nop
 80024e0:	e00a      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e008      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e006      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e004      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e002      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
    }
  } 
  
  return status; 
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e159      	b.n	80027d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8148 	bne.w	80027d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a2 	beq.w	80027d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x2ec>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x2f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x202>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1fe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <HAL_GPIO_Init+0x2f8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2fc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1f6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_GPIO_Init+0x300>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1f2>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fa:	2307      	movs	r3, #7
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x204>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_GPIO_Init+0x2ec>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_GPIO_Init+0x304>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_GPIO_Init+0x304>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_GPIO_Init+0x304>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_GPIO_Init+0x304>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_GPIO_Init+0x304>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_GPIO_Init+0x304>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f aea2 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800282c:	e003      	b.n	8002836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12b      	b.n	8002aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fe24 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a8:	f002 fe64 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a81      	ldr	r2, [pc, #516]	; (8002ab8 <HAL_I2C_Init+0x274>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d807      	bhi.n	80028c8 <HAL_I2C_Init+0x84>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a80      	ldr	r2, [pc, #512]	; (8002abc <HAL_I2C_Init+0x278>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e006      	b.n	80028d6 <HAL_I2C_Init+0x92>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7d      	ldr	r2, [pc, #500]	; (8002ac0 <HAL_I2C_Init+0x27c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e7      	b.n	8002aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <HAL_I2C_Init+0x280>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_I2C_Init+0x274>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d802      	bhi.n	8002918 <HAL_I2C_Init+0xd4>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	e009      	b.n	800292c <HAL_I2C_Init+0xe8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_I2C_Init+0x284>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	495c      	ldr	r1, [pc, #368]	; (8002ab8 <HAL_I2C_Init+0x274>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d819      	bhi.n	8002980 <HAL_I2C_Init+0x13c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb1 f3f3 	udiv	r3, r1, r3
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002960:	400b      	ands	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_I2C_Init+0x138>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb1 f3f3 	udiv	r3, r1, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	e051      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 800297c:	2304      	movs	r3, #4
 800297e:	e04f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_I2C_Init+0x168>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_I2C_Init+0x18e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x196>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e022      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10e      	bne.n	8002a00 <HAL_I2C_Init+0x1bc>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e58      	subs	r0, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6809      	ldr	r1, [r1, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6911      	ldr	r1, [r2, #16]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	000186a0 	.word	0x000186a0
 8002abc:	001e847f 	.word	0x001e847f
 8002ac0:	003d08ff 	.word	0x003d08ff
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7fe ffd8 	bl	8001a94 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80e0 	bne.w	8002cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4970      	ldr	r1, [pc, #448]	; (8002cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f001 fef4 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0d3      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x50>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f001 fc72 	bl	8004474 <I2C_MasterRequestWrite>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e08d      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb0:	e066      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 ff6e 	bl	8004a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06b      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11b      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6a39      	ldr	r1, [r7, #32]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 ff5e 	bl	8004b1a <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d107      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01a      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d194      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	f040 810d 	bne.w	8002f08 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	08db      	lsrs	r3, r3, #3
 8002cf4:	4a88      	ldr	r2, [pc, #544]	; (8002f18 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0a1a      	lsrs	r2, r3, #8
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0e3      	b.n	8002f0a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d0db      	beq.n	8002d08 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Master_Receive_DMA+0x96>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0d5      	b.n	8002f0a <HAL_I2C_Master_Receive_DMA+0x242>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d007      	beq.n	8002d84 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2222      	movs	r2, #34	; 0x22
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2210      	movs	r2, #16
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	893a      	ldrh	r2, [r7, #8]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a56      	ldr	r2, [pc, #344]	; (8002f1c <HAL_I2C_Master_Receive_DMA+0x254>)
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002dc6:	897a      	ldrh	r2, [r7, #10]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07b      	beq.n	8002ecc <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02a      	beq.n	8002e32 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <HAL_I2C_Master_Receive_DMA+0x258>)
 8002de2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	4a4e      	ldr	r2, [pc, #312]	; (8002f24 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	2200      	movs	r2, #0
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3310      	adds	r3, #16
 8002e16:	4619      	mov	r1, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	f7ff f803 	bl	8001e2c <HAL_DMA_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d139      	bne.n	8002ea4 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002e30:	e013      	b.n	8002e5a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e057      	b.n	8002f0a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e90:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	e02f      	b.n	8002f04 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01e      	b.n	8002f0a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002ee2:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f02:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	14f8b589 	.word	0x14f8b589
 8002f1c:	ffff0000 	.word	0xffff0000
 8002f20:	08004579 	.word	0x08004579
 8002f24:	08004723 	.word	0x08004723

08002f28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d003      	beq.n	8002f60 <HAL_I2C_EV_IRQHandler+0x38>
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	f040 80b1 	bne.w	80030c2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f80:	d003      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x62>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_EV_IRQHandler+0x66>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x68>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f000 8114 	beq.w	80031be <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x90>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d006      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 fe57 	bl	8004c5e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fcb5 	bl	8003920 <I2C_Master_SB>
 8002fb6:	e083      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0xac>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fd2d 	bl	8003a2c <I2C_Master_ADD10>
 8002fd2:	e075      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0xc8>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fd49 	bl	8003a80 <I2C_Master_ADDR>
 8002fee:	e067      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d036      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003008:	f000 80db 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x10a>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x10a>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f92d 	bl	800328a <I2C_MasterTransmit_TXE>
 8003030:	e046      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80c2 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80bc 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2b21      	cmp	r3, #33	; 0x21
 800304e:	d103      	bne.n	8003058 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9b6 	bl	80033c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003056:	e0b4      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	f040 80b1 	bne.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa24 	bl	80034ae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003066:	e0ac      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	f000 80a4 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_I2C_EV_IRQHandler+0x178>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_I2C_EV_IRQHandler+0x178>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa9c 	bl	80035d6 <I2C_MasterReceive_RXNE>
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 808b 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8085 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb47 	bl	800374c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030be:	e080      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
 80030c0:	e07f      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e007      	b.n	80030e4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d011      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x1ea>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 ff07 	bl	8003f1e <I2C_Slave_ADDR>
 8003110:	e05a      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0x206>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 ff42 	bl	8003fb0 <I2C_Slave_STOPF>
 800312c:	e04c      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800312e:	7bbb      	ldrb	r3, [r7, #14]
 8003130:	2b21      	cmp	r3, #33	; 0x21
 8003132:	d002      	beq.n	800313a <HAL_I2C_EV_IRQHandler+0x212>
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	2b29      	cmp	r3, #41	; 0x29
 8003138:	d120      	bne.n	800317c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x238>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x238>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fe22 	bl	8003da2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315e:	e032      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02d      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x29e>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003170:	2b00      	cmp	r3, #0
 8003172:	d028      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fe51 	bl	8003e1c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800317a:	e024      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fe5f 	bl	8003e5e <I2C_SlaveReceive_RXNE>
 80031a0:	e012      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fe8f 	bl	8003eda <I2C_SlaveReceive_BTF>
 80031bc:	e004      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
 8003216:	4613      	mov	r3, r2
 8003218:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d150      	bne.n	8003352 <I2C_MasterTransmit_TXE+0xc8>
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b21      	cmp	r3, #33	; 0x21
 80032b4:	d14d      	bne.n	8003352 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d01d      	beq.n	80032f8 <I2C_MasterTransmit_TXE+0x6e>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d01a      	beq.n	80032f8 <I2C_MasterTransmit_TXE+0x6e>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032c8:	d016      	beq.n	80032f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2211      	movs	r2, #17
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff6c 	bl	80031ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f6:	e060      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003306:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d107      	bne.n	8003342 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff7d 	bl	800323a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003340:	e03b      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ff3f 	bl	80031ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003350:	e033      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b21      	cmp	r3, #33	; 0x21
 8003356:	d005      	beq.n	8003364 <I2C_MasterTransmit_TXE+0xda>
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d12d      	bne.n	80033ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b22      	cmp	r3, #34	; 0x22
 8003362:	d12a      	bne.n	80033ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800337e:	e01c      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d103      	bne.n	8003394 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f88e 	bl	80034ae <I2C_MemoryTransmit_TXE_BTF>
}
 8003392:	e012      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033b8:	e7ff      	b.n	80033ba <I2C_MasterTransmit_TXE+0x130>
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b21      	cmp	r3, #33	; 0x21
 80033da:	d164      	bne.n	80034a6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800340a:	e04c      	b.n	80034a6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d01d      	beq.n	800344e <I2C_MasterTransmit_BTF+0x8c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b20      	cmp	r3, #32
 8003416:	d01a      	beq.n	800344e <I2C_MasterTransmit_BTF+0x8c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800341e:	d016      	beq.n	800344e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800342e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2211      	movs	r2, #17
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fec1 	bl	80031ce <HAL_I2C_MasterTxCpltCallback>
}
 800344c:	e02b      	b.n	80034a6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d107      	bne.n	8003498 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fed2 	bl	800323a <HAL_I2C_MemTxCpltCallback>
}
 8003496:	e006      	b.n	80034a6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fe94 	bl	80031ce <HAL_I2C_MasterTxCpltCallback>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11d      	bne.n	8003502 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10b      	bne.n	80034e6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	1c9a      	adds	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80034e4:	e073      	b.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	121b      	asrs	r3, r3, #8
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003500:	e065      	b.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10b      	bne.n	8003522 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	b2da      	uxtb	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003520:	e055      	b.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b02      	cmp	r3, #2
 8003528:	d151      	bne.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b22      	cmp	r3, #34	; 0x22
 800352e:	d10d      	bne.n	800354c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	651a      	str	r2, [r3, #80]	; 0x50
}
 800354a:	e040      	b.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b21      	cmp	r3, #33	; 0x21
 800355a:	d112      	bne.n	8003582 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003580:	e025      	b.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d120      	bne.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d11d      	bne.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fe36 	bl	800323a <HAL_I2C_MemTxCpltCallback>
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b22      	cmp	r3, #34	; 0x22
 80035e8:	f040 80ac 	bne.w	8003744 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d921      	bls.n	800363e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b03      	cmp	r3, #3
 8003628:	f040 808c 	bne.w	8003744 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800363c:	e082      	b.n	8003744 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	2b02      	cmp	r3, #2
 8003644:	d075      	beq.n	8003732 <I2C_MasterReceive_RXNE+0x15c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <I2C_MasterReceive_RXNE+0x7c>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d16f      	bne.n	8003732 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 faa2 	bl	8004b9c <I2C_WaitOnSTOPRequestThroughIT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d142      	bne.n	80036e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800367c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d10a      	bne.n	80036ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fdc1 	bl	800324e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036cc:	e03a      	b.n	8003744 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2212      	movs	r2, #18
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fc65 	bl	8000fac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036e2:	e02f      	b.n	8003744 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fd99 	bl	8003262 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003730:	e008      	b.n	8003744 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	605a      	str	r2, [r3, #4]
}
 8003742:	e7ff      	b.n	8003744 <I2C_MasterReceive_RXNE+0x16e>
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b04      	cmp	r3, #4
 8003762:	d11b      	bne.n	800379c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003772:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800379a:	e0bd      	b.n	8003918 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d129      	bne.n	80037fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d00a      	beq.n	80037d2 <I2C_MasterReceive_BTF+0x86>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d007      	beq.n	80037d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037f8:	e08e      	b.n	8003918 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d176      	bne.n	80038f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d002      	beq.n	8003810 <I2C_MasterReceive_BTF+0xc4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d108      	bne.n	8003822 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e019      	b.n	8003856 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d002      	beq.n	800382e <I2C_MasterReceive_BTF+0xe2>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d108      	bne.n	8003840 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e00a      	b.n	8003856 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b10      	cmp	r3, #16
 8003844:	d007      	beq.n	8003856 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d10a      	bne.n	80038dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff fcba 	bl	800324e <HAL_I2C_MemRxCpltCallback>
}
 80038da:	e01d      	b.n	8003918 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2212      	movs	r2, #18
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fb5e 	bl	8000fac <HAL_I2C_MasterRxCpltCallback>
}
 80038f0:	e012      	b.n	8003918 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d117      	bne.n	8003964 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800394c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800394e:	e067      	b.n	8003a20 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]
}
 8003962:	e05d      	b.n	8003a20 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396c:	d133      	bne.n	80039d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b21      	cmp	r3, #33	; 0x21
 8003978:	d109      	bne.n	800398e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800398a:	611a      	str	r2, [r3, #16]
 800398c:	e008      	b.n	80039a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	b2da      	uxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <I2C_Master_SB+0x92>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d032      	beq.n	8003a20 <I2C_Master_SB+0x100>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02d      	beq.n	8003a20 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d2:	605a      	str	r2, [r3, #4]
}
 80039d4:	e024      	b.n	8003a20 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	11db      	asrs	r3, r3, #7
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0306 	and.w	r3, r3, #6
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f063 030f 	orn	r3, r3, #15
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
}
 80039fa:	e011      	b.n	8003a20 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	11db      	asrs	r3, r3, #7
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f063 030e 	orn	r3, r3, #14
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <I2C_Master_ADD10+0x26>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d108      	bne.n	8003a64 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <I2C_Master_ADD10+0x48>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a72:	605a      	str	r2, [r3, #4]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b091      	sub	sp, #68	; 0x44
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b22      	cmp	r3, #34	; 0x22
 8003aa8:	f040 8169 	bne.w	8003d7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <I2C_Master_ADDR+0x54>
 8003ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d10b      	bne.n	8003ad4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	e160      	b.n	8003d96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11d      	bne.n	8003b18 <I2C_Master_ADDR+0x98>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ae4:	d118      	bne.n	8003b18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50
 8003b16:	e13e      	b.n	8003d96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d113      	bne.n	8003b4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e115      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 808a 	bne.w	8003c6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b5c:	d137      	bne.n	8003bce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7c:	d113      	bne.n	8003ba6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	e0e7      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e0d3      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d02e      	beq.n	8003c32 <I2C_Master_ADDR+0x1b2>
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d02b      	beq.n	8003c32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	2b12      	cmp	r3, #18
 8003bde:	d102      	bne.n	8003be6 <I2C_Master_ADDR+0x166>
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d125      	bne.n	8003c32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d00e      	beq.n	8003c0a <I2C_Master_ADDR+0x18a>
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d00b      	beq.n	8003c0a <I2C_Master_ADDR+0x18a>
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d008      	beq.n	8003c0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e007      	b.n	8003c1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	e0a1      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e085      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d14d      	bne.n	8003d10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d016      	beq.n	8003ca8 <I2C_Master_ADDR+0x228>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d013      	beq.n	8003ca8 <I2C_Master_ADDR+0x228>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d010      	beq.n	8003ca8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e007      	b.n	8003cb8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc6:	d117      	bne.n	8003cf8 <I2C_Master_ADDR+0x278>
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cce:	d00b      	beq.n	8003ce8 <I2C_Master_ADDR+0x268>
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d008      	beq.n	8003ce8 <I2C_Master_ADDR+0x268>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d005      	beq.n	8003ce8 <I2C_Master_ADDR+0x268>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d002      	beq.n	8003ce8 <I2C_Master_ADDR+0x268>
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d107      	bne.n	8003cf8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cf6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e032      	b.n	8003d76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2e:	d117      	bne.n	8003d60 <I2C_Master_ADDR+0x2e0>
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d36:	d00b      	beq.n	8003d50 <I2C_Master_ADDR+0x2d0>
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d008      	beq.n	8003d50 <I2C_Master_ADDR+0x2d0>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d005      	beq.n	8003d50 <I2C_Master_ADDR+0x2d0>
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d002      	beq.n	8003d50 <I2C_Master_ADDR+0x2d0>
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d107      	bne.n	8003d60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d7c:	e00b      	b.n	8003d96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	e7ff      	b.n	8003d96 <I2C_Master_ADDR+0x316>
 8003d96:	bf00      	nop
 8003d98:	3744      	adds	r7, #68	; 0x44
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02b      	beq.n	8003e14 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d114      	bne.n	8003e14 <I2C_SlaveTransmit_TXE+0x72>
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b29      	cmp	r3, #41	; 0x29
 8003dee:	d111      	bne.n	8003e14 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2221      	movs	r2, #33	; 0x21
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2228      	movs	r2, #40	; 0x28
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff f9e7 	bl	80031e2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d011      	beq.n	8003e52 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02c      	beq.n	8003ed2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d114      	bne.n	8003ed2 <I2C_SlaveReceive_RXNE+0x74>
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003eac:	d111      	bne.n	8003ed2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2228      	movs	r2, #40	; 0x28
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff f992 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f38:	2b28      	cmp	r3, #40	; 0x28
 8003f3a:	d125      	bne.n	8003f88 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	81bb      	strh	r3, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f7a:	89ba      	ldrh	r2, [r7, #12]
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff f942 	bl	800320a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f86:	e00e      	b.n	8003fa6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d172      	bne.n	80040f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b22      	cmp	r3, #34	; 0x22
 8004012:	d002      	beq.n	800401a <I2C_Slave_STOPF+0x6a>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b2a      	cmp	r3, #42	; 0x2a
 8004018:	d135      	bne.n	8004086 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe f95e 	bl	8002314 <HAL_DMA_GetState>
 8004058:	4603      	mov	r3, r0
 800405a:	2b01      	cmp	r3, #1
 800405c:	d049      	beq.n	80040f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	4a69      	ldr	r2, [pc, #420]	; (8004208 <I2C_Slave_STOPF+0x258>)
 8004064:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd ffa6 	bl	8001fbc <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03d      	beq.n	80040f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004080:	4610      	mov	r0, r2
 8004082:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004084:	e035      	b.n	80040f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe f928 	bl	8002314 <HAL_DMA_GetState>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d014      	beq.n	80040f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	4a4e      	ldr	r2, [pc, #312]	; (8004208 <I2C_Slave_STOPF+0x258>)
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd ff70 	bl	8001fbc <HAL_DMA_Abort_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ec:	4610      	mov	r0, r2
 80040ee:	4798      	blx	r3
 80040f0:	e000      	b.n	80040f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d03e      	beq.n	800417c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d112      	bne.n	8004132 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d112      	bne.n	8004166 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f043 0204 	orr.w	r2, r3, #4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f843 	bl	8004210 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800418a:	e039      	b.n	8004200 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b2a      	cmp	r3, #42	; 0x2a
 8004190:	d109      	bne.n	80041a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2228      	movs	r2, #40	; 0x28
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff f828 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b28      	cmp	r3, #40	; 0x28
 80041b0:	d111      	bne.n	80041d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <I2C_Slave_STOPF+0x25c>)
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff f829 	bl	8003226 <HAL_I2C_ListenCpltCallback>
}
 80041d4:	e014      	b.n	8004200 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	2b22      	cmp	r3, #34	; 0x22
 80041dc:	d002      	beq.n	80041e4 <I2C_Slave_STOPF+0x234>
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b22      	cmp	r3, #34	; 0x22
 80041e2:	d10d      	bne.n	8004200 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fffb 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	0800479d 	.word	0x0800479d
 800420c:	ffff0000 	.word	0xffff0000

08004210 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004226:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004228:	7bbb      	ldrb	r3, [r7, #14]
 800422a:	2b10      	cmp	r3, #16
 800422c:	d002      	beq.n	8004234 <I2C_ITError+0x24>
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d10a      	bne.n	800424a <I2C_ITError+0x3a>
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b22      	cmp	r3, #34	; 0x22
 8004238:	d107      	bne.n	800424a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004248:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004250:	2b28      	cmp	r3, #40	; 0x28
 8004252:	d107      	bne.n	8004264 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2228      	movs	r2, #40	; 0x28
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004262:	e015      	b.n	8004290 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004272:	d00a      	beq.n	800428a <I2C_ITError+0x7a>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b60      	cmp	r3, #96	; 0x60
 8004278:	d007      	beq.n	800428a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429e:	d162      	bne.n	8004366 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d020      	beq.n	8004300 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	4a6a      	ldr	r2, [pc, #424]	; (800446c <I2C_ITError+0x25c>)
 80042c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fe76 	bl	8001fbc <HAL_DMA_Abort_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8089 	beq.w	80043ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fa:	4610      	mov	r0, r2
 80042fc:	4798      	blx	r3
 80042fe:	e074      	b.n	80043ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	4a59      	ldr	r2, [pc, #356]	; (800446c <I2C_ITError+0x25c>)
 8004306:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fe55 	bl	8001fbc <HAL_DMA_Abort_IT>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d068      	beq.n	80043ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d10b      	bne.n	800433e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004360:	4610      	mov	r0, r2
 8004362:	4798      	blx	r3
 8004364:	e041      	b.n	80043ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b60      	cmp	r3, #96	; 0x60
 8004370:	d125      	bne.n	80043be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d10b      	bne.n	80043a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe ff5d 	bl	8003276 <HAL_I2C_AbortCpltCallback>
 80043bc:	e015      	b.n	80043ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d10b      	bne.n	80043e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fe ff3c 	bl	8003262 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10e      	bne.n	8004418 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d113      	bne.n	8004464 <I2C_ITError+0x254>
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b28      	cmp	r3, #40	; 0x28
 8004440:	d110      	bne.n	8004464 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <I2C_ITError+0x260>)
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe fee1 	bl	8003226 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	0800479d 	.word	0x0800479d
 8004470:	ffff0000 	.word	0xffff0000

08004474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	460b      	mov	r3, r1
 8004482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d006      	beq.n	800449e <I2C_MasterRequestWrite+0x2a>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d003      	beq.n	800449e <I2C_MasterRequestWrite+0x2a>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800449c:	d108      	bne.n	80044b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e00b      	b.n	80044c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	2b12      	cmp	r3, #18
 80044b6:	d107      	bne.n	80044c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fa09 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	d103      	bne.n	80044f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e035      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004504:	d108      	bne.n	8004518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004514:	611a      	str	r2, [r3, #16]
 8004516:	e01b      	b.n	8004550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	11db      	asrs	r3, r3, #7
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f063 030f 	orn	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <I2C_MasterRequestWrite+0xfc>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa2f 	bl	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e010      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <I2C_MasterRequestWrite+0x100>)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa1f 	bl	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	00010008 	.word	0x00010008
 8004574:	00010002 	.word	0x00010002

08004578 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004594:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045aa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	2200      	movs	r2, #0
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	2200      	movs	r2, #0
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80045d2:	2b21      	cmp	r3, #33	; 0x21
 80045d4:	d007      	beq.n	80045e6 <I2C_DMAXferCplt+0x6e>
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80045dc:	2b22      	cmp	r3, #34	; 0x22
 80045de:	d131      	bne.n	8004644 <I2C_DMAXferCplt+0xcc>
 80045e0:	7cbb      	ldrb	r3, [r7, #18]
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d12e      	bne.n	8004644 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b29      	cmp	r3, #41	; 0x29
 8004600:	d10a      	bne.n	8004618 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2228      	movs	r2, #40	; 0x28
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7fe fde6 	bl	80031e2 <HAL_I2C_SlaveTxCpltCallback>
 8004616:	e00c      	b.n	8004632 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d109      	bne.n	8004632 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2222      	movs	r2, #34	; 0x22
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2228      	movs	r2, #40	; 0x28
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f7fe fde2 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004640:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004642:	e06a      	b.n	800471a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d064      	beq.n	800471a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004668:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004678:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004680:	d009      	beq.n	8004696 <I2C_DMAXferCplt+0x11e>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d006      	beq.n	8004696 <I2C_DMAXferCplt+0x11e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800468e:	d002      	beq.n	8004696 <I2C_DMAXferCplt+0x11e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b20      	cmp	r3, #32
 8004694:	d107      	bne.n	80046a6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2200      	movs	r2, #0
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f7fe fdc4 	bl	8003262 <HAL_I2C_ErrorCallback>
}
 80046da:	e01e      	b.n	800471a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d10a      	bne.n	8004706 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7fe fda5 	bl	800324e <HAL_I2C_MemRxCpltCallback>
}
 8004704:	e009      	b.n	800471a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2212      	movs	r2, #18
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f7fc fc49 	bl	8000fac <HAL_I2C_MasterRxCpltCallback>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	2200      	movs	r2, #0
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fd fded 	bl	8002330 <HAL_DMA_GetError>
 8004756:	4603      	mov	r3, r0
 8004758:	2b02      	cmp	r3, #2
 800475a:	d01b      	beq.n	8004794 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7fe fd67 	bl	8003262 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b6:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <I2C_DMAAbort+0x148>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	4a4a      	ldr	r2, [pc, #296]	; (80048e8 <I2C_DMAAbort+0x14c>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0a1a      	lsrs	r2, r3, #8
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00da      	lsls	r2, r3, #3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047e2:	e00a      	b.n	80047fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d0ea      	beq.n	80047d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	2200      	movs	r2, #0
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	2200      	movs	r2, #0
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	2200      	movs	r2, #0
 800483e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b60      	cmp	r3, #96	; 0x60
 800486a:	d10e      	bne.n	800488a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004882:	6978      	ldr	r0, [r7, #20]
 8004884:	f7fe fcf7 	bl	8003276 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004888:	e027      	b.n	80048da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004890:	2b28      	cmp	r3, #40	; 0x28
 8004892:	d117      	bne.n	80048c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2228      	movs	r2, #40	; 0x28
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048c2:	e007      	b.n	80048d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048d4:	6978      	ldr	r0, [r7, #20]
 80048d6:	f7fe fcc4 	bl	8003262 <HAL_I2C_ErrorCallback>
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c
 80048e8:	14f8b589 	.word	0x14f8b589

080048ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fc:	e025      	b.n	800494a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004904:	d021      	beq.n	800494a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fd f8c5 	bl	8001a94 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e023      	b.n	8004992 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10d      	bne.n	8004970 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	e00c      	b.n	800498a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0b6      	beq.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a8:	e051      	b.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d123      	bne.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e046      	b.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a08:	d021      	beq.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fd f843 	bl	8001a94 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e020      	b.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10c      	bne.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e00b      	b.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d18d      	bne.n	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa4:	e02d      	b.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8aa 	bl	8004c00 <I2C_IsAcknowledgeFailed>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e02d      	b.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abc:	d021      	beq.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fc ffe9 	bl	8001a94 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e007      	b.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d1ca      	bne.n	8004aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b26:	e02d      	b.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f869 	bl	8004c00 <I2C_IsAcknowledgeFailed>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e02d      	b.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d021      	beq.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b40:	f7fc ffa8 	bl	8001a94 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d1ca      	bne.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	0a1a      	lsrs	r2, r3, #8
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e008      	b.n	8004bec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be8:	d0e9      	beq.n	8004bbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	14f8b589 	.word	0x14f8b589

08004c00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d11b      	bne.n	8004c50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f043 0204 	orr.w	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c6e:	d103      	bne.n	8004c78 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c76:	e007      	b.n	8004c88 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c80:	d102      	bne.n	8004c88 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e267      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d075      	beq.n	8004d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cb2:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d112      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cca:	4b82      	ldr	r3, [pc, #520]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05b      	beq.n	8004d9c <HAL_RCC_OscConfig+0x108>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d157      	bne.n	8004d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e242      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCC_OscConfig+0x74>
 8004cfa:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a75      	ldr	r2, [pc, #468]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e01d      	b.n	8004d44 <HAL_RCC_OscConfig+0xb0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x98>
 8004d12:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6f      	ldr	r2, [pc, #444]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6c      	ldr	r2, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0xb0>
 8004d2c:	4b69      	ldr	r3, [pc, #420]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a68      	ldr	r2, [pc, #416]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a65      	ldr	r2, [pc, #404]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fc fea2 	bl	8001a94 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fc fe9e 	bl	8001a94 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e207      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b5b      	ldr	r3, [pc, #364]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0xc0>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fc fe8e 	bl	8001a94 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc fe8a 	bl	8001a94 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e1f3      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	4b51      	ldr	r3, [pc, #324]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0xe8>
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d063      	beq.n	8004e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004daa:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b47      	ldr	r3, [pc, #284]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d11c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc2:	4b44      	ldr	r3, [pc, #272]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d116      	bne.n	8004dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_RCC_OscConfig+0x152>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e1c7      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de6:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4937      	ldr	r1, [pc, #220]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	e03a      	b.n	8004e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e04:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fc fe43 	bl	8001a94 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e12:	f7fc fe3f 	bl	8001a94 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e1a8      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4925      	ldr	r1, [pc, #148]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]
 8004e44:	e015      	b.n	8004e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fc fe22 	bl	8001a94 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e54:	f7fc fe1e 	bl	8001a94 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e187      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d036      	beq.n	8004eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_RCC_OscConfig+0x248>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fc fe02 	bl	8001a94 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e94:	f7fc fdfe 	bl	8001a94 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e167      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x200>
 8004eb2:	e01b      	b.n	8004eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_OscConfig+0x248>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eba:	f7fc fdeb 	bl	8001a94 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec0:	e00e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fc fde7 	bl	8001a94 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d907      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e150      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470000 	.word	0x42470000
 8004edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee0:	4b88      	ldr	r3, [pc, #544]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ea      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8097 	beq.w	8005028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b81      	ldr	r3, [pc, #516]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	4a7c      	ldr	r2, [pc, #496]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1a:	4b7a      	ldr	r3, [pc, #488]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	4b77      	ldr	r3, [pc, #476]	; (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d118      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f36:	4b74      	ldr	r3, [pc, #464]	; (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a73      	ldr	r2, [pc, #460]	; (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f42:	f7fc fda7 	bl	8001a94 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fc fda3 	bl	8001a94 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e10c      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x2ea>
 8004f70:	4b64      	ldr	r3, [pc, #400]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a63      	ldr	r2, [pc, #396]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	e01c      	b.n	8004fb8 <HAL_RCC_OscConfig+0x324>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x30c>
 8004f86:	4b5f      	ldr	r3, [pc, #380]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a5e      	ldr	r2, [pc, #376]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	4b5c      	ldr	r3, [pc, #368]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	4a5b      	ldr	r2, [pc, #364]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x324>
 8004fa0:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a57      	ldr	r2, [pc, #348]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	4b55      	ldr	r3, [pc, #340]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4a54      	ldr	r2, [pc, #336]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fc fd68 	bl	8001a94 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fc fd64 	bl	8001a94 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0cb      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	4b49      	ldr	r3, [pc, #292]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ee      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x334>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fc fd52 	bl	8001a94 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fd4e 	bl	8001a94 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0b5      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500a:	4b3e      	ldr	r3, [pc, #248]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ee      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b39      	ldr	r3, [pc, #228]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	4a38      	ldr	r2, [pc, #224]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8005022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a1 	beq.w	8005174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005032:	4b34      	ldr	r3, [pc, #208]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b08      	cmp	r3, #8
 800503c:	d05c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d141      	bne.n	80050ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_RCC_OscConfig+0x478>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fc fd22 	bl	8001a94 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005054:	f7fc fd1e 	bl	8001a94 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e087      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	019b      	lsls	r3, r3, #6
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	3b01      	subs	r3, #1
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	491b      	ldr	r1, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <HAL_RCC_OscConfig+0x478>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7fc fcf7 	bl	8001a94 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fc fcf3 	bl	8001a94 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e05c      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x416>
 80050c8:	e054      	b.n	8005174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_RCC_OscConfig+0x478>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fc fce0 	bl	8001a94 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fc fcdc 	bl	8001a94 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e045      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCC_OscConfig+0x470>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x444>
 80050f6:	e03d      	b.n	8005174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e038      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
 8005104:	40023800 	.word	0x40023800
 8005108:	40007000 	.word	0x40007000
 800510c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005110:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x4ec>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d028      	beq.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d121      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d11a      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	3b01      	subs	r3, #1
 800515a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0cc      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d90c      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b65      	ldr	r3, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d044      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d119      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b3f      	ldr	r3, [pc, #252]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e06f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e067      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4934      	ldr	r1, [pc, #208]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fc fc0e 	bl	8001a94 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fc fc0a 	bl	8001a94 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d20c      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fb6e 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	40023800 	.word	0x40023800
 8005344:	08009d70 	.word	0x08009d70
 8005348:	2000000c 	.word	0x2000000c
 800534c:	20000010 	.word	0x20000010

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005354:	b094      	sub	sp, #80	; 0x50
 8005356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	2300      	movs	r3, #0
 800535e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005360:	2300      	movs	r3, #0
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005368:	4b79      	ldr	r3, [pc, #484]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d00d      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x40>
 8005374:	2b08      	cmp	r3, #8
 8005376:	f200 80e1 	bhi.w	800553c <HAL_RCC_GetSysClockFreq+0x1ec>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x34>
 800537e:	2b04      	cmp	r3, #4
 8005380:	d003      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x3a>
 8005382:	e0db      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_GetSysClockFreq+0x204>)
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005388:	e0db      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800538a:	4b73      	ldr	r3, [pc, #460]	; (8005558 <HAL_RCC_GetSysClockFreq+0x208>)
 800538c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538e:	e0d8      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800539a:	4b6d      	ldr	r3, [pc, #436]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d063      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	2200      	movs	r2, #0
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	0159      	lsls	r1, r3, #5
 80053d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d4:	0150      	lsls	r0, r2, #5
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4621      	mov	r1, r4
 80053dc:	1a51      	subs	r1, r2, r1
 80053de:	6139      	str	r1, [r7, #16]
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb63 0301 	sbc.w	r3, r3, r1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053f4:	4659      	mov	r1, fp
 80053f6:	018b      	lsls	r3, r1, #6
 80053f8:	4651      	mov	r1, sl
 80053fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fe:	4651      	mov	r1, sl
 8005400:	018a      	lsls	r2, r1, #6
 8005402:	4651      	mov	r1, sl
 8005404:	ebb2 0801 	subs.w	r8, r2, r1
 8005408:	4659      	mov	r1, fp
 800540a:	eb63 0901 	sbc.w	r9, r3, r1
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005422:	4690      	mov	r8, r2
 8005424:	4699      	mov	r9, r3
 8005426:	4623      	mov	r3, r4
 8005428:	eb18 0303 	adds.w	r3, r8, r3
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	462b      	mov	r3, r5
 8005430:	eb49 0303 	adc.w	r3, r9, r3
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005442:	4629      	mov	r1, r5
 8005444:	024b      	lsls	r3, r1, #9
 8005446:	4621      	mov	r1, r4
 8005448:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800544c:	4621      	mov	r1, r4
 800544e:	024a      	lsls	r2, r1, #9
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	2200      	movs	r2, #0
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
 800545a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800545c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005460:	f7fb fbfa 	bl	8000c58 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4613      	mov	r3, r2
 800546a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800546c:	e058      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b38      	ldr	r3, [pc, #224]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	2200      	movs	r2, #0
 8005476:	4618      	mov	r0, r3
 8005478:	4611      	mov	r1, r2
 800547a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
 8005484:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	0159      	lsls	r1, r3, #5
 8005496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549a:	0150      	lsls	r0, r2, #5
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4641      	mov	r1, r8
 80054a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054c0:	ebb2 040a 	subs.w	r4, r2, sl
 80054c4:	eb63 050b 	sbc.w	r5, r3, fp
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	18e3      	adds	r3, r4, r3
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	464b      	mov	r3, r9
 80054e4:	eb45 0303 	adc.w	r3, r5, r3
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f6:	4629      	mov	r1, r5
 80054f8:	028b      	lsls	r3, r1, #10
 80054fa:	4621      	mov	r1, r4
 80054fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005500:	4621      	mov	r1, r4
 8005502:	028a      	lsls	r2, r1, #10
 8005504:	4610      	mov	r0, r2
 8005506:	4619      	mov	r1, r3
 8005508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550a:	2200      	movs	r2, #0
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	61fa      	str	r2, [r7, #28]
 8005510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005514:	f7fb fba0 	bl	8000c58 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4613      	mov	r3, r2
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	3301      	adds	r3, #1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553a:	e002      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_GetSysClockFreq+0x204>)
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005544:	4618      	mov	r0, r3
 8005546:	3750      	adds	r7, #80	; 0x50
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800
 8005554:	00f42400 	.word	0x00f42400
 8005558:	007a1200 	.word	0x007a1200

0800555c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <HAL_RCC_GetHCLKFreq+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	2000000c 	.word	0x2000000c

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005578:	f7ff fff0 	bl	800555c <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	08009d80 	.word	0x08009d80

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055a0:	f7ff ffdc 	bl	800555c <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0b5b      	lsrs	r3, r3, #13
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40023800 	.word	0x40023800
 80055c0:	08009d80 	.word	0x08009d80

080055c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e044      	b.n	8005666 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <HAL_TIM_Base_Start_IT+0xb0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_TIM_Base_Start_IT+0xb4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a19      	ldr	r2, [pc, #100]	; (800567c <HAL_TIM_Base_Start_IT+0xb8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_TIM_Base_Start_IT+0xbc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_TIM_Base_Start_IT+0xc0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d111      	bne.n	8005654 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d010      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	e007      	b.n	8005664 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40014000 	.word	0x40014000

08005688 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e041      	b.n	800571e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb ff84 	bl	80015bc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f000 f9ba 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d122      	bne.n	8005782 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d11b      	bne.n	8005782 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0202 	mvn.w	r2, #2
 8005752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f94b 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 800576e:	e005      	b.n	800577c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f93d 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f94e 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b04      	cmp	r3, #4
 800578e:	d122      	bne.n	80057d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d11b      	bne.n	80057d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0204 	mvn.w	r2, #4
 80057a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f921 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 80057c2:	e005      	b.n	80057d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f913 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f924 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d122      	bne.n	800582a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d11b      	bne.n	800582a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f06f 0208 	mvn.w	r2, #8
 80057fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2204      	movs	r2, #4
 8005800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8f7 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 8005816:	e005      	b.n	8005824 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8e9 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8fa 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d122      	bne.n	800587e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d11b      	bne.n	800587e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f06f 0210 	mvn.w	r2, #16
 800584e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2208      	movs	r2, #8
 8005854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8cd 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 800586a:	e005      	b.n	8005878 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8bf 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8d0 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10e      	bne.n	80058aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f06f 0201 	mvn.w	r2, #1
 80058a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fb fb55 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d10e      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fb39 	bl	8005f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d10e      	bne.n	8005902 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d107      	bne.n	8005902 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f895 	bl	8005a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d10e      	bne.n	800592e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b20      	cmp	r3, #32
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0220 	mvn.w	r2, #32
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb03 	bl	8005f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005952:	2302      	movs	r3, #2
 8005954:	e048      	b.n	80059e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d839      	bhi.n	80059d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059d9 	.word	0x080059d9
 8005978:	080059d9 	.word	0x080059d9
 800597c:	080059af 	.word	0x080059af
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059d9 	.word	0x080059d9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059bd 	.word	0x080059bd
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059cb 	.word	0x080059cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f8ca 	bl	8005b40 <TIM_OC1_SetConfig>
      break;
 80059ac:	e017      	b.n	80059de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f929 	bl	8005c0c <TIM_OC2_SetConfig>
      break;
 80059ba:	e010      	b.n	80059de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f98e 	bl	8005ce4 <TIM_OC3_SetConfig>
      break;
 80059c8:	e009      	b.n	80059de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f9f1 	bl	8005db8 <TIM_OC4_SetConfig>
      break;
 80059d6:	e002      	b.n	80059de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	75fb      	strb	r3, [r7, #23]
      break;
 80059dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <TIM_Base_SetConfig+0xe8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <TIM_Base_SetConfig+0xec>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2f      	ldr	r2, [pc, #188]	; (8005b30 <TIM_Base_SetConfig+0xf0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01b      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d017      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <TIM_Base_SetConfig+0xe8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <TIM_Base_SetConfig+0xec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00f      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <TIM_Base_SetConfig+0xf0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <TIM_Base_SetConfig+0xf4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <TIM_Base_SetConfig+0xf8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <TIM_Base_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d108      	bne.n	8005adc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d103      	bne.n	8005b10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	615a      	str	r2, [r3, #20]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800

08005b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0302 	bic.w	r3, r3, #2
 8005b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_OC1_SetConfig+0xc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10c      	bne.n	8005bb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0308 	bic.w	r3, r3, #8
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <TIM_OC1_SetConfig+0xc8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000

08005c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0210 	bic.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0320 	bic.w	r3, r3, #32
 8005c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <TIM_OC2_SetConfig+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10d      	bne.n	8005c88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_OC2_SetConfig+0xd4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d113      	bne.n	8005cb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <TIM_OC3_SetConfig+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <TIM_OC3_SetConfig+0xd0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d113      	bne.n	8005d8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40010000 	.word	0x40010000

08005db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <TIM_OC4_SetConfig+0x9c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d109      	bne.n	8005e2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	019b      	lsls	r3, r3, #6
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000

08005e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e050      	b.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d013      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10c      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40014000 	.word	0x40014000

08005f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e03f      	b.n	8005fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fb40 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2224      	movs	r2, #36	; 0x24
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fdd1 	bl	8006b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695a      	ldr	r2, [r3, #20]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08c      	sub	sp, #48	; 0x30
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d165      	bne.n	80060de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit_DMA+0x26>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e05e      	b.n	80060e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UART_Transmit_DMA+0x38>
 800602c:	2302      	movs	r3, #2
 800602e:	e057      	b.n	80060e0 <HAL_UART_Transmit_DMA+0xe8>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2221      	movs	r2, #33	; 0x21
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_UART_Transmit_DMA+0xf0>)
 800605e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_UART_Transmit_DMA+0xf4>)
 8006066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	4a20      	ldr	r2, [pc, #128]	; (80060f0 <HAL_UART_Transmit_DMA+0xf8>)
 800606e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	2200      	movs	r2, #0
 8006076:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3304      	adds	r3, #4
 800608c:	461a      	mov	r2, r3
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f7fb fecc 	bl	8001e2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800609c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	617b      	str	r3, [r7, #20]
   return(result);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c6:	627a      	str	r2, [r7, #36]	; 0x24
 80060c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6a39      	ldr	r1, [r7, #32]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3730      	adds	r7, #48	; 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	08006679 	.word	0x08006679
 80060ec:	08006713 	.word	0x08006713
 80060f0:	0800672f 	.word	0x0800672f

080060f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ba      	sub	sp, #232	; 0xe8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800611a:	2300      	movs	r3, #0
 800611c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fc3c 	bl	80069d0 <UART_Receive_IT>
      return;
 8006158:	e256      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800615a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80de 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80d1 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0202 	orr.w	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0204 	orr.w	r2, r3, #4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 81ed 	beq.w	80065fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fbc7 	bl	80069d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_UART_IRQHandler+0x17a>
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04f      	beq.n	800630e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 facf 	bl	8006812 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d141      	bne.n	8006306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d9      	bne.n	8006282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	4a7d      	ldr	r2, [pc, #500]	; (80064d0 <HAL_UART_IRQHandler+0x3dc>)
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fb fe6a 	bl	8001fbc <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	e00e      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9a4 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	e00a      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9a0 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e006      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f99c 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800631a:	e170      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	bf00      	nop
    return;
 800631e:	e16e      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 814a 	bne.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8143 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 813c 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	f040 80b4 	bne.w	80064d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8140 	beq.w	8006602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800638a:	429a      	cmp	r2, r3
 800638c:	f080 8139 	bcs.w	8006602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	f000 8088 	beq.w	80064b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800641a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800641e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e1      	bne.n	80063f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800643e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006498:	65ba      	str	r2, [r7, #88]	; 0x58
 800649a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800649e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e3      	bne.n	8006474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fb fd13 	bl	8001edc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8ca 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064cc:	e099      	b.n	8006602 <HAL_UART_IRQHandler+0x50e>
 80064ce:	bf00      	nop
 80064d0:	080068d9 	.word	0x080068d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808b 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8086 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800651e:	647a      	str	r2, [r7, #68]	; 0x44
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	623b      	str	r3, [r7, #32]
   return(result);
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006556:	633a      	str	r2, [r7, #48]	; 0x30
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69b9      	ldr	r1, [r7, #24]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	617b      	str	r3, [r7, #20]
   return(result);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f852 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065bc:	e023      	b.n	8006606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f992 	bl	8006900 <UART_Transmit_IT>
    return;
 80065dc:	e014      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
 80065ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f9d2 	bl	80069a0 <UART_EndTransmit_IT>
    return;
 80065fc:	e004      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    return;
 80065fe:	bf00      	nop
 8006600:	e002      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006606:	bf00      	nop
  }
}
 8006608:	37e8      	adds	r7, #232	; 0xe8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b090      	sub	sp, #64	; 0x40
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d137      	bne.n	8006704 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006696:	2200      	movs	r2, #0
 8006698:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	623b      	str	r3, [r7, #32]
   return(result);
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3314      	adds	r3, #20
 80066b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ba:	633a      	str	r2, [r7, #48]	; 0x30
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
 80066e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ee:	61fa      	str	r2, [r7, #28]
 80066f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	69b9      	ldr	r1, [r7, #24]
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	617b      	str	r3, [r7, #20]
   return(result);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006702:	e002      	b.n	800670a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006704:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006706:	f7ff ff83 	bl	8006610 <HAL_UART_TxCpltCallback>
}
 800670a:	bf00      	nop
 800670c:	3740      	adds	r7, #64	; 0x40
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ff7f 	bl	8006624 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b21      	cmp	r3, #33	; 0x21
 8006760:	d108      	bne.n	8006774 <UART_DMAError+0x46>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800676e:	68b8      	ldr	r0, [r7, #8]
 8006770:	f000 f827 	bl	80067c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b22      	cmp	r3, #34	; 0x22
 8006794:	d108      	bne.n	80067a8 <UART_DMAError+0x7a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	f000 f835 	bl	8006812 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	f043 0210 	orr.w	r2, r3, #16
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f7ff ff49 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b089      	sub	sp, #36	; 0x24
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	61ba      	str	r2, [r7, #24]
 80067ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6979      	ldr	r1, [r7, #20]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e5      	bne.n	80067ca <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006806:	bf00      	nop
 8006808:	3724      	adds	r7, #36	; 0x24
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006812:	b480      	push	{r7}
 8006814:	b095      	sub	sp, #84	; 0x54
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800683a:	643a      	str	r2, [r7, #64]	; 0x40
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3314      	adds	r3, #20
 8006854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	61fb      	str	r3, [r7, #28]
   return(result);
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	64bb      	str	r3, [r7, #72]	; 0x48
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	2b01      	cmp	r3, #1
 8006888:	d119      	bne.n	80068be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	60bb      	str	r3, [r7, #8]
   return(result);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f023 0310 	bic.w	r3, r3, #16
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068aa:	61ba      	str	r2, [r7, #24]
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	613b      	str	r3, [r7, #16]
   return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068cc:	bf00      	nop
 80068ce:	3754      	adds	r7, #84	; 0x54
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff feaa 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b21      	cmp	r3, #33	; 0x21
 8006912:	d13e      	bne.n	8006992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691c:	d114      	bne.n	8006948 <UART_Transmit_IT+0x48>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d110      	bne.n	8006948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]
 8006946:	e008      	b.n	800695a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6211      	str	r1, [r2, #32]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29b      	uxth	r3, r3
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4619      	mov	r1, r3
 8006968:	84d1      	strh	r1, [r2, #38]	; 0x26
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10f      	bne.n	800698e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800697c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fe25 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08c      	sub	sp, #48	; 0x30
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b22      	cmp	r3, #34	; 0x22
 80069e2:	f040 80ab 	bne.w	8006b3c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d117      	bne.n	8006a20 <UART_Receive_IT+0x50>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d113      	bne.n	8006a20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a1e:	e026      	b.n	8006a6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d007      	beq.n	8006a44 <UART_Receive_IT+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <UART_Receive_IT+0x82>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e008      	b.n	8006a64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d15a      	bne.n	8006b38 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0220 	bic.w	r2, r2, #32
 8006a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d135      	bne.n	8006b2e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f023 0310 	bic.w	r3, r3, #16
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae8:	623a      	str	r2, [r7, #32]
 8006aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69f9      	ldr	r1, [r7, #28]
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b10      	cmp	r3, #16
 8006b08:	d10a      	bne.n	8006b20 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fd9a 	bl	8006660 <HAL_UARTEx_RxEventCallback>
 8006b2c:	e002      	b.n	8006b34 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fd82 	bl	8006638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e002      	b.n	8006b3e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e000      	b.n	8006b3e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
  }
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3730      	adds	r7, #48	; 0x30
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b4c:	b0c0      	sub	sp, #256	; 0x100
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	68d9      	ldr	r1, [r3, #12]
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	ea40 0301 	orr.w	r3, r0, r1
 8006b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ba0:	f021 010c 	bic.w	r1, r1, #12
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc2:	6999      	ldr	r1, [r3, #24]
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	ea40 0301 	orr.w	r3, r0, r1
 8006bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b8f      	ldr	r3, [pc, #572]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d005      	beq.n	8006be8 <UART_SetConfig+0xa0>
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b8d      	ldr	r3, [pc, #564]	; (8006e18 <UART_SetConfig+0x2d0>)
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d104      	bne.n	8006bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fe fcd8 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8006bec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bf0:	e003      	b.n	8006bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bf2:	f7fe fcbf 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8006bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c04:	f040 810c 	bne.w	8006e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	1891      	adds	r1, r2, r2
 8006c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c22:	415b      	adcs	r3, r3
 8006c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	eb12 0801 	adds.w	r8, r2, r1
 8006c30:	4629      	mov	r1, r5
 8006c32:	eb43 0901 	adc.w	r9, r3, r1
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c4a:	4690      	mov	r8, r2
 8006c4c:	4699      	mov	r9, r3
 8006c4e:	4623      	mov	r3, r4
 8006c50:	eb18 0303 	adds.w	r3, r8, r3
 8006c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c58:	462b      	mov	r3, r5
 8006c5a:	eb49 0303 	adc.w	r3, r9, r3
 8006c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c76:	460b      	mov	r3, r1
 8006c78:	18db      	adds	r3, r3, r3
 8006c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	eb42 0303 	adc.w	r3, r2, r3
 8006c82:	657b      	str	r3, [r7, #84]	; 0x54
 8006c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c8c:	f7f9 ffe4 	bl	8000c58 <__aeabi_uldivmod>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4b61      	ldr	r3, [pc, #388]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006c96:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	011c      	lsls	r4, r3, #4
 8006c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	1891      	adds	r1, r2, r2
 8006cb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cb8:	415b      	adcs	r3, r3
 8006cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce0:	4692      	mov	sl, r2
 8006ce2:	469b      	mov	fp, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8006cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	18db      	adds	r3, r3, r3
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
 8006d12:	4613      	mov	r3, r2
 8006d14:	eb42 0303 	adc.w	r3, r2, r3
 8006d18:	647b      	str	r3, [r7, #68]	; 0x44
 8006d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d22:	f7f9 ff99 	bl	8000c58 <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4b3b      	ldr	r3, [pc, #236]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	2264      	movs	r2, #100	; 0x64
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	1acb      	subs	r3, r1, r3
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006d44:	fba3 2302 	umull	r2, r3, r3, r2
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d50:	441c      	add	r4, r3
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d74:	4641      	mov	r1, r8
 8006d76:	1851      	adds	r1, r2, r1
 8006d78:	6339      	str	r1, [r7, #48]	; 0x30
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	414b      	adcs	r3, r1
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	00cb      	lsls	r3, r1, #3
 8006d90:	4651      	mov	r1, sl
 8006d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d96:	4651      	mov	r1, sl
 8006d98:	00ca      	lsls	r2, r1, #3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4642      	mov	r2, r8
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da8:	464b      	mov	r3, r9
 8006daa:	460a      	mov	r2, r1
 8006dac:	eb42 0303 	adc.w	r3, r2, r3
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006dc8:	460b      	mov	r3, r1
 8006dca:	18db      	adds	r3, r3, r3
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dce:	4613      	mov	r3, r2
 8006dd0:	eb42 0303 	adc.w	r3, r2, r3
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dde:	f7f9 ff3b 	bl	8000c58 <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006de8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	2164      	movs	r1, #100	; 0x64
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	3332      	adds	r3, #50	; 0x32
 8006dfa:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	f003 0207 	and.w	r2, r3, #7
 8006e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4422      	add	r2, r4
 8006e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e10:	e106      	b.n	8007020 <UART_SetConfig+0x4d8>
 8006e12:	bf00      	nop
 8006e14:	40011000 	.word	0x40011000
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e32:	4642      	mov	r2, r8
 8006e34:	464b      	mov	r3, r9
 8006e36:	1891      	adds	r1, r2, r2
 8006e38:	6239      	str	r1, [r7, #32]
 8006e3a:	415b      	adcs	r3, r3
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e42:	4641      	mov	r1, r8
 8006e44:	1854      	adds	r4, r2, r1
 8006e46:	4649      	mov	r1, r9
 8006e48:	eb43 0501 	adc.w	r5, r3, r1
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	00eb      	lsls	r3, r5, #3
 8006e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e5a:	00e2      	lsls	r2, r4, #3
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	4643      	mov	r3, r8
 8006e62:	18e3      	adds	r3, r4, r3
 8006e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e68:	464b      	mov	r3, r9
 8006e6a:	eb45 0303 	adc.w	r3, r5, r3
 8006e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e8e:	4629      	mov	r1, r5
 8006e90:	008b      	lsls	r3, r1, #2
 8006e92:	4621      	mov	r1, r4
 8006e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e98:	4621      	mov	r1, r4
 8006e9a:	008a      	lsls	r2, r1, #2
 8006e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ea0:	f7f9 feda 	bl	8000c58 <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4b60      	ldr	r3, [pc, #384]	; (800702c <UART_SetConfig+0x4e4>)
 8006eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	011c      	lsls	r4, r3, #4
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	1891      	adds	r1, r2, r2
 8006eca:	61b9      	str	r1, [r7, #24]
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	1851      	adds	r1, r2, r1
 8006ed8:	6139      	str	r1, [r7, #16]
 8006eda:	4649      	mov	r1, r9
 8006edc:	414b      	adcs	r3, r1
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eec:	4659      	mov	r1, fp
 8006eee:	00cb      	lsls	r3, r1, #3
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	00ca      	lsls	r2, r1, #3
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	4642      	mov	r2, r8
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f08:	464b      	mov	r3, r9
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	008b      	lsls	r3, r1, #2
 8006f30:	4641      	mov	r1, r8
 8006f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f36:	4641      	mov	r1, r8
 8006f38:	008a      	lsls	r2, r1, #2
 8006f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f3e:	f7f9 fe8b 	bl	8000c58 <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4611      	mov	r1, r2
 8006f48:	4b38      	ldr	r3, [pc, #224]	; (800702c <UART_SetConfig+0x4e4>)
 8006f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2264      	movs	r2, #100	; 0x64
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	1acb      	subs	r3, r1, r3
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	3332      	adds	r3, #50	; 0x32
 8006f5c:	4a33      	ldr	r2, [pc, #204]	; (800702c <UART_SetConfig+0x4e4>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f68:	441c      	add	r4, r3
 8006f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6e:	2200      	movs	r2, #0
 8006f70:	673b      	str	r3, [r7, #112]	; 0x70
 8006f72:	677a      	str	r2, [r7, #116]	; 0x74
 8006f74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	415b      	adcs	r3, r3
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f88:	4641      	mov	r1, r8
 8006f8a:	1851      	adds	r1, r2, r1
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	4649      	mov	r1, r9
 8006f90:	414b      	adcs	r3, r1
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	00cb      	lsls	r3, r1, #3
 8006fa4:	4651      	mov	r1, sl
 8006fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006faa:	4651      	mov	r1, sl
 8006fac:	00ca      	lsls	r2, r1, #3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fba:	464b      	mov	r3, r9
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	eb42 0303 	adc.w	r3, r2, r3
 8006fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fce:	667a      	str	r2, [r7, #100]	; 0x64
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fdc:	4649      	mov	r1, r9
 8006fde:	008b      	lsls	r3, r1, #2
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	008a      	lsls	r2, r1, #2
 8006fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fee:	f7f9 fe33 	bl	8000c58 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	; (800702c <UART_SetConfig+0x4e4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <UART_SetConfig+0x4e4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 020f 	and.w	r2, r3, #15
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4422      	add	r2, r4
 800701e:	609a      	str	r2, [r3, #8]
}
 8007020:	bf00      	nop
 8007022:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007026:	46bd      	mov	sp, r7
 8007028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800702c:	51eb851f 	.word	0x51eb851f

08007030 <__cvt>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	ec55 4b10 	vmov	r4, r5, d0
 8007038:	2d00      	cmp	r5, #0
 800703a:	460e      	mov	r6, r1
 800703c:	4619      	mov	r1, r3
 800703e:	462b      	mov	r3, r5
 8007040:	bfbb      	ittet	lt
 8007042:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007046:	461d      	movlt	r5, r3
 8007048:	2300      	movge	r3, #0
 800704a:	232d      	movlt	r3, #45	; 0x2d
 800704c:	700b      	strb	r3, [r1, #0]
 800704e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007054:	4691      	mov	r9, r2
 8007056:	f023 0820 	bic.w	r8, r3, #32
 800705a:	bfbc      	itt	lt
 800705c:	4622      	movlt	r2, r4
 800705e:	4614      	movlt	r4, r2
 8007060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007064:	d005      	beq.n	8007072 <__cvt+0x42>
 8007066:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800706a:	d100      	bne.n	800706e <__cvt+0x3e>
 800706c:	3601      	adds	r6, #1
 800706e:	2102      	movs	r1, #2
 8007070:	e000      	b.n	8007074 <__cvt+0x44>
 8007072:	2103      	movs	r1, #3
 8007074:	ab03      	add	r3, sp, #12
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	ab02      	add	r3, sp, #8
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	ec45 4b10 	vmov	d0, r4, r5
 8007080:	4653      	mov	r3, sl
 8007082:	4632      	mov	r2, r6
 8007084:	f000 fe68 	bl	8007d58 <_dtoa_r>
 8007088:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800708c:	4607      	mov	r7, r0
 800708e:	d102      	bne.n	8007096 <__cvt+0x66>
 8007090:	f019 0f01 	tst.w	r9, #1
 8007094:	d022      	beq.n	80070dc <__cvt+0xac>
 8007096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800709a:	eb07 0906 	add.w	r9, r7, r6
 800709e:	d110      	bne.n	80070c2 <__cvt+0x92>
 80070a0:	783b      	ldrb	r3, [r7, #0]
 80070a2:	2b30      	cmp	r3, #48	; 0x30
 80070a4:	d10a      	bne.n	80070bc <__cvt+0x8c>
 80070a6:	2200      	movs	r2, #0
 80070a8:	2300      	movs	r3, #0
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 fd13 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b2:	b918      	cbnz	r0, 80070bc <__cvt+0x8c>
 80070b4:	f1c6 0601 	rsb	r6, r6, #1
 80070b8:	f8ca 6000 	str.w	r6, [sl]
 80070bc:	f8da 3000 	ldr.w	r3, [sl]
 80070c0:	4499      	add	r9, r3
 80070c2:	2200      	movs	r2, #0
 80070c4:	2300      	movs	r3, #0
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fd05 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ce:	b108      	cbz	r0, 80070d4 <__cvt+0xa4>
 80070d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80070d4:	2230      	movs	r2, #48	; 0x30
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	454b      	cmp	r3, r9
 80070da:	d307      	bcc.n	80070ec <__cvt+0xbc>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070e0:	1bdb      	subs	r3, r3, r7
 80070e2:	4638      	mov	r0, r7
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	b004      	add	sp, #16
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	1c59      	adds	r1, r3, #1
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e7f0      	b.n	80070d6 <__cvt+0xa6>

080070f4 <__exponent>:
 80070f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f6:	4603      	mov	r3, r0
 80070f8:	2900      	cmp	r1, #0
 80070fa:	bfb8      	it	lt
 80070fc:	4249      	neglt	r1, r1
 80070fe:	f803 2b02 	strb.w	r2, [r3], #2
 8007102:	bfb4      	ite	lt
 8007104:	222d      	movlt	r2, #45	; 0x2d
 8007106:	222b      	movge	r2, #43	; 0x2b
 8007108:	2909      	cmp	r1, #9
 800710a:	7042      	strb	r2, [r0, #1]
 800710c:	dd2a      	ble.n	8007164 <__exponent+0x70>
 800710e:	f10d 0207 	add.w	r2, sp, #7
 8007112:	4617      	mov	r7, r2
 8007114:	260a      	movs	r6, #10
 8007116:	4694      	mov	ip, r2
 8007118:	fb91 f5f6 	sdiv	r5, r1, r6
 800711c:	fb06 1415 	mls	r4, r6, r5, r1
 8007120:	3430      	adds	r4, #48	; 0x30
 8007122:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007126:	460c      	mov	r4, r1
 8007128:	2c63      	cmp	r4, #99	; 0x63
 800712a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800712e:	4629      	mov	r1, r5
 8007130:	dcf1      	bgt.n	8007116 <__exponent+0x22>
 8007132:	3130      	adds	r1, #48	; 0x30
 8007134:	f1ac 0402 	sub.w	r4, ip, #2
 8007138:	f802 1c01 	strb.w	r1, [r2, #-1]
 800713c:	1c41      	adds	r1, r0, #1
 800713e:	4622      	mov	r2, r4
 8007140:	42ba      	cmp	r2, r7
 8007142:	d30a      	bcc.n	800715a <__exponent+0x66>
 8007144:	f10d 0209 	add.w	r2, sp, #9
 8007148:	eba2 020c 	sub.w	r2, r2, ip
 800714c:	42bc      	cmp	r4, r7
 800714e:	bf88      	it	hi
 8007150:	2200      	movhi	r2, #0
 8007152:	4413      	add	r3, r2
 8007154:	1a18      	subs	r0, r3, r0
 8007156:	b003      	add	sp, #12
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800715e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007162:	e7ed      	b.n	8007140 <__exponent+0x4c>
 8007164:	2330      	movs	r3, #48	; 0x30
 8007166:	3130      	adds	r1, #48	; 0x30
 8007168:	7083      	strb	r3, [r0, #2]
 800716a:	70c1      	strb	r1, [r0, #3]
 800716c:	1d03      	adds	r3, r0, #4
 800716e:	e7f1      	b.n	8007154 <__exponent+0x60>

08007170 <_printf_float>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	ed2d 8b02 	vpush	{d8}
 8007178:	b08d      	sub	sp, #52	; 0x34
 800717a:	460c      	mov	r4, r1
 800717c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007180:	4616      	mov	r6, r2
 8007182:	461f      	mov	r7, r3
 8007184:	4605      	mov	r5, r0
 8007186:	f000 fce9 	bl	8007b5c <_localeconv_r>
 800718a:	f8d0 a000 	ldr.w	sl, [r0]
 800718e:	4650      	mov	r0, sl
 8007190:	f7f9 f876 	bl	8000280 <strlen>
 8007194:	2300      	movs	r3, #0
 8007196:	930a      	str	r3, [sp, #40]	; 0x28
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	f8d8 3000 	ldr.w	r3, [r8]
 80071a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071a4:	3307      	adds	r3, #7
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	f103 0208 	add.w	r2, r3, #8
 80071ae:	f8c8 2000 	str.w	r2, [r8]
 80071b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071ba:	9307      	str	r3, [sp, #28]
 80071bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80071c0:	ee08 0a10 	vmov	s16, r0
 80071c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80071c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071cc:	4b9e      	ldr	r3, [pc, #632]	; (8007448 <_printf_float+0x2d8>)
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071d2:	f7f9 fcb3 	bl	8000b3c <__aeabi_dcmpun>
 80071d6:	bb88      	cbnz	r0, 800723c <_printf_float+0xcc>
 80071d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071dc:	4b9a      	ldr	r3, [pc, #616]	; (8007448 <_printf_float+0x2d8>)
 80071de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e2:	f7f9 fc8d 	bl	8000b00 <__aeabi_dcmple>
 80071e6:	bb48      	cbnz	r0, 800723c <_printf_float+0xcc>
 80071e8:	2200      	movs	r2, #0
 80071ea:	2300      	movs	r3, #0
 80071ec:	4640      	mov	r0, r8
 80071ee:	4649      	mov	r1, r9
 80071f0:	f7f9 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80071f4:	b110      	cbz	r0, 80071fc <_printf_float+0x8c>
 80071f6:	232d      	movs	r3, #45	; 0x2d
 80071f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fc:	4a93      	ldr	r2, [pc, #588]	; (800744c <_printf_float+0x2dc>)
 80071fe:	4b94      	ldr	r3, [pc, #592]	; (8007450 <_printf_float+0x2e0>)
 8007200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007204:	bf94      	ite	ls
 8007206:	4690      	movls	r8, r2
 8007208:	4698      	movhi	r8, r3
 800720a:	2303      	movs	r3, #3
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	9b05      	ldr	r3, [sp, #20]
 8007210:	f023 0304 	bic.w	r3, r3, #4
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	f04f 0900 	mov.w	r9, #0
 800721a:	9700      	str	r7, [sp, #0]
 800721c:	4633      	mov	r3, r6
 800721e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f000 f9da 	bl	80075dc <_printf_common>
 8007228:	3001      	adds	r0, #1
 800722a:	f040 8090 	bne.w	800734e <_printf_float+0x1de>
 800722e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007232:	b00d      	add	sp, #52	; 0x34
 8007234:	ecbd 8b02 	vpop	{d8}
 8007238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7f9 fc7a 	bl	8000b3c <__aeabi_dcmpun>
 8007248:	b140      	cbz	r0, 800725c <_printf_float+0xec>
 800724a:	464b      	mov	r3, r9
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfbc      	itt	lt
 8007250:	232d      	movlt	r3, #45	; 0x2d
 8007252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007256:	4a7f      	ldr	r2, [pc, #508]	; (8007454 <_printf_float+0x2e4>)
 8007258:	4b7f      	ldr	r3, [pc, #508]	; (8007458 <_printf_float+0x2e8>)
 800725a:	e7d1      	b.n	8007200 <_printf_float+0x90>
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007262:	9206      	str	r2, [sp, #24]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	d13f      	bne.n	80072e8 <_printf_float+0x178>
 8007268:	2306      	movs	r3, #6
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	9b05      	ldr	r3, [sp, #20]
 800726e:	6861      	ldr	r1, [r4, #4]
 8007270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007274:	2300      	movs	r3, #0
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	ab0a      	add	r3, sp, #40	; 0x28
 800727a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800727e:	ab09      	add	r3, sp, #36	; 0x24
 8007280:	ec49 8b10 	vmov	d0, r8, r9
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800728c:	4628      	mov	r0, r5
 800728e:	f7ff fecf 	bl	8007030 <__cvt>
 8007292:	9b06      	ldr	r3, [sp, #24]
 8007294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007296:	2b47      	cmp	r3, #71	; 0x47
 8007298:	4680      	mov	r8, r0
 800729a:	d108      	bne.n	80072ae <_printf_float+0x13e>
 800729c:	1cc8      	adds	r0, r1, #3
 800729e:	db02      	blt.n	80072a6 <_printf_float+0x136>
 80072a0:	6863      	ldr	r3, [r4, #4]
 80072a2:	4299      	cmp	r1, r3
 80072a4:	dd41      	ble.n	800732a <_printf_float+0x1ba>
 80072a6:	f1ab 0302 	sub.w	r3, fp, #2
 80072aa:	fa5f fb83 	uxtb.w	fp, r3
 80072ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072b2:	d820      	bhi.n	80072f6 <_printf_float+0x186>
 80072b4:	3901      	subs	r1, #1
 80072b6:	465a      	mov	r2, fp
 80072b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072bc:	9109      	str	r1, [sp, #36]	; 0x24
 80072be:	f7ff ff19 	bl	80070f4 <__exponent>
 80072c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c4:	1813      	adds	r3, r2, r0
 80072c6:	2a01      	cmp	r2, #1
 80072c8:	4681      	mov	r9, r0
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	dc02      	bgt.n	80072d4 <_printf_float+0x164>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	07d2      	lsls	r2, r2, #31
 80072d2:	d501      	bpl.n	80072d8 <_printf_float+0x168>
 80072d4:	3301      	adds	r3, #1
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d09c      	beq.n	800721a <_printf_float+0xaa>
 80072e0:	232d      	movs	r3, #45	; 0x2d
 80072e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e6:	e798      	b.n	800721a <_printf_float+0xaa>
 80072e8:	9a06      	ldr	r2, [sp, #24]
 80072ea:	2a47      	cmp	r2, #71	; 0x47
 80072ec:	d1be      	bne.n	800726c <_printf_float+0xfc>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1bc      	bne.n	800726c <_printf_float+0xfc>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7b9      	b.n	800726a <_printf_float+0xfa>
 80072f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072fa:	d118      	bne.n	800732e <_printf_float+0x1be>
 80072fc:	2900      	cmp	r1, #0
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	dd0b      	ble.n	800731a <_printf_float+0x1aa>
 8007302:	6121      	str	r1, [r4, #16]
 8007304:	b913      	cbnz	r3, 800730c <_printf_float+0x19c>
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	07d0      	lsls	r0, r2, #31
 800730a:	d502      	bpl.n	8007312 <_printf_float+0x1a2>
 800730c:	3301      	adds	r3, #1
 800730e:	440b      	add	r3, r1
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	65a1      	str	r1, [r4, #88]	; 0x58
 8007314:	f04f 0900 	mov.w	r9, #0
 8007318:	e7de      	b.n	80072d8 <_printf_float+0x168>
 800731a:	b913      	cbnz	r3, 8007322 <_printf_float+0x1b2>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	07d2      	lsls	r2, r2, #31
 8007320:	d501      	bpl.n	8007326 <_printf_float+0x1b6>
 8007322:	3302      	adds	r3, #2
 8007324:	e7f4      	b.n	8007310 <_printf_float+0x1a0>
 8007326:	2301      	movs	r3, #1
 8007328:	e7f2      	b.n	8007310 <_printf_float+0x1a0>
 800732a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007330:	4299      	cmp	r1, r3
 8007332:	db05      	blt.n	8007340 <_printf_float+0x1d0>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	6121      	str	r1, [r4, #16]
 8007338:	07d8      	lsls	r0, r3, #31
 800733a:	d5ea      	bpl.n	8007312 <_printf_float+0x1a2>
 800733c:	1c4b      	adds	r3, r1, #1
 800733e:	e7e7      	b.n	8007310 <_printf_float+0x1a0>
 8007340:	2900      	cmp	r1, #0
 8007342:	bfd4      	ite	le
 8007344:	f1c1 0202 	rsble	r2, r1, #2
 8007348:	2201      	movgt	r2, #1
 800734a:	4413      	add	r3, r2
 800734c:	e7e0      	b.n	8007310 <_printf_float+0x1a0>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	055a      	lsls	r2, r3, #21
 8007352:	d407      	bmi.n	8007364 <_printf_float+0x1f4>
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	4642      	mov	r2, r8
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	d12c      	bne.n	80073bc <_printf_float+0x24c>
 8007362:	e764      	b.n	800722e <_printf_float+0xbe>
 8007364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007368:	f240 80e0 	bls.w	800752c <_printf_float+0x3bc>
 800736c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	f7f9 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007378:	2800      	cmp	r0, #0
 800737a:	d034      	beq.n	80073e6 <_printf_float+0x276>
 800737c:	4a37      	ldr	r2, [pc, #220]	; (800745c <_printf_float+0x2ec>)
 800737e:	2301      	movs	r3, #1
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f af51 	beq.w	800722e <_printf_float+0xbe>
 800738c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007390:	429a      	cmp	r2, r3
 8007392:	db02      	blt.n	800739a <_printf_float+0x22a>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	07d8      	lsls	r0, r3, #31
 8007398:	d510      	bpl.n	80073bc <_printf_float+0x24c>
 800739a:	ee18 3a10 	vmov	r3, s16
 800739e:	4652      	mov	r2, sl
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af41 	beq.w	800722e <_printf_float+0xbe>
 80073ac:	f04f 0800 	mov.w	r8, #0
 80073b0:	f104 091a 	add.w	r9, r4, #26
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	3b01      	subs	r3, #1
 80073b8:	4543      	cmp	r3, r8
 80073ba:	dc09      	bgt.n	80073d0 <_printf_float+0x260>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	079b      	lsls	r3, r3, #30
 80073c0:	f100 8107 	bmi.w	80075d2 <_printf_float+0x462>
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	4298      	cmp	r0, r3
 80073ca:	bfb8      	it	lt
 80073cc:	4618      	movlt	r0, r3
 80073ce:	e730      	b.n	8007232 <_printf_float+0xc2>
 80073d0:	2301      	movs	r3, #1
 80073d2:	464a      	mov	r2, r9
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af27 	beq.w	800722e <_printf_float+0xbe>
 80073e0:	f108 0801 	add.w	r8, r8, #1
 80073e4:	e7e6      	b.n	80073b4 <_printf_float+0x244>
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc39      	bgt.n	8007460 <_printf_float+0x2f0>
 80073ec:	4a1b      	ldr	r2, [pc, #108]	; (800745c <_printf_float+0x2ec>)
 80073ee:	2301      	movs	r3, #1
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af19 	beq.w	800722e <_printf_float+0xbe>
 80073fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007400:	4313      	orrs	r3, r2
 8007402:	d102      	bne.n	800740a <_printf_float+0x29a>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d5d8      	bpl.n	80073bc <_printf_float+0x24c>
 800740a:	ee18 3a10 	vmov	r3, s16
 800740e:	4652      	mov	r2, sl
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f af09 	beq.w	800722e <_printf_float+0xbe>
 800741c:	f04f 0900 	mov.w	r9, #0
 8007420:	f104 0a1a 	add.w	sl, r4, #26
 8007424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007426:	425b      	negs	r3, r3
 8007428:	454b      	cmp	r3, r9
 800742a:	dc01      	bgt.n	8007430 <_printf_float+0x2c0>
 800742c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742e:	e792      	b.n	8007356 <_printf_float+0x1e6>
 8007430:	2301      	movs	r3, #1
 8007432:	4652      	mov	r2, sl
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f43f aef7 	beq.w	800722e <_printf_float+0xbe>
 8007440:	f109 0901 	add.w	r9, r9, #1
 8007444:	e7ee      	b.n	8007424 <_printf_float+0x2b4>
 8007446:	bf00      	nop
 8007448:	7fefffff 	.word	0x7fefffff
 800744c:	08009d90 	.word	0x08009d90
 8007450:	08009d94 	.word	0x08009d94
 8007454:	08009d98 	.word	0x08009d98
 8007458:	08009d9c 	.word	0x08009d9c
 800745c:	08009da0 	.word	0x08009da0
 8007460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007464:	429a      	cmp	r2, r3
 8007466:	bfa8      	it	ge
 8007468:	461a      	movge	r2, r3
 800746a:	2a00      	cmp	r2, #0
 800746c:	4691      	mov	r9, r2
 800746e:	dc37      	bgt.n	80074e0 <_printf_float+0x370>
 8007470:	f04f 0b00 	mov.w	fp, #0
 8007474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007478:	f104 021a 	add.w	r2, r4, #26
 800747c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	eba3 0309 	sub.w	r3, r3, r9
 8007484:	455b      	cmp	r3, fp
 8007486:	dc33      	bgt.n	80074f0 <_printf_float+0x380>
 8007488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748c:	429a      	cmp	r2, r3
 800748e:	db3b      	blt.n	8007508 <_printf_float+0x398>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	07da      	lsls	r2, r3, #31
 8007494:	d438      	bmi.n	8007508 <_printf_float+0x398>
 8007496:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800749a:	eba2 0903 	sub.w	r9, r2, r3
 800749e:	9b05      	ldr	r3, [sp, #20]
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	4591      	cmp	r9, r2
 80074a4:	bfa8      	it	ge
 80074a6:	4691      	movge	r9, r2
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	dc35      	bgt.n	800751a <_printf_float+0x3aa>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074b6:	f104 0a1a 	add.w	sl, r4, #26
 80074ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	eba3 0309 	sub.w	r3, r3, r9
 80074c4:	4543      	cmp	r3, r8
 80074c6:	f77f af79 	ble.w	80073bc <_printf_float+0x24c>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4652      	mov	r2, sl
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	f43f aeaa 	beq.w	800722e <_printf_float+0xbe>
 80074da:	f108 0801 	add.w	r8, r8, #1
 80074de:	e7ec      	b.n	80074ba <_printf_float+0x34a>
 80074e0:	4613      	mov	r3, r2
 80074e2:	4631      	mov	r1, r6
 80074e4:	4642      	mov	r2, r8
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	d1c0      	bne.n	8007470 <_printf_float+0x300>
 80074ee:	e69e      	b.n	800722e <_printf_float+0xbe>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	9205      	str	r2, [sp, #20]
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f ae97 	beq.w	800722e <_printf_float+0xbe>
 8007500:	9a05      	ldr	r2, [sp, #20]
 8007502:	f10b 0b01 	add.w	fp, fp, #1
 8007506:	e7b9      	b.n	800747c <_printf_float+0x30c>
 8007508:	ee18 3a10 	vmov	r3, s16
 800750c:	4652      	mov	r2, sl
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	d1be      	bne.n	8007496 <_printf_float+0x326>
 8007518:	e689      	b.n	800722e <_printf_float+0xbe>
 800751a:	9a05      	ldr	r2, [sp, #20]
 800751c:	464b      	mov	r3, r9
 800751e:	4442      	add	r2, r8
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	d1c1      	bne.n	80074ae <_printf_float+0x33e>
 800752a:	e680      	b.n	800722e <_printf_float+0xbe>
 800752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800752e:	2a01      	cmp	r2, #1
 8007530:	dc01      	bgt.n	8007536 <_printf_float+0x3c6>
 8007532:	07db      	lsls	r3, r3, #31
 8007534:	d53a      	bpl.n	80075ac <_printf_float+0x43c>
 8007536:	2301      	movs	r3, #1
 8007538:	4642      	mov	r2, r8
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae74 	beq.w	800722e <_printf_float+0xbe>
 8007546:	ee18 3a10 	vmov	r3, s16
 800754a:	4652      	mov	r2, sl
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	f43f ae6b 	beq.w	800722e <_printf_float+0xbe>
 8007558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007564:	f7f9 fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007568:	b9d8      	cbnz	r0, 80075a2 <_printf_float+0x432>
 800756a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800756e:	f108 0201 	add.w	r2, r8, #1
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	d10e      	bne.n	800759a <_printf_float+0x42a>
 800757c:	e657      	b.n	800722e <_printf_float+0xbe>
 800757e:	2301      	movs	r3, #1
 8007580:	4652      	mov	r2, sl
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f ae50 	beq.w	800722e <_printf_float+0xbe>
 800758e:	f108 0801 	add.w	r8, r8, #1
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	3b01      	subs	r3, #1
 8007596:	4543      	cmp	r3, r8
 8007598:	dcf1      	bgt.n	800757e <_printf_float+0x40e>
 800759a:	464b      	mov	r3, r9
 800759c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075a0:	e6da      	b.n	8007358 <_printf_float+0x1e8>
 80075a2:	f04f 0800 	mov.w	r8, #0
 80075a6:	f104 0a1a 	add.w	sl, r4, #26
 80075aa:	e7f2      	b.n	8007592 <_printf_float+0x422>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4642      	mov	r2, r8
 80075b0:	e7df      	b.n	8007572 <_printf_float+0x402>
 80075b2:	2301      	movs	r3, #1
 80075b4:	464a      	mov	r2, r9
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	f43f ae36 	beq.w	800722e <_printf_float+0xbe>
 80075c2:	f108 0801 	add.w	r8, r8, #1
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ca:	1a5b      	subs	r3, r3, r1
 80075cc:	4543      	cmp	r3, r8
 80075ce:	dcf0      	bgt.n	80075b2 <_printf_float+0x442>
 80075d0:	e6f8      	b.n	80073c4 <_printf_float+0x254>
 80075d2:	f04f 0800 	mov.w	r8, #0
 80075d6:	f104 0919 	add.w	r9, r4, #25
 80075da:	e7f4      	b.n	80075c6 <_printf_float+0x456>

080075dc <_printf_common>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	4616      	mov	r6, r2
 80075e2:	4699      	mov	r9, r3
 80075e4:	688a      	ldr	r2, [r1, #8]
 80075e6:	690b      	ldr	r3, [r1, #16]
 80075e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	bfb8      	it	lt
 80075f0:	4613      	movlt	r3, r2
 80075f2:	6033      	str	r3, [r6, #0]
 80075f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075f8:	4607      	mov	r7, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	b10a      	cbz	r2, 8007602 <_printf_common+0x26>
 80075fe:	3301      	adds	r3, #1
 8007600:	6033      	str	r3, [r6, #0]
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	0699      	lsls	r1, r3, #26
 8007606:	bf42      	ittt	mi
 8007608:	6833      	ldrmi	r3, [r6, #0]
 800760a:	3302      	addmi	r3, #2
 800760c:	6033      	strmi	r3, [r6, #0]
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	f015 0506 	ands.w	r5, r5, #6
 8007614:	d106      	bne.n	8007624 <_printf_common+0x48>
 8007616:	f104 0a19 	add.w	sl, r4, #25
 800761a:	68e3      	ldr	r3, [r4, #12]
 800761c:	6832      	ldr	r2, [r6, #0]
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	42ab      	cmp	r3, r5
 8007622:	dc26      	bgt.n	8007672 <_printf_common+0x96>
 8007624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007628:	1e13      	subs	r3, r2, #0
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	bf18      	it	ne
 800762e:	2301      	movne	r3, #1
 8007630:	0692      	lsls	r2, r2, #26
 8007632:	d42b      	bmi.n	800768c <_printf_common+0xb0>
 8007634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007638:	4649      	mov	r1, r9
 800763a:	4638      	mov	r0, r7
 800763c:	47c0      	blx	r8
 800763e:	3001      	adds	r0, #1
 8007640:	d01e      	beq.n	8007680 <_printf_common+0xa4>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	6922      	ldr	r2, [r4, #16]
 8007646:	f003 0306 	and.w	r3, r3, #6
 800764a:	2b04      	cmp	r3, #4
 800764c:	bf02      	ittt	eq
 800764e:	68e5      	ldreq	r5, [r4, #12]
 8007650:	6833      	ldreq	r3, [r6, #0]
 8007652:	1aed      	subeq	r5, r5, r3
 8007654:	68a3      	ldr	r3, [r4, #8]
 8007656:	bf0c      	ite	eq
 8007658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800765c:	2500      	movne	r5, #0
 800765e:	4293      	cmp	r3, r2
 8007660:	bfc4      	itt	gt
 8007662:	1a9b      	subgt	r3, r3, r2
 8007664:	18ed      	addgt	r5, r5, r3
 8007666:	2600      	movs	r6, #0
 8007668:	341a      	adds	r4, #26
 800766a:	42b5      	cmp	r5, r6
 800766c:	d11a      	bne.n	80076a4 <_printf_common+0xc8>
 800766e:	2000      	movs	r0, #0
 8007670:	e008      	b.n	8007684 <_printf_common+0xa8>
 8007672:	2301      	movs	r3, #1
 8007674:	4652      	mov	r2, sl
 8007676:	4649      	mov	r1, r9
 8007678:	4638      	mov	r0, r7
 800767a:	47c0      	blx	r8
 800767c:	3001      	adds	r0, #1
 800767e:	d103      	bne.n	8007688 <_printf_common+0xac>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007688:	3501      	adds	r5, #1
 800768a:	e7c6      	b.n	800761a <_printf_common+0x3e>
 800768c:	18e1      	adds	r1, r4, r3
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	2030      	movs	r0, #48	; 0x30
 8007692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007696:	4422      	add	r2, r4
 8007698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800769c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076a0:	3302      	adds	r3, #2
 80076a2:	e7c7      	b.n	8007634 <_printf_common+0x58>
 80076a4:	2301      	movs	r3, #1
 80076a6:	4622      	mov	r2, r4
 80076a8:	4649      	mov	r1, r9
 80076aa:	4638      	mov	r0, r7
 80076ac:	47c0      	blx	r8
 80076ae:	3001      	adds	r0, #1
 80076b0:	d0e6      	beq.n	8007680 <_printf_common+0xa4>
 80076b2:	3601      	adds	r6, #1
 80076b4:	e7d9      	b.n	800766a <_printf_common+0x8e>
	...

080076b8 <_printf_i>:
 80076b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076bc:	7e0f      	ldrb	r7, [r1, #24]
 80076be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076c0:	2f78      	cmp	r7, #120	; 0x78
 80076c2:	4691      	mov	r9, r2
 80076c4:	4680      	mov	r8, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	469a      	mov	sl, r3
 80076ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076ce:	d807      	bhi.n	80076e0 <_printf_i+0x28>
 80076d0:	2f62      	cmp	r7, #98	; 0x62
 80076d2:	d80a      	bhi.n	80076ea <_printf_i+0x32>
 80076d4:	2f00      	cmp	r7, #0
 80076d6:	f000 80d4 	beq.w	8007882 <_printf_i+0x1ca>
 80076da:	2f58      	cmp	r7, #88	; 0x58
 80076dc:	f000 80c0 	beq.w	8007860 <_printf_i+0x1a8>
 80076e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076e8:	e03a      	b.n	8007760 <_printf_i+0xa8>
 80076ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076ee:	2b15      	cmp	r3, #21
 80076f0:	d8f6      	bhi.n	80076e0 <_printf_i+0x28>
 80076f2:	a101      	add	r1, pc, #4	; (adr r1, 80076f8 <_printf_i+0x40>)
 80076f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076f8:	08007751 	.word	0x08007751
 80076fc:	08007765 	.word	0x08007765
 8007700:	080076e1 	.word	0x080076e1
 8007704:	080076e1 	.word	0x080076e1
 8007708:	080076e1 	.word	0x080076e1
 800770c:	080076e1 	.word	0x080076e1
 8007710:	08007765 	.word	0x08007765
 8007714:	080076e1 	.word	0x080076e1
 8007718:	080076e1 	.word	0x080076e1
 800771c:	080076e1 	.word	0x080076e1
 8007720:	080076e1 	.word	0x080076e1
 8007724:	08007869 	.word	0x08007869
 8007728:	08007791 	.word	0x08007791
 800772c:	08007823 	.word	0x08007823
 8007730:	080076e1 	.word	0x080076e1
 8007734:	080076e1 	.word	0x080076e1
 8007738:	0800788b 	.word	0x0800788b
 800773c:	080076e1 	.word	0x080076e1
 8007740:	08007791 	.word	0x08007791
 8007744:	080076e1 	.word	0x080076e1
 8007748:	080076e1 	.word	0x080076e1
 800774c:	0800782b 	.word	0x0800782b
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	1d1a      	adds	r2, r3, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	602a      	str	r2, [r5, #0]
 8007758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800775c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007760:	2301      	movs	r3, #1
 8007762:	e09f      	b.n	80078a4 <_printf_i+0x1ec>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	0607      	lsls	r7, r0, #24
 800776a:	f103 0104 	add.w	r1, r3, #4
 800776e:	6029      	str	r1, [r5, #0]
 8007770:	d501      	bpl.n	8007776 <_printf_i+0xbe>
 8007772:	681e      	ldr	r6, [r3, #0]
 8007774:	e003      	b.n	800777e <_printf_i+0xc6>
 8007776:	0646      	lsls	r6, r0, #25
 8007778:	d5fb      	bpl.n	8007772 <_printf_i+0xba>
 800777a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800777e:	2e00      	cmp	r6, #0
 8007780:	da03      	bge.n	800778a <_printf_i+0xd2>
 8007782:	232d      	movs	r3, #45	; 0x2d
 8007784:	4276      	negs	r6, r6
 8007786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778a:	485a      	ldr	r0, [pc, #360]	; (80078f4 <_printf_i+0x23c>)
 800778c:	230a      	movs	r3, #10
 800778e:	e012      	b.n	80077b6 <_printf_i+0xfe>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	6820      	ldr	r0, [r4, #0]
 8007794:	1d19      	adds	r1, r3, #4
 8007796:	6029      	str	r1, [r5, #0]
 8007798:	0605      	lsls	r5, r0, #24
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0xe8>
 800779c:	681e      	ldr	r6, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0xee>
 80077a0:	0641      	lsls	r1, r0, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0xe4>
 80077a4:	881e      	ldrh	r6, [r3, #0]
 80077a6:	4853      	ldr	r0, [pc, #332]	; (80078f4 <_printf_i+0x23c>)
 80077a8:	2f6f      	cmp	r7, #111	; 0x6f
 80077aa:	bf0c      	ite	eq
 80077ac:	2308      	moveq	r3, #8
 80077ae:	230a      	movne	r3, #10
 80077b0:	2100      	movs	r1, #0
 80077b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077b6:	6865      	ldr	r5, [r4, #4]
 80077b8:	60a5      	str	r5, [r4, #8]
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	bfa2      	ittt	ge
 80077be:	6821      	ldrge	r1, [r4, #0]
 80077c0:	f021 0104 	bicge.w	r1, r1, #4
 80077c4:	6021      	strge	r1, [r4, #0]
 80077c6:	b90e      	cbnz	r6, 80077cc <_printf_i+0x114>
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	d04b      	beq.n	8007864 <_printf_i+0x1ac>
 80077cc:	4615      	mov	r5, r2
 80077ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80077d2:	fb03 6711 	mls	r7, r3, r1, r6
 80077d6:	5dc7      	ldrb	r7, [r0, r7]
 80077d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077dc:	4637      	mov	r7, r6
 80077de:	42bb      	cmp	r3, r7
 80077e0:	460e      	mov	r6, r1
 80077e2:	d9f4      	bls.n	80077ce <_printf_i+0x116>
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d10b      	bne.n	8007800 <_printf_i+0x148>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07de      	lsls	r6, r3, #31
 80077ec:	d508      	bpl.n	8007800 <_printf_i+0x148>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	6861      	ldr	r1, [r4, #4]
 80077f2:	4299      	cmp	r1, r3
 80077f4:	bfde      	ittt	le
 80077f6:	2330      	movle	r3, #48	; 0x30
 80077f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007800:	1b52      	subs	r2, r2, r5
 8007802:	6122      	str	r2, [r4, #16]
 8007804:	f8cd a000 	str.w	sl, [sp]
 8007808:	464b      	mov	r3, r9
 800780a:	aa03      	add	r2, sp, #12
 800780c:	4621      	mov	r1, r4
 800780e:	4640      	mov	r0, r8
 8007810:	f7ff fee4 	bl	80075dc <_printf_common>
 8007814:	3001      	adds	r0, #1
 8007816:	d14a      	bne.n	80078ae <_printf_i+0x1f6>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800781c:	b004      	add	sp, #16
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	f043 0320 	orr.w	r3, r3, #32
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	4833      	ldr	r0, [pc, #204]	; (80078f8 <_printf_i+0x240>)
 800782c:	2778      	movs	r7, #120	; 0x78
 800782e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	6829      	ldr	r1, [r5, #0]
 8007836:	061f      	lsls	r7, r3, #24
 8007838:	f851 6b04 	ldr.w	r6, [r1], #4
 800783c:	d402      	bmi.n	8007844 <_printf_i+0x18c>
 800783e:	065f      	lsls	r7, r3, #25
 8007840:	bf48      	it	mi
 8007842:	b2b6      	uxthmi	r6, r6
 8007844:	07df      	lsls	r7, r3, #31
 8007846:	bf48      	it	mi
 8007848:	f043 0320 	orrmi.w	r3, r3, #32
 800784c:	6029      	str	r1, [r5, #0]
 800784e:	bf48      	it	mi
 8007850:	6023      	strmi	r3, [r4, #0]
 8007852:	b91e      	cbnz	r6, 800785c <_printf_i+0x1a4>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	f023 0320 	bic.w	r3, r3, #32
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	2310      	movs	r3, #16
 800785e:	e7a7      	b.n	80077b0 <_printf_i+0xf8>
 8007860:	4824      	ldr	r0, [pc, #144]	; (80078f4 <_printf_i+0x23c>)
 8007862:	e7e4      	b.n	800782e <_printf_i+0x176>
 8007864:	4615      	mov	r5, r2
 8007866:	e7bd      	b.n	80077e4 <_printf_i+0x12c>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	6826      	ldr	r6, [r4, #0]
 800786c:	6961      	ldr	r1, [r4, #20]
 800786e:	1d18      	adds	r0, r3, #4
 8007870:	6028      	str	r0, [r5, #0]
 8007872:	0635      	lsls	r5, r6, #24
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	d501      	bpl.n	800787c <_printf_i+0x1c4>
 8007878:	6019      	str	r1, [r3, #0]
 800787a:	e002      	b.n	8007882 <_printf_i+0x1ca>
 800787c:	0670      	lsls	r0, r6, #25
 800787e:	d5fb      	bpl.n	8007878 <_printf_i+0x1c0>
 8007880:	8019      	strh	r1, [r3, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	4615      	mov	r5, r2
 8007888:	e7bc      	b.n	8007804 <_printf_i+0x14c>
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	1d1a      	adds	r2, r3, #4
 800788e:	602a      	str	r2, [r5, #0]
 8007890:	681d      	ldr	r5, [r3, #0]
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	2100      	movs	r1, #0
 8007896:	4628      	mov	r0, r5
 8007898:	f7f8 fca2 	bl	80001e0 <memchr>
 800789c:	b108      	cbz	r0, 80078a2 <_printf_i+0x1ea>
 800789e:	1b40      	subs	r0, r0, r5
 80078a0:	6060      	str	r0, [r4, #4]
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	2300      	movs	r3, #0
 80078a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ac:	e7aa      	b.n	8007804 <_printf_i+0x14c>
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	462a      	mov	r2, r5
 80078b2:	4649      	mov	r1, r9
 80078b4:	4640      	mov	r0, r8
 80078b6:	47d0      	blx	sl
 80078b8:	3001      	adds	r0, #1
 80078ba:	d0ad      	beq.n	8007818 <_printf_i+0x160>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	079b      	lsls	r3, r3, #30
 80078c0:	d413      	bmi.n	80078ea <_printf_i+0x232>
 80078c2:	68e0      	ldr	r0, [r4, #12]
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	4298      	cmp	r0, r3
 80078c8:	bfb8      	it	lt
 80078ca:	4618      	movlt	r0, r3
 80078cc:	e7a6      	b.n	800781c <_printf_i+0x164>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4632      	mov	r2, r6
 80078d2:	4649      	mov	r1, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	47d0      	blx	sl
 80078d8:	3001      	adds	r0, #1
 80078da:	d09d      	beq.n	8007818 <_printf_i+0x160>
 80078dc:	3501      	adds	r5, #1
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	9903      	ldr	r1, [sp, #12]
 80078e2:	1a5b      	subs	r3, r3, r1
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dcf2      	bgt.n	80078ce <_printf_i+0x216>
 80078e8:	e7eb      	b.n	80078c2 <_printf_i+0x20a>
 80078ea:	2500      	movs	r5, #0
 80078ec:	f104 0619 	add.w	r6, r4, #25
 80078f0:	e7f5      	b.n	80078de <_printf_i+0x226>
 80078f2:	bf00      	nop
 80078f4:	08009da2 	.word	0x08009da2
 80078f8:	08009db3 	.word	0x08009db3

080078fc <std>:
 80078fc:	2300      	movs	r3, #0
 80078fe:	b510      	push	{r4, lr}
 8007900:	4604      	mov	r4, r0
 8007902:	e9c0 3300 	strd	r3, r3, [r0]
 8007906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800790a:	6083      	str	r3, [r0, #8]
 800790c:	8181      	strh	r1, [r0, #12]
 800790e:	6643      	str	r3, [r0, #100]	; 0x64
 8007910:	81c2      	strh	r2, [r0, #14]
 8007912:	6183      	str	r3, [r0, #24]
 8007914:	4619      	mov	r1, r3
 8007916:	2208      	movs	r2, #8
 8007918:	305c      	adds	r0, #92	; 0x5c
 800791a:	f000 f916 	bl	8007b4a <memset>
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <std+0x38>)
 8007920:	6263      	str	r3, [r4, #36]	; 0x24
 8007922:	4b05      	ldr	r3, [pc, #20]	; (8007938 <std+0x3c>)
 8007924:	62a3      	str	r3, [r4, #40]	; 0x28
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <std+0x40>)
 8007928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <std+0x44>)
 800792c:	6224      	str	r4, [r4, #32]
 800792e:	6323      	str	r3, [r4, #48]	; 0x30
 8007930:	bd10      	pop	{r4, pc}
 8007932:	bf00      	nop
 8007934:	08007ac5 	.word	0x08007ac5
 8007938:	08007ae7 	.word	0x08007ae7
 800793c:	08007b1f 	.word	0x08007b1f
 8007940:	08007b43 	.word	0x08007b43

08007944 <stdio_exit_handler>:
 8007944:	4a02      	ldr	r2, [pc, #8]	; (8007950 <stdio_exit_handler+0xc>)
 8007946:	4903      	ldr	r1, [pc, #12]	; (8007954 <stdio_exit_handler+0x10>)
 8007948:	4803      	ldr	r0, [pc, #12]	; (8007958 <stdio_exit_handler+0x14>)
 800794a:	f000 b869 	b.w	8007a20 <_fwalk_sglue>
 800794e:	bf00      	nop
 8007950:	20000018 	.word	0x20000018
 8007954:	080095f1 	.word	0x080095f1
 8007958:	20000024 	.word	0x20000024

0800795c <cleanup_stdio>:
 800795c:	6841      	ldr	r1, [r0, #4]
 800795e:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <cleanup_stdio+0x34>)
 8007960:	4299      	cmp	r1, r3
 8007962:	b510      	push	{r4, lr}
 8007964:	4604      	mov	r4, r0
 8007966:	d001      	beq.n	800796c <cleanup_stdio+0x10>
 8007968:	f001 fe42 	bl	80095f0 <_fflush_r>
 800796c:	68a1      	ldr	r1, [r4, #8]
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <cleanup_stdio+0x38>)
 8007970:	4299      	cmp	r1, r3
 8007972:	d002      	beq.n	800797a <cleanup_stdio+0x1e>
 8007974:	4620      	mov	r0, r4
 8007976:	f001 fe3b 	bl	80095f0 <_fflush_r>
 800797a:	68e1      	ldr	r1, [r4, #12]
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <cleanup_stdio+0x3c>)
 800797e:	4299      	cmp	r1, r3
 8007980:	d004      	beq.n	800798c <cleanup_stdio+0x30>
 8007982:	4620      	mov	r0, r4
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	f001 be32 	b.w	80095f0 <_fflush_r>
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	200003ac 	.word	0x200003ac
 8007994:	20000414 	.word	0x20000414
 8007998:	2000047c 	.word	0x2000047c

0800799c <global_stdio_init.part.0>:
 800799c:	b510      	push	{r4, lr}
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <global_stdio_init.part.0+0x30>)
 80079a0:	4c0b      	ldr	r4, [pc, #44]	; (80079d0 <global_stdio_init.part.0+0x34>)
 80079a2:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <global_stdio_init.part.0+0x38>)
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	4620      	mov	r0, r4
 80079a8:	2200      	movs	r2, #0
 80079aa:	2104      	movs	r1, #4
 80079ac:	f7ff ffa6 	bl	80078fc <std>
 80079b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80079b4:	2201      	movs	r2, #1
 80079b6:	2109      	movs	r1, #9
 80079b8:	f7ff ffa0 	bl	80078fc <std>
 80079bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079c0:	2202      	movs	r2, #2
 80079c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c6:	2112      	movs	r1, #18
 80079c8:	f7ff bf98 	b.w	80078fc <std>
 80079cc:	200004e4 	.word	0x200004e4
 80079d0:	200003ac 	.word	0x200003ac
 80079d4:	08007945 	.word	0x08007945

080079d8 <__sfp_lock_acquire>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__sfp_lock_acquire+0x8>)
 80079da:	f000 b933 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	200004ed 	.word	0x200004ed

080079e4 <__sfp_lock_release>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__sfp_lock_release+0x8>)
 80079e6:	f000 b92e 	b.w	8007c46 <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	200004ed 	.word	0x200004ed

080079f0 <__sinit>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4604      	mov	r4, r0
 80079f4:	f7ff fff0 	bl	80079d8 <__sfp_lock_acquire>
 80079f8:	6a23      	ldr	r3, [r4, #32]
 80079fa:	b11b      	cbz	r3, 8007a04 <__sinit+0x14>
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f7ff bff0 	b.w	80079e4 <__sfp_lock_release>
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <__sinit+0x28>)
 8007a06:	6223      	str	r3, [r4, #32]
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <__sinit+0x2c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f5      	bne.n	80079fc <__sinit+0xc>
 8007a10:	f7ff ffc4 	bl	800799c <global_stdio_init.part.0>
 8007a14:	e7f2      	b.n	80079fc <__sinit+0xc>
 8007a16:	bf00      	nop
 8007a18:	0800795d 	.word	0x0800795d
 8007a1c:	200004e4 	.word	0x200004e4

08007a20 <_fwalk_sglue>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	4607      	mov	r7, r0
 8007a26:	4688      	mov	r8, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a30:	f1b9 0901 	subs.w	r9, r9, #1
 8007a34:	d505      	bpl.n	8007a42 <_fwalk_sglue+0x22>
 8007a36:	6824      	ldr	r4, [r4, #0]
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	d1f7      	bne.n	8007a2c <_fwalk_sglue+0xc>
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d907      	bls.n	8007a58 <_fwalk_sglue+0x38>
 8007a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	d003      	beq.n	8007a58 <_fwalk_sglue+0x38>
 8007a50:	4629      	mov	r1, r5
 8007a52:	4638      	mov	r0, r7
 8007a54:	47c0      	blx	r8
 8007a56:	4306      	orrs	r6, r0
 8007a58:	3568      	adds	r5, #104	; 0x68
 8007a5a:	e7e9      	b.n	8007a30 <_fwalk_sglue+0x10>

08007a5c <sniprintf>:
 8007a5c:	b40c      	push	{r2, r3}
 8007a5e:	b530      	push	{r4, r5, lr}
 8007a60:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <sniprintf+0x64>)
 8007a62:	1e0c      	subs	r4, r1, #0
 8007a64:	681d      	ldr	r5, [r3, #0]
 8007a66:	b09d      	sub	sp, #116	; 0x74
 8007a68:	da08      	bge.n	8007a7c <sniprintf+0x20>
 8007a6a:	238b      	movs	r3, #139	; 0x8b
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a72:	b01d      	add	sp, #116	; 0x74
 8007a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a78:	b002      	add	sp, #8
 8007a7a:	4770      	bx	lr
 8007a7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a84:	bf14      	ite	ne
 8007a86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007a8a:	4623      	moveq	r3, r4
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	9006      	str	r0, [sp, #24]
 8007a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a9e:	ab21      	add	r3, sp, #132	; 0x84
 8007aa0:	a902      	add	r1, sp, #8
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	f001 fc1f 	bl	80092e8 <_svfiprintf_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	bfbc      	itt	lt
 8007aae:	238b      	movlt	r3, #139	; 0x8b
 8007ab0:	602b      	strlt	r3, [r5, #0]
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	d0dd      	beq.n	8007a72 <sniprintf+0x16>
 8007ab6:	9b02      	ldr	r3, [sp, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e7d9      	b.n	8007a72 <sniprintf+0x16>
 8007abe:	bf00      	nop
 8007ac0:	20000070 	.word	0x20000070

08007ac4 <__sread>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007acc:	f000 f86c 	bl	8007ba8 <_read_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	bfab      	itete	ge
 8007ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad8:	181b      	addge	r3, r3, r0
 8007ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ade:	bfac      	ite	ge
 8007ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ae2:	81a3      	strhlt	r3, [r4, #12]
 8007ae4:	bd10      	pop	{r4, pc}

08007ae6 <__swrite>:
 8007ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	461f      	mov	r7, r3
 8007aec:	898b      	ldrh	r3, [r1, #12]
 8007aee:	05db      	lsls	r3, r3, #23
 8007af0:	4605      	mov	r5, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	4616      	mov	r6, r2
 8007af6:	d505      	bpl.n	8007b04 <__swrite+0x1e>
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	2302      	movs	r3, #2
 8007afe:	2200      	movs	r2, #0
 8007b00:	f000 f840 	bl	8007b84 <_lseek_r>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	4632      	mov	r2, r6
 8007b12:	463b      	mov	r3, r7
 8007b14:	4628      	mov	r0, r5
 8007b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	f000 b857 	b.w	8007bcc <_write_r>

08007b1e <__sseek>:
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	460c      	mov	r4, r1
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 f82d 	bl	8007b84 <_lseek_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	bf15      	itete	ne
 8007b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b3a:	81a3      	strheq	r3, [r4, #12]
 8007b3c:	bf18      	it	ne
 8007b3e:	81a3      	strhne	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__sclose>:
 8007b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b46:	f000 b80d 	b.w	8007b64 <_close_r>

08007b4a <memset>:
 8007b4a:	4402      	add	r2, r0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d100      	bne.n	8007b54 <memset+0xa>
 8007b52:	4770      	bx	lr
 8007b54:	f803 1b01 	strb.w	r1, [r3], #1
 8007b58:	e7f9      	b.n	8007b4e <memset+0x4>
	...

08007b5c <_localeconv_r>:
 8007b5c:	4800      	ldr	r0, [pc, #0]	; (8007b60 <_localeconv_r+0x4>)
 8007b5e:	4770      	bx	lr
 8007b60:	20000164 	.word	0x20000164

08007b64 <_close_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d06      	ldr	r5, [pc, #24]	; (8007b80 <_close_r+0x1c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	f7f9 fe83 	bl	800187a <_close>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_close_r+0x1a>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_close_r+0x1a>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200004e8 	.word	0x200004e8

08007b84 <_lseek_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	; (8007ba4 <_lseek_r+0x20>)
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f7f9 fe98 	bl	80018c8 <_lseek>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_lseek_r+0x1e>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_lseek_r+0x1e>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	200004e8 	.word	0x200004e8

08007ba8 <_read_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_read_r+0x20>)
 8007bac:	4604      	mov	r4, r0
 8007bae:	4608      	mov	r0, r1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f7f9 fe26 	bl	8001808 <_read>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_read_r+0x1e>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_read_r+0x1e>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	200004e8 	.word	0x200004e8

08007bcc <_write_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d07      	ldr	r5, [pc, #28]	; (8007bec <_write_r+0x20>)
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7f9 fe31 	bl	8001842 <_write>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_write_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_write_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200004e8 	.word	0x200004e8

08007bf0 <__errno>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	; (8007bf8 <__errno+0x8>)
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000070 	.word	0x20000070

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	4d0d      	ldr	r5, [pc, #52]	; (8007c34 <__libc_init_array+0x38>)
 8007c00:	4c0d      	ldr	r4, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c02:	1b64      	subs	r4, r4, r5
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	2600      	movs	r6, #0
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	4d0b      	ldr	r5, [pc, #44]	; (8007c3c <__libc_init_array+0x40>)
 8007c0e:	4c0c      	ldr	r4, [pc, #48]	; (8007c40 <__libc_init_array+0x44>)
 8007c10:	f002 f892 	bl	8009d38 <_init>
 8007c14:	1b64      	subs	r4, r4, r5
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	2600      	movs	r6, #0
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	0800a10c 	.word	0x0800a10c
 8007c38:	0800a10c 	.word	0x0800a10c
 8007c3c:	0800a10c 	.word	0x0800a10c
 8007c40:	0800a110 	.word	0x0800a110

08007c44 <__retarget_lock_acquire_recursive>:
 8007c44:	4770      	bx	lr

08007c46 <__retarget_lock_release_recursive>:
 8007c46:	4770      	bx	lr

08007c48 <quorem>:
 8007c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	6903      	ldr	r3, [r0, #16]
 8007c4e:	690c      	ldr	r4, [r1, #16]
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	4607      	mov	r7, r0
 8007c54:	db7e      	blt.n	8007d54 <quorem+0x10c>
 8007c56:	3c01      	subs	r4, #1
 8007c58:	f101 0814 	add.w	r8, r1, #20
 8007c5c:	f100 0514 	add.w	r5, r0, #20
 8007c60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	429a      	cmp	r2, r3
 8007c72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c7e:	d331      	bcc.n	8007ce4 <quorem+0x9c>
 8007c80:	f04f 0e00 	mov.w	lr, #0
 8007c84:	4640      	mov	r0, r8
 8007c86:	46ac      	mov	ip, r5
 8007c88:	46f2      	mov	sl, lr
 8007c8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c8e:	b293      	uxth	r3, r2
 8007c90:	fb06 e303 	mla	r3, r6, r3, lr
 8007c94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c98:	0c1a      	lsrs	r2, r3, #16
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007ca0:	f8dc a000 	ldr.w	sl, [ip]
 8007ca4:	fa13 f38a 	uxtah	r3, r3, sl
 8007ca8:	fb06 220e 	mla	r2, r6, lr, r2
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cb4:	b292      	uxth	r2, r2
 8007cb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cbe:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cc2:	4581      	cmp	r9, r0
 8007cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cc8:	f84c 3b04 	str.w	r3, [ip], #4
 8007ccc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cd0:	d2db      	bcs.n	8007c8a <quorem+0x42>
 8007cd2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cd6:	b92b      	cbnz	r3, 8007ce4 <quorem+0x9c>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	d32c      	bcc.n	8007d3c <quorem+0xf4>
 8007ce2:	613c      	str	r4, [r7, #16]
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f001 f9a5 	bl	8009034 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	db22      	blt.n	8007d34 <quorem+0xec>
 8007cee:	3601      	adds	r6, #1
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cf8:	f8d1 c000 	ldr.w	ip, [r1]
 8007cfc:	b293      	uxth	r3, r2
 8007cfe:	1ac3      	subs	r3, r0, r3
 8007d00:	0c12      	lsrs	r2, r2, #16
 8007d02:	fa13 f38c 	uxtah	r3, r3, ip
 8007d06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d14:	45c1      	cmp	r9, r8
 8007d16:	f841 3b04 	str.w	r3, [r1], #4
 8007d1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d1e:	d2e9      	bcs.n	8007cf4 <quorem+0xac>
 8007d20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d28:	b922      	cbnz	r2, 8007d34 <quorem+0xec>
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	429d      	cmp	r5, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	d30a      	bcc.n	8007d48 <quorem+0x100>
 8007d32:	613c      	str	r4, [r7, #16]
 8007d34:	4630      	mov	r0, r6
 8007d36:	b003      	add	sp, #12
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	3b04      	subs	r3, #4
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	d1ce      	bne.n	8007ce2 <quorem+0x9a>
 8007d44:	3c01      	subs	r4, #1
 8007d46:	e7c9      	b.n	8007cdc <quorem+0x94>
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	3b04      	subs	r3, #4
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	d1f0      	bne.n	8007d32 <quorem+0xea>
 8007d50:	3c01      	subs	r4, #1
 8007d52:	e7eb      	b.n	8007d2c <quorem+0xe4>
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7ee      	b.n	8007d36 <quorem+0xee>

08007d58 <_dtoa_r>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	ed2d 8b04 	vpush	{d8-d9}
 8007d60:	69c5      	ldr	r5, [r0, #28]
 8007d62:	b093      	sub	sp, #76	; 0x4c
 8007d64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d68:	ec57 6b10 	vmov	r6, r7, d0
 8007d6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d70:	9107      	str	r1, [sp, #28]
 8007d72:	4604      	mov	r4, r0
 8007d74:	920a      	str	r2, [sp, #40]	; 0x28
 8007d76:	930d      	str	r3, [sp, #52]	; 0x34
 8007d78:	b975      	cbnz	r5, 8007d98 <_dtoa_r+0x40>
 8007d7a:	2010      	movs	r0, #16
 8007d7c:	f000 fe2a 	bl	80089d4 <malloc>
 8007d80:	4602      	mov	r2, r0
 8007d82:	61e0      	str	r0, [r4, #28]
 8007d84:	b920      	cbnz	r0, 8007d90 <_dtoa_r+0x38>
 8007d86:	4bae      	ldr	r3, [pc, #696]	; (8008040 <_dtoa_r+0x2e8>)
 8007d88:	21ef      	movs	r1, #239	; 0xef
 8007d8a:	48ae      	ldr	r0, [pc, #696]	; (8008044 <_dtoa_r+0x2ec>)
 8007d8c:	f001 fc90 	bl	80096b0 <__assert_func>
 8007d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d94:	6005      	str	r5, [r0, #0]
 8007d96:	60c5      	str	r5, [r0, #12]
 8007d98:	69e3      	ldr	r3, [r4, #28]
 8007d9a:	6819      	ldr	r1, [r3, #0]
 8007d9c:	b151      	cbz	r1, 8007db4 <_dtoa_r+0x5c>
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	604a      	str	r2, [r1, #4]
 8007da2:	2301      	movs	r3, #1
 8007da4:	4093      	lsls	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 ff07 	bl	8008bbc <_Bfree>
 8007dae:	69e3      	ldr	r3, [r4, #28]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	1e3b      	subs	r3, r7, #0
 8007db6:	bfbb      	ittet	lt
 8007db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dbc:	9303      	strlt	r3, [sp, #12]
 8007dbe:	2300      	movge	r3, #0
 8007dc0:	2201      	movlt	r2, #1
 8007dc2:	bfac      	ite	ge
 8007dc4:	f8c8 3000 	strge.w	r3, [r8]
 8007dc8:	f8c8 2000 	strlt.w	r2, [r8]
 8007dcc:	4b9e      	ldr	r3, [pc, #632]	; (8008048 <_dtoa_r+0x2f0>)
 8007dce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007dd2:	ea33 0308 	bics.w	r3, r3, r8
 8007dd6:	d11b      	bne.n	8007e10 <_dtoa_r+0xb8>
 8007dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007de4:	4333      	orrs	r3, r6
 8007de6:	f000 8593 	beq.w	8008910 <_dtoa_r+0xbb8>
 8007dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dec:	b963      	cbnz	r3, 8007e08 <_dtoa_r+0xb0>
 8007dee:	4b97      	ldr	r3, [pc, #604]	; (800804c <_dtoa_r+0x2f4>)
 8007df0:	e027      	b.n	8007e42 <_dtoa_r+0xea>
 8007df2:	4b97      	ldr	r3, [pc, #604]	; (8008050 <_dtoa_r+0x2f8>)
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	9800      	ldr	r0, [sp, #0]
 8007dfe:	b013      	add	sp, #76	; 0x4c
 8007e00:	ecbd 8b04 	vpop	{d8-d9}
 8007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e08:	4b90      	ldr	r3, [pc, #576]	; (800804c <_dtoa_r+0x2f4>)
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	3303      	adds	r3, #3
 8007e0e:	e7f3      	b.n	8007df8 <_dtoa_r+0xa0>
 8007e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e14:	2200      	movs	r2, #0
 8007e16:	ec51 0b17 	vmov	r0, r1, d7
 8007e1a:	eeb0 8a47 	vmov.f32	s16, s14
 8007e1e:	eef0 8a67 	vmov.f32	s17, s15
 8007e22:	2300      	movs	r3, #0
 8007e24:	f7f8 fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e28:	4681      	mov	r9, r0
 8007e2a:	b160      	cbz	r0, 8007e46 <_dtoa_r+0xee>
 8007e2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8568 	beq.w	800890a <_dtoa_r+0xbb2>
 8007e3a:	4b86      	ldr	r3, [pc, #536]	; (8008054 <_dtoa_r+0x2fc>)
 8007e3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	e7da      	b.n	8007dfc <_dtoa_r+0xa4>
 8007e46:	aa10      	add	r2, sp, #64	; 0x40
 8007e48:	a911      	add	r1, sp, #68	; 0x44
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e50:	eef0 0a68 	vmov.f32	s1, s17
 8007e54:	f001 f994 	bl	8009180 <__d2b>
 8007e58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	d07f      	beq.n	8007f62 <_dtoa_r+0x20a>
 8007e62:	ee18 3a90 	vmov	r3, s17
 8007e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e6e:	ec51 0b18 	vmov	r0, r1, d8
 8007e72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e7e:	4619      	mov	r1, r3
 8007e80:	2200      	movs	r2, #0
 8007e82:	4b75      	ldr	r3, [pc, #468]	; (8008058 <_dtoa_r+0x300>)
 8007e84:	f7f8 fa08 	bl	8000298 <__aeabi_dsub>
 8007e88:	a367      	add	r3, pc, #412	; (adr r3, 8008028 <_dtoa_r+0x2d0>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fbbb 	bl	8000608 <__aeabi_dmul>
 8007e92:	a367      	add	r3, pc, #412	; (adr r3, 8008030 <_dtoa_r+0x2d8>)
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f7f8 fa00 	bl	800029c <__adddf3>
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	f7f8 fb47 	bl	8000534 <__aeabi_i2d>
 8007ea6:	a364      	add	r3, pc, #400	; (adr r3, 8008038 <_dtoa_r+0x2e0>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 fbac 	bl	8000608 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f7f8 f9f0 	bl	800029c <__adddf3>
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	f7f8 fe52 	bl	8000b68 <__aeabi_d2iz>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4683      	mov	fp, r0
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 fe0d 	bl	8000aec <__aeabi_dcmplt>
 8007ed2:	b148      	cbz	r0, 8007ee8 <_dtoa_r+0x190>
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	f7f8 fb2d 	bl	8000534 <__aeabi_i2d>
 8007eda:	4632      	mov	r2, r6
 8007edc:	463b      	mov	r3, r7
 8007ede:	f7f8 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ee2:	b908      	cbnz	r0, 8007ee8 <_dtoa_r+0x190>
 8007ee4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007ee8:	f1bb 0f16 	cmp.w	fp, #22
 8007eec:	d857      	bhi.n	8007f9e <_dtoa_r+0x246>
 8007eee:	4b5b      	ldr	r3, [pc, #364]	; (800805c <_dtoa_r+0x304>)
 8007ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	ec51 0b18 	vmov	r0, r1, d8
 8007efc:	f7f8 fdf6 	bl	8000aec <__aeabi_dcmplt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d04e      	beq.n	8007fa2 <_dtoa_r+0x24a>
 8007f04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007f08:	2300      	movs	r3, #0
 8007f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0e:	1b5b      	subs	r3, r3, r5
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	bf45      	ittet	mi
 8007f14:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f18:	9305      	strmi	r3, [sp, #20]
 8007f1a:	2300      	movpl	r3, #0
 8007f1c:	2300      	movmi	r3, #0
 8007f1e:	9206      	str	r2, [sp, #24]
 8007f20:	bf54      	ite	pl
 8007f22:	9305      	strpl	r3, [sp, #20]
 8007f24:	9306      	strmi	r3, [sp, #24]
 8007f26:	f1bb 0f00 	cmp.w	fp, #0
 8007f2a:	db3c      	blt.n	8007fa6 <_dtoa_r+0x24e>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007f32:	445b      	add	r3, fp
 8007f34:	9306      	str	r3, [sp, #24]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9308      	str	r3, [sp, #32]
 8007f3a:	9b07      	ldr	r3, [sp, #28]
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	d868      	bhi.n	8008012 <_dtoa_r+0x2ba>
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	bfc4      	itt	gt
 8007f44:	3b04      	subgt	r3, #4
 8007f46:	9307      	strgt	r3, [sp, #28]
 8007f48:	9b07      	ldr	r3, [sp, #28]
 8007f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f4e:	bfcc      	ite	gt
 8007f50:	2500      	movgt	r5, #0
 8007f52:	2501      	movle	r5, #1
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	f200 8085 	bhi.w	8008064 <_dtoa_r+0x30c>
 8007f5a:	e8df f003 	tbb	[pc, r3]
 8007f5e:	3b2e      	.short	0x3b2e
 8007f60:	5839      	.short	0x5839
 8007f62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f66:	441d      	add	r5, r3
 8007f68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	bfc1      	itttt	gt
 8007f70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f74:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007f7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f80:	bfd6      	itet	le
 8007f82:	f1c3 0320 	rsble	r3, r3, #32
 8007f86:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f8a:	fa06 f003 	lslle.w	r0, r6, r3
 8007f8e:	f7f8 fac1 	bl	8000514 <__aeabi_ui2d>
 8007f92:	2201      	movs	r2, #1
 8007f94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007f98:	3d01      	subs	r5, #1
 8007f9a:	920e      	str	r2, [sp, #56]	; 0x38
 8007f9c:	e76f      	b.n	8007e7e <_dtoa_r+0x126>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e7b3      	b.n	8007f0a <_dtoa_r+0x1b2>
 8007fa2:	900c      	str	r0, [sp, #48]	; 0x30
 8007fa4:	e7b2      	b.n	8007f0c <_dtoa_r+0x1b4>
 8007fa6:	9b05      	ldr	r3, [sp, #20]
 8007fa8:	eba3 030b 	sub.w	r3, r3, fp
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	f1cb 0300 	rsb	r3, fp, #0
 8007fb2:	9308      	str	r3, [sp, #32]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fb8:	e7bf      	b.n	8007f3a <_dtoa_r+0x1e2>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc52      	bgt.n	800806a <_dtoa_r+0x312>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8007fce:	e00b      	b.n	8007fe8 <_dtoa_r+0x290>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7f3      	b.n	8007fbc <_dtoa_r+0x264>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fda:	445b      	add	r3, fp
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	bfb8      	it	lt
 8007fe6:	2301      	movlt	r3, #1
 8007fe8:	69e0      	ldr	r0, [r4, #28]
 8007fea:	2100      	movs	r1, #0
 8007fec:	2204      	movs	r2, #4
 8007fee:	f102 0614 	add.w	r6, r2, #20
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	d93d      	bls.n	8008072 <_dtoa_r+0x31a>
 8007ff6:	6041      	str	r1, [r0, #4]
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fd9f 	bl	8008b3c <_Balloc>
 8007ffe:	9000      	str	r0, [sp, #0]
 8008000:	2800      	cmp	r0, #0
 8008002:	d139      	bne.n	8008078 <_dtoa_r+0x320>
 8008004:	4b16      	ldr	r3, [pc, #88]	; (8008060 <_dtoa_r+0x308>)
 8008006:	4602      	mov	r2, r0
 8008008:	f240 11af 	movw	r1, #431	; 0x1af
 800800c:	e6bd      	b.n	8007d8a <_dtoa_r+0x32>
 800800e:	2301      	movs	r3, #1
 8008010:	e7e1      	b.n	8007fd6 <_dtoa_r+0x27e>
 8008012:	2501      	movs	r5, #1
 8008014:	2300      	movs	r3, #0
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	9509      	str	r5, [sp, #36]	; 0x24
 800801a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	2200      	movs	r2, #0
 8008024:	2312      	movs	r3, #18
 8008026:	e7d1      	b.n	8007fcc <_dtoa_r+0x274>
 8008028:	636f4361 	.word	0x636f4361
 800802c:	3fd287a7 	.word	0x3fd287a7
 8008030:	8b60c8b3 	.word	0x8b60c8b3
 8008034:	3fc68a28 	.word	0x3fc68a28
 8008038:	509f79fb 	.word	0x509f79fb
 800803c:	3fd34413 	.word	0x3fd34413
 8008040:	08009dd1 	.word	0x08009dd1
 8008044:	08009de8 	.word	0x08009de8
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	08009dcd 	.word	0x08009dcd
 8008050:	08009dc4 	.word	0x08009dc4
 8008054:	08009da1 	.word	0x08009da1
 8008058:	3ff80000 	.word	0x3ff80000
 800805c:	08009ed8 	.word	0x08009ed8
 8008060:	08009e40 	.word	0x08009e40
 8008064:	2301      	movs	r3, #1
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	e7d7      	b.n	800801a <_dtoa_r+0x2c2>
 800806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	e7ba      	b.n	8007fe8 <_dtoa_r+0x290>
 8008072:	3101      	adds	r1, #1
 8008074:	0052      	lsls	r2, r2, #1
 8008076:	e7ba      	b.n	8007fee <_dtoa_r+0x296>
 8008078:	69e3      	ldr	r3, [r4, #28]
 800807a:	9a00      	ldr	r2, [sp, #0]
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	2b0e      	cmp	r3, #14
 8008082:	f200 80a8 	bhi.w	80081d6 <_dtoa_r+0x47e>
 8008086:	2d00      	cmp	r5, #0
 8008088:	f000 80a5 	beq.w	80081d6 <_dtoa_r+0x47e>
 800808c:	f1bb 0f00 	cmp.w	fp, #0
 8008090:	dd38      	ble.n	8008104 <_dtoa_r+0x3ac>
 8008092:	4bc0      	ldr	r3, [pc, #768]	; (8008394 <_dtoa_r+0x63c>)
 8008094:	f00b 020f 	and.w	r2, fp, #15
 8008098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800809c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80080a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80080a8:	d019      	beq.n	80080de <_dtoa_r+0x386>
 80080aa:	4bbb      	ldr	r3, [pc, #748]	; (8008398 <_dtoa_r+0x640>)
 80080ac:	ec51 0b18 	vmov	r0, r1, d8
 80080b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080b4:	f7f8 fbd2 	bl	800085c <__aeabi_ddiv>
 80080b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080bc:	f008 080f 	and.w	r8, r8, #15
 80080c0:	2503      	movs	r5, #3
 80080c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008398 <_dtoa_r+0x640>
 80080c6:	f1b8 0f00 	cmp.w	r8, #0
 80080ca:	d10a      	bne.n	80080e2 <_dtoa_r+0x38a>
 80080cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	f7f8 fbc2 	bl	800085c <__aeabi_ddiv>
 80080d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080dc:	e02b      	b.n	8008136 <_dtoa_r+0x3de>
 80080de:	2502      	movs	r5, #2
 80080e0:	e7ef      	b.n	80080c2 <_dtoa_r+0x36a>
 80080e2:	f018 0f01 	tst.w	r8, #1
 80080e6:	d008      	beq.n	80080fa <_dtoa_r+0x3a2>
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080f0:	f7f8 fa8a 	bl	8000608 <__aeabi_dmul>
 80080f4:	3501      	adds	r5, #1
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080fe:	f109 0908 	add.w	r9, r9, #8
 8008102:	e7e0      	b.n	80080c6 <_dtoa_r+0x36e>
 8008104:	f000 809f 	beq.w	8008246 <_dtoa_r+0x4ee>
 8008108:	f1cb 0600 	rsb	r6, fp, #0
 800810c:	4ba1      	ldr	r3, [pc, #644]	; (8008394 <_dtoa_r+0x63c>)
 800810e:	4fa2      	ldr	r7, [pc, #648]	; (8008398 <_dtoa_r+0x640>)
 8008110:	f006 020f 	and.w	r2, r6, #15
 8008114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	ec51 0b18 	vmov	r0, r1, d8
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008128:	1136      	asrs	r6, r6, #4
 800812a:	2300      	movs	r3, #0
 800812c:	2502      	movs	r5, #2
 800812e:	2e00      	cmp	r6, #0
 8008130:	d17e      	bne.n	8008230 <_dtoa_r+0x4d8>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d0      	bne.n	80080d8 <_dtoa_r+0x380>
 8008136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008138:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8084 	beq.w	800824a <_dtoa_r+0x4f2>
 8008142:	4b96      	ldr	r3, [pc, #600]	; (800839c <_dtoa_r+0x644>)
 8008144:	2200      	movs	r2, #0
 8008146:	4640      	mov	r0, r8
 8008148:	4649      	mov	r1, r9
 800814a:	f7f8 fccf 	bl	8000aec <__aeabi_dcmplt>
 800814e:	2800      	cmp	r0, #0
 8008150:	d07b      	beq.n	800824a <_dtoa_r+0x4f2>
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d078      	beq.n	800824a <_dtoa_r+0x4f2>
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd39      	ble.n	80081d2 <_dtoa_r+0x47a>
 800815e:	4b90      	ldr	r3, [pc, #576]	; (80083a0 <_dtoa_r+0x648>)
 8008160:	2200      	movs	r2, #0
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 fa4f 	bl	8000608 <__aeabi_dmul>
 800816a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800816e:	9e01      	ldr	r6, [sp, #4]
 8008170:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008174:	3501      	adds	r5, #1
 8008176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800817a:	4628      	mov	r0, r5
 800817c:	f7f8 f9da 	bl	8000534 <__aeabi_i2d>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	f7f8 fa40 	bl	8000608 <__aeabi_dmul>
 8008188:	4b86      	ldr	r3, [pc, #536]	; (80083a4 <_dtoa_r+0x64c>)
 800818a:	2200      	movs	r2, #0
 800818c:	f7f8 f886 	bl	800029c <__adddf3>
 8008190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	2e00      	cmp	r6, #0
 800819c:	d158      	bne.n	8008250 <_dtoa_r+0x4f8>
 800819e:	4b82      	ldr	r3, [pc, #520]	; (80083a8 <_dtoa_r+0x650>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	f7f8 f877 	bl	8000298 <__aeabi_dsub>
 80081aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081ae:	4680      	mov	r8, r0
 80081b0:	4689      	mov	r9, r1
 80081b2:	f7f8 fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f040 8296 	bne.w	80086e8 <_dtoa_r+0x990>
 80081bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081c0:	4640      	mov	r0, r8
 80081c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081c6:	4649      	mov	r1, r9
 80081c8:	f7f8 fc90 	bl	8000aec <__aeabi_dcmplt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f040 8289 	bne.w	80086e4 <_dtoa_r+0x98c>
 80081d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80081d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f2c0 814e 	blt.w	800847a <_dtoa_r+0x722>
 80081de:	f1bb 0f0e 	cmp.w	fp, #14
 80081e2:	f300 814a 	bgt.w	800847a <_dtoa_r+0x722>
 80081e6:	4b6b      	ldr	r3, [pc, #428]	; (8008394 <_dtoa_r+0x63c>)
 80081e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f280 80dc 	bge.w	80083b0 <_dtoa_r+0x658>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f300 80d8 	bgt.w	80083b0 <_dtoa_r+0x658>
 8008200:	f040 826f 	bne.w	80086e2 <_dtoa_r+0x98a>
 8008204:	4b68      	ldr	r3, [pc, #416]	; (80083a8 <_dtoa_r+0x650>)
 8008206:	2200      	movs	r2, #0
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f7f8 f9fc 	bl	8000608 <__aeabi_dmul>
 8008210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008214:	f7f8 fc7e 	bl	8000b14 <__aeabi_dcmpge>
 8008218:	9e04      	ldr	r6, [sp, #16]
 800821a:	4637      	mov	r7, r6
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 8245 	bne.w	80086ac <_dtoa_r+0x954>
 8008222:	9d00      	ldr	r5, [sp, #0]
 8008224:	2331      	movs	r3, #49	; 0x31
 8008226:	f805 3b01 	strb.w	r3, [r5], #1
 800822a:	f10b 0b01 	add.w	fp, fp, #1
 800822e:	e241      	b.n	80086b4 <_dtoa_r+0x95c>
 8008230:	07f2      	lsls	r2, r6, #31
 8008232:	d505      	bpl.n	8008240 <_dtoa_r+0x4e8>
 8008234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	3501      	adds	r5, #1
 800823e:	2301      	movs	r3, #1
 8008240:	1076      	asrs	r6, r6, #1
 8008242:	3708      	adds	r7, #8
 8008244:	e773      	b.n	800812e <_dtoa_r+0x3d6>
 8008246:	2502      	movs	r5, #2
 8008248:	e775      	b.n	8008136 <_dtoa_r+0x3de>
 800824a:	9e04      	ldr	r6, [sp, #16]
 800824c:	465f      	mov	r7, fp
 800824e:	e792      	b.n	8008176 <_dtoa_r+0x41e>
 8008250:	9900      	ldr	r1, [sp, #0]
 8008252:	4b50      	ldr	r3, [pc, #320]	; (8008394 <_dtoa_r+0x63c>)
 8008254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008258:	4431      	add	r1, r6
 800825a:	9102      	str	r1, [sp, #8]
 800825c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800825e:	eeb0 9a47 	vmov.f32	s18, s14
 8008262:	eef0 9a67 	vmov.f32	s19, s15
 8008266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800826a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800826e:	2900      	cmp	r1, #0
 8008270:	d044      	beq.n	80082fc <_dtoa_r+0x5a4>
 8008272:	494e      	ldr	r1, [pc, #312]	; (80083ac <_dtoa_r+0x654>)
 8008274:	2000      	movs	r0, #0
 8008276:	f7f8 faf1 	bl	800085c <__aeabi_ddiv>
 800827a:	ec53 2b19 	vmov	r2, r3, d9
 800827e:	f7f8 f80b 	bl	8000298 <__aeabi_dsub>
 8008282:	9d00      	ldr	r5, [sp, #0]
 8008284:	ec41 0b19 	vmov	d9, r0, r1
 8008288:	4649      	mov	r1, r9
 800828a:	4640      	mov	r0, r8
 800828c:	f7f8 fc6c 	bl	8000b68 <__aeabi_d2iz>
 8008290:	4606      	mov	r6, r0
 8008292:	f7f8 f94f 	bl	8000534 <__aeabi_i2d>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f7 fffb 	bl	8000298 <__aeabi_dsub>
 80082a2:	3630      	adds	r6, #48	; 0x30
 80082a4:	f805 6b01 	strb.w	r6, [r5], #1
 80082a8:	ec53 2b19 	vmov	r2, r3, d9
 80082ac:	4680      	mov	r8, r0
 80082ae:	4689      	mov	r9, r1
 80082b0:	f7f8 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d164      	bne.n	8008382 <_dtoa_r+0x62a>
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	4937      	ldr	r1, [pc, #220]	; (800839c <_dtoa_r+0x644>)
 80082be:	2000      	movs	r0, #0
 80082c0:	f7f7 ffea 	bl	8000298 <__aeabi_dsub>
 80082c4:	ec53 2b19 	vmov	r2, r3, d9
 80082c8:	f7f8 fc10 	bl	8000aec <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 80b6 	bne.w	800843e <_dtoa_r+0x6e6>
 80082d2:	9b02      	ldr	r3, [sp, #8]
 80082d4:	429d      	cmp	r5, r3
 80082d6:	f43f af7c 	beq.w	80081d2 <_dtoa_r+0x47a>
 80082da:	4b31      	ldr	r3, [pc, #196]	; (80083a0 <_dtoa_r+0x648>)
 80082dc:	ec51 0b19 	vmov	r0, r1, d9
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f8 f991 	bl	8000608 <__aeabi_dmul>
 80082e6:	4b2e      	ldr	r3, [pc, #184]	; (80083a0 <_dtoa_r+0x648>)
 80082e8:	ec41 0b19 	vmov	d9, r0, r1
 80082ec:	2200      	movs	r2, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f8 f989 	bl	8000608 <__aeabi_dmul>
 80082f6:	4680      	mov	r8, r0
 80082f8:	4689      	mov	r9, r1
 80082fa:	e7c5      	b.n	8008288 <_dtoa_r+0x530>
 80082fc:	ec51 0b17 	vmov	r0, r1, d7
 8008300:	f7f8 f982 	bl	8000608 <__aeabi_dmul>
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	9d00      	ldr	r5, [sp, #0]
 8008308:	930f      	str	r3, [sp, #60]	; 0x3c
 800830a:	ec41 0b19 	vmov	d9, r0, r1
 800830e:	4649      	mov	r1, r9
 8008310:	4640      	mov	r0, r8
 8008312:	f7f8 fc29 	bl	8000b68 <__aeabi_d2iz>
 8008316:	4606      	mov	r6, r0
 8008318:	f7f8 f90c 	bl	8000534 <__aeabi_i2d>
 800831c:	3630      	adds	r6, #48	; 0x30
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f7 ffb7 	bl	8000298 <__aeabi_dsub>
 800832a:	f805 6b01 	strb.w	r6, [r5], #1
 800832e:	9b02      	ldr	r3, [sp, #8]
 8008330:	429d      	cmp	r5, r3
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	d124      	bne.n	8008386 <_dtoa_r+0x62e>
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <_dtoa_r+0x654>)
 800833e:	ec51 0b19 	vmov	r0, r1, d9
 8008342:	f7f7 ffab 	bl	800029c <__adddf3>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f8 fbeb 	bl	8000b28 <__aeabi_dcmpgt>
 8008352:	2800      	cmp	r0, #0
 8008354:	d173      	bne.n	800843e <_dtoa_r+0x6e6>
 8008356:	ec53 2b19 	vmov	r2, r3, d9
 800835a:	4914      	ldr	r1, [pc, #80]	; (80083ac <_dtoa_r+0x654>)
 800835c:	2000      	movs	r0, #0
 800835e:	f7f7 ff9b 	bl	8000298 <__aeabi_dsub>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f8 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	f43f af2f 	beq.w	80081d2 <_dtoa_r+0x47a>
 8008374:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008376:	1e6b      	subs	r3, r5, #1
 8008378:	930f      	str	r3, [sp, #60]	; 0x3c
 800837a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	d0f8      	beq.n	8008374 <_dtoa_r+0x61c>
 8008382:	46bb      	mov	fp, r7
 8008384:	e04a      	b.n	800841c <_dtoa_r+0x6c4>
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <_dtoa_r+0x648>)
 8008388:	f7f8 f93e 	bl	8000608 <__aeabi_dmul>
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	e7bd      	b.n	800830e <_dtoa_r+0x5b6>
 8008392:	bf00      	nop
 8008394:	08009ed8 	.word	0x08009ed8
 8008398:	08009eb0 	.word	0x08009eb0
 800839c:	3ff00000 	.word	0x3ff00000
 80083a0:	40240000 	.word	0x40240000
 80083a4:	401c0000 	.word	0x401c0000
 80083a8:	40140000 	.word	0x40140000
 80083ac:	3fe00000 	.word	0x3fe00000
 80083b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083b4:	9d00      	ldr	r5, [sp, #0]
 80083b6:	4642      	mov	r2, r8
 80083b8:	464b      	mov	r3, r9
 80083ba:	4630      	mov	r0, r6
 80083bc:	4639      	mov	r1, r7
 80083be:	f7f8 fa4d 	bl	800085c <__aeabi_ddiv>
 80083c2:	f7f8 fbd1 	bl	8000b68 <__aeabi_d2iz>
 80083c6:	9001      	str	r0, [sp, #4]
 80083c8:	f7f8 f8b4 	bl	8000534 <__aeabi_i2d>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	f7f8 f91a 	bl	8000608 <__aeabi_dmul>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f7 ff5c 	bl	8000298 <__aeabi_dsub>
 80083e0:	9e01      	ldr	r6, [sp, #4]
 80083e2:	9f04      	ldr	r7, [sp, #16]
 80083e4:	3630      	adds	r6, #48	; 0x30
 80083e6:	f805 6b01 	strb.w	r6, [r5], #1
 80083ea:	9e00      	ldr	r6, [sp, #0]
 80083ec:	1bae      	subs	r6, r5, r6
 80083ee:	42b7      	cmp	r7, r6
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	d134      	bne.n	8008460 <_dtoa_r+0x708>
 80083f6:	f7f7 ff51 	bl	800029c <__adddf3>
 80083fa:	4642      	mov	r2, r8
 80083fc:	464b      	mov	r3, r9
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	f7f8 fb91 	bl	8000b28 <__aeabi_dcmpgt>
 8008406:	b9c8      	cbnz	r0, 800843c <_dtoa_r+0x6e4>
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f8 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008414:	b110      	cbz	r0, 800841c <_dtoa_r+0x6c4>
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	07db      	lsls	r3, r3, #31
 800841a:	d40f      	bmi.n	800843c <_dtoa_r+0x6e4>
 800841c:	4651      	mov	r1, sl
 800841e:	4620      	mov	r0, r4
 8008420:	f000 fbcc 	bl	8008bbc <_Bfree>
 8008424:	2300      	movs	r3, #0
 8008426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008428:	702b      	strb	r3, [r5, #0]
 800842a:	f10b 0301 	add.w	r3, fp, #1
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008432:	2b00      	cmp	r3, #0
 8008434:	f43f ace2 	beq.w	8007dfc <_dtoa_r+0xa4>
 8008438:	601d      	str	r5, [r3, #0]
 800843a:	e4df      	b.n	8007dfc <_dtoa_r+0xa4>
 800843c:	465f      	mov	r7, fp
 800843e:	462b      	mov	r3, r5
 8008440:	461d      	mov	r5, r3
 8008442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008446:	2a39      	cmp	r2, #57	; 0x39
 8008448:	d106      	bne.n	8008458 <_dtoa_r+0x700>
 800844a:	9a00      	ldr	r2, [sp, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d1f7      	bne.n	8008440 <_dtoa_r+0x6e8>
 8008450:	9900      	ldr	r1, [sp, #0]
 8008452:	2230      	movs	r2, #48	; 0x30
 8008454:	3701      	adds	r7, #1
 8008456:	700a      	strb	r2, [r1, #0]
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	3201      	adds	r2, #1
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	e790      	b.n	8008382 <_dtoa_r+0x62a>
 8008460:	4ba3      	ldr	r3, [pc, #652]	; (80086f0 <_dtoa_r+0x998>)
 8008462:	2200      	movs	r2, #0
 8008464:	f7f8 f8d0 	bl	8000608 <__aeabi_dmul>
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	f7f8 fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008474:	2800      	cmp	r0, #0
 8008476:	d09e      	beq.n	80083b6 <_dtoa_r+0x65e>
 8008478:	e7d0      	b.n	800841c <_dtoa_r+0x6c4>
 800847a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800847c:	2a00      	cmp	r2, #0
 800847e:	f000 80ca 	beq.w	8008616 <_dtoa_r+0x8be>
 8008482:	9a07      	ldr	r2, [sp, #28]
 8008484:	2a01      	cmp	r2, #1
 8008486:	f300 80ad 	bgt.w	80085e4 <_dtoa_r+0x88c>
 800848a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800848c:	2a00      	cmp	r2, #0
 800848e:	f000 80a5 	beq.w	80085dc <_dtoa_r+0x884>
 8008492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008496:	9e08      	ldr	r6, [sp, #32]
 8008498:	9d05      	ldr	r5, [sp, #20]
 800849a:	9a05      	ldr	r2, [sp, #20]
 800849c:	441a      	add	r2, r3
 800849e:	9205      	str	r2, [sp, #20]
 80084a0:	9a06      	ldr	r2, [sp, #24]
 80084a2:	2101      	movs	r1, #1
 80084a4:	441a      	add	r2, r3
 80084a6:	4620      	mov	r0, r4
 80084a8:	9206      	str	r2, [sp, #24]
 80084aa:	f000 fc3d 	bl	8008d28 <__i2b>
 80084ae:	4607      	mov	r7, r0
 80084b0:	b165      	cbz	r5, 80084cc <_dtoa_r+0x774>
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd09      	ble.n	80084cc <_dtoa_r+0x774>
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	9a05      	ldr	r2, [sp, #20]
 80084bc:	bfa8      	it	ge
 80084be:	462b      	movge	r3, r5
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	9205      	str	r2, [sp, #20]
 80084c4:	9a06      	ldr	r2, [sp, #24]
 80084c6:	1aed      	subs	r5, r5, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	9306      	str	r3, [sp, #24]
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	b1f3      	cbz	r3, 800850e <_dtoa_r+0x7b6>
 80084d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80a3 	beq.w	800861e <_dtoa_r+0x8c6>
 80084d8:	2e00      	cmp	r6, #0
 80084da:	dd10      	ble.n	80084fe <_dtoa_r+0x7a6>
 80084dc:	4639      	mov	r1, r7
 80084de:	4632      	mov	r2, r6
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fce1 	bl	8008ea8 <__pow5mult>
 80084e6:	4652      	mov	r2, sl
 80084e8:	4601      	mov	r1, r0
 80084ea:	4607      	mov	r7, r0
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fc31 	bl	8008d54 <__multiply>
 80084f2:	4651      	mov	r1, sl
 80084f4:	4680      	mov	r8, r0
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fb60 	bl	8008bbc <_Bfree>
 80084fc:	46c2      	mov	sl, r8
 80084fe:	9b08      	ldr	r3, [sp, #32]
 8008500:	1b9a      	subs	r2, r3, r6
 8008502:	d004      	beq.n	800850e <_dtoa_r+0x7b6>
 8008504:	4651      	mov	r1, sl
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fcce 	bl	8008ea8 <__pow5mult>
 800850c:	4682      	mov	sl, r0
 800850e:	2101      	movs	r1, #1
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fc09 	bl	8008d28 <__i2b>
 8008516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	4606      	mov	r6, r0
 800851c:	f340 8081 	ble.w	8008622 <_dtoa_r+0x8ca>
 8008520:	461a      	mov	r2, r3
 8008522:	4601      	mov	r1, r0
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fcbf 	bl	8008ea8 <__pow5mult>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	2b01      	cmp	r3, #1
 800852e:	4606      	mov	r6, r0
 8008530:	dd7a      	ble.n	8008628 <_dtoa_r+0x8d0>
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	6933      	ldr	r3, [r6, #16]
 8008538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800853c:	6918      	ldr	r0, [r3, #16]
 800853e:	f000 fba5 	bl	8008c8c <__hi0bits>
 8008542:	f1c0 0020 	rsb	r0, r0, #32
 8008546:	9b06      	ldr	r3, [sp, #24]
 8008548:	4418      	add	r0, r3
 800854a:	f010 001f 	ands.w	r0, r0, #31
 800854e:	f000 8094 	beq.w	800867a <_dtoa_r+0x922>
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	2b04      	cmp	r3, #4
 8008558:	f340 8085 	ble.w	8008666 <_dtoa_r+0x90e>
 800855c:	9b05      	ldr	r3, [sp, #20]
 800855e:	f1c0 001c 	rsb	r0, r0, #28
 8008562:	4403      	add	r3, r0
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	9b06      	ldr	r3, [sp, #24]
 8008568:	4403      	add	r3, r0
 800856a:	4405      	add	r5, r0
 800856c:	9306      	str	r3, [sp, #24]
 800856e:	9b05      	ldr	r3, [sp, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dd05      	ble.n	8008580 <_dtoa_r+0x828>
 8008574:	4651      	mov	r1, sl
 8008576:	461a      	mov	r2, r3
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fcef 	bl	8008f5c <__lshift>
 800857e:	4682      	mov	sl, r0
 8008580:	9b06      	ldr	r3, [sp, #24]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd05      	ble.n	8008592 <_dtoa_r+0x83a>
 8008586:	4631      	mov	r1, r6
 8008588:	461a      	mov	r2, r3
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fce6 	bl	8008f5c <__lshift>
 8008590:	4606      	mov	r6, r0
 8008592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d072      	beq.n	800867e <_dtoa_r+0x926>
 8008598:	4631      	mov	r1, r6
 800859a:	4650      	mov	r0, sl
 800859c:	f000 fd4a 	bl	8009034 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	da6c      	bge.n	800867e <_dtoa_r+0x926>
 80085a4:	2300      	movs	r3, #0
 80085a6:	4651      	mov	r1, sl
 80085a8:	220a      	movs	r2, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fb28 	bl	8008c00 <__multadd>
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80085b6:	4682      	mov	sl, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 81b0 	beq.w	800891e <_dtoa_r+0xbc6>
 80085be:	2300      	movs	r3, #0
 80085c0:	4639      	mov	r1, r7
 80085c2:	220a      	movs	r2, #10
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fb1b 	bl	8008c00 <__multadd>
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	4607      	mov	r7, r0
 80085d0:	f300 8096 	bgt.w	8008700 <_dtoa_r+0x9a8>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	dc59      	bgt.n	800868e <_dtoa_r+0x936>
 80085da:	e091      	b.n	8008700 <_dtoa_r+0x9a8>
 80085dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085e2:	e758      	b.n	8008496 <_dtoa_r+0x73e>
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	1e5e      	subs	r6, r3, #1
 80085e8:	9b08      	ldr	r3, [sp, #32]
 80085ea:	42b3      	cmp	r3, r6
 80085ec:	bfbf      	itttt	lt
 80085ee:	9b08      	ldrlt	r3, [sp, #32]
 80085f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80085f2:	9608      	strlt	r6, [sp, #32]
 80085f4:	1af3      	sublt	r3, r6, r3
 80085f6:	bfb4      	ite	lt
 80085f8:	18d2      	addlt	r2, r2, r3
 80085fa:	1b9e      	subge	r6, r3, r6
 80085fc:	9b04      	ldr	r3, [sp, #16]
 80085fe:	bfbc      	itt	lt
 8008600:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008602:	2600      	movlt	r6, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb7      	itett	lt
 8008608:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800860c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008610:	1a9d      	sublt	r5, r3, r2
 8008612:	2300      	movlt	r3, #0
 8008614:	e741      	b.n	800849a <_dtoa_r+0x742>
 8008616:	9e08      	ldr	r6, [sp, #32]
 8008618:	9d05      	ldr	r5, [sp, #20]
 800861a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800861c:	e748      	b.n	80084b0 <_dtoa_r+0x758>
 800861e:	9a08      	ldr	r2, [sp, #32]
 8008620:	e770      	b.n	8008504 <_dtoa_r+0x7ac>
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b01      	cmp	r3, #1
 8008626:	dc19      	bgt.n	800865c <_dtoa_r+0x904>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	b9bb      	cbnz	r3, 800865c <_dtoa_r+0x904>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008632:	b99b      	cbnz	r3, 800865c <_dtoa_r+0x904>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800863a:	0d1b      	lsrs	r3, r3, #20
 800863c:	051b      	lsls	r3, r3, #20
 800863e:	b183      	cbz	r3, 8008662 <_dtoa_r+0x90a>
 8008640:	9b05      	ldr	r3, [sp, #20]
 8008642:	3301      	adds	r3, #1
 8008644:	9305      	str	r3, [sp, #20]
 8008646:	9b06      	ldr	r3, [sp, #24]
 8008648:	3301      	adds	r3, #1
 800864a:	9306      	str	r3, [sp, #24]
 800864c:	f04f 0801 	mov.w	r8, #1
 8008650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af6f 	bne.w	8008536 <_dtoa_r+0x7de>
 8008658:	2001      	movs	r0, #1
 800865a:	e774      	b.n	8008546 <_dtoa_r+0x7ee>
 800865c:	f04f 0800 	mov.w	r8, #0
 8008660:	e7f6      	b.n	8008650 <_dtoa_r+0x8f8>
 8008662:	4698      	mov	r8, r3
 8008664:	e7f4      	b.n	8008650 <_dtoa_r+0x8f8>
 8008666:	d082      	beq.n	800856e <_dtoa_r+0x816>
 8008668:	9a05      	ldr	r2, [sp, #20]
 800866a:	331c      	adds	r3, #28
 800866c:	441a      	add	r2, r3
 800866e:	9205      	str	r2, [sp, #20]
 8008670:	9a06      	ldr	r2, [sp, #24]
 8008672:	441a      	add	r2, r3
 8008674:	441d      	add	r5, r3
 8008676:	9206      	str	r2, [sp, #24]
 8008678:	e779      	b.n	800856e <_dtoa_r+0x816>
 800867a:	4603      	mov	r3, r0
 800867c:	e7f4      	b.n	8008668 <_dtoa_r+0x910>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	dc37      	bgt.n	80086f4 <_dtoa_r+0x99c>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b02      	cmp	r3, #2
 8008688:	dd34      	ble.n	80086f4 <_dtoa_r+0x99c>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	b963      	cbnz	r3, 80086ac <_dtoa_r+0x954>
 8008692:	4631      	mov	r1, r6
 8008694:	2205      	movs	r2, #5
 8008696:	4620      	mov	r0, r4
 8008698:	f000 fab2 	bl	8008c00 <__multadd>
 800869c:	4601      	mov	r1, r0
 800869e:	4606      	mov	r6, r0
 80086a0:	4650      	mov	r0, sl
 80086a2:	f000 fcc7 	bl	8009034 <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f73f adbb 	bgt.w	8008222 <_dtoa_r+0x4ca>
 80086ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ae:	9d00      	ldr	r5, [sp, #0]
 80086b0:	ea6f 0b03 	mvn.w	fp, r3
 80086b4:	f04f 0800 	mov.w	r8, #0
 80086b8:	4631      	mov	r1, r6
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fa7e 	bl	8008bbc <_Bfree>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f43f aeab 	beq.w	800841c <_dtoa_r+0x6c4>
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	d005      	beq.n	80086d8 <_dtoa_r+0x980>
 80086cc:	45b8      	cmp	r8, r7
 80086ce:	d003      	beq.n	80086d8 <_dtoa_r+0x980>
 80086d0:	4641      	mov	r1, r8
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fa72 	bl	8008bbc <_Bfree>
 80086d8:	4639      	mov	r1, r7
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 fa6e 	bl	8008bbc <_Bfree>
 80086e0:	e69c      	b.n	800841c <_dtoa_r+0x6c4>
 80086e2:	2600      	movs	r6, #0
 80086e4:	4637      	mov	r7, r6
 80086e6:	e7e1      	b.n	80086ac <_dtoa_r+0x954>
 80086e8:	46bb      	mov	fp, r7
 80086ea:	4637      	mov	r7, r6
 80086ec:	e599      	b.n	8008222 <_dtoa_r+0x4ca>
 80086ee:	bf00      	nop
 80086f0:	40240000 	.word	0x40240000
 80086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80c8 	beq.w	800888c <_dtoa_r+0xb34>
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	2d00      	cmp	r5, #0
 8008702:	dd05      	ble.n	8008710 <_dtoa_r+0x9b8>
 8008704:	4639      	mov	r1, r7
 8008706:	462a      	mov	r2, r5
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fc27 	bl	8008f5c <__lshift>
 800870e:	4607      	mov	r7, r0
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	d05b      	beq.n	80087ce <_dtoa_r+0xa76>
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fa0f 	bl	8008b3c <_Balloc>
 800871e:	4605      	mov	r5, r0
 8008720:	b928      	cbnz	r0, 800872e <_dtoa_r+0x9d6>
 8008722:	4b83      	ldr	r3, [pc, #524]	; (8008930 <_dtoa_r+0xbd8>)
 8008724:	4602      	mov	r2, r0
 8008726:	f240 21ef 	movw	r1, #751	; 0x2ef
 800872a:	f7ff bb2e 	b.w	8007d8a <_dtoa_r+0x32>
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	3202      	adds	r2, #2
 8008732:	0092      	lsls	r2, r2, #2
 8008734:	f107 010c 	add.w	r1, r7, #12
 8008738:	300c      	adds	r0, #12
 800873a:	f000 ffab 	bl	8009694 <memcpy>
 800873e:	2201      	movs	r2, #1
 8008740:	4629      	mov	r1, r5
 8008742:	4620      	mov	r0, r4
 8008744:	f000 fc0a 	bl	8008f5c <__lshift>
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008752:	4413      	add	r3, r2
 8008754:	9308      	str	r3, [sp, #32]
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	46b8      	mov	r8, r7
 800875e:	9306      	str	r3, [sp, #24]
 8008760:	4607      	mov	r7, r0
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	4631      	mov	r1, r6
 8008766:	3b01      	subs	r3, #1
 8008768:	4650      	mov	r0, sl
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	f7ff fa6c 	bl	8007c48 <quorem>
 8008770:	4641      	mov	r1, r8
 8008772:	9002      	str	r0, [sp, #8]
 8008774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008778:	4650      	mov	r0, sl
 800877a:	f000 fc5b 	bl	8009034 <__mcmp>
 800877e:	463a      	mov	r2, r7
 8008780:	9005      	str	r0, [sp, #20]
 8008782:	4631      	mov	r1, r6
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fc71 	bl	800906c <__mdiff>
 800878a:	68c2      	ldr	r2, [r0, #12]
 800878c:	4605      	mov	r5, r0
 800878e:	bb02      	cbnz	r2, 80087d2 <_dtoa_r+0xa7a>
 8008790:	4601      	mov	r1, r0
 8008792:	4650      	mov	r0, sl
 8008794:	f000 fc4e 	bl	8009034 <__mcmp>
 8008798:	4602      	mov	r2, r0
 800879a:	4629      	mov	r1, r5
 800879c:	4620      	mov	r0, r4
 800879e:	9209      	str	r2, [sp, #36]	; 0x24
 80087a0:	f000 fa0c 	bl	8008bbc <_Bfree>
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087a8:	9d04      	ldr	r5, [sp, #16]
 80087aa:	ea43 0102 	orr.w	r1, r3, r2
 80087ae:	9b06      	ldr	r3, [sp, #24]
 80087b0:	4319      	orrs	r1, r3
 80087b2:	d110      	bne.n	80087d6 <_dtoa_r+0xa7e>
 80087b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087b8:	d029      	beq.n	800880e <_dtoa_r+0xab6>
 80087ba:	9b05      	ldr	r3, [sp, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dd02      	ble.n	80087c6 <_dtoa_r+0xa6e>
 80087c0:	9b02      	ldr	r3, [sp, #8]
 80087c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	f883 9000 	strb.w	r9, [r3]
 80087cc:	e774      	b.n	80086b8 <_dtoa_r+0x960>
 80087ce:	4638      	mov	r0, r7
 80087d0:	e7ba      	b.n	8008748 <_dtoa_r+0x9f0>
 80087d2:	2201      	movs	r2, #1
 80087d4:	e7e1      	b.n	800879a <_dtoa_r+0xa42>
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	db04      	blt.n	80087e6 <_dtoa_r+0xa8e>
 80087dc:	9907      	ldr	r1, [sp, #28]
 80087de:	430b      	orrs	r3, r1
 80087e0:	9906      	ldr	r1, [sp, #24]
 80087e2:	430b      	orrs	r3, r1
 80087e4:	d120      	bne.n	8008828 <_dtoa_r+0xad0>
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	dded      	ble.n	80087c6 <_dtoa_r+0xa6e>
 80087ea:	4651      	mov	r1, sl
 80087ec:	2201      	movs	r2, #1
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fbb4 	bl	8008f5c <__lshift>
 80087f4:	4631      	mov	r1, r6
 80087f6:	4682      	mov	sl, r0
 80087f8:	f000 fc1c 	bl	8009034 <__mcmp>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	dc03      	bgt.n	8008808 <_dtoa_r+0xab0>
 8008800:	d1e1      	bne.n	80087c6 <_dtoa_r+0xa6e>
 8008802:	f019 0f01 	tst.w	r9, #1
 8008806:	d0de      	beq.n	80087c6 <_dtoa_r+0xa6e>
 8008808:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800880c:	d1d8      	bne.n	80087c0 <_dtoa_r+0xa68>
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	2339      	movs	r3, #57	; 0x39
 8008812:	7013      	strb	r3, [r2, #0]
 8008814:	462b      	mov	r3, r5
 8008816:	461d      	mov	r5, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800881e:	2a39      	cmp	r2, #57	; 0x39
 8008820:	d06c      	beq.n	80088fc <_dtoa_r+0xba4>
 8008822:	3201      	adds	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e747      	b.n	80086b8 <_dtoa_r+0x960>
 8008828:	2a00      	cmp	r2, #0
 800882a:	dd07      	ble.n	800883c <_dtoa_r+0xae4>
 800882c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008830:	d0ed      	beq.n	800880e <_dtoa_r+0xab6>
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	f109 0301 	add.w	r3, r9, #1
 8008838:	7013      	strb	r3, [r2, #0]
 800883a:	e73d      	b.n	80086b8 <_dtoa_r+0x960>
 800883c:	9b04      	ldr	r3, [sp, #16]
 800883e:	9a08      	ldr	r2, [sp, #32]
 8008840:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008844:	4293      	cmp	r3, r2
 8008846:	d043      	beq.n	80088d0 <_dtoa_r+0xb78>
 8008848:	4651      	mov	r1, sl
 800884a:	2300      	movs	r3, #0
 800884c:	220a      	movs	r2, #10
 800884e:	4620      	mov	r0, r4
 8008850:	f000 f9d6 	bl	8008c00 <__multadd>
 8008854:	45b8      	cmp	r8, r7
 8008856:	4682      	mov	sl, r0
 8008858:	f04f 0300 	mov.w	r3, #0
 800885c:	f04f 020a 	mov.w	r2, #10
 8008860:	4641      	mov	r1, r8
 8008862:	4620      	mov	r0, r4
 8008864:	d107      	bne.n	8008876 <_dtoa_r+0xb1e>
 8008866:	f000 f9cb 	bl	8008c00 <__multadd>
 800886a:	4680      	mov	r8, r0
 800886c:	4607      	mov	r7, r0
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	e775      	b.n	8008762 <_dtoa_r+0xa0a>
 8008876:	f000 f9c3 	bl	8008c00 <__multadd>
 800887a:	4639      	mov	r1, r7
 800887c:	4680      	mov	r8, r0
 800887e:	2300      	movs	r3, #0
 8008880:	220a      	movs	r2, #10
 8008882:	4620      	mov	r0, r4
 8008884:	f000 f9bc 	bl	8008c00 <__multadd>
 8008888:	4607      	mov	r7, r0
 800888a:	e7f0      	b.n	800886e <_dtoa_r+0xb16>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	9d00      	ldr	r5, [sp, #0]
 8008892:	4631      	mov	r1, r6
 8008894:	4650      	mov	r0, sl
 8008896:	f7ff f9d7 	bl	8007c48 <quorem>
 800889a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	f805 9b01 	strb.w	r9, [r5], #1
 80088a4:	1aea      	subs	r2, r5, r3
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	dd07      	ble.n	80088bc <_dtoa_r+0xb64>
 80088ac:	4651      	mov	r1, sl
 80088ae:	2300      	movs	r3, #0
 80088b0:	220a      	movs	r2, #10
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 f9a4 	bl	8008c00 <__multadd>
 80088b8:	4682      	mov	sl, r0
 80088ba:	e7ea      	b.n	8008892 <_dtoa_r+0xb3a>
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfc8      	it	gt
 80088c2:	461d      	movgt	r5, r3
 80088c4:	9b00      	ldr	r3, [sp, #0]
 80088c6:	bfd8      	it	le
 80088c8:	2501      	movle	r5, #1
 80088ca:	441d      	add	r5, r3
 80088cc:	f04f 0800 	mov.w	r8, #0
 80088d0:	4651      	mov	r1, sl
 80088d2:	2201      	movs	r2, #1
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fb41 	bl	8008f5c <__lshift>
 80088da:	4631      	mov	r1, r6
 80088dc:	4682      	mov	sl, r0
 80088de:	f000 fba9 	bl	8009034 <__mcmp>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	dc96      	bgt.n	8008814 <_dtoa_r+0xabc>
 80088e6:	d102      	bne.n	80088ee <_dtoa_r+0xb96>
 80088e8:	f019 0f01 	tst.w	r9, #1
 80088ec:	d192      	bne.n	8008814 <_dtoa_r+0xabc>
 80088ee:	462b      	mov	r3, r5
 80088f0:	461d      	mov	r5, r3
 80088f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f6:	2a30      	cmp	r2, #48	; 0x30
 80088f8:	d0fa      	beq.n	80088f0 <_dtoa_r+0xb98>
 80088fa:	e6dd      	b.n	80086b8 <_dtoa_r+0x960>
 80088fc:	9a00      	ldr	r2, [sp, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d189      	bne.n	8008816 <_dtoa_r+0xabe>
 8008902:	f10b 0b01 	add.w	fp, fp, #1
 8008906:	2331      	movs	r3, #49	; 0x31
 8008908:	e796      	b.n	8008838 <_dtoa_r+0xae0>
 800890a:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <_dtoa_r+0xbdc>)
 800890c:	f7ff ba99 	b.w	8007e42 <_dtoa_r+0xea>
 8008910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008912:	2b00      	cmp	r3, #0
 8008914:	f47f aa6d 	bne.w	8007df2 <_dtoa_r+0x9a>
 8008918:	4b07      	ldr	r3, [pc, #28]	; (8008938 <_dtoa_r+0xbe0>)
 800891a:	f7ff ba92 	b.w	8007e42 <_dtoa_r+0xea>
 800891e:	9b01      	ldr	r3, [sp, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	dcb5      	bgt.n	8008890 <_dtoa_r+0xb38>
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	2b02      	cmp	r3, #2
 8008928:	f73f aeb1 	bgt.w	800868e <_dtoa_r+0x936>
 800892c:	e7b0      	b.n	8008890 <_dtoa_r+0xb38>
 800892e:	bf00      	nop
 8008930:	08009e40 	.word	0x08009e40
 8008934:	08009da0 	.word	0x08009da0
 8008938:	08009dc4 	.word	0x08009dc4

0800893c <_free_r>:
 800893c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800893e:	2900      	cmp	r1, #0
 8008940:	d044      	beq.n	80089cc <_free_r+0x90>
 8008942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008946:	9001      	str	r0, [sp, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f1a1 0404 	sub.w	r4, r1, #4
 800894e:	bfb8      	it	lt
 8008950:	18e4      	addlt	r4, r4, r3
 8008952:	f000 f8e7 	bl	8008b24 <__malloc_lock>
 8008956:	4a1e      	ldr	r2, [pc, #120]	; (80089d0 <_free_r+0x94>)
 8008958:	9801      	ldr	r0, [sp, #4]
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	b933      	cbnz	r3, 800896c <_free_r+0x30>
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	6014      	str	r4, [r2, #0]
 8008962:	b003      	add	sp, #12
 8008964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008968:	f000 b8e2 	b.w	8008b30 <__malloc_unlock>
 800896c:	42a3      	cmp	r3, r4
 800896e:	d908      	bls.n	8008982 <_free_r+0x46>
 8008970:	6825      	ldr	r5, [r4, #0]
 8008972:	1961      	adds	r1, r4, r5
 8008974:	428b      	cmp	r3, r1
 8008976:	bf01      	itttt	eq
 8008978:	6819      	ldreq	r1, [r3, #0]
 800897a:	685b      	ldreq	r3, [r3, #4]
 800897c:	1949      	addeq	r1, r1, r5
 800897e:	6021      	streq	r1, [r4, #0]
 8008980:	e7ed      	b.n	800895e <_free_r+0x22>
 8008982:	461a      	mov	r2, r3
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	b10b      	cbz	r3, 800898c <_free_r+0x50>
 8008988:	42a3      	cmp	r3, r4
 800898a:	d9fa      	bls.n	8008982 <_free_r+0x46>
 800898c:	6811      	ldr	r1, [r2, #0]
 800898e:	1855      	adds	r5, r2, r1
 8008990:	42a5      	cmp	r5, r4
 8008992:	d10b      	bne.n	80089ac <_free_r+0x70>
 8008994:	6824      	ldr	r4, [r4, #0]
 8008996:	4421      	add	r1, r4
 8008998:	1854      	adds	r4, r2, r1
 800899a:	42a3      	cmp	r3, r4
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	d1e0      	bne.n	8008962 <_free_r+0x26>
 80089a0:	681c      	ldr	r4, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	6053      	str	r3, [r2, #4]
 80089a6:	440c      	add	r4, r1
 80089a8:	6014      	str	r4, [r2, #0]
 80089aa:	e7da      	b.n	8008962 <_free_r+0x26>
 80089ac:	d902      	bls.n	80089b4 <_free_r+0x78>
 80089ae:	230c      	movs	r3, #12
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	e7d6      	b.n	8008962 <_free_r+0x26>
 80089b4:	6825      	ldr	r5, [r4, #0]
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf04      	itt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	6063      	str	r3, [r4, #4]
 80089c2:	bf04      	itt	eq
 80089c4:	1949      	addeq	r1, r1, r5
 80089c6:	6021      	streq	r1, [r4, #0]
 80089c8:	6054      	str	r4, [r2, #4]
 80089ca:	e7ca      	b.n	8008962 <_free_r+0x26>
 80089cc:	b003      	add	sp, #12
 80089ce:	bd30      	pop	{r4, r5, pc}
 80089d0:	200004f0 	.word	0x200004f0

080089d4 <malloc>:
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <malloc+0xc>)
 80089d6:	4601      	mov	r1, r0
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	f000 b823 	b.w	8008a24 <_malloc_r>
 80089de:	bf00      	nop
 80089e0:	20000070 	.word	0x20000070

080089e4 <sbrk_aligned>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	4e0e      	ldr	r6, [pc, #56]	; (8008a20 <sbrk_aligned+0x3c>)
 80089e8:	460c      	mov	r4, r1
 80089ea:	6831      	ldr	r1, [r6, #0]
 80089ec:	4605      	mov	r5, r0
 80089ee:	b911      	cbnz	r1, 80089f6 <sbrk_aligned+0x12>
 80089f0:	f000 fe40 	bl	8009674 <_sbrk_r>
 80089f4:	6030      	str	r0, [r6, #0]
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 fe3b 	bl	8009674 <_sbrk_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d00a      	beq.n	8008a18 <sbrk_aligned+0x34>
 8008a02:	1cc4      	adds	r4, r0, #3
 8008a04:	f024 0403 	bic.w	r4, r4, #3
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d007      	beq.n	8008a1c <sbrk_aligned+0x38>
 8008a0c:	1a21      	subs	r1, r4, r0
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 fe30 	bl	8009674 <_sbrk_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d101      	bne.n	8008a1c <sbrk_aligned+0x38>
 8008a18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	200004f4 	.word	0x200004f4

08008a24 <_malloc_r>:
 8008a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a28:	1ccd      	adds	r5, r1, #3
 8008a2a:	f025 0503 	bic.w	r5, r5, #3
 8008a2e:	3508      	adds	r5, #8
 8008a30:	2d0c      	cmp	r5, #12
 8008a32:	bf38      	it	cc
 8008a34:	250c      	movcc	r5, #12
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	4607      	mov	r7, r0
 8008a3a:	db01      	blt.n	8008a40 <_malloc_r+0x1c>
 8008a3c:	42a9      	cmp	r1, r5
 8008a3e:	d905      	bls.n	8008a4c <_malloc_r+0x28>
 8008a40:	230c      	movs	r3, #12
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	2600      	movs	r6, #0
 8008a46:	4630      	mov	r0, r6
 8008a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b20 <_malloc_r+0xfc>
 8008a50:	f000 f868 	bl	8008b24 <__malloc_lock>
 8008a54:	f8d8 3000 	ldr.w	r3, [r8]
 8008a58:	461c      	mov	r4, r3
 8008a5a:	bb5c      	cbnz	r4, 8008ab4 <_malloc_r+0x90>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f7ff ffc0 	bl	80089e4 <sbrk_aligned>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	4604      	mov	r4, r0
 8008a68:	d155      	bne.n	8008b16 <_malloc_r+0xf2>
 8008a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a6e:	4626      	mov	r6, r4
 8008a70:	2e00      	cmp	r6, #0
 8008a72:	d145      	bne.n	8008b00 <_malloc_r+0xdc>
 8008a74:	2c00      	cmp	r4, #0
 8008a76:	d048      	beq.n	8008b0a <_malloc_r+0xe6>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	eb04 0903 	add.w	r9, r4, r3
 8008a82:	f000 fdf7 	bl	8009674 <_sbrk_r>
 8008a86:	4581      	cmp	r9, r0
 8008a88:	d13f      	bne.n	8008b0a <_malloc_r+0xe6>
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	1a6d      	subs	r5, r5, r1
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ffa7 	bl	80089e4 <sbrk_aligned>
 8008a96:	3001      	adds	r0, #1
 8008a98:	d037      	beq.n	8008b0a <_malloc_r+0xe6>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	442b      	add	r3, r5
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d038      	beq.n	8008b1a <_malloc_r+0xf6>
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	42a2      	cmp	r2, r4
 8008aac:	d12b      	bne.n	8008b06 <_malloc_r+0xe2>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	e00f      	b.n	8008ad4 <_malloc_r+0xb0>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	1b52      	subs	r2, r2, r5
 8008ab8:	d41f      	bmi.n	8008afa <_malloc_r+0xd6>
 8008aba:	2a0b      	cmp	r2, #11
 8008abc:	d917      	bls.n	8008aee <_malloc_r+0xca>
 8008abe:	1961      	adds	r1, r4, r5
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	6025      	str	r5, [r4, #0]
 8008ac4:	bf18      	it	ne
 8008ac6:	6059      	strne	r1, [r3, #4]
 8008ac8:	6863      	ldr	r3, [r4, #4]
 8008aca:	bf08      	it	eq
 8008acc:	f8c8 1000 	streq.w	r1, [r8]
 8008ad0:	5162      	str	r2, [r4, r5]
 8008ad2:	604b      	str	r3, [r1, #4]
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f104 060b 	add.w	r6, r4, #11
 8008ada:	f000 f829 	bl	8008b30 <__malloc_unlock>
 8008ade:	f026 0607 	bic.w	r6, r6, #7
 8008ae2:	1d23      	adds	r3, r4, #4
 8008ae4:	1af2      	subs	r2, r6, r3
 8008ae6:	d0ae      	beq.n	8008a46 <_malloc_r+0x22>
 8008ae8:	1b9b      	subs	r3, r3, r6
 8008aea:	50a3      	str	r3, [r4, r2]
 8008aec:	e7ab      	b.n	8008a46 <_malloc_r+0x22>
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	6862      	ldr	r2, [r4, #4]
 8008af2:	d1dd      	bne.n	8008ab0 <_malloc_r+0x8c>
 8008af4:	f8c8 2000 	str.w	r2, [r8]
 8008af8:	e7ec      	b.n	8008ad4 <_malloc_r+0xb0>
 8008afa:	4623      	mov	r3, r4
 8008afc:	6864      	ldr	r4, [r4, #4]
 8008afe:	e7ac      	b.n	8008a5a <_malloc_r+0x36>
 8008b00:	4634      	mov	r4, r6
 8008b02:	6876      	ldr	r6, [r6, #4]
 8008b04:	e7b4      	b.n	8008a70 <_malloc_r+0x4c>
 8008b06:	4613      	mov	r3, r2
 8008b08:	e7cc      	b.n	8008aa4 <_malloc_r+0x80>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f000 f80e 	bl	8008b30 <__malloc_unlock>
 8008b14:	e797      	b.n	8008a46 <_malloc_r+0x22>
 8008b16:	6025      	str	r5, [r4, #0]
 8008b18:	e7dc      	b.n	8008ad4 <_malloc_r+0xb0>
 8008b1a:	605b      	str	r3, [r3, #4]
 8008b1c:	deff      	udf	#255	; 0xff
 8008b1e:	bf00      	nop
 8008b20:	200004f0 	.word	0x200004f0

08008b24 <__malloc_lock>:
 8008b24:	4801      	ldr	r0, [pc, #4]	; (8008b2c <__malloc_lock+0x8>)
 8008b26:	f7ff b88d 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200004ec 	.word	0x200004ec

08008b30 <__malloc_unlock>:
 8008b30:	4801      	ldr	r0, [pc, #4]	; (8008b38 <__malloc_unlock+0x8>)
 8008b32:	f7ff b888 	b.w	8007c46 <__retarget_lock_release_recursive>
 8008b36:	bf00      	nop
 8008b38:	200004ec 	.word	0x200004ec

08008b3c <_Balloc>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	69c6      	ldr	r6, [r0, #28]
 8008b40:	4604      	mov	r4, r0
 8008b42:	460d      	mov	r5, r1
 8008b44:	b976      	cbnz	r6, 8008b64 <_Balloc+0x28>
 8008b46:	2010      	movs	r0, #16
 8008b48:	f7ff ff44 	bl	80089d4 <malloc>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	61e0      	str	r0, [r4, #28]
 8008b50:	b920      	cbnz	r0, 8008b5c <_Balloc+0x20>
 8008b52:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <_Balloc+0x78>)
 8008b54:	4818      	ldr	r0, [pc, #96]	; (8008bb8 <_Balloc+0x7c>)
 8008b56:	216b      	movs	r1, #107	; 0x6b
 8008b58:	f000 fdaa 	bl	80096b0 <__assert_func>
 8008b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b60:	6006      	str	r6, [r0, #0]
 8008b62:	60c6      	str	r6, [r0, #12]
 8008b64:	69e6      	ldr	r6, [r4, #28]
 8008b66:	68f3      	ldr	r3, [r6, #12]
 8008b68:	b183      	cbz	r3, 8008b8c <_Balloc+0x50>
 8008b6a:	69e3      	ldr	r3, [r4, #28]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b72:	b9b8      	cbnz	r0, 8008ba4 <_Balloc+0x68>
 8008b74:	2101      	movs	r1, #1
 8008b76:	fa01 f605 	lsl.w	r6, r1, r5
 8008b7a:	1d72      	adds	r2, r6, #5
 8008b7c:	0092      	lsls	r2, r2, #2
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 fdb4 	bl	80096ec <_calloc_r>
 8008b84:	b160      	cbz	r0, 8008ba0 <_Balloc+0x64>
 8008b86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b8a:	e00e      	b.n	8008baa <_Balloc+0x6e>
 8008b8c:	2221      	movs	r2, #33	; 0x21
 8008b8e:	2104      	movs	r1, #4
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fdab 	bl	80096ec <_calloc_r>
 8008b96:	69e3      	ldr	r3, [r4, #28]
 8008b98:	60f0      	str	r0, [r6, #12]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e4      	bne.n	8008b6a <_Balloc+0x2e>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	6802      	ldr	r2, [r0, #0]
 8008ba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008baa:	2300      	movs	r3, #0
 8008bac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bb0:	e7f7      	b.n	8008ba2 <_Balloc+0x66>
 8008bb2:	bf00      	nop
 8008bb4:	08009dd1 	.word	0x08009dd1
 8008bb8:	08009e51 	.word	0x08009e51

08008bbc <_Bfree>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	69c6      	ldr	r6, [r0, #28]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b976      	cbnz	r6, 8008be4 <_Bfree+0x28>
 8008bc6:	2010      	movs	r0, #16
 8008bc8:	f7ff ff04 	bl	80089d4 <malloc>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	61e8      	str	r0, [r5, #28]
 8008bd0:	b920      	cbnz	r0, 8008bdc <_Bfree+0x20>
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <_Bfree+0x3c>)
 8008bd4:	4809      	ldr	r0, [pc, #36]	; (8008bfc <_Bfree+0x40>)
 8008bd6:	218f      	movs	r1, #143	; 0x8f
 8008bd8:	f000 fd6a 	bl	80096b0 <__assert_func>
 8008bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008be0:	6006      	str	r6, [r0, #0]
 8008be2:	60c6      	str	r6, [r0, #12]
 8008be4:	b13c      	cbz	r4, 8008bf6 <_Bfree+0x3a>
 8008be6:	69eb      	ldr	r3, [r5, #28]
 8008be8:	6862      	ldr	r2, [r4, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf0:	6021      	str	r1, [r4, #0]
 8008bf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	08009dd1 	.word	0x08009dd1
 8008bfc:	08009e51 	.word	0x08009e51

08008c00 <__multadd>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	690d      	ldr	r5, [r1, #16]
 8008c06:	4607      	mov	r7, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	461e      	mov	r6, r3
 8008c0c:	f101 0c14 	add.w	ip, r1, #20
 8008c10:	2000      	movs	r0, #0
 8008c12:	f8dc 3000 	ldr.w	r3, [ip]
 8008c16:	b299      	uxth	r1, r3
 8008c18:	fb02 6101 	mla	r1, r2, r1, r6
 8008c1c:	0c1e      	lsrs	r6, r3, #16
 8008c1e:	0c0b      	lsrs	r3, r1, #16
 8008c20:	fb02 3306 	mla	r3, r2, r6, r3
 8008c24:	b289      	uxth	r1, r1
 8008c26:	3001      	adds	r0, #1
 8008c28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c2c:	4285      	cmp	r5, r0
 8008c2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c36:	dcec      	bgt.n	8008c12 <__multadd+0x12>
 8008c38:	b30e      	cbz	r6, 8008c7e <__multadd+0x7e>
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dc19      	bgt.n	8008c74 <__multadd+0x74>
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4638      	mov	r0, r7
 8008c44:	3101      	adds	r1, #1
 8008c46:	f7ff ff79 	bl	8008b3c <_Balloc>
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	b928      	cbnz	r0, 8008c5a <__multadd+0x5a>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <__multadd+0x84>)
 8008c52:	480d      	ldr	r0, [pc, #52]	; (8008c88 <__multadd+0x88>)
 8008c54:	21ba      	movs	r1, #186	; 0xba
 8008c56:	f000 fd2b 	bl	80096b0 <__assert_func>
 8008c5a:	6922      	ldr	r2, [r4, #16]
 8008c5c:	3202      	adds	r2, #2
 8008c5e:	f104 010c 	add.w	r1, r4, #12
 8008c62:	0092      	lsls	r2, r2, #2
 8008c64:	300c      	adds	r0, #12
 8008c66:	f000 fd15 	bl	8009694 <memcpy>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff ffa5 	bl	8008bbc <_Bfree>
 8008c72:	4644      	mov	r4, r8
 8008c74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c78:	3501      	adds	r5, #1
 8008c7a:	615e      	str	r6, [r3, #20]
 8008c7c:	6125      	str	r5, [r4, #16]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	08009e40 	.word	0x08009e40
 8008c88:	08009e51 	.word	0x08009e51

08008c8c <__hi0bits>:
 8008c8c:	0c03      	lsrs	r3, r0, #16
 8008c8e:	041b      	lsls	r3, r3, #16
 8008c90:	b9d3      	cbnz	r3, 8008cc8 <__hi0bits+0x3c>
 8008c92:	0400      	lsls	r0, r0, #16
 8008c94:	2310      	movs	r3, #16
 8008c96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c9a:	bf04      	itt	eq
 8008c9c:	0200      	lsleq	r0, r0, #8
 8008c9e:	3308      	addeq	r3, #8
 8008ca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ca4:	bf04      	itt	eq
 8008ca6:	0100      	lsleq	r0, r0, #4
 8008ca8:	3304      	addeq	r3, #4
 8008caa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008cae:	bf04      	itt	eq
 8008cb0:	0080      	lsleq	r0, r0, #2
 8008cb2:	3302      	addeq	r3, #2
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	db05      	blt.n	8008cc4 <__hi0bits+0x38>
 8008cb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008cbc:	f103 0301 	add.w	r3, r3, #1
 8008cc0:	bf08      	it	eq
 8008cc2:	2320      	moveq	r3, #32
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	4770      	bx	lr
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e7e4      	b.n	8008c96 <__hi0bits+0xa>

08008ccc <__lo0bits>:
 8008ccc:	6803      	ldr	r3, [r0, #0]
 8008cce:	f013 0207 	ands.w	r2, r3, #7
 8008cd2:	d00c      	beq.n	8008cee <__lo0bits+0x22>
 8008cd4:	07d9      	lsls	r1, r3, #31
 8008cd6:	d422      	bmi.n	8008d1e <__lo0bits+0x52>
 8008cd8:	079a      	lsls	r2, r3, #30
 8008cda:	bf49      	itett	mi
 8008cdc:	085b      	lsrmi	r3, r3, #1
 8008cde:	089b      	lsrpl	r3, r3, #2
 8008ce0:	6003      	strmi	r3, [r0, #0]
 8008ce2:	2201      	movmi	r2, #1
 8008ce4:	bf5c      	itt	pl
 8008ce6:	6003      	strpl	r3, [r0, #0]
 8008ce8:	2202      	movpl	r2, #2
 8008cea:	4610      	mov	r0, r2
 8008cec:	4770      	bx	lr
 8008cee:	b299      	uxth	r1, r3
 8008cf0:	b909      	cbnz	r1, 8008cf6 <__lo0bits+0x2a>
 8008cf2:	0c1b      	lsrs	r3, r3, #16
 8008cf4:	2210      	movs	r2, #16
 8008cf6:	b2d9      	uxtb	r1, r3
 8008cf8:	b909      	cbnz	r1, 8008cfe <__lo0bits+0x32>
 8008cfa:	3208      	adds	r2, #8
 8008cfc:	0a1b      	lsrs	r3, r3, #8
 8008cfe:	0719      	lsls	r1, r3, #28
 8008d00:	bf04      	itt	eq
 8008d02:	091b      	lsreq	r3, r3, #4
 8008d04:	3204      	addeq	r2, #4
 8008d06:	0799      	lsls	r1, r3, #30
 8008d08:	bf04      	itt	eq
 8008d0a:	089b      	lsreq	r3, r3, #2
 8008d0c:	3202      	addeq	r2, #2
 8008d0e:	07d9      	lsls	r1, r3, #31
 8008d10:	d403      	bmi.n	8008d1a <__lo0bits+0x4e>
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	f102 0201 	add.w	r2, r2, #1
 8008d18:	d003      	beq.n	8008d22 <__lo0bits+0x56>
 8008d1a:	6003      	str	r3, [r0, #0]
 8008d1c:	e7e5      	b.n	8008cea <__lo0bits+0x1e>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	e7e3      	b.n	8008cea <__lo0bits+0x1e>
 8008d22:	2220      	movs	r2, #32
 8008d24:	e7e1      	b.n	8008cea <__lo0bits+0x1e>
	...

08008d28 <__i2b>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	f7ff ff05 	bl	8008b3c <_Balloc>
 8008d32:	4602      	mov	r2, r0
 8008d34:	b928      	cbnz	r0, 8008d42 <__i2b+0x1a>
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <__i2b+0x24>)
 8008d38:	4805      	ldr	r0, [pc, #20]	; (8008d50 <__i2b+0x28>)
 8008d3a:	f240 1145 	movw	r1, #325	; 0x145
 8008d3e:	f000 fcb7 	bl	80096b0 <__assert_func>
 8008d42:	2301      	movs	r3, #1
 8008d44:	6144      	str	r4, [r0, #20]
 8008d46:	6103      	str	r3, [r0, #16]
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009e40 	.word	0x08009e40
 8008d50:	08009e51 	.word	0x08009e51

08008d54 <__multiply>:
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	4691      	mov	r9, r2
 8008d5a:	690a      	ldr	r2, [r1, #16]
 8008d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	bfb8      	it	lt
 8008d64:	460b      	movlt	r3, r1
 8008d66:	460c      	mov	r4, r1
 8008d68:	bfbc      	itt	lt
 8008d6a:	464c      	movlt	r4, r9
 8008d6c:	4699      	movlt	r9, r3
 8008d6e:	6927      	ldr	r7, [r4, #16]
 8008d70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	6861      	ldr	r1, [r4, #4]
 8008d78:	eb07 060a 	add.w	r6, r7, sl
 8008d7c:	42b3      	cmp	r3, r6
 8008d7e:	b085      	sub	sp, #20
 8008d80:	bfb8      	it	lt
 8008d82:	3101      	addlt	r1, #1
 8008d84:	f7ff feda 	bl	8008b3c <_Balloc>
 8008d88:	b930      	cbnz	r0, 8008d98 <__multiply+0x44>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	4b44      	ldr	r3, [pc, #272]	; (8008ea0 <__multiply+0x14c>)
 8008d8e:	4845      	ldr	r0, [pc, #276]	; (8008ea4 <__multiply+0x150>)
 8008d90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d94:	f000 fc8c 	bl	80096b0 <__assert_func>
 8008d98:	f100 0514 	add.w	r5, r0, #20
 8008d9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008da0:	462b      	mov	r3, r5
 8008da2:	2200      	movs	r2, #0
 8008da4:	4543      	cmp	r3, r8
 8008da6:	d321      	bcc.n	8008dec <__multiply+0x98>
 8008da8:	f104 0314 	add.w	r3, r4, #20
 8008dac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008db0:	f109 0314 	add.w	r3, r9, #20
 8008db4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008db8:	9202      	str	r2, [sp, #8]
 8008dba:	1b3a      	subs	r2, r7, r4
 8008dbc:	3a15      	subs	r2, #21
 8008dbe:	f022 0203 	bic.w	r2, r2, #3
 8008dc2:	3204      	adds	r2, #4
 8008dc4:	f104 0115 	add.w	r1, r4, #21
 8008dc8:	428f      	cmp	r7, r1
 8008dca:	bf38      	it	cc
 8008dcc:	2204      	movcc	r2, #4
 8008dce:	9201      	str	r2, [sp, #4]
 8008dd0:	9a02      	ldr	r2, [sp, #8]
 8008dd2:	9303      	str	r3, [sp, #12]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d80c      	bhi.n	8008df2 <__multiply+0x9e>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	dd03      	ble.n	8008de4 <__multiply+0x90>
 8008ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d05b      	beq.n	8008e9c <__multiply+0x148>
 8008de4:	6106      	str	r6, [r0, #16]
 8008de6:	b005      	add	sp, #20
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	f843 2b04 	str.w	r2, [r3], #4
 8008df0:	e7d8      	b.n	8008da4 <__multiply+0x50>
 8008df2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008df6:	f1ba 0f00 	cmp.w	sl, #0
 8008dfa:	d024      	beq.n	8008e46 <__multiply+0xf2>
 8008dfc:	f104 0e14 	add.w	lr, r4, #20
 8008e00:	46a9      	mov	r9, r5
 8008e02:	f04f 0c00 	mov.w	ip, #0
 8008e06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e0a:	f8d9 1000 	ldr.w	r1, [r9]
 8008e0e:	fa1f fb82 	uxth.w	fp, r2
 8008e12:	b289      	uxth	r1, r1
 8008e14:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e20:	4461      	add	r1, ip
 8008e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e26:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e2e:	b289      	uxth	r1, r1
 8008e30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e34:	4577      	cmp	r7, lr
 8008e36:	f849 1b04 	str.w	r1, [r9], #4
 8008e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e3e:	d8e2      	bhi.n	8008e06 <__multiply+0xb2>
 8008e40:	9a01      	ldr	r2, [sp, #4]
 8008e42:	f845 c002 	str.w	ip, [r5, r2]
 8008e46:	9a03      	ldr	r2, [sp, #12]
 8008e48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	f1b9 0f00 	cmp.w	r9, #0
 8008e52:	d021      	beq.n	8008e98 <__multiply+0x144>
 8008e54:	6829      	ldr	r1, [r5, #0]
 8008e56:	f104 0c14 	add.w	ip, r4, #20
 8008e5a:	46ae      	mov	lr, r5
 8008e5c:	f04f 0a00 	mov.w	sl, #0
 8008e60:	f8bc b000 	ldrh.w	fp, [ip]
 8008e64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e68:	fb09 220b 	mla	r2, r9, fp, r2
 8008e6c:	4452      	add	r2, sl
 8008e6e:	b289      	uxth	r1, r1
 8008e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e74:	f84e 1b04 	str.w	r1, [lr], #4
 8008e78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e80:	f8be 1000 	ldrh.w	r1, [lr]
 8008e84:	fb09 110a 	mla	r1, r9, sl, r1
 8008e88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e8c:	4567      	cmp	r7, ip
 8008e8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e92:	d8e5      	bhi.n	8008e60 <__multiply+0x10c>
 8008e94:	9a01      	ldr	r2, [sp, #4]
 8008e96:	50a9      	str	r1, [r5, r2]
 8008e98:	3504      	adds	r5, #4
 8008e9a:	e799      	b.n	8008dd0 <__multiply+0x7c>
 8008e9c:	3e01      	subs	r6, #1
 8008e9e:	e79b      	b.n	8008dd8 <__multiply+0x84>
 8008ea0:	08009e40 	.word	0x08009e40
 8008ea4:	08009e51 	.word	0x08009e51

08008ea8 <__pow5mult>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	4615      	mov	r5, r2
 8008eae:	f012 0203 	ands.w	r2, r2, #3
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	460f      	mov	r7, r1
 8008eb6:	d007      	beq.n	8008ec8 <__pow5mult+0x20>
 8008eb8:	4c25      	ldr	r4, [pc, #148]	; (8008f50 <__pow5mult+0xa8>)
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ec2:	f7ff fe9d 	bl	8008c00 <__multadd>
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	10ad      	asrs	r5, r5, #2
 8008eca:	d03d      	beq.n	8008f48 <__pow5mult+0xa0>
 8008ecc:	69f4      	ldr	r4, [r6, #28]
 8008ece:	b97c      	cbnz	r4, 8008ef0 <__pow5mult+0x48>
 8008ed0:	2010      	movs	r0, #16
 8008ed2:	f7ff fd7f 	bl	80089d4 <malloc>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	61f0      	str	r0, [r6, #28]
 8008eda:	b928      	cbnz	r0, 8008ee8 <__pow5mult+0x40>
 8008edc:	4b1d      	ldr	r3, [pc, #116]	; (8008f54 <__pow5mult+0xac>)
 8008ede:	481e      	ldr	r0, [pc, #120]	; (8008f58 <__pow5mult+0xb0>)
 8008ee0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ee4:	f000 fbe4 	bl	80096b0 <__assert_func>
 8008ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008eec:	6004      	str	r4, [r0, #0]
 8008eee:	60c4      	str	r4, [r0, #12]
 8008ef0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ef8:	b94c      	cbnz	r4, 8008f0e <__pow5mult+0x66>
 8008efa:	f240 2171 	movw	r1, #625	; 0x271
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff12 	bl	8008d28 <__i2b>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	6003      	str	r3, [r0, #0]
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	07eb      	lsls	r3, r5, #31
 8008f14:	d50a      	bpl.n	8008f2c <__pow5mult+0x84>
 8008f16:	4639      	mov	r1, r7
 8008f18:	4622      	mov	r2, r4
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7ff ff1a 	bl	8008d54 <__multiply>
 8008f20:	4639      	mov	r1, r7
 8008f22:	4680      	mov	r8, r0
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fe49 	bl	8008bbc <_Bfree>
 8008f2a:	4647      	mov	r7, r8
 8008f2c:	106d      	asrs	r5, r5, #1
 8008f2e:	d00b      	beq.n	8008f48 <__pow5mult+0xa0>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	b938      	cbnz	r0, 8008f44 <__pow5mult+0x9c>
 8008f34:	4622      	mov	r2, r4
 8008f36:	4621      	mov	r1, r4
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff ff0b 	bl	8008d54 <__multiply>
 8008f3e:	6020      	str	r0, [r4, #0]
 8008f40:	f8c0 9000 	str.w	r9, [r0]
 8008f44:	4604      	mov	r4, r0
 8008f46:	e7e4      	b.n	8008f12 <__pow5mult+0x6a>
 8008f48:	4638      	mov	r0, r7
 8008f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4e:	bf00      	nop
 8008f50:	08009fa0 	.word	0x08009fa0
 8008f54:	08009dd1 	.word	0x08009dd1
 8008f58:	08009e51 	.word	0x08009e51

08008f5c <__lshift>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	6849      	ldr	r1, [r1, #4]
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	4691      	mov	r9, r2
 8008f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f74:	f108 0601 	add.w	r6, r8, #1
 8008f78:	42b3      	cmp	r3, r6
 8008f7a:	db0b      	blt.n	8008f94 <__lshift+0x38>
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff fddd 	bl	8008b3c <_Balloc>
 8008f82:	4605      	mov	r5, r0
 8008f84:	b948      	cbnz	r0, 8008f9a <__lshift+0x3e>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4b28      	ldr	r3, [pc, #160]	; (800902c <__lshift+0xd0>)
 8008f8a:	4829      	ldr	r0, [pc, #164]	; (8009030 <__lshift+0xd4>)
 8008f8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f90:	f000 fb8e 	bl	80096b0 <__assert_func>
 8008f94:	3101      	adds	r1, #1
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	e7ee      	b.n	8008f78 <__lshift+0x1c>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f100 0114 	add.w	r1, r0, #20
 8008fa0:	f100 0210 	add.w	r2, r0, #16
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	4553      	cmp	r3, sl
 8008fa8:	db33      	blt.n	8009012 <__lshift+0xb6>
 8008faa:	6920      	ldr	r0, [r4, #16]
 8008fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fb0:	f104 0314 	add.w	r3, r4, #20
 8008fb4:	f019 091f 	ands.w	r9, r9, #31
 8008fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fc0:	d02b      	beq.n	800901a <__lshift+0xbe>
 8008fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fc6:	468a      	mov	sl, r1
 8008fc8:	2200      	movs	r2, #0
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008fd0:	4310      	orrs	r0, r2
 8008fd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fda:	459c      	cmp	ip, r3
 8008fdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fe0:	d8f3      	bhi.n	8008fca <__lshift+0x6e>
 8008fe2:	ebac 0304 	sub.w	r3, ip, r4
 8008fe6:	3b15      	subs	r3, #21
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	3304      	adds	r3, #4
 8008fee:	f104 0015 	add.w	r0, r4, #21
 8008ff2:	4584      	cmp	ip, r0
 8008ff4:	bf38      	it	cc
 8008ff6:	2304      	movcc	r3, #4
 8008ff8:	50ca      	str	r2, [r1, r3]
 8008ffa:	b10a      	cbz	r2, 8009000 <__lshift+0xa4>
 8008ffc:	f108 0602 	add.w	r6, r8, #2
 8009000:	3e01      	subs	r6, #1
 8009002:	4638      	mov	r0, r7
 8009004:	612e      	str	r6, [r5, #16]
 8009006:	4621      	mov	r1, r4
 8009008:	f7ff fdd8 	bl	8008bbc <_Bfree>
 800900c:	4628      	mov	r0, r5
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	f842 0f04 	str.w	r0, [r2, #4]!
 8009016:	3301      	adds	r3, #1
 8009018:	e7c5      	b.n	8008fa6 <__lshift+0x4a>
 800901a:	3904      	subs	r1, #4
 800901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009020:	f841 2f04 	str.w	r2, [r1, #4]!
 8009024:	459c      	cmp	ip, r3
 8009026:	d8f9      	bhi.n	800901c <__lshift+0xc0>
 8009028:	e7ea      	b.n	8009000 <__lshift+0xa4>
 800902a:	bf00      	nop
 800902c:	08009e40 	.word	0x08009e40
 8009030:	08009e51 	.word	0x08009e51

08009034 <__mcmp>:
 8009034:	b530      	push	{r4, r5, lr}
 8009036:	6902      	ldr	r2, [r0, #16]
 8009038:	690c      	ldr	r4, [r1, #16]
 800903a:	1b12      	subs	r2, r2, r4
 800903c:	d10e      	bne.n	800905c <__mcmp+0x28>
 800903e:	f100 0314 	add.w	r3, r0, #20
 8009042:	3114      	adds	r1, #20
 8009044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800904c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009054:	42a5      	cmp	r5, r4
 8009056:	d003      	beq.n	8009060 <__mcmp+0x2c>
 8009058:	d305      	bcc.n	8009066 <__mcmp+0x32>
 800905a:	2201      	movs	r2, #1
 800905c:	4610      	mov	r0, r2
 800905e:	bd30      	pop	{r4, r5, pc}
 8009060:	4283      	cmp	r3, r0
 8009062:	d3f3      	bcc.n	800904c <__mcmp+0x18>
 8009064:	e7fa      	b.n	800905c <__mcmp+0x28>
 8009066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800906a:	e7f7      	b.n	800905c <__mcmp+0x28>

0800906c <__mdiff>:
 800906c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	460c      	mov	r4, r1
 8009072:	4606      	mov	r6, r0
 8009074:	4611      	mov	r1, r2
 8009076:	4620      	mov	r0, r4
 8009078:	4690      	mov	r8, r2
 800907a:	f7ff ffdb 	bl	8009034 <__mcmp>
 800907e:	1e05      	subs	r5, r0, #0
 8009080:	d110      	bne.n	80090a4 <__mdiff+0x38>
 8009082:	4629      	mov	r1, r5
 8009084:	4630      	mov	r0, r6
 8009086:	f7ff fd59 	bl	8008b3c <_Balloc>
 800908a:	b930      	cbnz	r0, 800909a <__mdiff+0x2e>
 800908c:	4b3a      	ldr	r3, [pc, #232]	; (8009178 <__mdiff+0x10c>)
 800908e:	4602      	mov	r2, r0
 8009090:	f240 2137 	movw	r1, #567	; 0x237
 8009094:	4839      	ldr	r0, [pc, #228]	; (800917c <__mdiff+0x110>)
 8009096:	f000 fb0b 	bl	80096b0 <__assert_func>
 800909a:	2301      	movs	r3, #1
 800909c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	bfa4      	itt	ge
 80090a6:	4643      	movge	r3, r8
 80090a8:	46a0      	movge	r8, r4
 80090aa:	4630      	mov	r0, r6
 80090ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090b0:	bfa6      	itte	ge
 80090b2:	461c      	movge	r4, r3
 80090b4:	2500      	movge	r5, #0
 80090b6:	2501      	movlt	r5, #1
 80090b8:	f7ff fd40 	bl	8008b3c <_Balloc>
 80090bc:	b920      	cbnz	r0, 80090c8 <__mdiff+0x5c>
 80090be:	4b2e      	ldr	r3, [pc, #184]	; (8009178 <__mdiff+0x10c>)
 80090c0:	4602      	mov	r2, r0
 80090c2:	f240 2145 	movw	r1, #581	; 0x245
 80090c6:	e7e5      	b.n	8009094 <__mdiff+0x28>
 80090c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090cc:	6926      	ldr	r6, [r4, #16]
 80090ce:	60c5      	str	r5, [r0, #12]
 80090d0:	f104 0914 	add.w	r9, r4, #20
 80090d4:	f108 0514 	add.w	r5, r8, #20
 80090d8:	f100 0e14 	add.w	lr, r0, #20
 80090dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090e4:	f108 0210 	add.w	r2, r8, #16
 80090e8:	46f2      	mov	sl, lr
 80090ea:	2100      	movs	r1, #0
 80090ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80090f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090f4:	fa11 f88b 	uxtah	r8, r1, fp
 80090f8:	b299      	uxth	r1, r3
 80090fa:	0c1b      	lsrs	r3, r3, #16
 80090fc:	eba8 0801 	sub.w	r8, r8, r1
 8009100:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009104:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009108:	fa1f f888 	uxth.w	r8, r8
 800910c:	1419      	asrs	r1, r3, #16
 800910e:	454e      	cmp	r6, r9
 8009110:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009114:	f84a 3b04 	str.w	r3, [sl], #4
 8009118:	d8e8      	bhi.n	80090ec <__mdiff+0x80>
 800911a:	1b33      	subs	r3, r6, r4
 800911c:	3b15      	subs	r3, #21
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	3304      	adds	r3, #4
 8009124:	3415      	adds	r4, #21
 8009126:	42a6      	cmp	r6, r4
 8009128:	bf38      	it	cc
 800912a:	2304      	movcc	r3, #4
 800912c:	441d      	add	r5, r3
 800912e:	4473      	add	r3, lr
 8009130:	469e      	mov	lr, r3
 8009132:	462e      	mov	r6, r5
 8009134:	4566      	cmp	r6, ip
 8009136:	d30e      	bcc.n	8009156 <__mdiff+0xea>
 8009138:	f10c 0203 	add.w	r2, ip, #3
 800913c:	1b52      	subs	r2, r2, r5
 800913e:	f022 0203 	bic.w	r2, r2, #3
 8009142:	3d03      	subs	r5, #3
 8009144:	45ac      	cmp	ip, r5
 8009146:	bf38      	it	cc
 8009148:	2200      	movcc	r2, #0
 800914a:	4413      	add	r3, r2
 800914c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009150:	b17a      	cbz	r2, 8009172 <__mdiff+0x106>
 8009152:	6107      	str	r7, [r0, #16]
 8009154:	e7a4      	b.n	80090a0 <__mdiff+0x34>
 8009156:	f856 8b04 	ldr.w	r8, [r6], #4
 800915a:	fa11 f288 	uxtah	r2, r1, r8
 800915e:	1414      	asrs	r4, r2, #16
 8009160:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009164:	b292      	uxth	r2, r2
 8009166:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800916a:	f84e 2b04 	str.w	r2, [lr], #4
 800916e:	1421      	asrs	r1, r4, #16
 8009170:	e7e0      	b.n	8009134 <__mdiff+0xc8>
 8009172:	3f01      	subs	r7, #1
 8009174:	e7ea      	b.n	800914c <__mdiff+0xe0>
 8009176:	bf00      	nop
 8009178:	08009e40 	.word	0x08009e40
 800917c:	08009e51 	.word	0x08009e51

08009180 <__d2b>:
 8009180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009184:	460f      	mov	r7, r1
 8009186:	2101      	movs	r1, #1
 8009188:	ec59 8b10 	vmov	r8, r9, d0
 800918c:	4616      	mov	r6, r2
 800918e:	f7ff fcd5 	bl	8008b3c <_Balloc>
 8009192:	4604      	mov	r4, r0
 8009194:	b930      	cbnz	r0, 80091a4 <__d2b+0x24>
 8009196:	4602      	mov	r2, r0
 8009198:	4b24      	ldr	r3, [pc, #144]	; (800922c <__d2b+0xac>)
 800919a:	4825      	ldr	r0, [pc, #148]	; (8009230 <__d2b+0xb0>)
 800919c:	f240 310f 	movw	r1, #783	; 0x30f
 80091a0:	f000 fa86 	bl	80096b0 <__assert_func>
 80091a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091ac:	bb2d      	cbnz	r5, 80091fa <__d2b+0x7a>
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	f1b8 0300 	subs.w	r3, r8, #0
 80091b4:	d026      	beq.n	8009204 <__d2b+0x84>
 80091b6:	4668      	mov	r0, sp
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	f7ff fd87 	bl	8008ccc <__lo0bits>
 80091be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091c2:	b1e8      	cbz	r0, 8009200 <__d2b+0x80>
 80091c4:	f1c0 0320 	rsb	r3, r0, #32
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	430b      	orrs	r3, r1
 80091ce:	40c2      	lsrs	r2, r0
 80091d0:	6163      	str	r3, [r4, #20]
 80091d2:	9201      	str	r2, [sp, #4]
 80091d4:	9b01      	ldr	r3, [sp, #4]
 80091d6:	61a3      	str	r3, [r4, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	2202      	movne	r2, #2
 80091de:	2201      	moveq	r2, #1
 80091e0:	6122      	str	r2, [r4, #16]
 80091e2:	b1bd      	cbz	r5, 8009214 <__d2b+0x94>
 80091e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091e8:	4405      	add	r5, r0
 80091ea:	603d      	str	r5, [r7, #0]
 80091ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091f0:	6030      	str	r0, [r6, #0]
 80091f2:	4620      	mov	r0, r4
 80091f4:	b003      	add	sp, #12
 80091f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091fe:	e7d6      	b.n	80091ae <__d2b+0x2e>
 8009200:	6161      	str	r1, [r4, #20]
 8009202:	e7e7      	b.n	80091d4 <__d2b+0x54>
 8009204:	a801      	add	r0, sp, #4
 8009206:	f7ff fd61 	bl	8008ccc <__lo0bits>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	6163      	str	r3, [r4, #20]
 800920e:	3020      	adds	r0, #32
 8009210:	2201      	movs	r2, #1
 8009212:	e7e5      	b.n	80091e0 <__d2b+0x60>
 8009214:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009218:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800921c:	6038      	str	r0, [r7, #0]
 800921e:	6918      	ldr	r0, [r3, #16]
 8009220:	f7ff fd34 	bl	8008c8c <__hi0bits>
 8009224:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009228:	e7e2      	b.n	80091f0 <__d2b+0x70>
 800922a:	bf00      	nop
 800922c:	08009e40 	.word	0x08009e40
 8009230:	08009e51 	.word	0x08009e51

08009234 <__ssputs_r>:
 8009234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009238:	688e      	ldr	r6, [r1, #8]
 800923a:	461f      	mov	r7, r3
 800923c:	42be      	cmp	r6, r7
 800923e:	680b      	ldr	r3, [r1, #0]
 8009240:	4682      	mov	sl, r0
 8009242:	460c      	mov	r4, r1
 8009244:	4690      	mov	r8, r2
 8009246:	d82c      	bhi.n	80092a2 <__ssputs_r+0x6e>
 8009248:	898a      	ldrh	r2, [r1, #12]
 800924a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800924e:	d026      	beq.n	800929e <__ssputs_r+0x6a>
 8009250:	6965      	ldr	r5, [r4, #20]
 8009252:	6909      	ldr	r1, [r1, #16]
 8009254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009258:	eba3 0901 	sub.w	r9, r3, r1
 800925c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009260:	1c7b      	adds	r3, r7, #1
 8009262:	444b      	add	r3, r9
 8009264:	106d      	asrs	r5, r5, #1
 8009266:	429d      	cmp	r5, r3
 8009268:	bf38      	it	cc
 800926a:	461d      	movcc	r5, r3
 800926c:	0553      	lsls	r3, r2, #21
 800926e:	d527      	bpl.n	80092c0 <__ssputs_r+0x8c>
 8009270:	4629      	mov	r1, r5
 8009272:	f7ff fbd7 	bl	8008a24 <_malloc_r>
 8009276:	4606      	mov	r6, r0
 8009278:	b360      	cbz	r0, 80092d4 <__ssputs_r+0xa0>
 800927a:	6921      	ldr	r1, [r4, #16]
 800927c:	464a      	mov	r2, r9
 800927e:	f000 fa09 	bl	8009694 <memcpy>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	6126      	str	r6, [r4, #16]
 8009290:	6165      	str	r5, [r4, #20]
 8009292:	444e      	add	r6, r9
 8009294:	eba5 0509 	sub.w	r5, r5, r9
 8009298:	6026      	str	r6, [r4, #0]
 800929a:	60a5      	str	r5, [r4, #8]
 800929c:	463e      	mov	r6, r7
 800929e:	42be      	cmp	r6, r7
 80092a0:	d900      	bls.n	80092a4 <__ssputs_r+0x70>
 80092a2:	463e      	mov	r6, r7
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	4632      	mov	r2, r6
 80092a8:	4641      	mov	r1, r8
 80092aa:	f000 f9c9 	bl	8009640 <memmove>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	1b9b      	subs	r3, r3, r6
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	4433      	add	r3, r6
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	2000      	movs	r0, #0
 80092bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c0:	462a      	mov	r2, r5
 80092c2:	f000 fa3b 	bl	800973c <_realloc_r>
 80092c6:	4606      	mov	r6, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d1e0      	bne.n	800928e <__ssputs_r+0x5a>
 80092cc:	6921      	ldr	r1, [r4, #16]
 80092ce:	4650      	mov	r0, sl
 80092d0:	f7ff fb34 	bl	800893c <_free_r>
 80092d4:	230c      	movs	r3, #12
 80092d6:	f8ca 3000 	str.w	r3, [sl]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e6:	e7e9      	b.n	80092bc <__ssputs_r+0x88>

080092e8 <_svfiprintf_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	4698      	mov	r8, r3
 80092ee:	898b      	ldrh	r3, [r1, #12]
 80092f0:	061b      	lsls	r3, r3, #24
 80092f2:	b09d      	sub	sp, #116	; 0x74
 80092f4:	4607      	mov	r7, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	4614      	mov	r4, r2
 80092fa:	d50e      	bpl.n	800931a <_svfiprintf_r+0x32>
 80092fc:	690b      	ldr	r3, [r1, #16]
 80092fe:	b963      	cbnz	r3, 800931a <_svfiprintf_r+0x32>
 8009300:	2140      	movs	r1, #64	; 0x40
 8009302:	f7ff fb8f 	bl	8008a24 <_malloc_r>
 8009306:	6028      	str	r0, [r5, #0]
 8009308:	6128      	str	r0, [r5, #16]
 800930a:	b920      	cbnz	r0, 8009316 <_svfiprintf_r+0x2e>
 800930c:	230c      	movs	r3, #12
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009314:	e0d0      	b.n	80094b8 <_svfiprintf_r+0x1d0>
 8009316:	2340      	movs	r3, #64	; 0x40
 8009318:	616b      	str	r3, [r5, #20]
 800931a:	2300      	movs	r3, #0
 800931c:	9309      	str	r3, [sp, #36]	; 0x24
 800931e:	2320      	movs	r3, #32
 8009320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009324:	f8cd 800c 	str.w	r8, [sp, #12]
 8009328:	2330      	movs	r3, #48	; 0x30
 800932a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094d0 <_svfiprintf_r+0x1e8>
 800932e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009332:	f04f 0901 	mov.w	r9, #1
 8009336:	4623      	mov	r3, r4
 8009338:	469a      	mov	sl, r3
 800933a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933e:	b10a      	cbz	r2, 8009344 <_svfiprintf_r+0x5c>
 8009340:	2a25      	cmp	r2, #37	; 0x25
 8009342:	d1f9      	bne.n	8009338 <_svfiprintf_r+0x50>
 8009344:	ebba 0b04 	subs.w	fp, sl, r4
 8009348:	d00b      	beq.n	8009362 <_svfiprintf_r+0x7a>
 800934a:	465b      	mov	r3, fp
 800934c:	4622      	mov	r2, r4
 800934e:	4629      	mov	r1, r5
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ff6f 	bl	8009234 <__ssputs_r>
 8009356:	3001      	adds	r0, #1
 8009358:	f000 80a9 	beq.w	80094ae <_svfiprintf_r+0x1c6>
 800935c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935e:	445a      	add	r2, fp
 8009360:	9209      	str	r2, [sp, #36]	; 0x24
 8009362:	f89a 3000 	ldrb.w	r3, [sl]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80a1 	beq.w	80094ae <_svfiprintf_r+0x1c6>
 800936c:	2300      	movs	r3, #0
 800936e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009376:	f10a 0a01 	add.w	sl, sl, #1
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009382:	931a      	str	r3, [sp, #104]	; 0x68
 8009384:	4654      	mov	r4, sl
 8009386:	2205      	movs	r2, #5
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4850      	ldr	r0, [pc, #320]	; (80094d0 <_svfiprintf_r+0x1e8>)
 800938e:	f7f6 ff27 	bl	80001e0 <memchr>
 8009392:	9a04      	ldr	r2, [sp, #16]
 8009394:	b9d8      	cbnz	r0, 80093ce <_svfiprintf_r+0xe6>
 8009396:	06d0      	lsls	r0, r2, #27
 8009398:	bf44      	itt	mi
 800939a:	2320      	movmi	r3, #32
 800939c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a0:	0711      	lsls	r1, r2, #28
 80093a2:	bf44      	itt	mi
 80093a4:	232b      	movmi	r3, #43	; 0x2b
 80093a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093aa:	f89a 3000 	ldrb.w	r3, [sl]
 80093ae:	2b2a      	cmp	r3, #42	; 0x2a
 80093b0:	d015      	beq.n	80093de <_svfiprintf_r+0xf6>
 80093b2:	9a07      	ldr	r2, [sp, #28]
 80093b4:	4654      	mov	r4, sl
 80093b6:	2000      	movs	r0, #0
 80093b8:	f04f 0c0a 	mov.w	ip, #10
 80093bc:	4621      	mov	r1, r4
 80093be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c2:	3b30      	subs	r3, #48	; 0x30
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d94d      	bls.n	8009464 <_svfiprintf_r+0x17c>
 80093c8:	b1b0      	cbz	r0, 80093f8 <_svfiprintf_r+0x110>
 80093ca:	9207      	str	r2, [sp, #28]
 80093cc:	e014      	b.n	80093f8 <_svfiprintf_r+0x110>
 80093ce:	eba0 0308 	sub.w	r3, r0, r8
 80093d2:	fa09 f303 	lsl.w	r3, r9, r3
 80093d6:	4313      	orrs	r3, r2
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	46a2      	mov	sl, r4
 80093dc:	e7d2      	b.n	8009384 <_svfiprintf_r+0x9c>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d19      	adds	r1, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9103      	str	r1, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfbb      	ittet	lt
 80093ea:	425b      	neglt	r3, r3
 80093ec:	f042 0202 	orrlt.w	r2, r2, #2
 80093f0:	9307      	strge	r3, [sp, #28]
 80093f2:	9307      	strlt	r3, [sp, #28]
 80093f4:	bfb8      	it	lt
 80093f6:	9204      	strlt	r2, [sp, #16]
 80093f8:	7823      	ldrb	r3, [r4, #0]
 80093fa:	2b2e      	cmp	r3, #46	; 0x2e
 80093fc:	d10c      	bne.n	8009418 <_svfiprintf_r+0x130>
 80093fe:	7863      	ldrb	r3, [r4, #1]
 8009400:	2b2a      	cmp	r3, #42	; 0x2a
 8009402:	d134      	bne.n	800946e <_svfiprintf_r+0x186>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	1d1a      	adds	r2, r3, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	9203      	str	r2, [sp, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfb8      	it	lt
 8009410:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009414:	3402      	adds	r4, #2
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094e0 <_svfiprintf_r+0x1f8>
 800941c:	7821      	ldrb	r1, [r4, #0]
 800941e:	2203      	movs	r2, #3
 8009420:	4650      	mov	r0, sl
 8009422:	f7f6 fedd 	bl	80001e0 <memchr>
 8009426:	b138      	cbz	r0, 8009438 <_svfiprintf_r+0x150>
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	eba0 000a 	sub.w	r0, r0, sl
 800942e:	2240      	movs	r2, #64	; 0x40
 8009430:	4082      	lsls	r2, r0
 8009432:	4313      	orrs	r3, r2
 8009434:	3401      	adds	r4, #1
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943c:	4825      	ldr	r0, [pc, #148]	; (80094d4 <_svfiprintf_r+0x1ec>)
 800943e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009442:	2206      	movs	r2, #6
 8009444:	f7f6 fecc 	bl	80001e0 <memchr>
 8009448:	2800      	cmp	r0, #0
 800944a:	d038      	beq.n	80094be <_svfiprintf_r+0x1d6>
 800944c:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <_svfiprintf_r+0x1f0>)
 800944e:	bb1b      	cbnz	r3, 8009498 <_svfiprintf_r+0x1b0>
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	3307      	adds	r3, #7
 8009454:	f023 0307 	bic.w	r3, r3, #7
 8009458:	3308      	adds	r3, #8
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945e:	4433      	add	r3, r6
 8009460:	9309      	str	r3, [sp, #36]	; 0x24
 8009462:	e768      	b.n	8009336 <_svfiprintf_r+0x4e>
 8009464:	fb0c 3202 	mla	r2, ip, r2, r3
 8009468:	460c      	mov	r4, r1
 800946a:	2001      	movs	r0, #1
 800946c:	e7a6      	b.n	80093bc <_svfiprintf_r+0xd4>
 800946e:	2300      	movs	r3, #0
 8009470:	3401      	adds	r4, #1
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	4619      	mov	r1, r3
 8009476:	f04f 0c0a 	mov.w	ip, #10
 800947a:	4620      	mov	r0, r4
 800947c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009480:	3a30      	subs	r2, #48	; 0x30
 8009482:	2a09      	cmp	r2, #9
 8009484:	d903      	bls.n	800948e <_svfiprintf_r+0x1a6>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0c6      	beq.n	8009418 <_svfiprintf_r+0x130>
 800948a:	9105      	str	r1, [sp, #20]
 800948c:	e7c4      	b.n	8009418 <_svfiprintf_r+0x130>
 800948e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009492:	4604      	mov	r4, r0
 8009494:	2301      	movs	r3, #1
 8009496:	e7f0      	b.n	800947a <_svfiprintf_r+0x192>
 8009498:	ab03      	add	r3, sp, #12
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	462a      	mov	r2, r5
 800949e:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <_svfiprintf_r+0x1f4>)
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7fd fe64 	bl	8007170 <_printf_float>
 80094a8:	1c42      	adds	r2, r0, #1
 80094aa:	4606      	mov	r6, r0
 80094ac:	d1d6      	bne.n	800945c <_svfiprintf_r+0x174>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	065b      	lsls	r3, r3, #25
 80094b2:	f53f af2d 	bmi.w	8009310 <_svfiprintf_r+0x28>
 80094b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b8:	b01d      	add	sp, #116	; 0x74
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	ab03      	add	r3, sp, #12
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	462a      	mov	r2, r5
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <_svfiprintf_r+0x1f4>)
 80094c6:	a904      	add	r1, sp, #16
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7fe f8f5 	bl	80076b8 <_printf_i>
 80094ce:	e7eb      	b.n	80094a8 <_svfiprintf_r+0x1c0>
 80094d0:	08009fac 	.word	0x08009fac
 80094d4:	08009fb6 	.word	0x08009fb6
 80094d8:	08007171 	.word	0x08007171
 80094dc:	08009235 	.word	0x08009235
 80094e0:	08009fb2 	.word	0x08009fb2

080094e4 <__sflush_r>:
 80094e4:	898a      	ldrh	r2, [r1, #12]
 80094e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	0710      	lsls	r0, r2, #28
 80094ee:	460c      	mov	r4, r1
 80094f0:	d458      	bmi.n	80095a4 <__sflush_r+0xc0>
 80094f2:	684b      	ldr	r3, [r1, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dc05      	bgt.n	8009504 <__sflush_r+0x20>
 80094f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dc02      	bgt.n	8009504 <__sflush_r+0x20>
 80094fe:	2000      	movs	r0, #0
 8009500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009506:	2e00      	cmp	r6, #0
 8009508:	d0f9      	beq.n	80094fe <__sflush_r+0x1a>
 800950a:	2300      	movs	r3, #0
 800950c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009510:	682f      	ldr	r7, [r5, #0]
 8009512:	6a21      	ldr	r1, [r4, #32]
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	d032      	beq.n	800957e <__sflush_r+0x9a>
 8009518:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	075a      	lsls	r2, r3, #29
 800951e:	d505      	bpl.n	800952c <__sflush_r+0x48>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	1ac0      	subs	r0, r0, r3
 8009524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009526:	b10b      	cbz	r3, 800952c <__sflush_r+0x48>
 8009528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800952a:	1ac0      	subs	r0, r0, r3
 800952c:	2300      	movs	r3, #0
 800952e:	4602      	mov	r2, r0
 8009530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009532:	6a21      	ldr	r1, [r4, #32]
 8009534:	4628      	mov	r0, r5
 8009536:	47b0      	blx	r6
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	d106      	bne.n	800954c <__sflush_r+0x68>
 800953e:	6829      	ldr	r1, [r5, #0]
 8009540:	291d      	cmp	r1, #29
 8009542:	d82b      	bhi.n	800959c <__sflush_r+0xb8>
 8009544:	4a29      	ldr	r2, [pc, #164]	; (80095ec <__sflush_r+0x108>)
 8009546:	410a      	asrs	r2, r1
 8009548:	07d6      	lsls	r6, r2, #31
 800954a:	d427      	bmi.n	800959c <__sflush_r+0xb8>
 800954c:	2200      	movs	r2, #0
 800954e:	6062      	str	r2, [r4, #4]
 8009550:	04d9      	lsls	r1, r3, #19
 8009552:	6922      	ldr	r2, [r4, #16]
 8009554:	6022      	str	r2, [r4, #0]
 8009556:	d504      	bpl.n	8009562 <__sflush_r+0x7e>
 8009558:	1c42      	adds	r2, r0, #1
 800955a:	d101      	bne.n	8009560 <__sflush_r+0x7c>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b903      	cbnz	r3, 8009562 <__sflush_r+0x7e>
 8009560:	6560      	str	r0, [r4, #84]	; 0x54
 8009562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009564:	602f      	str	r7, [r5, #0]
 8009566:	2900      	cmp	r1, #0
 8009568:	d0c9      	beq.n	80094fe <__sflush_r+0x1a>
 800956a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800956e:	4299      	cmp	r1, r3
 8009570:	d002      	beq.n	8009578 <__sflush_r+0x94>
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff f9e2 	bl	800893c <_free_r>
 8009578:	2000      	movs	r0, #0
 800957a:	6360      	str	r0, [r4, #52]	; 0x34
 800957c:	e7c0      	b.n	8009500 <__sflush_r+0x1c>
 800957e:	2301      	movs	r3, #1
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	1c41      	adds	r1, r0, #1
 8009586:	d1c8      	bne.n	800951a <__sflush_r+0x36>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0c5      	beq.n	800951a <__sflush_r+0x36>
 800958e:	2b1d      	cmp	r3, #29
 8009590:	d001      	beq.n	8009596 <__sflush_r+0xb2>
 8009592:	2b16      	cmp	r3, #22
 8009594:	d101      	bne.n	800959a <__sflush_r+0xb6>
 8009596:	602f      	str	r7, [r5, #0]
 8009598:	e7b1      	b.n	80094fe <__sflush_r+0x1a>
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	e7ad      	b.n	8009500 <__sflush_r+0x1c>
 80095a4:	690f      	ldr	r7, [r1, #16]
 80095a6:	2f00      	cmp	r7, #0
 80095a8:	d0a9      	beq.n	80094fe <__sflush_r+0x1a>
 80095aa:	0793      	lsls	r3, r2, #30
 80095ac:	680e      	ldr	r6, [r1, #0]
 80095ae:	bf08      	it	eq
 80095b0:	694b      	ldreq	r3, [r1, #20]
 80095b2:	600f      	str	r7, [r1, #0]
 80095b4:	bf18      	it	ne
 80095b6:	2300      	movne	r3, #0
 80095b8:	eba6 0807 	sub.w	r8, r6, r7
 80095bc:	608b      	str	r3, [r1, #8]
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	dd9c      	ble.n	80094fe <__sflush_r+0x1a>
 80095c4:	6a21      	ldr	r1, [r4, #32]
 80095c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095c8:	4643      	mov	r3, r8
 80095ca:	463a      	mov	r2, r7
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b0      	blx	r6
 80095d0:	2800      	cmp	r0, #0
 80095d2:	dc06      	bgt.n	80095e2 <__sflush_r+0xfe>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e0:	e78e      	b.n	8009500 <__sflush_r+0x1c>
 80095e2:	4407      	add	r7, r0
 80095e4:	eba8 0800 	sub.w	r8, r8, r0
 80095e8:	e7e9      	b.n	80095be <__sflush_r+0xda>
 80095ea:	bf00      	nop
 80095ec:	dfbffffe 	.word	0xdfbffffe

080095f0 <_fflush_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	690b      	ldr	r3, [r1, #16]
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b913      	cbnz	r3, 8009600 <_fflush_r+0x10>
 80095fa:	2500      	movs	r5, #0
 80095fc:	4628      	mov	r0, r5
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	b118      	cbz	r0, 800960a <_fflush_r+0x1a>
 8009602:	6a03      	ldr	r3, [r0, #32]
 8009604:	b90b      	cbnz	r3, 800960a <_fflush_r+0x1a>
 8009606:	f7fe f9f3 	bl	80079f0 <__sinit>
 800960a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f3      	beq.n	80095fa <_fflush_r+0xa>
 8009612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009614:	07d0      	lsls	r0, r2, #31
 8009616:	d404      	bmi.n	8009622 <_fflush_r+0x32>
 8009618:	0599      	lsls	r1, r3, #22
 800961a:	d402      	bmi.n	8009622 <_fflush_r+0x32>
 800961c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961e:	f7fe fb11 	bl	8007c44 <__retarget_lock_acquire_recursive>
 8009622:	4628      	mov	r0, r5
 8009624:	4621      	mov	r1, r4
 8009626:	f7ff ff5d 	bl	80094e4 <__sflush_r>
 800962a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800962c:	07da      	lsls	r2, r3, #31
 800962e:	4605      	mov	r5, r0
 8009630:	d4e4      	bmi.n	80095fc <_fflush_r+0xc>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	059b      	lsls	r3, r3, #22
 8009636:	d4e1      	bmi.n	80095fc <_fflush_r+0xc>
 8009638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800963a:	f7fe fb04 	bl	8007c46 <__retarget_lock_release_recursive>
 800963e:	e7dd      	b.n	80095fc <_fflush_r+0xc>

08009640 <memmove>:
 8009640:	4288      	cmp	r0, r1
 8009642:	b510      	push	{r4, lr}
 8009644:	eb01 0402 	add.w	r4, r1, r2
 8009648:	d902      	bls.n	8009650 <memmove+0x10>
 800964a:	4284      	cmp	r4, r0
 800964c:	4623      	mov	r3, r4
 800964e:	d807      	bhi.n	8009660 <memmove+0x20>
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	42a1      	cmp	r1, r4
 8009654:	d008      	beq.n	8009668 <memmove+0x28>
 8009656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965e:	e7f8      	b.n	8009652 <memmove+0x12>
 8009660:	4402      	add	r2, r0
 8009662:	4601      	mov	r1, r0
 8009664:	428a      	cmp	r2, r1
 8009666:	d100      	bne.n	800966a <memmove+0x2a>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009672:	e7f7      	b.n	8009664 <memmove+0x24>

08009674 <_sbrk_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d06      	ldr	r5, [pc, #24]	; (8009690 <_sbrk_r+0x1c>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f8 f930 	bl	80018e4 <_sbrk>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_sbrk_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_sbrk_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200004e8 	.word	0x200004e8

08009694 <memcpy>:
 8009694:	440a      	add	r2, r1
 8009696:	4291      	cmp	r1, r2
 8009698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800969c:	d100      	bne.n	80096a0 <memcpy+0xc>
 800969e:	4770      	bx	lr
 80096a0:	b510      	push	{r4, lr}
 80096a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096aa:	4291      	cmp	r1, r2
 80096ac:	d1f9      	bne.n	80096a2 <memcpy+0xe>
 80096ae:	bd10      	pop	{r4, pc}

080096b0 <__assert_func>:
 80096b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096b2:	4614      	mov	r4, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <__assert_func+0x2c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4605      	mov	r5, r0
 80096bc:	68d8      	ldr	r0, [r3, #12]
 80096be:	b14c      	cbz	r4, 80096d4 <__assert_func+0x24>
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <__assert_func+0x30>)
 80096c2:	9100      	str	r1, [sp, #0]
 80096c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096c8:	4906      	ldr	r1, [pc, #24]	; (80096e4 <__assert_func+0x34>)
 80096ca:	462b      	mov	r3, r5
 80096cc:	f000 f872 	bl	80097b4 <fiprintf>
 80096d0:	f000 f882 	bl	80097d8 <abort>
 80096d4:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <__assert_func+0x38>)
 80096d6:	461c      	mov	r4, r3
 80096d8:	e7f3      	b.n	80096c2 <__assert_func+0x12>
 80096da:	bf00      	nop
 80096dc:	20000070 	.word	0x20000070
 80096e0:	08009fc7 	.word	0x08009fc7
 80096e4:	08009fd4 	.word	0x08009fd4
 80096e8:	0800a002 	.word	0x0800a002

080096ec <_calloc_r>:
 80096ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ee:	fba1 2402 	umull	r2, r4, r1, r2
 80096f2:	b94c      	cbnz	r4, 8009708 <_calloc_r+0x1c>
 80096f4:	4611      	mov	r1, r2
 80096f6:	9201      	str	r2, [sp, #4]
 80096f8:	f7ff f994 	bl	8008a24 <_malloc_r>
 80096fc:	9a01      	ldr	r2, [sp, #4]
 80096fe:	4605      	mov	r5, r0
 8009700:	b930      	cbnz	r0, 8009710 <_calloc_r+0x24>
 8009702:	4628      	mov	r0, r5
 8009704:	b003      	add	sp, #12
 8009706:	bd30      	pop	{r4, r5, pc}
 8009708:	220c      	movs	r2, #12
 800970a:	6002      	str	r2, [r0, #0]
 800970c:	2500      	movs	r5, #0
 800970e:	e7f8      	b.n	8009702 <_calloc_r+0x16>
 8009710:	4621      	mov	r1, r4
 8009712:	f7fe fa1a 	bl	8007b4a <memset>
 8009716:	e7f4      	b.n	8009702 <_calloc_r+0x16>

08009718 <__ascii_mbtowc>:
 8009718:	b082      	sub	sp, #8
 800971a:	b901      	cbnz	r1, 800971e <__ascii_mbtowc+0x6>
 800971c:	a901      	add	r1, sp, #4
 800971e:	b142      	cbz	r2, 8009732 <__ascii_mbtowc+0x1a>
 8009720:	b14b      	cbz	r3, 8009736 <__ascii_mbtowc+0x1e>
 8009722:	7813      	ldrb	r3, [r2, #0]
 8009724:	600b      	str	r3, [r1, #0]
 8009726:	7812      	ldrb	r2, [r2, #0]
 8009728:	1e10      	subs	r0, r2, #0
 800972a:	bf18      	it	ne
 800972c:	2001      	movne	r0, #1
 800972e:	b002      	add	sp, #8
 8009730:	4770      	bx	lr
 8009732:	4610      	mov	r0, r2
 8009734:	e7fb      	b.n	800972e <__ascii_mbtowc+0x16>
 8009736:	f06f 0001 	mvn.w	r0, #1
 800973a:	e7f8      	b.n	800972e <__ascii_mbtowc+0x16>

0800973c <_realloc_r>:
 800973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	4680      	mov	r8, r0
 8009742:	4614      	mov	r4, r2
 8009744:	460e      	mov	r6, r1
 8009746:	b921      	cbnz	r1, 8009752 <_realloc_r+0x16>
 8009748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4611      	mov	r1, r2
 800974e:	f7ff b969 	b.w	8008a24 <_malloc_r>
 8009752:	b92a      	cbnz	r2, 8009760 <_realloc_r+0x24>
 8009754:	f7ff f8f2 	bl	800893c <_free_r>
 8009758:	4625      	mov	r5, r4
 800975a:	4628      	mov	r0, r5
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	f000 f841 	bl	80097e6 <_malloc_usable_size_r>
 8009764:	4284      	cmp	r4, r0
 8009766:	4607      	mov	r7, r0
 8009768:	d802      	bhi.n	8009770 <_realloc_r+0x34>
 800976a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800976e:	d812      	bhi.n	8009796 <_realloc_r+0x5a>
 8009770:	4621      	mov	r1, r4
 8009772:	4640      	mov	r0, r8
 8009774:	f7ff f956 	bl	8008a24 <_malloc_r>
 8009778:	4605      	mov	r5, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d0ed      	beq.n	800975a <_realloc_r+0x1e>
 800977e:	42bc      	cmp	r4, r7
 8009780:	4622      	mov	r2, r4
 8009782:	4631      	mov	r1, r6
 8009784:	bf28      	it	cs
 8009786:	463a      	movcs	r2, r7
 8009788:	f7ff ff84 	bl	8009694 <memcpy>
 800978c:	4631      	mov	r1, r6
 800978e:	4640      	mov	r0, r8
 8009790:	f7ff f8d4 	bl	800893c <_free_r>
 8009794:	e7e1      	b.n	800975a <_realloc_r+0x1e>
 8009796:	4635      	mov	r5, r6
 8009798:	e7df      	b.n	800975a <_realloc_r+0x1e>

0800979a <__ascii_wctomb>:
 800979a:	b149      	cbz	r1, 80097b0 <__ascii_wctomb+0x16>
 800979c:	2aff      	cmp	r2, #255	; 0xff
 800979e:	bf85      	ittet	hi
 80097a0:	238a      	movhi	r3, #138	; 0x8a
 80097a2:	6003      	strhi	r3, [r0, #0]
 80097a4:	700a      	strbls	r2, [r1, #0]
 80097a6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80097aa:	bf98      	it	ls
 80097ac:	2001      	movls	r0, #1
 80097ae:	4770      	bx	lr
 80097b0:	4608      	mov	r0, r1
 80097b2:	4770      	bx	lr

080097b4 <fiprintf>:
 80097b4:	b40e      	push	{r1, r2, r3}
 80097b6:	b503      	push	{r0, r1, lr}
 80097b8:	4601      	mov	r1, r0
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	4805      	ldr	r0, [pc, #20]	; (80097d4 <fiprintf+0x20>)
 80097be:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c2:	6800      	ldr	r0, [r0, #0]
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f000 f83f 	bl	8009848 <_vfiprintf_r>
 80097ca:	b002      	add	sp, #8
 80097cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d0:	b003      	add	sp, #12
 80097d2:	4770      	bx	lr
 80097d4:	20000070 	.word	0x20000070

080097d8 <abort>:
 80097d8:	b508      	push	{r3, lr}
 80097da:	2006      	movs	r0, #6
 80097dc:	f000 fa0c 	bl	8009bf8 <raise>
 80097e0:	2001      	movs	r0, #1
 80097e2:	f7f8 f807 	bl	80017f4 <_exit>

080097e6 <_malloc_usable_size_r>:
 80097e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ea:	1f18      	subs	r0, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfbc      	itt	lt
 80097f0:	580b      	ldrlt	r3, [r1, r0]
 80097f2:	18c0      	addlt	r0, r0, r3
 80097f4:	4770      	bx	lr

080097f6 <__sfputc_r>:
 80097f6:	6893      	ldr	r3, [r2, #8]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	b410      	push	{r4}
 80097fe:	6093      	str	r3, [r2, #8]
 8009800:	da08      	bge.n	8009814 <__sfputc_r+0x1e>
 8009802:	6994      	ldr	r4, [r2, #24]
 8009804:	42a3      	cmp	r3, r4
 8009806:	db01      	blt.n	800980c <__sfputc_r+0x16>
 8009808:	290a      	cmp	r1, #10
 800980a:	d103      	bne.n	8009814 <__sfputc_r+0x1e>
 800980c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009810:	f000 b934 	b.w	8009a7c <__swbuf_r>
 8009814:	6813      	ldr	r3, [r2, #0]
 8009816:	1c58      	adds	r0, r3, #1
 8009818:	6010      	str	r0, [r2, #0]
 800981a:	7019      	strb	r1, [r3, #0]
 800981c:	4608      	mov	r0, r1
 800981e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009822:	4770      	bx	lr

08009824 <__sfputs_r>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	4614      	mov	r4, r2
 800982c:	18d5      	adds	r5, r2, r3
 800982e:	42ac      	cmp	r4, r5
 8009830:	d101      	bne.n	8009836 <__sfputs_r+0x12>
 8009832:	2000      	movs	r0, #0
 8009834:	e007      	b.n	8009846 <__sfputs_r+0x22>
 8009836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983a:	463a      	mov	r2, r7
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff ffda 	bl	80097f6 <__sfputc_r>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d1f3      	bne.n	800982e <__sfputs_r+0xa>
 8009846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009848 <_vfiprintf_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460d      	mov	r5, r1
 800984e:	b09d      	sub	sp, #116	; 0x74
 8009850:	4614      	mov	r4, r2
 8009852:	4698      	mov	r8, r3
 8009854:	4606      	mov	r6, r0
 8009856:	b118      	cbz	r0, 8009860 <_vfiprintf_r+0x18>
 8009858:	6a03      	ldr	r3, [r0, #32]
 800985a:	b90b      	cbnz	r3, 8009860 <_vfiprintf_r+0x18>
 800985c:	f7fe f8c8 	bl	80079f0 <__sinit>
 8009860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009862:	07d9      	lsls	r1, r3, #31
 8009864:	d405      	bmi.n	8009872 <_vfiprintf_r+0x2a>
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	059a      	lsls	r2, r3, #22
 800986a:	d402      	bmi.n	8009872 <_vfiprintf_r+0x2a>
 800986c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986e:	f7fe f9e9 	bl	8007c44 <__retarget_lock_acquire_recursive>
 8009872:	89ab      	ldrh	r3, [r5, #12]
 8009874:	071b      	lsls	r3, r3, #28
 8009876:	d501      	bpl.n	800987c <_vfiprintf_r+0x34>
 8009878:	692b      	ldr	r3, [r5, #16]
 800987a:	b99b      	cbnz	r3, 80098a4 <_vfiprintf_r+0x5c>
 800987c:	4629      	mov	r1, r5
 800987e:	4630      	mov	r0, r6
 8009880:	f000 f93a 	bl	8009af8 <__swsetup_r>
 8009884:	b170      	cbz	r0, 80098a4 <_vfiprintf_r+0x5c>
 8009886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009888:	07dc      	lsls	r4, r3, #31
 800988a:	d504      	bpl.n	8009896 <_vfiprintf_r+0x4e>
 800988c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009890:	b01d      	add	sp, #116	; 0x74
 8009892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009896:	89ab      	ldrh	r3, [r5, #12]
 8009898:	0598      	lsls	r0, r3, #22
 800989a:	d4f7      	bmi.n	800988c <_vfiprintf_r+0x44>
 800989c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989e:	f7fe f9d2 	bl	8007c46 <__retarget_lock_release_recursive>
 80098a2:	e7f3      	b.n	800988c <_vfiprintf_r+0x44>
 80098a4:	2300      	movs	r3, #0
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	2320      	movs	r3, #32
 80098aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b2:	2330      	movs	r3, #48	; 0x30
 80098b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a68 <_vfiprintf_r+0x220>
 80098b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098bc:	f04f 0901 	mov.w	r9, #1
 80098c0:	4623      	mov	r3, r4
 80098c2:	469a      	mov	sl, r3
 80098c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c8:	b10a      	cbz	r2, 80098ce <_vfiprintf_r+0x86>
 80098ca:	2a25      	cmp	r2, #37	; 0x25
 80098cc:	d1f9      	bne.n	80098c2 <_vfiprintf_r+0x7a>
 80098ce:	ebba 0b04 	subs.w	fp, sl, r4
 80098d2:	d00b      	beq.n	80098ec <_vfiprintf_r+0xa4>
 80098d4:	465b      	mov	r3, fp
 80098d6:	4622      	mov	r2, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ffa2 	bl	8009824 <__sfputs_r>
 80098e0:	3001      	adds	r0, #1
 80098e2:	f000 80a9 	beq.w	8009a38 <_vfiprintf_r+0x1f0>
 80098e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e8:	445a      	add	r2, fp
 80098ea:	9209      	str	r2, [sp, #36]	; 0x24
 80098ec:	f89a 3000 	ldrb.w	r3, [sl]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80a1 	beq.w	8009a38 <_vfiprintf_r+0x1f0>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009900:	f10a 0a01 	add.w	sl, sl, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990c:	931a      	str	r3, [sp, #104]	; 0x68
 800990e:	4654      	mov	r4, sl
 8009910:	2205      	movs	r2, #5
 8009912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009916:	4854      	ldr	r0, [pc, #336]	; (8009a68 <_vfiprintf_r+0x220>)
 8009918:	f7f6 fc62 	bl	80001e0 <memchr>
 800991c:	9a04      	ldr	r2, [sp, #16]
 800991e:	b9d8      	cbnz	r0, 8009958 <_vfiprintf_r+0x110>
 8009920:	06d1      	lsls	r1, r2, #27
 8009922:	bf44      	itt	mi
 8009924:	2320      	movmi	r3, #32
 8009926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992a:	0713      	lsls	r3, r2, #28
 800992c:	bf44      	itt	mi
 800992e:	232b      	movmi	r3, #43	; 0x2b
 8009930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b2a      	cmp	r3, #42	; 0x2a
 800993a:	d015      	beq.n	8009968 <_vfiprintf_r+0x120>
 800993c:	9a07      	ldr	r2, [sp, #28]
 800993e:	4654      	mov	r4, sl
 8009940:	2000      	movs	r0, #0
 8009942:	f04f 0c0a 	mov.w	ip, #10
 8009946:	4621      	mov	r1, r4
 8009948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994c:	3b30      	subs	r3, #48	; 0x30
 800994e:	2b09      	cmp	r3, #9
 8009950:	d94d      	bls.n	80099ee <_vfiprintf_r+0x1a6>
 8009952:	b1b0      	cbz	r0, 8009982 <_vfiprintf_r+0x13a>
 8009954:	9207      	str	r2, [sp, #28]
 8009956:	e014      	b.n	8009982 <_vfiprintf_r+0x13a>
 8009958:	eba0 0308 	sub.w	r3, r0, r8
 800995c:	fa09 f303 	lsl.w	r3, r9, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	46a2      	mov	sl, r4
 8009966:	e7d2      	b.n	800990e <_vfiprintf_r+0xc6>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	1d19      	adds	r1, r3, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	9103      	str	r1, [sp, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfbb      	ittet	lt
 8009974:	425b      	neglt	r3, r3
 8009976:	f042 0202 	orrlt.w	r2, r2, #2
 800997a:	9307      	strge	r3, [sp, #28]
 800997c:	9307      	strlt	r3, [sp, #28]
 800997e:	bfb8      	it	lt
 8009980:	9204      	strlt	r2, [sp, #16]
 8009982:	7823      	ldrb	r3, [r4, #0]
 8009984:	2b2e      	cmp	r3, #46	; 0x2e
 8009986:	d10c      	bne.n	80099a2 <_vfiprintf_r+0x15a>
 8009988:	7863      	ldrb	r3, [r4, #1]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d134      	bne.n	80099f8 <_vfiprintf_r+0x1b0>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	9203      	str	r2, [sp, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfb8      	it	lt
 800999a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800999e:	3402      	adds	r4, #2
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a78 <_vfiprintf_r+0x230>
 80099a6:	7821      	ldrb	r1, [r4, #0]
 80099a8:	2203      	movs	r2, #3
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f6 fc18 	bl	80001e0 <memchr>
 80099b0:	b138      	cbz	r0, 80099c2 <_vfiprintf_r+0x17a>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	eba0 000a 	sub.w	r0, r0, sl
 80099b8:	2240      	movs	r2, #64	; 0x40
 80099ba:	4082      	lsls	r2, r0
 80099bc:	4313      	orrs	r3, r2
 80099be:	3401      	adds	r4, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4829      	ldr	r0, [pc, #164]	; (8009a6c <_vfiprintf_r+0x224>)
 80099c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099cc:	2206      	movs	r2, #6
 80099ce:	f7f6 fc07 	bl	80001e0 <memchr>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d03f      	beq.n	8009a56 <_vfiprintf_r+0x20e>
 80099d6:	4b26      	ldr	r3, [pc, #152]	; (8009a70 <_vfiprintf_r+0x228>)
 80099d8:	bb1b      	cbnz	r3, 8009a22 <_vfiprintf_r+0x1da>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3307      	adds	r3, #7
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	3308      	adds	r3, #8
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	443b      	add	r3, r7
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	e768      	b.n	80098c0 <_vfiprintf_r+0x78>
 80099ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	2001      	movs	r0, #1
 80099f6:	e7a6      	b.n	8009946 <_vfiprintf_r+0xfe>
 80099f8:	2300      	movs	r3, #0
 80099fa:	3401      	adds	r4, #1
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	4619      	mov	r1, r3
 8009a00:	f04f 0c0a 	mov.w	ip, #10
 8009a04:	4620      	mov	r0, r4
 8009a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0a:	3a30      	subs	r2, #48	; 0x30
 8009a0c:	2a09      	cmp	r2, #9
 8009a0e:	d903      	bls.n	8009a18 <_vfiprintf_r+0x1d0>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0c6      	beq.n	80099a2 <_vfiprintf_r+0x15a>
 8009a14:	9105      	str	r1, [sp, #20]
 8009a16:	e7c4      	b.n	80099a2 <_vfiprintf_r+0x15a>
 8009a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7f0      	b.n	8009a04 <_vfiprintf_r+0x1bc>
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	462a      	mov	r2, r5
 8009a28:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <_vfiprintf_r+0x22c>)
 8009a2a:	a904      	add	r1, sp, #16
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7fd fb9f 	bl	8007170 <_printf_float>
 8009a32:	4607      	mov	r7, r0
 8009a34:	1c78      	adds	r0, r7, #1
 8009a36:	d1d6      	bne.n	80099e6 <_vfiprintf_r+0x19e>
 8009a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x202>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x202>
 8009a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a46:	f7fe f8fe 	bl	8007c46 <__retarget_lock_release_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	065b      	lsls	r3, r3, #25
 8009a4e:	f53f af1d 	bmi.w	800988c <_vfiprintf_r+0x44>
 8009a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a54:	e71c      	b.n	8009890 <_vfiprintf_r+0x48>
 8009a56:	ab03      	add	r3, sp, #12
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <_vfiprintf_r+0x22c>)
 8009a5e:	a904      	add	r1, sp, #16
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7fd fe29 	bl	80076b8 <_printf_i>
 8009a66:	e7e4      	b.n	8009a32 <_vfiprintf_r+0x1ea>
 8009a68:	08009fac 	.word	0x08009fac
 8009a6c:	08009fb6 	.word	0x08009fb6
 8009a70:	08007171 	.word	0x08007171
 8009a74:	08009825 	.word	0x08009825
 8009a78:	08009fb2 	.word	0x08009fb2

08009a7c <__swbuf_r>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	460e      	mov	r6, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	4605      	mov	r5, r0
 8009a84:	b118      	cbz	r0, 8009a8e <__swbuf_r+0x12>
 8009a86:	6a03      	ldr	r3, [r0, #32]
 8009a88:	b90b      	cbnz	r3, 8009a8e <__swbuf_r+0x12>
 8009a8a:	f7fd ffb1 	bl	80079f0 <__sinit>
 8009a8e:	69a3      	ldr	r3, [r4, #24]
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	071a      	lsls	r2, r3, #28
 8009a96:	d525      	bpl.n	8009ae4 <__swbuf_r+0x68>
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b31b      	cbz	r3, 8009ae4 <__swbuf_r+0x68>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	6922      	ldr	r2, [r4, #16]
 8009aa0:	1a98      	subs	r0, r3, r2
 8009aa2:	6963      	ldr	r3, [r4, #20]
 8009aa4:	b2f6      	uxtb	r6, r6
 8009aa6:	4283      	cmp	r3, r0
 8009aa8:	4637      	mov	r7, r6
 8009aaa:	dc04      	bgt.n	8009ab6 <__swbuf_r+0x3a>
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f7ff fd9e 	bl	80095f0 <_fflush_r>
 8009ab4:	b9e0      	cbnz	r0, 8009af0 <__swbuf_r+0x74>
 8009ab6:	68a3      	ldr	r3, [r4, #8]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	6022      	str	r2, [r4, #0]
 8009ac2:	701e      	strb	r6, [r3, #0]
 8009ac4:	6962      	ldr	r2, [r4, #20]
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d004      	beq.n	8009ad6 <__swbuf_r+0x5a>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	07db      	lsls	r3, r3, #31
 8009ad0:	d506      	bpl.n	8009ae0 <__swbuf_r+0x64>
 8009ad2:	2e0a      	cmp	r6, #10
 8009ad4:	d104      	bne.n	8009ae0 <__swbuf_r+0x64>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f7ff fd89 	bl	80095f0 <_fflush_r>
 8009ade:	b938      	cbnz	r0, 8009af0 <__swbuf_r+0x74>
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 f806 	bl	8009af8 <__swsetup_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0d5      	beq.n	8009a9c <__swbuf_r+0x20>
 8009af0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009af4:	e7f4      	b.n	8009ae0 <__swbuf_r+0x64>
	...

08009af8 <__swsetup_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4b2a      	ldr	r3, [pc, #168]	; (8009ba4 <__swsetup_r+0xac>)
 8009afc:	4605      	mov	r5, r0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	460c      	mov	r4, r1
 8009b02:	b118      	cbz	r0, 8009b0c <__swsetup_r+0x14>
 8009b04:	6a03      	ldr	r3, [r0, #32]
 8009b06:	b90b      	cbnz	r3, 8009b0c <__swsetup_r+0x14>
 8009b08:	f7fd ff72 	bl	80079f0 <__sinit>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b12:	0718      	lsls	r0, r3, #28
 8009b14:	d422      	bmi.n	8009b5c <__swsetup_r+0x64>
 8009b16:	06d9      	lsls	r1, r3, #27
 8009b18:	d407      	bmi.n	8009b2a <__swsetup_r+0x32>
 8009b1a:	2309      	movs	r3, #9
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b28:	e034      	b.n	8009b94 <__swsetup_r+0x9c>
 8009b2a:	0758      	lsls	r0, r3, #29
 8009b2c:	d512      	bpl.n	8009b54 <__swsetup_r+0x5c>
 8009b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b30:	b141      	cbz	r1, 8009b44 <__swsetup_r+0x4c>
 8009b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b36:	4299      	cmp	r1, r3
 8009b38:	d002      	beq.n	8009b40 <__swsetup_r+0x48>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f7fe fefe 	bl	800893c <_free_r>
 8009b40:	2300      	movs	r3, #0
 8009b42:	6363      	str	r3, [r4, #52]	; 0x34
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0308 	orr.w	r3, r3, #8
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	b94b      	cbnz	r3, 8009b74 <__swsetup_r+0x7c>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b6a:	d003      	beq.n	8009b74 <__swsetup_r+0x7c>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f884 	bl	8009c7c <__smakebuf_r>
 8009b74:	89a0      	ldrh	r0, [r4, #12]
 8009b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b7a:	f010 0301 	ands.w	r3, r0, #1
 8009b7e:	d00a      	beq.n	8009b96 <__swsetup_r+0x9e>
 8009b80:	2300      	movs	r3, #0
 8009b82:	60a3      	str	r3, [r4, #8]
 8009b84:	6963      	ldr	r3, [r4, #20]
 8009b86:	425b      	negs	r3, r3
 8009b88:	61a3      	str	r3, [r4, #24]
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b943      	cbnz	r3, 8009ba0 <__swsetup_r+0xa8>
 8009b8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b92:	d1c4      	bne.n	8009b1e <__swsetup_r+0x26>
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	0781      	lsls	r1, r0, #30
 8009b98:	bf58      	it	pl
 8009b9a:	6963      	ldrpl	r3, [r4, #20]
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	e7f4      	b.n	8009b8a <__swsetup_r+0x92>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7f7      	b.n	8009b94 <__swsetup_r+0x9c>
 8009ba4:	20000070 	.word	0x20000070

08009ba8 <_raise_r>:
 8009ba8:	291f      	cmp	r1, #31
 8009baa:	b538      	push	{r3, r4, r5, lr}
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	d904      	bls.n	8009bbc <_raise_r+0x14>
 8009bb2:	2316      	movs	r3, #22
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009bbe:	b112      	cbz	r2, 8009bc6 <_raise_r+0x1e>
 8009bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bc4:	b94b      	cbnz	r3, 8009bda <_raise_r+0x32>
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f830 	bl	8009c2c <_getpid_r>
 8009bcc:	462a      	mov	r2, r5
 8009bce:	4601      	mov	r1, r0
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bd6:	f000 b817 	b.w	8009c08 <_kill_r>
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d00a      	beq.n	8009bf4 <_raise_r+0x4c>
 8009bde:	1c59      	adds	r1, r3, #1
 8009be0:	d103      	bne.n	8009bea <_raise_r+0x42>
 8009be2:	2316      	movs	r3, #22
 8009be4:	6003      	str	r3, [r0, #0]
 8009be6:	2001      	movs	r0, #1
 8009be8:	e7e7      	b.n	8009bba <_raise_r+0x12>
 8009bea:	2400      	movs	r4, #0
 8009bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	4798      	blx	r3
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7e0      	b.n	8009bba <_raise_r+0x12>

08009bf8 <raise>:
 8009bf8:	4b02      	ldr	r3, [pc, #8]	; (8009c04 <raise+0xc>)
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	f7ff bfd3 	b.w	8009ba8 <_raise_r>
 8009c02:	bf00      	nop
 8009c04:	20000070 	.word	0x20000070

08009c08 <_kill_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	; (8009c28 <_kill_r+0x20>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	4611      	mov	r1, r2
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	f7f7 fddd 	bl	80017d4 <_kill>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d102      	bne.n	8009c24 <_kill_r+0x1c>
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	b103      	cbz	r3, 8009c24 <_kill_r+0x1c>
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	200004e8 	.word	0x200004e8

08009c2c <_getpid_r>:
 8009c2c:	f7f7 bdca 	b.w	80017c4 <_getpid>

08009c30 <__swhatbuf_r>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	460c      	mov	r4, r1
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	b096      	sub	sp, #88	; 0x58
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	461e      	mov	r6, r3
 8009c40:	da0d      	bge.n	8009c5e <__swhatbuf_r+0x2e>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	bf0c      	ite	eq
 8009c4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c52:	2340      	movne	r3, #64	; 0x40
 8009c54:	2000      	movs	r0, #0
 8009c56:	6031      	str	r1, [r6, #0]
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	b016      	add	sp, #88	; 0x58
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	466a      	mov	r2, sp
 8009c60:	f000 f848 	bl	8009cf4 <_fstat_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	dbec      	blt.n	8009c42 <__swhatbuf_r+0x12>
 8009c68:	9901      	ldr	r1, [sp, #4]
 8009c6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c72:	4259      	negs	r1, r3
 8009c74:	4159      	adcs	r1, r3
 8009c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7a:	e7eb      	b.n	8009c54 <__swhatbuf_r+0x24>

08009c7c <__smakebuf_r>:
 8009c7c:	898b      	ldrh	r3, [r1, #12]
 8009c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c80:	079d      	lsls	r5, r3, #30
 8009c82:	4606      	mov	r6, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	d507      	bpl.n	8009c98 <__smakebuf_r+0x1c>
 8009c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	6123      	str	r3, [r4, #16]
 8009c90:	2301      	movs	r3, #1
 8009c92:	6163      	str	r3, [r4, #20]
 8009c94:	b002      	add	sp, #8
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	ab01      	add	r3, sp, #4
 8009c9a:	466a      	mov	r2, sp
 8009c9c:	f7ff ffc8 	bl	8009c30 <__swhatbuf_r>
 8009ca0:	9900      	ldr	r1, [sp, #0]
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7fe febd 	bl	8008a24 <_malloc_r>
 8009caa:	b948      	cbnz	r0, 8009cc0 <__smakebuf_r+0x44>
 8009cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb0:	059a      	lsls	r2, r3, #22
 8009cb2:	d4ef      	bmi.n	8009c94 <__smakebuf_r+0x18>
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	f043 0302 	orr.w	r3, r3, #2
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	e7e3      	b.n	8009c88 <__smakebuf_r+0xc>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	6020      	str	r0, [r4, #0]
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	6163      	str	r3, [r4, #20]
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	6120      	str	r0, [r4, #16]
 8009cd2:	b15b      	cbz	r3, 8009cec <__smakebuf_r+0x70>
 8009cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f81d 	bl	8009d18 <_isatty_r>
 8009cde:	b128      	cbz	r0, 8009cec <__smakebuf_r+0x70>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	431d      	orrs	r5, r3
 8009cf0:	81a5      	strh	r5, [r4, #12]
 8009cf2:	e7cf      	b.n	8009c94 <__smakebuf_r+0x18>

08009cf4 <_fstat_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	; (8009d14 <_fstat_r+0x20>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	f7f7 fdc6 	bl	8001892 <_fstat>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d102      	bne.n	8009d10 <_fstat_r+0x1c>
 8009d0a:	682b      	ldr	r3, [r5, #0]
 8009d0c:	b103      	cbz	r3, 8009d10 <_fstat_r+0x1c>
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	bf00      	nop
 8009d14:	200004e8 	.word	0x200004e8

08009d18 <_isatty_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	; (8009d34 <_isatty_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f7 fdc5 	bl	80018b2 <_isatty>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_isatty_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_isatty_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	200004e8 	.word	0x200004e8

08009d38 <_init>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr

08009d44 <_fini>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	bf00      	nop
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr
