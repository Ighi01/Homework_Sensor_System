
HW_06B_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800a378  0800a378  0001a378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a72c  0800a72c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a734  0800a734  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e4  0800a920  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800a920  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001040a  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002198  00000000  00000000  00030661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5d  00000000  00000000  000337a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017679  00000000  00000000  000343fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c80  00000000  00000000  0004ba76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916a0  00000000  00000000  0005d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000548c  00000000  00000000  000eed98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f4224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a360 	.word	0x0800a360

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a360 	.word	0x0800a360

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//------------------TIMER Interrupt Service Routine -----------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f58:	b0a6      	sub	sp, #152	; 0x98
 8000f5a:	af06      	add	r7, sp, #24
 8000f5c:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	f040 80ab 	bne.w	80010be <HAL_TIM_PeriodElapsedCallback+0x16a>
	{
		//tell to LIS2DE which register you want to read from
		if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, &ACC_OUT_X, 1, 50) != HAL_OK)
 8000f68:	2332      	movs	r3, #50	; 0x32
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f70:	2150      	movs	r1, #80	; 0x50
 8000f72:	4857      	ldr	r0, [pc, #348]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f74:	f001 fdf0 	bl	8002b58 <HAL_I2C_Master_Transmit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x2e>
			Error_Handler();
 8000f7e:	f000 fabf 	bl	8001500 <Error_Handler>

		//Read data from the register (x)
		if(HAL_I2C_Master_Receive(&hi2c1, 0b01010001, (uint8_t*) &x, sizeof(x), 50) != HAL_OK)
 8000f82:	2332      	movs	r3, #50	; 0x32
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f8a:	2151      	movs	r1, #81	; 0x51
 8000f8c:	4850      	ldr	r0, [pc, #320]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f8e:	f001 fee1 	bl	8002d54 <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>
			Error_Handler();
 8000f98:	f000 fab2 	bl	8001500 <Error_Handler>

		if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, &ACC_OUT_Y, 1, 50) != HAL_OK)
 8000f9c:	2332      	movs	r3, #50	; 0x32
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fa4:	2150      	movs	r1, #80	; 0x50
 8000fa6:	484a      	ldr	r0, [pc, #296]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fa8:	f001 fdd6 	bl	8002b58 <HAL_I2C_Master_Transmit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x62>
			Error_Handler();
 8000fb2:	f000 faa5 	bl	8001500 <Error_Handler>

		//Read data from the register (y)
		if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &y, sizeof(y), 50) != HAL_OK)
 8000fb6:	2332      	movs	r3, #50	; 0x32
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4a47      	ldr	r2, [pc, #284]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fbe:	2151      	movs	r1, #81	; 0x51
 8000fc0:	4843      	ldr	r0, [pc, #268]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fc2:	f001 fec7 	bl	8002d54 <HAL_I2C_Master_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x7c>
			Error_Handler();
 8000fcc:	f000 fa98 	bl	8001500 <Error_Handler>

		if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, &ACC_OUT_Z, 1, 50) != HAL_OK)
 8000fd0:	2332      	movs	r3, #50	; 0x32
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fd8:	2150      	movs	r1, #80	; 0x50
 8000fda:	483d      	ldr	r0, [pc, #244]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fdc:	f001 fdbc 	bl	8002b58 <HAL_I2C_Master_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x96>
			Error_Handler();
 8000fe6:	f000 fa8b 	bl	8001500 <Error_Handler>

		//Read data from the register (z)
		if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &z, sizeof(z), 50) != HAL_OK)
 8000fea:	2332      	movs	r3, #50	; 0x32
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4a3c      	ldr	r2, [pc, #240]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ff2:	2151      	movs	r1, #81	; 0x51
 8000ff4:	4836      	ldr	r0, [pc, #216]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ff6:	f001 fead 	bl	8002d54 <HAL_I2C_Master_Receive>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_TIM_PeriodElapsedCallback+0xb0>
			Error_Handler();
 8001000:	f000 fa7e 	bl	8001500 <Error_Handler>

		//conversion in g
		float x_g = x/64.0;
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001006:	f993 3000 	ldrsb.w	r3, [r3]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa92 	bl	8000534 <__aeabi_i2d>
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001016:	f7ff fc21 	bl	800085c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc9 	bl	8000bb8 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	67fb      	str	r3, [r7, #124]	; 0x7c
		float y_g = y/64.0;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x188>)
 800102c:	f993 3000 	ldrsb.w	r3, [r3]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa7f 	bl	8000534 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800103c:	f7ff fc0e 	bl	800085c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdb6 	bl	8000bb8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	67bb      	str	r3, [r7, #120]	; 0x78
		float z_g = z/64.0;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001052:	f993 3000 	ldrsb.w	r3, [r3]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa6c 	bl	8000534 <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001062:	f7ff fbfb 	bl	800085c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fda3 	bl	8000bb8 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	677b      	str	r3, [r7, #116]	; 0x74

		char string[100];

		int length = snprintf(string,sizeof(string),"X: %1.2f\r\nY: %1.2f\r\nZ: %1.2f\r\n\r\n",x_g,y_g,z_g);
 8001076:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001078:	f7ff fa6e 	bl	8000558 <__aeabi_f2d>
 800107c:	4604      	mov	r4, r0
 800107e:	460d      	mov	r5, r1
 8001080:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001082:	f7ff fa69 	bl	8000558 <__aeabi_f2d>
 8001086:	4680      	mov	r8, r0
 8001088:	4689      	mov	r9, r1
 800108a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800108c:	f7ff fa64 	bl	8000558 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	f107 000c 	add.w	r0, r7, #12
 8001098:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800109c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010a0:	e9cd 4500 	strd	r4, r5, [sp]
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010a6:	2164      	movs	r1, #100	; 0x64
 80010a8:	f006 ffec 	bl	8008084 <sniprintf>
 80010ac:	6738      	str	r0, [r7, #112]	; 0x70
		//Transmit data on UART_DMA
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)string, length);
 80010ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010ba:	f005 fab1 	bl	8006620 <HAL_UART_Transmit_DMA>

	}
}
 80010be:	bf00      	nop
 80010c0:	3780      	adds	r7, #128	; 0x80
 80010c2:	46bd      	mov	sp, r7
 80010c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010c8:	20000254 	.word	0x20000254
 80010cc:	2000000a 	.word	0x2000000a
 80010d0:	20000200 	.word	0x20000200
 80010d4:	200003a0 	.word	0x200003a0
 80010d8:	2000000b 	.word	0x2000000b
 80010dc:	200003a1 	.word	0x200003a1
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	200003a2 	.word	0x200003a2
 80010e8:	40500000 	.word	0x40500000
 80010ec:	0800a378 	.word	0x0800a378
 80010f0:	2000029c 	.word	0x2000029c

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fa:	f000 fcb7 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fe:	f000 f831 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001102:	f000 f98f 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8001106:	f000 f965 	bl	80013d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800110a:	f000 f939 	bl	8001380 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800110e:	f000 f895 	bl	800123c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001112:	f000 f8c1 	bl	8001298 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim2);
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <main+0x5c>)
 8001118:	f004 fbfc 	bl	8005914 <HAL_TIM_Base_Start_IT>
  // send the configuration values to the 3 registers
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG1, 2, 100);
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2302      	movs	r3, #2
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <main+0x60>)
 8001124:	2150      	movs	r1, #80	; 0x50
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <main+0x64>)
 8001128:	f001 fd16 	bl	8002b58 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG2, 2, 100);
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2302      	movs	r3, #2
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <main+0x68>)
 8001134:	2150      	movs	r1, #80	; 0x50
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <main+0x64>)
 8001138:	f001 fd0e 	bl	8002b58 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG4, 2, 100);
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <main+0x6c>)
 8001144:	2150      	movs	r1, #80	; 0x50
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <main+0x64>)
 8001148:	f001 fd06 	bl	8002b58 <HAL_I2C_Master_Transmit>

  while (1)
 800114c:	e7fe      	b.n	800114c <main+0x58>
 800114e:	bf00      	nop
 8001150:	20000254 	.word	0x20000254
 8001154:	20000000 	.word	0x20000000
 8001158:	20000200 	.word	0x20000200
 800115c:	20000004 	.word	0x20000004
 8001160:	20000008 	.word	0x20000008

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	2230      	movs	r2, #48	; 0x30
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f006 fffd 	bl	8008172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <SystemClock_Config+0xd0>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a28      	ldr	r2, [pc, #160]	; (8001234 <SystemClock_Config+0xd0>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <SystemClock_Config+0xd0>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <SystemClock_Config+0xd4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <SystemClock_Config+0xd4>)
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fea8 	bl	8004f44 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011fa:	f000 f981 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f90a 	bl	8005434 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001226:	f000 f96b 	bl	8001500 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <MX_I2C1_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_I2C1_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_I2C1_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_I2C1_Init+0x50>)
 800127a:	f001 fb29 	bl	80028d0 <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001284:	f000 f93c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000200 	.word	0x20000200
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <MX_TIM2_Init+0xe4>)
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MX_TIM2_Init+0xe4>)
 80012d2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80012d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_TIM2_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <MX_TIM2_Init+0xe4>)
 80012e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80012e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <MX_TIM2_Init+0xe4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_TIM2_Init+0xe4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f2:	4822      	ldr	r0, [pc, #136]	; (800137c <MX_TIM2_Init+0xe4>)
 80012f4:	f004 fabe 	bl	8005874 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012fe:	f000 f8ff 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	4619      	mov	r1, r3
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <MX_TIM2_Init+0xe4>)
 8001310:	f004 fd20 	bl	8005d54 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800131a:	f000 f8f1 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <MX_TIM2_Init+0xe4>)
 8001320:	f004 fb5a 	bl	80059d8 <HAL_TIM_OC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800132a:	f000 f8e9 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800132e:	2320      	movs	r3, #32
 8001330:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	4619      	mov	r1, r3
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_TIM2_Init+0xe4>)
 800133e:	f005 f89f 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001348:	f000 f8da 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_TIM2_Init+0xe4>)
 8001364:	f004 fc9a 	bl	8005c9c <HAL_TIM_OC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800136e:	f000 f8c7 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000254 	.word	0x20000254

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART2_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b8:	f005 f8e4 	bl	8006584 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 f89d 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000029c 	.word	0x2000029c
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x4c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2010      	movs	r0, #16
 80013fc:	f000 fc83 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001400:	2010      	movs	r0, #16
 8001402:	f000 fc9c 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2011      	movs	r0, #17
 800140c:	f000 fc7b 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001410:	2011      	movs	r0, #17
 8001412:	f000 fc94 	bl	8001d3e <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_GPIO_Init+0xd0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <MX_GPIO_Init+0xd4>)
 80014b0:	f001 f9f4 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_GPIO_Init+0xd8>)
 80014cc:	f001 f862 	bl	8002594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014d0:	2320      	movs	r3, #32
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_GPIO_Init+0xd4>)
 80014e8:	f001 f854 	bl	8002594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x4c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154a:	2007      	movs	r0, #7
 800154c:	f000 fbd0 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_I2C_MspInit+0x94>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d134      	bne.n	80015e8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a0:	2312      	movs	r3, #18
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ac:	2304      	movs	r3, #4
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <HAL_I2C_MspInit+0x9c>)
 80015b8:	f000 ffec 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 80015c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_I2C_MspInit+0x98>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	201f      	movs	r0, #31
 80015de:	f000 fb92 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015e2:	201f      	movs	r0, #31
 80015e4:	f000 fbab 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d115      	bne.n	800163a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201c      	movs	r0, #28
 8001630:	f000 fb69 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001634:	201c      	movs	r0, #28
 8001636:	f000 fb82 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_UART_MspInit+0x14c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	f040 8090 	bne.w	800178c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_UART_MspInit+0x150>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a48      	ldr	r2, [pc, #288]	; (8001798 <HAL_UART_MspInit+0x150>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_UART_MspInit+0x150>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_UART_MspInit+0x150>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_UART_MspInit+0x150>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_UART_MspInit+0x150>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a4:	230c      	movs	r3, #12
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b4:	2307      	movs	r3, #7
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4837      	ldr	r0, [pc, #220]	; (800179c <HAL_UART_MspInit+0x154>)
 80016c0:	f000 ff68 	bl	8002594 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016c6:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_UART_MspInit+0x15c>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_UART_MspInit+0x158>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_UART_MspInit+0x158>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <HAL_UART_MspInit+0x158>)
 8001706:	f000 fb35 	bl	8001d74 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001710:	f7ff fef6 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_UART_MspInit+0x158>)
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
 800171a:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_UART_MspInit+0x158>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_UART_MspInit+0x164>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001728:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001730:	2240      	movs	r2, #64	; 0x40
 8001732:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_UART_MspInit+0x160>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0x160>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_UART_MspInit+0x160>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001762:	f000 fb07 	bl	8001d74 <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800176c:	f7ff fec8 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_UART_MspInit+0x160>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2026      	movs	r0, #38	; 0x26
 8001782:	f000 fac0 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001786:	2026      	movs	r0, #38	; 0x26
 8001788:	f000 fad9 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	200002e0 	.word	0x200002e0
 80017a4:	40026088 	.word	0x40026088
 80017a8:	20000340 	.word	0x20000340
 80017ac:	400260a0 	.word	0x400260a0

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 f988 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Stream5_IRQHandler+0x10>)
 800180a:	f000 fc4b 	bl	80020a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002e0 	.word	0x200002e0

08001818 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream6_IRQHandler+0x10>)
 800181e:	f000 fc41 	bl	80020a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000340 	.word	0x20000340

0800182c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM2_IRQHandler+0x10>)
 8001832:	f004 f92a 	bl	8005a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000254 	.word	0x20000254

08001840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <I2C1_EV_IRQHandler+0x10>)
 8001846:	f001 fcab 	bl	80031a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000200 	.word	0x20000200

08001854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART2_IRQHandler+0x10>)
 800185a:	f004 ff5f 	bl	800671c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000029c 	.word	0x2000029c

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001882:	f006 fcc9 	bl	8008218 <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
  }

  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
  }
  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f006 fc2e 	bl	8008218 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20018000 	.word	0x20018000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	200003a4 	.word	0x200003a4
 80019f0:	200004f8 	.word	0x200004f8

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd7 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f006 fbed 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fb53 	bl	80010f4 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a5c:	0800a73c 	.word	0x0800a73c
  ldr r2, =_sbss
 8001a60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a64:	200004f8 	.word	0x200004f8

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f92b 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fd34 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f943 	bl	8001d5a <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aec:	f000 f90b 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000010 	.word	0x20000010
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	20000014 	.word	0x20000014

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000018 	.word	0x20000018
 8001b34:	200003a8 	.word	0x200003a8

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200003a8 	.word	0x200003a8

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff feda 	bl	8001b38 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e099      	b.n	8001ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	e00f      	b.n	8001dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff fec1 	bl	8001b38 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d908      	bls.n	8001dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e078      	b.n	8001ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_DMA_Init+0x158>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4313      	orrs	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f023 0307 	bic.w	r3, r3, #7
 8001e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d117      	bne.n	8001e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fb0f 	bl	800249c <DMA_CheckFifoParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e92:	2301      	movs	r3, #1
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fac6 	bl	8002430 <DMA_CalcBaseAndBitshift>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	f010803f 	.word	0xf010803f

08001ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Start_IT+0x26>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e040      	b.n	8001f78 <HAL_DMA_Start_IT+0xa8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d12f      	bne.n	8001f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa58 	bl	80023d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0216 	orr.w	r2, r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e005      	b.n	8001f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8e:	f7ff fdd3 	bl	8001b38 <HAL_GetTick>
 8001f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e052      	b.n	8002058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0216 	bic.w	r2, r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_DMA_Abort+0x62>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	e013      	b.n	800202c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002004:	f7ff fd98 	bl	8001b38 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b05      	cmp	r3, #5
 8002010:	d90c      	bls.n	800202c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e015      	b.n	8002058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e4      	bne.n	8002004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00c      	b.n	8002098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2205      	movs	r2, #5
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b0:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <HAL_DMA_IRQHandler+0x248>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a8e      	ldr	r2, [pc, #568]	; (80022f0 <HAL_DMA_IRQHandler+0x24c>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	2208      	movs	r2, #8
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0204 	bic.w	r2, r2, #4
 80020f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	2208      	movs	r2, #8
 80020fe:	409a      	lsls	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	2201      	movs	r2, #1
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	2204      	movs	r2, #4
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2204      	movs	r2, #4
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2210      	movs	r2, #16
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d043      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03c      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2210      	movs	r2, #16
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d024      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
 80021d2:	e01f      	b.n	8002214 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
 80021e4:	e016      	b.n	8002214 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0208 	bic.w	r2, r2, #8
 8002202:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2220      	movs	r2, #32
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 808f 	beq.w	8002344 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8087 	beq.w	8002344 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	2220      	movs	r2, #32
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b05      	cmp	r3, #5
 800224c:	d136      	bne.n	80022bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0216 	bic.w	r2, r2, #22
 800225c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <HAL_DMA_IRQHandler+0x1da>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	223f      	movs	r2, #63	; 0x3f
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d07e      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
        }
        return;
 80022ba:	e079      	b.n	80023b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d031      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
 80022e8:	e02c      	b.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
 80022ea:	bf00      	nop
 80022ec:	20000010 	.word	0x20000010
 80022f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e01e      	b.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0210 	bic.w	r2, r2, #16
 8002322:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d022      	beq.n	800239e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2205      	movs	r2, #5
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	3301      	adds	r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d307      	bcc.n	800238c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f2      	bne.n	8002370 <HAL_DMA_IRQHandler+0x2cc>
 800238a:	e000      	b.n	800238e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800238c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
 80023ae:	e000      	b.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023b0:	bf00      	nop
    }
  }
}
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c6:	b2db      	uxtb	r3, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d108      	bne.n	8002414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002412:	e007      	b.n	8002424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3b10      	subs	r3, #16
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <DMA_CalcBaseAndBitshift+0x64>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <DMA_CalcBaseAndBitshift+0x68>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d909      	bls.n	8002472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	1d1a      	adds	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
 8002470:	e007      	b.n	8002482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	aaaaaaab 	.word	0xaaaaaaab
 8002498:	0800a3b4 	.word	0x0800a3b4

0800249c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11f      	bne.n	80024f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d856      	bhi.n	800256a <DMA_CheckFifoParam+0xce>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <DMA_CheckFifoParam+0x28>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024e7 	.word	0x080024e7
 80024cc:	080024d5 	.word	0x080024d5
 80024d0:	0800256b 	.word	0x0800256b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d046      	beq.n	800256e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e4:	e043      	b.n	800256e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ee:	d140      	bne.n	8002572 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e03d      	b.n	8002572 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d121      	bne.n	8002544 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d837      	bhi.n	8002576 <DMA_CheckFifoParam+0xda>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <DMA_CheckFifoParam+0x70>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002523 	.word	0x08002523
 8002514:	0800251d 	.word	0x0800251d
 8002518:	08002535 	.word	0x08002535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      break;
 8002520:	e030      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d025      	beq.n	800257a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002532:	e022      	b.n	800257a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800253c:	d11f      	bne.n	800257e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002542:	e01c      	b.n	800257e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d903      	bls.n	8002552 <DMA_CheckFifoParam+0xb6>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d003      	beq.n	8002558 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002550:	e018      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      break;
 8002556:	e015      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e00b      	b.n	8002582 <DMA_CheckFifoParam+0xe6>
      break;
 800256a:	bf00      	nop
 800256c:	e00a      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e008      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;
 8002572:	bf00      	nop
 8002574:	e006      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
 8002578:	e004      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;   
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
    }
  } 
  
  return status; 
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e159      	b.n	8002864 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8148 	bne.w	800285e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d005      	beq.n	80025e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d130      	bne.n	8002648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d017      	beq.n	8002684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a2 	beq.w	800285e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_GPIO_Init+0x2e8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a56      	ldr	r2, [pc, #344]	; (800287c <HAL_GPIO_Init+0x2e8>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b54      	ldr	r3, [pc, #336]	; (800287c <HAL_GPIO_Init+0x2e8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_GPIO_Init+0x2ec>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a49      	ldr	r2, [pc, #292]	; (8002884 <HAL_GPIO_Init+0x2f0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x202>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a48      	ldr	r2, [pc, #288]	; (8002888 <HAL_GPIO_Init+0x2f4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x1fe>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a47      	ldr	r2, [pc, #284]	; (800288c <HAL_GPIO_Init+0x2f8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x1fa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a46      	ldr	r2, [pc, #280]	; (8002890 <HAL_GPIO_Init+0x2fc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x1f6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a45      	ldr	r2, [pc, #276]	; (8002894 <HAL_GPIO_Init+0x300>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x1f2>
 8002782:	2304      	movs	r3, #4
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x204>
 8002786:	2307      	movs	r3, #7
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x204>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x204>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x204>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x204>
 8002796:	2300      	movs	r3, #0
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a8:	4935      	ldr	r1, [pc, #212]	; (8002880 <HAL_GPIO_Init+0x2ec>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_GPIO_Init+0x304>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <HAL_GPIO_Init+0x304>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_GPIO_Init+0x304>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <HAL_GPIO_Init+0x304>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_GPIO_Init+0x304>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_GPIO_Init+0x304>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_GPIO_Init+0x304>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_GPIO_Init+0x304>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f aea2 	bls.w	80025b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40013800 	.word	0x40013800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e12b      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fe30 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f002 ff76 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a81      	ldr	r2, [pc, #516]	; (8002b44 <HAL_I2C_Init+0x274>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <HAL_I2C_Init+0x278>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a7d      	ldr	r2, [pc, #500]	; (8002b4c <HAL_I2C_Init+0x27c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0e7      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <HAL_I2C_Init+0x280>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_I2C_Init+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a69      	ldr	r2, [pc, #420]	; (8002b54 <HAL_I2C_Init+0x284>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	495c      	ldr	r1, [pc, #368]	; (8002b44 <HAL_I2C_Init+0x274>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d819      	bhi.n	8002a0c <HAL_I2C_Init+0x13c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	1c59      	adds	r1, r3, #1
 80029e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029ec:	400b      	ands	r3, r1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_I2C_Init+0x138>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e59      	subs	r1, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	e051      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e04f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d111      	bne.n	8002a38 <HAL_I2C_Init+0x168>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e012      	b.n	8002a5e <HAL_I2C_Init+0x18e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x196>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e022      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <HAL_I2C_Init+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e58      	subs	r0, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	440b      	add	r3, r1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6911      	ldr	r1, [r2, #16]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	000186a0 	.word	0x000186a0
 8002b48:	001e847f 	.word	0x001e847f
 8002b4c:	003d08ff 	.word	0x003d08ff
 8002b50:	431bde83 	.word	0x431bde83
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7fe ffe4 	bl	8001b38 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	f040 80e0 	bne.w	8002d40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2319      	movs	r3, #25
 8002b86:	2201      	movs	r2, #1
 8002b88:	4970      	ldr	r1, [pc, #448]	; (8002d4c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f001 ffb0 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0d3      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2C_Master_Transmit+0x50>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0cc      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d007      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2221      	movs	r2, #33	; 0x21
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2210      	movs	r2, #16
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	893a      	ldrh	r2, [r7, #8]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c10:	8979      	ldrh	r1, [r7, #10]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f001 fd72 	bl	8004700 <I2C_MasterRequestWrite>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08d      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c3c:	e066      	b.n	8002d0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f002 f82a 	bl	8004c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06b      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_I2C_Master_Transmit+0x188>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6a39      	ldr	r1, [r7, #32]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f002 f81a 	bl	8004d1e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01a      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d194      	bne.n	8002c3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	460b      	mov	r3, r1
 8002d62:	817b      	strh	r3, [r7, #10]
 8002d64:	4613      	mov	r3, r2
 8002d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7fe fee6 	bl	8001b38 <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	f040 820b 	bne.w	8003192 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2319      	movs	r3, #25
 8002d82:	2201      	movs	r2, #1
 8002d84:	497c      	ldr	r1, [pc, #496]	; (8002f78 <HAL_I2C_Master_Receive+0x224>)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f001 feb2 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	e1fe      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2C_Master_Receive+0x50>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e1f7      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d007      	beq.n	8002dca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2210      	movs	r2, #16
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a5c      	ldr	r2, [pc, #368]	; (8002f7c <HAL_I2C_Master_Receive+0x228>)
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f001 fcf6 	bl	8004804 <I2C_MasterRequestRead>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1b8      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d113      	bne.n	8002e52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e18c      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d11b      	bne.n	8002e92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e16c      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d11b      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	e14c      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef8:	e138      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f200 80f1 	bhi.w	80030e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f001 ff77 	bl	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e139      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f52:	e10b      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d14e      	bne.n	8002ffa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	4906      	ldr	r1, [pc, #24]	; (8002f80 <HAL_I2C_Master_Receive+0x22c>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f001 fdc2 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e10e      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff8:	e0b8      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2200      	movs	r2, #0
 8003002:	4966      	ldr	r1, [pc, #408]	; (800319c <HAL_I2C_Master_Receive+0x448>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f001 fd73 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0bf      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2200      	movs	r2, #0
 800305e:	494f      	ldr	r1, [pc, #316]	; (800319c <HAL_I2C_Master_Receive+0x448>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f001 fd45 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e091      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e4:	e042      	b.n	800316c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f001 fe8a 	bl	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e04c      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d118      	bne.n	800316c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	f47f aec2 	bne.w	8002efa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	00010004 	.word	0x00010004

080031a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d003      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x38>
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	f040 80b1 	bne.w	800333a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_I2C_EV_IRQHandler+0x6e>
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031f8:	d003      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x62>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003200:	d101      	bne.n	8003206 <HAL_I2C_EV_IRQHandler+0x66>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_I2C_EV_IRQHandler+0x68>
 8003206:	2300      	movs	r3, #0
 8003208:	2b01      	cmp	r3, #1
 800320a:	f000 8114 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0x90>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f001 fe73 	bl	8004f0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fcbf 	bl	8003bac <I2C_Master_SB>
 800322e:	e083      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0xac>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fd37 	bl	8003cb8 <I2C_Master_ADD10>
 800324a:	e075      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0xc8>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fd53 	bl	8003d0c <I2C_Master_ADDR>
 8003266:	e067      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003280:	f000 80db 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x10a>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x10a>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f937 	bl	8003516 <I2C_MasterTransmit_TXE>
 80032a8:	e046      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80c2 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80bc 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032c2:	7bbb      	ldrb	r3, [r7, #14]
 80032c4:	2b21      	cmp	r3, #33	; 0x21
 80032c6:	d103      	bne.n	80032d0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f9c0 	bl	800364e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ce:	e0b4      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	f040 80b1 	bne.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa2e 	bl	800373a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032de:	e0ac      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ee:	f000 80a4 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x178>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x178>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 faa6 	bl	8003862 <I2C_MasterReceive_RXNE>
 8003316:	e00f      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 808b 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8085 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb51 	bl	80039d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	e080      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29a>
 8003338:	e07f      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e007      	b.n	800335c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d011      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 ff11 	bl	80041aa <I2C_Slave_ADDR>
 8003388:	e05a      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_I2C_EV_IRQHandler+0x206>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 ff4c 	bl	800423c <I2C_Slave_STOPF>
 80033a4:	e04c      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	2b21      	cmp	r3, #33	; 0x21
 80033aa:	d002      	beq.n	80033b2 <HAL_I2C_EV_IRQHandler+0x212>
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b29      	cmp	r3, #41	; 0x29
 80033b0:	d120      	bne.n	80033f4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x238>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x238>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fe2c 	bl	800402e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d6:	e032      	b.n	800343e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02d      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x29e>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d028      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fe5b 	bl	80040a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f2:	e024      	b.n	800343e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x27a>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x27a>
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fe69 	bl	80040ea <I2C_SlaveReceive_RXNE>
 8003418:	e012      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fe99 	bl	8004166 <I2C_SlaveReceive_BTF>
 8003434:	e004      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
 80034a2:	4613      	mov	r3, r2
 80034a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d150      	bne.n	80035de <I2C_MasterTransmit_TXE+0xc8>
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b21      	cmp	r3, #33	; 0x21
 8003540:	d14d      	bne.n	80035de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d01d      	beq.n	8003584 <I2C_MasterTransmit_TXE+0x6e>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b20      	cmp	r3, #32
 800354c:	d01a      	beq.n	8003584 <I2C_MasterTransmit_TXE+0x6e>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003554:	d016      	beq.n	8003584 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003564:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2211      	movs	r2, #17
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff62 	bl	8003446 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003582:	e060      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003592:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d107      	bne.n	80035ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff7d 	bl	80034c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035cc:	e03b      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff35 	bl	8003446 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035dc:	e033      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b21      	cmp	r3, #33	; 0x21
 80035e2:	d005      	beq.n	80035f0 <I2C_MasterTransmit_TXE+0xda>
 80035e4:	7bbb      	ldrb	r3, [r7, #14]
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d12d      	bne.n	8003646 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b22      	cmp	r3, #34	; 0x22
 80035ee:	d12a      	bne.n	8003646 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003608:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800360a:	e01c      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d103      	bne.n	8003620 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f88e 	bl	800373a <I2C_MemoryTransmit_TXE_BTF>
}
 800361e:	e012      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003644:	e7ff      	b.n	8003646 <I2C_MasterTransmit_TXE+0x130>
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b21      	cmp	r3, #33	; 0x21
 8003666:	d164      	bne.n	8003732 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003696:	e04c      	b.n	8003732 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b08      	cmp	r3, #8
 800369c:	d01d      	beq.n	80036da <I2C_MasterTransmit_BTF+0x8c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d01a      	beq.n	80036da <I2C_MasterTransmit_BTF+0x8c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036aa:	d016      	beq.n	80036da <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2211      	movs	r2, #17
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff feb7 	bl	8003446 <HAL_I2C_MasterTxCpltCallback>
}
 80036d8:	e02b      	b.n	8003732 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036e8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d107      	bne.n	8003724 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fed2 	bl	80034c6 <HAL_I2C_MemTxCpltCallback>
}
 8003722:	e006      	b.n	8003732 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fe8a 	bl	8003446 <HAL_I2C_MasterTxCpltCallback>
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11d      	bne.n	800378e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10b      	bne.n	8003772 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	1c9a      	adds	r2, r3, #2
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003770:	e073      	b.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	b29b      	uxth	r3, r3
 8003778:	121b      	asrs	r3, r3, #8
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800378c:	e065      	b.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10b      	bne.n	80037ae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	b2da      	uxtb	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037ac:	e055      	b.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d151      	bne.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b22      	cmp	r3, #34	; 0x22
 80037ba:	d10d      	bne.n	80037d8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037d6:	e040      	b.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b21      	cmp	r3, #33	; 0x21
 80037e6:	d112      	bne.n	800380e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800380c:	e025      	b.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d120      	bne.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b21      	cmp	r3, #33	; 0x21
 800381c:	d11d      	bne.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fe36 	bl	80034c6 <HAL_I2C_MemTxCpltCallback>
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b22      	cmp	r3, #34	; 0x22
 8003874:	f040 80ac 	bne.w	80039d0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d921      	bls.n	80038ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	f040 808c 	bne.w	80039d0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038c8:	e082      	b.n	80039d0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d075      	beq.n	80039be <I2C_MasterReceive_RXNE+0x15c>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <I2C_MasterReceive_RXNE+0x7c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d16f      	bne.n	80039be <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 fa5e 	bl	8004da0 <I2C_WaitOnSTOPRequestThroughIT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d142      	bne.n	8003970 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003908:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d10a      	bne.n	800395a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fdc1 	bl	80034da <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003958:	e03a      	b.n	80039d0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2212      	movs	r2, #18
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff fd76 	bl	800345a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800396e:	e02f      	b.n	80039d0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fd99 	bl	80034ee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039bc:	e008      	b.n	80039d0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	605a      	str	r2, [r3, #4]
}
 80039ce:	e7ff      	b.n	80039d0 <I2C_MasterReceive_RXNE+0x16e>
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d11b      	bne.n	8003a28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a26:	e0bd      	b.n	8003ba4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d129      	bne.n	8003a86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d00a      	beq.n	8003a5e <I2C_MasterReceive_BTF+0x86>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d007      	beq.n	8003a5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a84:	e08e      	b.n	8003ba4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d176      	bne.n	8003b7e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d002      	beq.n	8003a9c <I2C_MasterReceive_BTF+0xc4>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d108      	bne.n	8003aae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e019      	b.n	8003ae2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d002      	beq.n	8003aba <I2C_MasterReceive_BTF+0xe2>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e00a      	b.n	8003ae2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d007      	beq.n	8003ae2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d10a      	bne.n	8003b68 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fcba 	bl	80034da <HAL_I2C_MemRxCpltCallback>
}
 8003b66:	e01d      	b.n	8003ba4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2212      	movs	r2, #18
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fc6f 	bl	800345a <HAL_I2C_MasterRxCpltCallback>
}
 8003b7c:	e012      	b.n	8003ba4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d117      	bne.n	8003bf0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bda:	e067      	b.n	8003cac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]
}
 8003bee:	e05d      	b.n	8003cac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf8:	d133      	bne.n	8003c62 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b21      	cmp	r3, #33	; 0x21
 8003c04:	d109      	bne.n	8003c1a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c16:	611a      	str	r2, [r3, #16]
 8003c18:	e008      	b.n	8003c2c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <I2C_Master_SB+0x92>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d032      	beq.n	8003cac <I2C_Master_SB+0x100>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02d      	beq.n	8003cac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	605a      	str	r2, [r3, #4]
}
 8003c60:	e024      	b.n	8003cac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	11db      	asrs	r3, r3, #7
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f003 0306 	and.w	r3, r3, #6
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f063 030f 	orn	r3, r3, #15
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]
}
 8003c86:	e011      	b.n	8003cac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10d      	bne.n	8003cac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	11db      	asrs	r3, r3, #7
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f063 030e 	orn	r3, r3, #14
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <I2C_Master_ADD10+0x26>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <I2C_Master_ADD10+0x48>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfe:	605a      	str	r2, [r3, #4]
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b091      	sub	sp, #68	; 0x44
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b22      	cmp	r3, #34	; 0x22
 8003d34:	f040 8169 	bne.w	800400a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <I2C_Master_ADDR+0x54>
 8003d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d10b      	bne.n	8003d60 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	e160      	b.n	8004022 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11d      	bne.n	8003da4 <I2C_Master_ADDR+0x98>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d70:	d118      	bne.n	8003da4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
 8003da2:	e13e      	b.n	8004022 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e115      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 808a 	bne.w	8003ef6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de8:	d137      	bne.n	8003e5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e08:	d113      	bne.n	8003e32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	e0e7      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e0d3      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d02e      	beq.n	8003ebe <I2C_Master_ADDR+0x1b2>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d02b      	beq.n	8003ebe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	2b12      	cmp	r3, #18
 8003e6a:	d102      	bne.n	8003e72 <I2C_Master_ADDR+0x166>
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d125      	bne.n	8003ebe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d00e      	beq.n	8003e96 <I2C_Master_ADDR+0x18a>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d00b      	beq.n	8003e96 <I2C_Master_ADDR+0x18a>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d008      	beq.n	8003e96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e007      	b.n	8003ea6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	e0a1      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ecc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e085      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d14d      	bne.n	8003f9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d016      	beq.n	8003f34 <I2C_Master_ADDR+0x228>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d013      	beq.n	8003f34 <I2C_Master_ADDR+0x228>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d010      	beq.n	8003f34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e007      	b.n	8003f44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d117      	bne.n	8003f84 <I2C_Master_ADDR+0x278>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f5a:	d00b      	beq.n	8003f74 <I2C_Master_ADDR+0x268>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d008      	beq.n	8003f74 <I2C_Master_ADDR+0x268>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d005      	beq.n	8003f74 <I2C_Master_ADDR+0x268>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d002      	beq.n	8003f74 <I2C_Master_ADDR+0x268>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d107      	bne.n	8003f84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e032      	b.n	8004002 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d117      	bne.n	8003fec <I2C_Master_ADDR+0x2e0>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fc2:	d00b      	beq.n	8003fdc <I2C_Master_ADDR+0x2d0>
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d008      	beq.n	8003fdc <I2C_Master_ADDR+0x2d0>
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d005      	beq.n	8003fdc <I2C_Master_ADDR+0x2d0>
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d002      	beq.n	8003fdc <I2C_Master_ADDR+0x2d0>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d107      	bne.n	8003fec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004008:	e00b      	b.n	8004022 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	e7ff      	b.n	8004022 <I2C_Master_ADDR+0x316>
 8004022:	bf00      	nop
 8004024:	3744      	adds	r7, #68	; 0x44
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02b      	beq.n	80040a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d114      	bne.n	80040a0 <I2C_SlaveTransmit_TXE+0x72>
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b29      	cmp	r3, #41	; 0x29
 800407a:	d111      	bne.n	80040a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2228      	movs	r2, #40	; 0x28
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff f9e7 	bl	800346e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02c      	beq.n	800415e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d114      	bne.n	800415e <I2C_SlaveReceive_RXNE+0x74>
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b2a      	cmp	r3, #42	; 0x2a
 8004138:	d111      	bne.n	800415e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2222      	movs	r2, #34	; 0x22
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff f992 	bl	8003482 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041c4:	2b28      	cmp	r3, #40	; 0x28
 80041c6:	d125      	bne.n	8004214 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	81bb      	strh	r3, [r7, #12]
 80041f6:	e002      	b.n	80041fe <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004206:	89ba      	ldrh	r2, [r7, #12]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff f942 	bl	8003496 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004212:	e00e      	b.n	8004232 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800425a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004288:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004298:	d172      	bne.n	8004380 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b22      	cmp	r3, #34	; 0x22
 800429e:	d002      	beq.n	80042a6 <I2C_Slave_STOPF+0x6a>
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d135      	bne.n	8004312 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe f86a 	bl	80023b8 <HAL_DMA_GetState>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d049      	beq.n	800437e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4a69      	ldr	r2, [pc, #420]	; (8004494 <I2C_Slave_STOPF+0x258>)
 80042f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd feb2 	bl	8002060 <HAL_DMA_Abort_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03d      	beq.n	800437e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800430c:	4610      	mov	r0, r2
 800430e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004310:	e035      	b.n	800437e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004344:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe f834 	bl	80023b8 <HAL_DMA_GetState>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d014      	beq.n	8004380 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <I2C_Slave_STOPF+0x258>)
 800435c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fe7c 	bl	8002060 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
 800437c:	e000      	b.n	8004380 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800437e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03e      	beq.n	8004408 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d112      	bne.n	80043be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d112      	bne.n	80043f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f843 	bl	800449c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004416:	e039      	b.n	800448c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b2a      	cmp	r3, #42	; 0x2a
 800441c:	d109      	bne.n	8004432 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2228      	movs	r2, #40	; 0x28
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff f828 	bl	8003482 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b28      	cmp	r3, #40	; 0x28
 800443c:	d111      	bne.n	8004462 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <I2C_Slave_STOPF+0x25c>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff f829 	bl	80034b2 <HAL_I2C_ListenCpltCallback>
}
 8004460:	e014      	b.n	800448c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	2b22      	cmp	r3, #34	; 0x22
 8004468:	d002      	beq.n	8004470 <I2C_Slave_STOPF+0x234>
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b22      	cmp	r3, #34	; 0x22
 800446e:	d10d      	bne.n	800448c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe fffb 	bl	8003482 <HAL_I2C_SlaveRxCpltCallback>
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	080049a1 	.word	0x080049a1
 8004498:	ffff0000 	.word	0xffff0000

0800449c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d002      	beq.n	80044c0 <I2C_ITError+0x24>
 80044ba:	7bbb      	ldrb	r3, [r7, #14]
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d10a      	bne.n	80044d6 <I2C_ITError+0x3a>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	d107      	bne.n	80044d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044dc:	2b28      	cmp	r3, #40	; 0x28
 80044de:	d107      	bne.n	80044f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2228      	movs	r2, #40	; 0x28
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044ee:	e015      	b.n	800451c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fe:	d00a      	beq.n	8004516 <I2C_ITError+0x7a>
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b60      	cmp	r3, #96	; 0x60
 8004504:	d007      	beq.n	8004516 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452a:	d162      	bne.n	80045f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d020      	beq.n	800458c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	4a6a      	ldr	r2, [pc, #424]	; (80046f8 <I2C_ITError+0x25c>)
 8004550:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fd82 	bl	8002060 <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8089 	beq.w	8004676 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004586:	4610      	mov	r0, r2
 8004588:	4798      	blx	r3
 800458a:	e074      	b.n	8004676 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	4a59      	ldr	r2, [pc, #356]	; (80046f8 <I2C_ITError+0x25c>)
 8004592:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	4618      	mov	r0, r3
 800459a:	f7fd fd61 	bl	8002060 <HAL_DMA_Abort_IT>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d068      	beq.n	8004676 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d10b      	bne.n	80045ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ec:	4610      	mov	r0, r2
 80045ee:	4798      	blx	r3
 80045f0:	e041      	b.n	8004676 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b60      	cmp	r3, #96	; 0x60
 80045fc:	d125      	bne.n	800464a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d10b      	bne.n	8004632 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fe ff5d 	bl	8003502 <HAL_I2C_AbortCpltCallback>
 8004648:	e015      	b.n	8004676 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d10b      	bne.n	8004670 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fe ff3c 	bl	80034ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d113      	bne.n	80046f0 <I2C_ITError+0x254>
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d110      	bne.n	80046f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <I2C_ITError+0x260>)
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fe fee1 	bl	80034b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	080049a1 	.word	0x080049a1
 80046fc:	ffff0000 	.word	0xffff0000

08004700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d006      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d003      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b12      	cmp	r3, #18
 8004742:	d107      	bne.n	8004754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f9c5 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d103      	bne.n	8004784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e035      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004790:	d108      	bne.n	80047a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	e01b      	b.n	80047dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	11db      	asrs	r3, r3, #7
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 030f 	orn	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <I2C_MasterRequestWrite+0xfc>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f9eb 	bl	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e010      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <I2C_MasterRequestWrite+0x100>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f9db 	bl	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010008 	.word	0x00010008
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	460b      	mov	r3, r1
 8004812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b11      	cmp	r3, #17
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f93b 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e079      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e05f      	b.n	8004978 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4930      	ldr	r1, [pc, #192]	; (8004998 <I2C_MasterRequestRead+0x194>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f961 	bl	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e054      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <I2C_MasterRequestRead+0x198>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f951 	bl	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e044      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f8d9 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d103      	bne.n	800495c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e017      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	11db      	asrs	r3, r3, #7
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0306 	and.w	r3, r3, #6
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f063 030e 	orn	r3, r3, #14
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4907      	ldr	r1, [pc, #28]	; (800499c <I2C_MasterRequestRead+0x198>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f90d 	bl	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	00010008 	.word	0x00010008
 800499c:	00010002 	.word	0x00010002

080049a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ba:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <I2C_DMAAbort+0x148>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	4a4a      	ldr	r2, [pc, #296]	; (8004aec <I2C_DMAAbort+0x14c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0a1a      	lsrs	r2, r3, #8
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	00da      	lsls	r2, r3, #3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049e6:	e00a      	b.n	80049fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d0ea      	beq.n	80049d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	2200      	movs	r2, #0
 8004a42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	2200      	movs	r2, #0
 8004a52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d10e      	bne.n	8004a8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7fe fd3b 	bl	8003502 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a8c:	e027      	b.n	8004ade <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a94:	2b28      	cmp	r3, #40	; 0x28
 8004a96:	d117      	bne.n	8004ac8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2228      	movs	r2, #40	; 0x28
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ac6:	e007      	b.n	8004ad8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f7fe fd08 	bl	80034ee <HAL_I2C_ErrorCallback>
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	14f8b589 	.word	0x14f8b589

08004af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b00:	e025      	b.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b08:	d021      	beq.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fd f815 	bl	8001b38 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d116      	bne.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e023      	b.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10d      	bne.n	8004b74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	e00c      	b.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d0b6      	beq.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bac:	e051      	b.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbc:	d123      	bne.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0204 	orr.w	r2, r3, #4
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e046      	b.n	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0c:	d021      	beq.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc ff93 	bl	8001b38 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d116      	bne.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e020      	b.n	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10c      	bne.n	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e00b      	b.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d18d      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca8:	e02d      	b.n	8004d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f900 	bl	8004eb0 <I2C_IsAcknowledgeFailed>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e02d      	b.n	8004d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc0:	d021      	beq.n	8004d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fc ff39 	bl	8001b38 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e007      	b.n	8004d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d1ca      	bne.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2a:	e02d      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f8bf 	bl	8004eb0 <I2C_IsAcknowledgeFailed>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e02d      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d42:	d021      	beq.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fc fef8 	bl	8001b38 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d116      	bne.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d1ca      	bne.n	8004d2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	0a1a      	lsrs	r2, r3, #8
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d107      	bne.n	8004dde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e008      	b.n	8004df0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dec:	d0e9      	beq.n	8004dc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20000010 	.word	0x20000010
 8004e00:	14f8b589 	.word	0x14f8b589

08004e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e10:	e042      	b.n	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d119      	bne.n	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0210 	mvn.w	r2, #16
 8004e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e029      	b.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e54:	f7fc fe70 	bl	8001b38 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d116      	bne.n	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e007      	b.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d1b5      	bne.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d11b      	bne.n	8004f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f043 0204 	orr.w	r2, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f1e:	d103      	bne.n	8004f28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f26:	e007      	b.n	8004f38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f30:	d102      	bne.n	8004f38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2208      	movs	r2, #8
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e267      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d075      	beq.n	800504e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f62:	4b88      	ldr	r3, [pc, #544]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6e:	4b85      	ldr	r3, [pc, #532]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d112      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f7a:	4b82      	ldr	r3, [pc, #520]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f86:	d10b      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05b      	beq.n	800504c <HAL_RCC_OscConfig+0x108>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d157      	bne.n	800504c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e242      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x74>
 8004faa:	4b76      	ldr	r3, [pc, #472]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a75      	ldr	r2, [pc, #468]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e01d      	b.n	8004ff4 <HAL_RCC_OscConfig+0xb0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x98>
 8004fc2:	4b70      	ldr	r3, [pc, #448]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6f      	ldr	r2, [pc, #444]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4b6d      	ldr	r3, [pc, #436]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6c      	ldr	r2, [pc, #432]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e00b      	b.n	8004ff4 <HAL_RCC_OscConfig+0xb0>
 8004fdc:	4b69      	ldr	r3, [pc, #420]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a68      	ldr	r2, [pc, #416]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8004fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fd9c 	bl	8001b38 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005004:	f7fc fd98 	bl	8001b38 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e207      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	4b5b      	ldr	r3, [pc, #364]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0xc0>
 8005022:	e014      	b.n	800504e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fc fd88 	bl	8001b38 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502c:	f7fc fd84 	bl	8001b38 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1f3      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503e:	4b51      	ldr	r3, [pc, #324]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0xe8>
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d063      	beq.n	8005122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505a:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506e:	2b08      	cmp	r3, #8
 8005070:	d11c      	bne.n	80050ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005072:	4b44      	ldr	r3, [pc, #272]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d116      	bne.n	80050ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507e:	4b41      	ldr	r3, [pc, #260]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_RCC_OscConfig+0x152>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e1c7      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4937      	ldr	r1, [pc, #220]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050aa:	e03a      	b.n	8005122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b4:	4b34      	ldr	r3, [pc, #208]	; (8005188 <HAL_RCC_OscConfig+0x244>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc fd3d 	bl	8001b38 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fc fd39 	bl	8001b38 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e1a8      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d4:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b28      	ldr	r3, [pc, #160]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4925      	ldr	r1, [pc, #148]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	e015      	b.n	8005122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <HAL_RCC_OscConfig+0x244>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc fd1c 	bl	8001b38 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005104:	f7fc fd18 	bl	8001b38 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e187      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d036      	beq.n	800519c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_RCC_OscConfig+0x248>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fc fcfc 	bl	8001b38 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005144:	f7fc fcf8 	bl	8001b38 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e167      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_OscConfig+0x240>)
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x200>
 8005162:	e01b      	b.n	800519c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <HAL_RCC_OscConfig+0x248>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516a:	f7fc fce5 	bl	8001b38 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005170:	e00e      	b.n	8005190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005172:	f7fc fce1 	bl	8001b38 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d907      	bls.n	8005190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e150      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
 8005184:	40023800 	.word	0x40023800
 8005188:	42470000 	.word	0x42470000
 800518c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005190:	4b88      	ldr	r3, [pc, #544]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ea      	bne.n	8005172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8097 	beq.w	80052d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ae:	4b81      	ldr	r3, [pc, #516]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	4b7d      	ldr	r3, [pc, #500]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a7c      	ldr	r2, [pc, #496]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80051c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ca:	4b7a      	ldr	r3, [pc, #488]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051da:	4b77      	ldr	r3, [pc, #476]	; (80053b8 <HAL_RCC_OscConfig+0x474>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d118      	bne.n	8005218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e6:	4b74      	ldr	r3, [pc, #464]	; (80053b8 <HAL_RCC_OscConfig+0x474>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a73      	ldr	r2, [pc, #460]	; (80053b8 <HAL_RCC_OscConfig+0x474>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f2:	f7fc fca1 	bl	8001b38 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7fc fc9d 	bl	8001b38 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e10c      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCC_OscConfig+0x474>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <HAL_RCC_OscConfig+0x2ea>
 8005220:	4b64      	ldr	r3, [pc, #400]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a63      	ldr	r2, [pc, #396]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	e01c      	b.n	8005268 <HAL_RCC_OscConfig+0x324>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b05      	cmp	r3, #5
 8005234:	d10c      	bne.n	8005250 <HAL_RCC_OscConfig+0x30c>
 8005236:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4a5e      	ldr	r2, [pc, #376]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	6713      	str	r3, [r2, #112]	; 0x70
 8005242:	4b5c      	ldr	r3, [pc, #368]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	4a5b      	ldr	r2, [pc, #364]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
 800524e:	e00b      	b.n	8005268 <HAL_RCC_OscConfig+0x324>
 8005250:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	6713      	str	r3, [r2, #112]	; 0x70
 800525c:	4b55      	ldr	r3, [pc, #340]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4a54      	ldr	r2, [pc, #336]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005262:	f023 0304 	bic.w	r3, r3, #4
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d015      	beq.n	800529c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fc fc62 	bl	8001b38 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fc fc5e 	bl	8001b38 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e0cb      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528e:	4b49      	ldr	r3, [pc, #292]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ee      	beq.n	8005278 <HAL_RCC_OscConfig+0x334>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529c:	f7fc fc4c 	bl	8001b38 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fc fc48 	bl	8001b38 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e0b5      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ba:	4b3e      	ldr	r3, [pc, #248]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1ee      	bne.n	80052a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d105      	bne.n	80052d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a1 	beq.w	8005424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052e2:	4b34      	ldr	r3, [pc, #208]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d05c      	beq.n	80053a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d141      	bne.n	800537a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f6:	4b31      	ldr	r3, [pc, #196]	; (80053bc <HAL_RCC_OscConfig+0x478>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fc fc1c 	bl	8001b38 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005304:	f7fc fc18 	bl	8001b38 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e087      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	019b      	lsls	r3, r3, #6
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	3b01      	subs	r3, #1
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	491b      	ldr	r1, [pc, #108]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <HAL_RCC_OscConfig+0x478>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fc fbf1 	bl	8001b38 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535a:	f7fc fbed 	bl	8001b38 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e05c      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x416>
 8005378:	e054      	b.n	8005424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_RCC_OscConfig+0x478>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fc fbda 	bl	8001b38 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005388:	f7fc fbd6 	bl	8001b38 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e045      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_OscConfig+0x470>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x444>
 80053a6:	e03d      	b.n	8005424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e038      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40007000 	.word	0x40007000
 80053bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x4ec>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d028      	beq.n	8005420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d121      	bne.n	8005420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d11a      	bne.n	8005420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053f0:	4013      	ands	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d111      	bne.n	8005420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	3b01      	subs	r3, #1
 800540a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d107      	bne.n	8005420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0cc      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005448:	4b68      	ldr	r3, [pc, #416]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d90c      	bls.n	8005470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005456:	4b65      	ldr	r3, [pc, #404]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b63      	ldr	r3, [pc, #396]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0b8      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005488:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a58      	ldr	r2, [pc, #352]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a0:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4a52      	ldr	r2, [pc, #328]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b50      	ldr	r3, [pc, #320]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	494d      	ldr	r1, [pc, #308]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d044      	beq.n	8005554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d119      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e07f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e06f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e067      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 0203 	bic.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4934      	ldr	r1, [pc, #208]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005524:	f7fc fb08 	bl	8001b38 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fc fb04 	bl	8001b38 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e04f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 020c 	and.w	r2, r3, #12
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1eb      	bne.n	800552c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b25      	ldr	r3, [pc, #148]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d20c      	bcs.n	800557c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e032      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4916      	ldr	r1, [pc, #88]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	490e      	ldr	r1, [pc, #56]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ba:	f000 f821 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80055be:	4602      	mov	r2, r0
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	490a      	ldr	r1, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	5ccb      	ldrb	r3, [r1, r3]
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCC_ClockConfig+0x1c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fc fa68 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023c00 	.word	0x40023c00
 80055f0:	40023800 	.word	0x40023800
 80055f4:	0800a39c 	.word	0x0800a39c
 80055f8:	20000010 	.word	0x20000010
 80055fc:	20000014 	.word	0x20000014

08005600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b094      	sub	sp, #80	; 0x50
 8005606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	647b      	str	r3, [r7, #68]	; 0x44
 800560c:	2300      	movs	r3, #0
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005610:	2300      	movs	r3, #0
 8005612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005618:	4b79      	ldr	r3, [pc, #484]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	d00d      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x40>
 8005624:	2b08      	cmp	r3, #8
 8005626:	f200 80e1 	bhi.w	80057ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x34>
 800562e:	2b04      	cmp	r3, #4
 8005630:	d003      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x3a>
 8005632:	e0db      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCC_GetSysClockFreq+0x204>)
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005638:	e0db      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_RCC_GetSysClockFreq+0x208>)
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800563e:	e0d8      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800564a:	4b6d      	ldr	r3, [pc, #436]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d063      	beq.n	800571e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b6a      	ldr	r3, [pc, #424]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
 800566a:	2300      	movs	r3, #0
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
 800566e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f04f 0000 	mov.w	r0, #0
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	0159      	lsls	r1, r3, #5
 8005680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005684:	0150      	lsls	r0, r2, #5
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4621      	mov	r1, r4
 800568c:	1a51      	subs	r1, r2, r1
 800568e:	6139      	str	r1, [r7, #16]
 8005690:	4629      	mov	r1, r5
 8005692:	eb63 0301 	sbc.w	r3, r3, r1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a4:	4659      	mov	r1, fp
 80056a6:	018b      	lsls	r3, r1, #6
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ae:	4651      	mov	r1, sl
 80056b0:	018a      	lsls	r2, r1, #6
 80056b2:	4651      	mov	r1, sl
 80056b4:	ebb2 0801 	subs.w	r8, r2, r1
 80056b8:	4659      	mov	r1, fp
 80056ba:	eb63 0901 	sbc.w	r9, r3, r1
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056d2:	4690      	mov	r8, r2
 80056d4:	4699      	mov	r9, r3
 80056d6:	4623      	mov	r3, r4
 80056d8:	eb18 0303 	adds.w	r3, r8, r3
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	462b      	mov	r3, r5
 80056e0:	eb49 0303 	adc.w	r3, r9, r3
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056f2:	4629      	mov	r1, r5
 80056f4:	024b      	lsls	r3, r1, #9
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056fc:	4621      	mov	r1, r4
 80056fe:	024a      	lsls	r2, r1, #9
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
 800570a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005710:	f7fb faa2 	bl	8000c58 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571c:	e058      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	2200      	movs	r2, #0
 8005726:	4618      	mov	r0, r3
 8005728:	4611      	mov	r1, r2
 800572a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800572e:	623b      	str	r3, [r7, #32]
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	0159      	lsls	r1, r3, #5
 8005746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574a:	0150      	lsls	r0, r2, #5
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4641      	mov	r1, r8
 8005752:	ebb2 0a01 	subs.w	sl, r2, r1
 8005756:	4649      	mov	r1, r9
 8005758:	eb63 0b01 	sbc.w	fp, r3, r1
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800576c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005770:	ebb2 040a 	subs.w	r4, r2, sl
 8005774:	eb63 050b 	sbc.w	r5, r3, fp
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	00eb      	lsls	r3, r5, #3
 8005782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005786:	00e2      	lsls	r2, r4, #3
 8005788:	4614      	mov	r4, r2
 800578a:	461d      	mov	r5, r3
 800578c:	4643      	mov	r3, r8
 800578e:	18e3      	adds	r3, r4, r3
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	464b      	mov	r3, r9
 8005794:	eb45 0303 	adc.w	r3, r5, r3
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057a6:	4629      	mov	r1, r5
 80057a8:	028b      	lsls	r3, r1, #10
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057b0:	4621      	mov	r1, r4
 80057b2:	028a      	lsls	r2, r1, #10
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ba:	2200      	movs	r2, #0
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	61fa      	str	r2, [r7, #28]
 80057c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c4:	f7fb fa48 	bl	8000c58 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4613      	mov	r3, r2
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	3301      	adds	r3, #1
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ea:	e002      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3750      	adds	r7, #80	; 0x50
 80057f8:	46bd      	mov	sp, r7
 80057fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	00f42400 	.word	0x00f42400
 8005808:	007a1200 	.word	0x007a1200

0800580c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <HAL_RCC_GetHCLKFreq+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000010 	.word	0x20000010

08005824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005828:	f7ff fff0 	bl	800580c <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	0a9b      	lsrs	r3, r3, #10
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	0800a3ac 	.word	0x0800a3ac

0800584c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005850:	f7ff ffdc 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005854:	4602      	mov	r2, r0
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	0b5b      	lsrs	r3, r3, #13
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	4903      	ldr	r1, [pc, #12]	; (8005870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005862:	5ccb      	ldrb	r3, [r1, r3]
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40023800 	.word	0x40023800
 8005870:	0800a3ac 	.word	0x0800a3ac

08005874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e041      	b.n	800590a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb feae 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 fb3e 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e044      	b.n	80059b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x6c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d013      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x6c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x6c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_TIM_Base_Start_IT+0xb8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x6c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x6c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d111      	bne.n	80059a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d010      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a2:	e007      	b.n	80059b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40014000 	.word	0x40014000

080059d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f839 	bl	8005a76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fa8c 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d122      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d11b      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0202 	mvn.w	r2, #2
 8005ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fa12 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005ad2:	e005      	b.n	8005ae0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fa04 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa15 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d122      	bne.n	8005b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d11b      	bne.n	8005b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0204 	mvn.w	r2, #4
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9e8 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005b26:	e005      	b.n	8005b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f9da 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9eb 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d122      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11b      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0208 	mvn.w	r2, #8
 8005b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2204      	movs	r2, #4
 8005b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f9be 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005b7a:	e005      	b.n	8005b88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9b0 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9c1 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d122      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d11b      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f06f 0210 	mvn.w	r2, #16
 8005bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f994 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005bce:	e005      	b.n	8005bdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f986 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f997 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0201 	mvn.w	r2, #1
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7fb f9a3 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	2b80      	cmp	r3, #128	; 0x80
 8005c1a:	d10e      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d107      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc9b 	bl	8006570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d10e      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d107      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f95c 	bl	8005f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d10e      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0220 	mvn.w	r2, #32
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc65 	bl	800655c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_OC_ConfigChannel+0x1e>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e048      	b.n	8005d4c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d839      	bhi.n	8005d3c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d3d 	.word	0x08005d3d
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d3d 	.word	0x08005d3d
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005d21 	.word	0x08005d21
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d2f 	.word	0x08005d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f992 	bl	8006034 <TIM_OC1_SetConfig>
      break;
 8005d10:	e017      	b.n	8005d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f9f1 	bl	8006100 <TIM_OC2_SetConfig>
      break;
 8005d1e:	e010      	b.n	8005d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fa56 	bl	80061d8 <TIM_OC3_SetConfig>
      break;
 8005d2c:	e009      	b.n	8005d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fab9 	bl	80062ac <TIM_OC4_SetConfig>
      break;
 8005d3a:	e002      	b.n	8005d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_ConfigClockSource+0x1c>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0b4      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d03e      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0xd4>
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	f200 8087 	bhi.w	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	f000 8086 	beq.w	8005ec6 <HAL_TIM_ConfigClockSource+0x172>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d87f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b70      	cmp	r3, #112	; 0x70
 8005dc2:	d01a      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0xa6>
 8005dc4:	2b70      	cmp	r3, #112	; 0x70
 8005dc6:	d87b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b60      	cmp	r3, #96	; 0x60
 8005dca:	d050      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x11a>
 8005dcc:	2b60      	cmp	r3, #96	; 0x60
 8005dce:	d877      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b50      	cmp	r3, #80	; 0x50
 8005dd2:	d03c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xfa>
 8005dd4:	2b50      	cmp	r3, #80	; 0x50
 8005dd6:	d873      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d058      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x13a>
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d86f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b30      	cmp	r3, #48	; 0x30
 8005de2:	d064      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b30      	cmp	r3, #48	; 0x30
 8005de6:	d86b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d060      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d867      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05c      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d05a      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df8:	e062      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6899      	ldr	r1, [r3, #8]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f000 fb19 	bl	8006440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
      break;
 8005e26:	e04f      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f000 fb02 	bl	8006440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4a:	609a      	str	r2, [r3, #8]
      break;
 8005e4c:	e03c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fa76 	bl	800634c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2150      	movs	r1, #80	; 0x50
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 facf 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e02c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 fa95 	bl	80063aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2160      	movs	r1, #96	; 0x60
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fabf 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e01c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f000 fa56 	bl	800634c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2140      	movs	r1, #64	; 0x40
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 faaf 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8005eac:	e00c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f000 faa6 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8005ebe:	e003      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a34      	ldr	r2, [pc, #208]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a31      	ldr	r2, [pc, #196]	; (800601c <TIM_Base_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a30      	ldr	r2, [pc, #192]	; (8006020 <TIM_Base_SetConfig+0xec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <TIM_Base_SetConfig+0xf0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a25      	ldr	r2, [pc, #148]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01b      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d017      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <TIM_Base_SetConfig+0xe8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a21      	ldr	r2, [pc, #132]	; (8006020 <TIM_Base_SetConfig+0xec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00f      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	; (8006024 <TIM_Base_SetConfig+0xf0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00b      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <TIM_Base_SetConfig+0xf4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d007      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <TIM_Base_SetConfig+0xf8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <TIM_Base_SetConfig+0xfc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d108      	bne.n	8005fd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a08      	ldr	r2, [pc, #32]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d103      	bne.n	8006004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	615a      	str	r2, [r3, #20]
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0201 	bic.w	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 0302 	bic.w	r3, r3, #2
 800607c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <TIM_OC1_SetConfig+0xc8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10c      	bne.n	80060aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0308 	bic.w	r3, r3, #8
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0304 	bic.w	r3, r3, #4
 80060a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <TIM_OC1_SetConfig+0xc8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d111      	bne.n	80060d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40010000 	.word	0x40010000

08006100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0210 	bic.w	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0320 	bic.w	r3, r3, #32
 800614a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <TIM_OC2_SetConfig+0xd4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10d      	bne.n	800617c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <TIM_OC2_SetConfig+0xd4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d113      	bne.n	80061ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000

080061d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <TIM_OC3_SetConfig+0xd0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10d      	bne.n	8006252 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <TIM_OC3_SetConfig+0xd0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d113      	bne.n	8006282 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40010000 	.word	0x40010000

080062ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <TIM_OC4_SetConfig+0x9c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d109      	bne.n	8006320 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40010000 	.word	0x40010000

0800634c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0201 	bic.w	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 030a 	bic.w	r3, r3, #10
 8006388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0210 	bic.w	r2, r3, #16
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	031b      	lsls	r3, r3, #12
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	621a      	str	r2, [r3, #32]
}
 80063fe:	bf00      	nop
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	f043 0307 	orr.w	r3, r3, #7
 800642c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	021a      	lsls	r2, r3, #8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	431a      	orrs	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4313      	orrs	r3, r2
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	609a      	str	r2, [r3, #8]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e050      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d013      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a15      	ldr	r2, [pc, #84]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40014000 	.word	0x40014000

0800655c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e03f      	b.n	8006616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb f84c 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fdd1 	bl	8007170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	d165      	bne.n	8006706 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_UART_Transmit_DMA+0x26>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e05e      	b.n	8006708 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_UART_Transmit_DMA+0x38>
 8006654:	2302      	movs	r3, #2
 8006656:	e057      	b.n	8006708 <HAL_UART_Transmit_DMA+0xe8>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2221      	movs	r2, #33	; 0x21
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <HAL_UART_Transmit_DMA+0xf0>)
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_UART_Transmit_DMA+0xf4>)
 800668e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_UART_Transmit_DMA+0xf8>)
 8006696:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	2200      	movs	r2, #0
 800669e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066a0:	f107 0308 	add.w	r3, r7, #8
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3304      	adds	r3, #4
 80066b4:	461a      	mov	r2, r3
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	f7fb fc0a 	bl	8001ed0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	617b      	str	r3, [r7, #20]
   return(result);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ee:	627a      	str	r2, [r7, #36]	; 0x24
 80066f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6a39      	ldr	r1, [r7, #32]
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e000      	b.n	8006708 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3730      	adds	r7, #48	; 0x30
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08006ca1 	.word	0x08006ca1
 8006714:	08006d3b 	.word	0x08006d3b
 8006718:	08006d57 	.word	0x08006d57

0800671c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b0ba      	sub	sp, #232	; 0xe8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800675a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
 800676e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc3c 	bl	8006ff8 <UART_Receive_IT>
      return;
 8006780:	e256      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80de 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80d1 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
 80067d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f043 0202 	orr.w	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f043 0204 	orr.w	r2, r3, #4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f043 0208 	orr.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 81ed 	beq.w	8006c26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fbc7 	bl	8006ff8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_UART_IRQHandler+0x17a>
 800688e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04f      	beq.n	8006936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 facf 	bl	8006e3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d141      	bne.n	800692e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1d9      	bne.n	80068aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d013      	beq.n	8006926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	4a7d      	ldr	r2, [pc, #500]	; (8006af8 <HAL_UART_IRQHandler+0x3dc>)
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	4618      	mov	r0, r3
 800690c:	f7fb fba8 	bl	8002060 <HAL_DMA_Abort_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	e00e      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9a4 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692c:	e00a      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9a0 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	e006      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f99c 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006942:	e170      	b.n	8006c26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	bf00      	nop
    return;
 8006946:	e16e      	b.n	8006c26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 814a 	bne.w	8006be6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8143 	beq.w	8006be6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 813c 	beq.w	8006be6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	f040 80b4 	bne.w	8006afc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8140 	beq.w	8006c2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f080 8139 	bcs.w	8006c2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ca:	f000 8088 	beq.w	8006ade <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e1      	bne.n	8006a1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fb fa51 	bl	8001f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8ca 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af4:	e099      	b.n	8006c2a <HAL_UART_IRQHandler+0x50e>
 8006af6:	bf00      	nop
 8006af8:	08006f01 	.word	0x08006f01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 808b 	beq.w	8006c2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8086 	beq.w	8006c2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b46:	647a      	str	r2, [r7, #68]	; 0x44
 8006b48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e3      	bne.n	8006b22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0310 	bic.w	r3, r3, #16
 8006bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc4:	61fa      	str	r2, [r7, #28]
 8006bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	69b9      	ldr	r1, [r7, #24]
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e3      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f852 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be4:	e023      	b.n	8006c2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_UART_IRQHandler+0x4ea>
 8006bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f992 	bl	8006f28 <UART_Transmit_IT>
    return;
 8006c04:	e014      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <HAL_UART_IRQHandler+0x514>
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9d2 	bl	8006fc8 <UART_EndTransmit_IT>
    return;
 8006c24:	e004      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
    return;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
      return;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
      return;
 8006c2e:	bf00      	nop
  }
}
 8006c30:	37e8      	adds	r7, #232	; 0xe8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b090      	sub	sp, #64	; 0x40
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d137      	bne.n	8006d2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3314      	adds	r3, #20
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3314      	adds	r3, #20
 8006ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e5      	bne.n	8006cc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d16:	61fa      	str	r2, [r7, #28]
 8006d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	617b      	str	r3, [r7, #20]
   return(result);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e5      	bne.n	8006cf6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d2a:	e002      	b.n	8006d32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d2e:	f7ff ff83 	bl	8006c38 <HAL_UART_TxCpltCallback>
}
 8006d32:	bf00      	nop
 8006d34:	3740      	adds	r7, #64	; 0x40
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff ff7f 	bl	8006c4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	bf0c      	ite	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	2300      	movne	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b21      	cmp	r3, #33	; 0x21
 8006d88:	d108      	bne.n	8006d9c <UART_DMAError+0x46>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d96:	68b8      	ldr	r0, [r7, #8]
 8006d98:	f000 f827 	bl	8006dea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	bf0c      	ite	eq
 8006daa:	2301      	moveq	r3, #1
 8006dac:	2300      	movne	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b22      	cmp	r3, #34	; 0x22
 8006dbc:	d108      	bne.n	8006dd0 <UART_DMAError+0x7a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	f000 f835 	bl	8006e3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f043 0210 	orr.w	r2, r3, #16
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f7ff ff49 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b089      	sub	sp, #36	; 0x24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	61ba      	str	r2, [r7, #24]
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006e2e:	bf00      	nop
 8006e30:	3724      	adds	r7, #36	; 0x24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b095      	sub	sp, #84	; 0x54
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e62:	643a      	str	r2, [r7, #64]	; 0x40
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e5      	bne.n	8006e76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d119      	bne.n	8006ee6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0310 	bic.w	r3, r3, #16
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed2:	61ba      	str	r2, [r7, #24]
 8006ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6979      	ldr	r1, [r7, #20]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ef4:	bf00      	nop
 8006ef6:	3754      	adds	r7, #84	; 0x54
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff feaa 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b21      	cmp	r3, #33	; 0x21
 8006f3a:	d13e      	bne.n	8006fba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f44:	d114      	bne.n	8006f70 <UART_Transmit_IT+0x48>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	1c9a      	adds	r2, r3, #2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]
 8006f6e:	e008      	b.n	8006f82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	1c59      	adds	r1, r3, #1
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6211      	str	r1, [r2, #32]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fe25 	bl	8006c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08c      	sub	sp, #48	; 0x30
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b22      	cmp	r3, #34	; 0x22
 800700a:	f040 80ab 	bne.w	8007164 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007016:	d117      	bne.n	8007048 <UART_Receive_IT+0x50>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d113      	bne.n	8007048 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	b29a      	uxth	r2, r3
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	1c9a      	adds	r2, r3, #2
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	629a      	str	r2, [r3, #40]	; 0x28
 8007046:	e026      	b.n	8007096 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705a:	d007      	beq.n	800706c <UART_Receive_IT+0x74>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <UART_Receive_IT+0x82>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e008      	b.n	800708c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007086:	b2da      	uxtb	r2, r3
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29b      	uxth	r3, r3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4619      	mov	r1, r3
 80070a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d15a      	bne.n	8007160 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0220 	bic.w	r2, r2, #32
 80070b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d135      	bne.n	8007156 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007110:	623a      	str	r2, [r7, #32]
 8007112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	69f9      	ldr	r1, [r7, #28]
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	61bb      	str	r3, [r7, #24]
   return(result);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e5      	bne.n	80070f0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d10a      	bne.n	8007148 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fd9a 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
 8007154:	e002      	b.n	800715c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fd82 	bl	8006c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	e002      	b.n	8007166 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3730      	adds	r7, #48	; 0x30
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007174:	b0c0      	sub	sp, #256	; 0x100
 8007176:	af00      	add	r7, sp, #0
 8007178:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	68d9      	ldr	r1, [r3, #12]
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	ea40 0301 	orr.w	r3, r0, r1
 8007198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071c8:	f021 010c 	bic.w	r1, r1, #12
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071d6:	430b      	orrs	r3, r1
 80071d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	6999      	ldr	r1, [r3, #24]
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	ea40 0301 	orr.w	r3, r0, r1
 80071f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b8f      	ldr	r3, [pc, #572]	; (800743c <UART_SetConfig+0x2cc>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d005      	beq.n	8007210 <UART_SetConfig+0xa0>
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b8d      	ldr	r3, [pc, #564]	; (8007440 <UART_SetConfig+0x2d0>)
 800720c:	429a      	cmp	r2, r3
 800720e:	d104      	bne.n	800721a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fe fb1c 	bl	800584c <HAL_RCC_GetPCLK2Freq>
 8007214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007218:	e003      	b.n	8007222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800721a:	f7fe fb03 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 800721e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722c:	f040 810c 	bne.w	8007448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007234:	2200      	movs	r2, #0
 8007236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800723a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800723e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	1891      	adds	r1, r2, r2
 8007248:	65b9      	str	r1, [r7, #88]	; 0x58
 800724a:	415b      	adcs	r3, r3
 800724c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007252:	4621      	mov	r1, r4
 8007254:	eb12 0801 	adds.w	r8, r2, r1
 8007258:	4629      	mov	r1, r5
 800725a:	eb43 0901 	adc.w	r9, r3, r1
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007272:	4690      	mov	r8, r2
 8007274:	4699      	mov	r9, r3
 8007276:	4623      	mov	r3, r4
 8007278:	eb18 0303 	adds.w	r3, r8, r3
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007280:	462b      	mov	r3, r5
 8007282:	eb49 0303 	adc.w	r3, r9, r3
 8007286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800729a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800729e:	460b      	mov	r3, r1
 80072a0:	18db      	adds	r3, r3, r3
 80072a2:	653b      	str	r3, [r7, #80]	; 0x50
 80072a4:	4613      	mov	r3, r2
 80072a6:	eb42 0303 	adc.w	r3, r2, r3
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
 80072ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072b4:	f7f9 fcd0 	bl	8000c58 <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4b61      	ldr	r3, [pc, #388]	; (8007444 <UART_SetConfig+0x2d4>)
 80072be:	fba3 2302 	umull	r2, r3, r3, r2
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	011c      	lsls	r4, r3, #4
 80072c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	64b9      	str	r1, [r7, #72]	; 0x48
 80072e0:	415b      	adcs	r3, r3
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072e8:	4641      	mov	r1, r8
 80072ea:	eb12 0a01 	adds.w	sl, r2, r1
 80072ee:	4649      	mov	r1, r9
 80072f0:	eb43 0b01 	adc.w	fp, r3, r1
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007308:	4692      	mov	sl, r2
 800730a:	469b      	mov	fp, r3
 800730c:	4643      	mov	r3, r8
 800730e:	eb1a 0303 	adds.w	r3, sl, r3
 8007312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007316:	464b      	mov	r3, r9
 8007318:	eb4b 0303 	adc.w	r3, fp, r3
 800731c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800732c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007334:	460b      	mov	r3, r1
 8007336:	18db      	adds	r3, r3, r3
 8007338:	643b      	str	r3, [r7, #64]	; 0x40
 800733a:	4613      	mov	r3, r2
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	647b      	str	r3, [r7, #68]	; 0x44
 8007342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800734a:	f7f9 fc85 	bl	8000c58 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4611      	mov	r1, r2
 8007354:	4b3b      	ldr	r3, [pc, #236]	; (8007444 <UART_SetConfig+0x2d4>)
 8007356:	fba3 2301 	umull	r2, r3, r3, r1
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	2264      	movs	r2, #100	; 0x64
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	1acb      	subs	r3, r1, r3
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800736a:	4b36      	ldr	r3, [pc, #216]	; (8007444 <UART_SetConfig+0x2d4>)
 800736c:	fba3 2302 	umull	r2, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007378:	441c      	add	r4, r3
 800737a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800737e:	2200      	movs	r2, #0
 8007380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800738c:	4642      	mov	r2, r8
 800738e:	464b      	mov	r3, r9
 8007390:	1891      	adds	r1, r2, r2
 8007392:	63b9      	str	r1, [r7, #56]	; 0x38
 8007394:	415b      	adcs	r3, r3
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800739c:	4641      	mov	r1, r8
 800739e:	1851      	adds	r1, r2, r1
 80073a0:	6339      	str	r1, [r7, #48]	; 0x30
 80073a2:	4649      	mov	r1, r9
 80073a4:	414b      	adcs	r3, r1
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073b4:	4659      	mov	r1, fp
 80073b6:	00cb      	lsls	r3, r1, #3
 80073b8:	4651      	mov	r1, sl
 80073ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073be:	4651      	mov	r1, sl
 80073c0:	00ca      	lsls	r2, r1, #3
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	4642      	mov	r2, r8
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d0:	464b      	mov	r3, r9
 80073d2:	460a      	mov	r2, r1
 80073d4:	eb42 0303 	adc.w	r3, r2, r3
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073f0:	460b      	mov	r3, r1
 80073f2:	18db      	adds	r3, r3, r3
 80073f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f6:	4613      	mov	r3, r2
 80073f8:	eb42 0303 	adc.w	r3, r2, r3
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007406:	f7f9 fc27 	bl	8000c58 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <UART_SetConfig+0x2d4>)
 8007410:	fba3 1302 	umull	r1, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	2164      	movs	r1, #100	; 0x64
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	3332      	adds	r3, #50	; 0x32
 8007422:	4a08      	ldr	r2, [pc, #32]	; (8007444 <UART_SetConfig+0x2d4>)
 8007424:	fba2 2303 	umull	r2, r3, r2, r3
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f003 0207 	and.w	r2, r3, #7
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4422      	add	r2, r4
 8007436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007438:	e106      	b.n	8007648 <UART_SetConfig+0x4d8>
 800743a:	bf00      	nop
 800743c:	40011000 	.word	0x40011000
 8007440:	40011400 	.word	0x40011400
 8007444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007452:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800745a:	4642      	mov	r2, r8
 800745c:	464b      	mov	r3, r9
 800745e:	1891      	adds	r1, r2, r2
 8007460:	6239      	str	r1, [r7, #32]
 8007462:	415b      	adcs	r3, r3
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
 8007466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746a:	4641      	mov	r1, r8
 800746c:	1854      	adds	r4, r2, r1
 800746e:	4649      	mov	r1, r9
 8007470:	eb43 0501 	adc.w	r5, r3, r1
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	00eb      	lsls	r3, r5, #3
 800747e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007482:	00e2      	lsls	r2, r4, #3
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	4643      	mov	r3, r8
 800748a:	18e3      	adds	r3, r4, r3
 800748c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007490:	464b      	mov	r3, r9
 8007492:	eb45 0303 	adc.w	r3, r5, r3
 8007496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074b6:	4629      	mov	r1, r5
 80074b8:	008b      	lsls	r3, r1, #2
 80074ba:	4621      	mov	r1, r4
 80074bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c0:	4621      	mov	r1, r4
 80074c2:	008a      	lsls	r2, r1, #2
 80074c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074c8:	f7f9 fbc6 	bl	8000c58 <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4b60      	ldr	r3, [pc, #384]	; (8007654 <UART_SetConfig+0x4e4>)
 80074d2:	fba3 2302 	umull	r2, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	011c      	lsls	r4, r3, #4
 80074da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	61b9      	str	r1, [r7, #24]
 80074f4:	415b      	adcs	r3, r3
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074fc:	4641      	mov	r1, r8
 80074fe:	1851      	adds	r1, r2, r1
 8007500:	6139      	str	r1, [r7, #16]
 8007502:	4649      	mov	r1, r9
 8007504:	414b      	adcs	r3, r1
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007514:	4659      	mov	r1, fp
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	4651      	mov	r1, sl
 800751a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751e:	4651      	mov	r1, sl
 8007520:	00ca      	lsls	r2, r1, #3
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	4603      	mov	r3, r0
 8007528:	4642      	mov	r2, r8
 800752a:	189b      	adds	r3, r3, r2
 800752c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007530:	464b      	mov	r3, r9
 8007532:	460a      	mov	r2, r1
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	67bb      	str	r3, [r7, #120]	; 0x78
 8007546:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007554:	4649      	mov	r1, r9
 8007556:	008b      	lsls	r3, r1, #2
 8007558:	4641      	mov	r1, r8
 800755a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755e:	4641      	mov	r1, r8
 8007560:	008a      	lsls	r2, r1, #2
 8007562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007566:	f7f9 fb77 	bl	8000c58 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b38      	ldr	r3, [pc, #224]	; (8007654 <UART_SetConfig+0x4e4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	; 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	3332      	adds	r3, #50	; 0x32
 8007584:	4a33      	ldr	r2, [pc, #204]	; (8007654 <UART_SetConfig+0x4e4>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007590:	441c      	add	r4, r3
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	673b      	str	r3, [r7, #112]	; 0x70
 800759a:	677a      	str	r2, [r7, #116]	; 0x74
 800759c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	1891      	adds	r1, r2, r2
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b0:	4641      	mov	r1, r8
 80075b2:	1851      	adds	r1, r2, r1
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	4649      	mov	r1, r9
 80075b8:	414b      	adcs	r3, r1
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075c8:	4659      	mov	r1, fp
 80075ca:	00cb      	lsls	r3, r1, #3
 80075cc:	4651      	mov	r1, sl
 80075ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d2:	4651      	mov	r1, sl
 80075d4:	00ca      	lsls	r2, r1, #3
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	4642      	mov	r2, r8
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075e2:	464b      	mov	r3, r9
 80075e4:	460a      	mov	r2, r1
 80075e6:	eb42 0303 	adc.w	r3, r2, r3
 80075ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	663b      	str	r3, [r7, #96]	; 0x60
 80075f6:	667a      	str	r2, [r7, #100]	; 0x64
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007604:	4649      	mov	r1, r9
 8007606:	008b      	lsls	r3, r1, #2
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760e:	4641      	mov	r1, r8
 8007610:	008a      	lsls	r2, r1, #2
 8007612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007616:	f7f9 fb1f 	bl	8000c58 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <UART_SetConfig+0x4e4>)
 8007620:	fba3 1302 	umull	r1, r3, r3, r2
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2164      	movs	r1, #100	; 0x64
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	3332      	adds	r3, #50	; 0x32
 8007632:	4a08      	ldr	r2, [pc, #32]	; (8007654 <UART_SetConfig+0x4e4>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4422      	add	r2, r4
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800764e:	46bd      	mov	sp, r7
 8007650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007654:	51eb851f 	.word	0x51eb851f

08007658 <__cvt>:
 8007658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	ec55 4b10 	vmov	r4, r5, d0
 8007660:	2d00      	cmp	r5, #0
 8007662:	460e      	mov	r6, r1
 8007664:	4619      	mov	r1, r3
 8007666:	462b      	mov	r3, r5
 8007668:	bfbb      	ittet	lt
 800766a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800766e:	461d      	movlt	r5, r3
 8007670:	2300      	movge	r3, #0
 8007672:	232d      	movlt	r3, #45	; 0x2d
 8007674:	700b      	strb	r3, [r1, #0]
 8007676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007678:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800767c:	4691      	mov	r9, r2
 800767e:	f023 0820 	bic.w	r8, r3, #32
 8007682:	bfbc      	itt	lt
 8007684:	4622      	movlt	r2, r4
 8007686:	4614      	movlt	r4, r2
 8007688:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800768c:	d005      	beq.n	800769a <__cvt+0x42>
 800768e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007692:	d100      	bne.n	8007696 <__cvt+0x3e>
 8007694:	3601      	adds	r6, #1
 8007696:	2102      	movs	r1, #2
 8007698:	e000      	b.n	800769c <__cvt+0x44>
 800769a:	2103      	movs	r1, #3
 800769c:	ab03      	add	r3, sp, #12
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	ab02      	add	r3, sp, #8
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	ec45 4b10 	vmov	d0, r4, r5
 80076a8:	4653      	mov	r3, sl
 80076aa:	4632      	mov	r2, r6
 80076ac:	f000 fe68 	bl	8008380 <_dtoa_r>
 80076b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076b4:	4607      	mov	r7, r0
 80076b6:	d102      	bne.n	80076be <__cvt+0x66>
 80076b8:	f019 0f01 	tst.w	r9, #1
 80076bc:	d022      	beq.n	8007704 <__cvt+0xac>
 80076be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076c2:	eb07 0906 	add.w	r9, r7, r6
 80076c6:	d110      	bne.n	80076ea <__cvt+0x92>
 80076c8:	783b      	ldrb	r3, [r7, #0]
 80076ca:	2b30      	cmp	r3, #48	; 0x30
 80076cc:	d10a      	bne.n	80076e4 <__cvt+0x8c>
 80076ce:	2200      	movs	r2, #0
 80076d0:	2300      	movs	r3, #0
 80076d2:	4620      	mov	r0, r4
 80076d4:	4629      	mov	r1, r5
 80076d6:	f7f9 f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80076da:	b918      	cbnz	r0, 80076e4 <__cvt+0x8c>
 80076dc:	f1c6 0601 	rsb	r6, r6, #1
 80076e0:	f8ca 6000 	str.w	r6, [sl]
 80076e4:	f8da 3000 	ldr.w	r3, [sl]
 80076e8:	4499      	add	r9, r3
 80076ea:	2200      	movs	r2, #0
 80076ec:	2300      	movs	r3, #0
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f9 f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f6:	b108      	cbz	r0, 80076fc <__cvt+0xa4>
 80076f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076fc:	2230      	movs	r2, #48	; 0x30
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	454b      	cmp	r3, r9
 8007702:	d307      	bcc.n	8007714 <__cvt+0xbc>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007708:	1bdb      	subs	r3, r3, r7
 800770a:	4638      	mov	r0, r7
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	b004      	add	sp, #16
 8007710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007714:	1c59      	adds	r1, r3, #1
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	e7f0      	b.n	80076fe <__cvt+0xa6>

0800771c <__exponent>:
 800771c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771e:	4603      	mov	r3, r0
 8007720:	2900      	cmp	r1, #0
 8007722:	bfb8      	it	lt
 8007724:	4249      	neglt	r1, r1
 8007726:	f803 2b02 	strb.w	r2, [r3], #2
 800772a:	bfb4      	ite	lt
 800772c:	222d      	movlt	r2, #45	; 0x2d
 800772e:	222b      	movge	r2, #43	; 0x2b
 8007730:	2909      	cmp	r1, #9
 8007732:	7042      	strb	r2, [r0, #1]
 8007734:	dd2a      	ble.n	800778c <__exponent+0x70>
 8007736:	f10d 0207 	add.w	r2, sp, #7
 800773a:	4617      	mov	r7, r2
 800773c:	260a      	movs	r6, #10
 800773e:	4694      	mov	ip, r2
 8007740:	fb91 f5f6 	sdiv	r5, r1, r6
 8007744:	fb06 1415 	mls	r4, r6, r5, r1
 8007748:	3430      	adds	r4, #48	; 0x30
 800774a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800774e:	460c      	mov	r4, r1
 8007750:	2c63      	cmp	r4, #99	; 0x63
 8007752:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007756:	4629      	mov	r1, r5
 8007758:	dcf1      	bgt.n	800773e <__exponent+0x22>
 800775a:	3130      	adds	r1, #48	; 0x30
 800775c:	f1ac 0402 	sub.w	r4, ip, #2
 8007760:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007764:	1c41      	adds	r1, r0, #1
 8007766:	4622      	mov	r2, r4
 8007768:	42ba      	cmp	r2, r7
 800776a:	d30a      	bcc.n	8007782 <__exponent+0x66>
 800776c:	f10d 0209 	add.w	r2, sp, #9
 8007770:	eba2 020c 	sub.w	r2, r2, ip
 8007774:	42bc      	cmp	r4, r7
 8007776:	bf88      	it	hi
 8007778:	2200      	movhi	r2, #0
 800777a:	4413      	add	r3, r2
 800777c:	1a18      	subs	r0, r3, r0
 800777e:	b003      	add	sp, #12
 8007780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007782:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007786:	f801 5f01 	strb.w	r5, [r1, #1]!
 800778a:	e7ed      	b.n	8007768 <__exponent+0x4c>
 800778c:	2330      	movs	r3, #48	; 0x30
 800778e:	3130      	adds	r1, #48	; 0x30
 8007790:	7083      	strb	r3, [r0, #2]
 8007792:	70c1      	strb	r1, [r0, #3]
 8007794:	1d03      	adds	r3, r0, #4
 8007796:	e7f1      	b.n	800777c <__exponent+0x60>

08007798 <_printf_float>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	ed2d 8b02 	vpush	{d8}
 80077a0:	b08d      	sub	sp, #52	; 0x34
 80077a2:	460c      	mov	r4, r1
 80077a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077a8:	4616      	mov	r6, r2
 80077aa:	461f      	mov	r7, r3
 80077ac:	4605      	mov	r5, r0
 80077ae:	f000 fce9 	bl	8008184 <_localeconv_r>
 80077b2:	f8d0 a000 	ldr.w	sl, [r0]
 80077b6:	4650      	mov	r0, sl
 80077b8:	f7f8 fd62 	bl	8000280 <strlen>
 80077bc:	2300      	movs	r3, #0
 80077be:	930a      	str	r3, [sp, #40]	; 0x28
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	9305      	str	r3, [sp, #20]
 80077c4:	f8d8 3000 	ldr.w	r3, [r8]
 80077c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077cc:	3307      	adds	r3, #7
 80077ce:	f023 0307 	bic.w	r3, r3, #7
 80077d2:	f103 0208 	add.w	r2, r3, #8
 80077d6:	f8c8 2000 	str.w	r2, [r8]
 80077da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80077e8:	ee08 0a10 	vmov	s16, r0
 80077ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f4:	4b9e      	ldr	r3, [pc, #632]	; (8007a70 <_printf_float+0x2d8>)
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077fa:	f7f9 f99f 	bl	8000b3c <__aeabi_dcmpun>
 80077fe:	bb88      	cbnz	r0, 8007864 <_printf_float+0xcc>
 8007800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007804:	4b9a      	ldr	r3, [pc, #616]	; (8007a70 <_printf_float+0x2d8>)
 8007806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800780a:	f7f9 f979 	bl	8000b00 <__aeabi_dcmple>
 800780e:	bb48      	cbnz	r0, 8007864 <_printf_float+0xcc>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f968 	bl	8000aec <__aeabi_dcmplt>
 800781c:	b110      	cbz	r0, 8007824 <_printf_float+0x8c>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	4a93      	ldr	r2, [pc, #588]	; (8007a74 <_printf_float+0x2dc>)
 8007826:	4b94      	ldr	r3, [pc, #592]	; (8007a78 <_printf_float+0x2e0>)
 8007828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800782c:	bf94      	ite	ls
 800782e:	4690      	movls	r8, r2
 8007830:	4698      	movhi	r8, r3
 8007832:	2303      	movs	r3, #3
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	9b05      	ldr	r3, [sp, #20]
 8007838:	f023 0304 	bic.w	r3, r3, #4
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	9700      	str	r7, [sp, #0]
 8007844:	4633      	mov	r3, r6
 8007846:	aa0b      	add	r2, sp, #44	; 0x2c
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f9da 	bl	8007c04 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	f040 8090 	bne.w	8007976 <_printf_float+0x1de>
 8007856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800785a:	b00d      	add	sp, #52	; 0x34
 800785c:	ecbd 8b02 	vpop	{d8}
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f9 f966 	bl	8000b3c <__aeabi_dcmpun>
 8007870:	b140      	cbz	r0, 8007884 <_printf_float+0xec>
 8007872:	464b      	mov	r3, r9
 8007874:	2b00      	cmp	r3, #0
 8007876:	bfbc      	itt	lt
 8007878:	232d      	movlt	r3, #45	; 0x2d
 800787a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800787e:	4a7f      	ldr	r2, [pc, #508]	; (8007a7c <_printf_float+0x2e4>)
 8007880:	4b7f      	ldr	r3, [pc, #508]	; (8007a80 <_printf_float+0x2e8>)
 8007882:	e7d1      	b.n	8007828 <_printf_float+0x90>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800788a:	9206      	str	r2, [sp, #24]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	d13f      	bne.n	8007910 <_printf_float+0x178>
 8007890:	2306      	movs	r3, #6
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	6861      	ldr	r1, [r4, #4]
 8007898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800789c:	2300      	movs	r3, #0
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	ab0a      	add	r3, sp, #40	; 0x28
 80078a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078a6:	ab09      	add	r3, sp, #36	; 0x24
 80078a8:	ec49 8b10 	vmov	d0, r8, r9
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	6022      	str	r2, [r4, #0]
 80078b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fecf 	bl	8007658 <__cvt>
 80078ba:	9b06      	ldr	r3, [sp, #24]
 80078bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078be:	2b47      	cmp	r3, #71	; 0x47
 80078c0:	4680      	mov	r8, r0
 80078c2:	d108      	bne.n	80078d6 <_printf_float+0x13e>
 80078c4:	1cc8      	adds	r0, r1, #3
 80078c6:	db02      	blt.n	80078ce <_printf_float+0x136>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	4299      	cmp	r1, r3
 80078cc:	dd41      	ble.n	8007952 <_printf_float+0x1ba>
 80078ce:	f1ab 0302 	sub.w	r3, fp, #2
 80078d2:	fa5f fb83 	uxtb.w	fp, r3
 80078d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078da:	d820      	bhi.n	800791e <_printf_float+0x186>
 80078dc:	3901      	subs	r1, #1
 80078de:	465a      	mov	r2, fp
 80078e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078e4:	9109      	str	r1, [sp, #36]	; 0x24
 80078e6:	f7ff ff19 	bl	800771c <__exponent>
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	1813      	adds	r3, r2, r0
 80078ee:	2a01      	cmp	r2, #1
 80078f0:	4681      	mov	r9, r0
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	dc02      	bgt.n	80078fc <_printf_float+0x164>
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	07d2      	lsls	r2, r2, #31
 80078fa:	d501      	bpl.n	8007900 <_printf_float+0x168>
 80078fc:	3301      	adds	r3, #1
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007904:	2b00      	cmp	r3, #0
 8007906:	d09c      	beq.n	8007842 <_printf_float+0xaa>
 8007908:	232d      	movs	r3, #45	; 0x2d
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	e798      	b.n	8007842 <_printf_float+0xaa>
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	2a47      	cmp	r2, #71	; 0x47
 8007914:	d1be      	bne.n	8007894 <_printf_float+0xfc>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1bc      	bne.n	8007894 <_printf_float+0xfc>
 800791a:	2301      	movs	r3, #1
 800791c:	e7b9      	b.n	8007892 <_printf_float+0xfa>
 800791e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007922:	d118      	bne.n	8007956 <_printf_float+0x1be>
 8007924:	2900      	cmp	r1, #0
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	dd0b      	ble.n	8007942 <_printf_float+0x1aa>
 800792a:	6121      	str	r1, [r4, #16]
 800792c:	b913      	cbnz	r3, 8007934 <_printf_float+0x19c>
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d502      	bpl.n	800793a <_printf_float+0x1a2>
 8007934:	3301      	adds	r3, #1
 8007936:	440b      	add	r3, r1
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	65a1      	str	r1, [r4, #88]	; 0x58
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	e7de      	b.n	8007900 <_printf_float+0x168>
 8007942:	b913      	cbnz	r3, 800794a <_printf_float+0x1b2>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	07d2      	lsls	r2, r2, #31
 8007948:	d501      	bpl.n	800794e <_printf_float+0x1b6>
 800794a:	3302      	adds	r3, #2
 800794c:	e7f4      	b.n	8007938 <_printf_float+0x1a0>
 800794e:	2301      	movs	r3, #1
 8007950:	e7f2      	b.n	8007938 <_printf_float+0x1a0>
 8007952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	4299      	cmp	r1, r3
 800795a:	db05      	blt.n	8007968 <_printf_float+0x1d0>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	6121      	str	r1, [r4, #16]
 8007960:	07d8      	lsls	r0, r3, #31
 8007962:	d5ea      	bpl.n	800793a <_printf_float+0x1a2>
 8007964:	1c4b      	adds	r3, r1, #1
 8007966:	e7e7      	b.n	8007938 <_printf_float+0x1a0>
 8007968:	2900      	cmp	r1, #0
 800796a:	bfd4      	ite	le
 800796c:	f1c1 0202 	rsble	r2, r1, #2
 8007970:	2201      	movgt	r2, #1
 8007972:	4413      	add	r3, r2
 8007974:	e7e0      	b.n	8007938 <_printf_float+0x1a0>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	055a      	lsls	r2, r3, #21
 800797a:	d407      	bmi.n	800798c <_printf_float+0x1f4>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	4642      	mov	r2, r8
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	d12c      	bne.n	80079e4 <_printf_float+0x24c>
 800798a:	e764      	b.n	8007856 <_printf_float+0xbe>
 800798c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007990:	f240 80e0 	bls.w	8007b54 <_printf_float+0x3bc>
 8007994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	f7f9 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d034      	beq.n	8007a0e <_printf_float+0x276>
 80079a4:	4a37      	ldr	r2, [pc, #220]	; (8007a84 <_printf_float+0x2ec>)
 80079a6:	2301      	movs	r3, #1
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f af51 	beq.w	8007856 <_printf_float+0xbe>
 80079b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b8:	429a      	cmp	r2, r3
 80079ba:	db02      	blt.n	80079c2 <_printf_float+0x22a>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	07d8      	lsls	r0, r3, #31
 80079c0:	d510      	bpl.n	80079e4 <_printf_float+0x24c>
 80079c2:	ee18 3a10 	vmov	r3, s16
 80079c6:	4652      	mov	r2, sl
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af41 	beq.w	8007856 <_printf_float+0xbe>
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	f104 091a 	add.w	r9, r4, #26
 80079dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	4543      	cmp	r3, r8
 80079e2:	dc09      	bgt.n	80079f8 <_printf_float+0x260>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	079b      	lsls	r3, r3, #30
 80079e8:	f100 8107 	bmi.w	8007bfa <_printf_float+0x462>
 80079ec:	68e0      	ldr	r0, [r4, #12]
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	4298      	cmp	r0, r3
 80079f2:	bfb8      	it	lt
 80079f4:	4618      	movlt	r0, r3
 80079f6:	e730      	b.n	800785a <_printf_float+0xc2>
 80079f8:	2301      	movs	r3, #1
 80079fa:	464a      	mov	r2, r9
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af27 	beq.w	8007856 <_printf_float+0xbe>
 8007a08:	f108 0801 	add.w	r8, r8, #1
 8007a0c:	e7e6      	b.n	80079dc <_printf_float+0x244>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dc39      	bgt.n	8007a88 <_printf_float+0x2f0>
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <_printf_float+0x2ec>)
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af19 	beq.w	8007856 <_printf_float+0xbe>
 8007a24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d102      	bne.n	8007a32 <_printf_float+0x29a>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d5d8      	bpl.n	80079e4 <_printf_float+0x24c>
 8007a32:	ee18 3a10 	vmov	r3, s16
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af09 	beq.w	8007856 <_printf_float+0xbe>
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	f104 0a1a 	add.w	sl, r4, #26
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	425b      	negs	r3, r3
 8007a50:	454b      	cmp	r3, r9
 8007a52:	dc01      	bgt.n	8007a58 <_printf_float+0x2c0>
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	e792      	b.n	800797e <_printf_float+0x1e6>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f aef7 	beq.w	8007856 <_printf_float+0xbe>
 8007a68:	f109 0901 	add.w	r9, r9, #1
 8007a6c:	e7ee      	b.n	8007a4c <_printf_float+0x2b4>
 8007a6e:	bf00      	nop
 8007a70:	7fefffff 	.word	0x7fefffff
 8007a74:	0800a3bc 	.word	0x0800a3bc
 8007a78:	0800a3c0 	.word	0x0800a3c0
 8007a7c:	0800a3c4 	.word	0x0800a3c4
 8007a80:	0800a3c8 	.word	0x0800a3c8
 8007a84:	0800a3cc 	.word	0x0800a3cc
 8007a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bfa8      	it	ge
 8007a90:	461a      	movge	r2, r3
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	4691      	mov	r9, r2
 8007a96:	dc37      	bgt.n	8007b08 <_printf_float+0x370>
 8007a98:	f04f 0b00 	mov.w	fp, #0
 8007a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aa0:	f104 021a 	add.w	r2, r4, #26
 8007aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	eba3 0309 	sub.w	r3, r3, r9
 8007aac:	455b      	cmp	r3, fp
 8007aae:	dc33      	bgt.n	8007b18 <_printf_float+0x380>
 8007ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	db3b      	blt.n	8007b30 <_printf_float+0x398>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	07da      	lsls	r2, r3, #31
 8007abc:	d438      	bmi.n	8007b30 <_printf_float+0x398>
 8007abe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ac2:	eba2 0903 	sub.w	r9, r2, r3
 8007ac6:	9b05      	ldr	r3, [sp, #20]
 8007ac8:	1ad2      	subs	r2, r2, r3
 8007aca:	4591      	cmp	r9, r2
 8007acc:	bfa8      	it	ge
 8007ace:	4691      	movge	r9, r2
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	dc35      	bgt.n	8007b42 <_printf_float+0x3aa>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ade:	f104 0a1a 	add.w	sl, r4, #26
 8007ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	eba3 0309 	sub.w	r3, r3, r9
 8007aec:	4543      	cmp	r3, r8
 8007aee:	f77f af79 	ble.w	80079e4 <_printf_float+0x24c>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	f43f aeaa 	beq.w	8007856 <_printf_float+0xbe>
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	e7ec      	b.n	8007ae2 <_printf_float+0x34a>
 8007b08:	4613      	mov	r3, r2
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1c0      	bne.n	8007a98 <_printf_float+0x300>
 8007b16:	e69e      	b.n	8007856 <_printf_float+0xbe>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f ae97 	beq.w	8007856 <_printf_float+0xbe>
 8007b28:	9a05      	ldr	r2, [sp, #20]
 8007b2a:	f10b 0b01 	add.w	fp, fp, #1
 8007b2e:	e7b9      	b.n	8007aa4 <_printf_float+0x30c>
 8007b30:	ee18 3a10 	vmov	r3, s16
 8007b34:	4652      	mov	r2, sl
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1be      	bne.n	8007abe <_printf_float+0x326>
 8007b40:	e689      	b.n	8007856 <_printf_float+0xbe>
 8007b42:	9a05      	ldr	r2, [sp, #20]
 8007b44:	464b      	mov	r3, r9
 8007b46:	4442      	add	r2, r8
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d1c1      	bne.n	8007ad6 <_printf_float+0x33e>
 8007b52:	e680      	b.n	8007856 <_printf_float+0xbe>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b56:	2a01      	cmp	r2, #1
 8007b58:	dc01      	bgt.n	8007b5e <_printf_float+0x3c6>
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d53a      	bpl.n	8007bd4 <_printf_float+0x43c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4642      	mov	r2, r8
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f ae74 	beq.w	8007856 <_printf_float+0xbe>
 8007b6e:	ee18 3a10 	vmov	r3, s16
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f ae6b 	beq.w	8007856 <_printf_float+0xbe>
 8007b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b8c:	f7f8 ffa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b90:	b9d8      	cbnz	r0, 8007bca <_printf_float+0x432>
 8007b92:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007b96:	f108 0201 	add.w	r2, r8, #1
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d10e      	bne.n	8007bc2 <_printf_float+0x42a>
 8007ba4:	e657      	b.n	8007856 <_printf_float+0xbe>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f ae50 	beq.w	8007856 <_printf_float+0xbe>
 8007bb6:	f108 0801 	add.w	r8, r8, #1
 8007bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4543      	cmp	r3, r8
 8007bc0:	dcf1      	bgt.n	8007ba6 <_printf_float+0x40e>
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bc8:	e6da      	b.n	8007980 <_printf_float+0x1e8>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	f104 0a1a 	add.w	sl, r4, #26
 8007bd2:	e7f2      	b.n	8007bba <_printf_float+0x422>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	e7df      	b.n	8007b9a <_printf_float+0x402>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	464a      	mov	r2, r9
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae36 	beq.w	8007856 <_printf_float+0xbe>
 8007bea:	f108 0801 	add.w	r8, r8, #1
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bf2:	1a5b      	subs	r3, r3, r1
 8007bf4:	4543      	cmp	r3, r8
 8007bf6:	dcf0      	bgt.n	8007bda <_printf_float+0x442>
 8007bf8:	e6f8      	b.n	80079ec <_printf_float+0x254>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	f104 0919 	add.w	r9, r4, #25
 8007c02:	e7f4      	b.n	8007bee <_printf_float+0x456>

08007c04 <_printf_common>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	4616      	mov	r6, r2
 8007c0a:	4699      	mov	r9, r3
 8007c0c:	688a      	ldr	r2, [r1, #8]
 8007c0e:	690b      	ldr	r3, [r1, #16]
 8007c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	bfb8      	it	lt
 8007c18:	4613      	movlt	r3, r2
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c20:	4607      	mov	r7, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b10a      	cbz	r2, 8007c2a <_printf_common+0x26>
 8007c26:	3301      	adds	r3, #1
 8007c28:	6033      	str	r3, [r6, #0]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	0699      	lsls	r1, r3, #26
 8007c2e:	bf42      	ittt	mi
 8007c30:	6833      	ldrmi	r3, [r6, #0]
 8007c32:	3302      	addmi	r3, #2
 8007c34:	6033      	strmi	r3, [r6, #0]
 8007c36:	6825      	ldr	r5, [r4, #0]
 8007c38:	f015 0506 	ands.w	r5, r5, #6
 8007c3c:	d106      	bne.n	8007c4c <_printf_common+0x48>
 8007c3e:	f104 0a19 	add.w	sl, r4, #25
 8007c42:	68e3      	ldr	r3, [r4, #12]
 8007c44:	6832      	ldr	r2, [r6, #0]
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	dc26      	bgt.n	8007c9a <_printf_common+0x96>
 8007c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c50:	1e13      	subs	r3, r2, #0
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	bf18      	it	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	0692      	lsls	r2, r2, #26
 8007c5a:	d42b      	bmi.n	8007cb4 <_printf_common+0xb0>
 8007c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c60:	4649      	mov	r1, r9
 8007c62:	4638      	mov	r0, r7
 8007c64:	47c0      	blx	r8
 8007c66:	3001      	adds	r0, #1
 8007c68:	d01e      	beq.n	8007ca8 <_printf_common+0xa4>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	6922      	ldr	r2, [r4, #16]
 8007c6e:	f003 0306 	and.w	r3, r3, #6
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	bf02      	ittt	eq
 8007c76:	68e5      	ldreq	r5, [r4, #12]
 8007c78:	6833      	ldreq	r3, [r6, #0]
 8007c7a:	1aed      	subeq	r5, r5, r3
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	bf0c      	ite	eq
 8007c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c84:	2500      	movne	r5, #0
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bfc4      	itt	gt
 8007c8a:	1a9b      	subgt	r3, r3, r2
 8007c8c:	18ed      	addgt	r5, r5, r3
 8007c8e:	2600      	movs	r6, #0
 8007c90:	341a      	adds	r4, #26
 8007c92:	42b5      	cmp	r5, r6
 8007c94:	d11a      	bne.n	8007ccc <_printf_common+0xc8>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e008      	b.n	8007cac <_printf_common+0xa8>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	47c0      	blx	r8
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d103      	bne.n	8007cb0 <_printf_common+0xac>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	e7c6      	b.n	8007c42 <_printf_common+0x3e>
 8007cb4:	18e1      	adds	r1, r4, r3
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	2030      	movs	r0, #48	; 0x30
 8007cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cbe:	4422      	add	r2, r4
 8007cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc8:	3302      	adds	r3, #2
 8007cca:	e7c7      	b.n	8007c5c <_printf_common+0x58>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c0      	blx	r8
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d0e6      	beq.n	8007ca8 <_printf_common+0xa4>
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7d9      	b.n	8007c92 <_printf_common+0x8e>
	...

08007ce0 <_printf_i>:
 8007ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	7e0f      	ldrb	r7, [r1, #24]
 8007ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce8:	2f78      	cmp	r7, #120	; 0x78
 8007cea:	4691      	mov	r9, r2
 8007cec:	4680      	mov	r8, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cf6:	d807      	bhi.n	8007d08 <_printf_i+0x28>
 8007cf8:	2f62      	cmp	r7, #98	; 0x62
 8007cfa:	d80a      	bhi.n	8007d12 <_printf_i+0x32>
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	f000 80d4 	beq.w	8007eaa <_printf_i+0x1ca>
 8007d02:	2f58      	cmp	r7, #88	; 0x58
 8007d04:	f000 80c0 	beq.w	8007e88 <_printf_i+0x1a8>
 8007d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d10:	e03a      	b.n	8007d88 <_printf_i+0xa8>
 8007d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d16:	2b15      	cmp	r3, #21
 8007d18:	d8f6      	bhi.n	8007d08 <_printf_i+0x28>
 8007d1a:	a101      	add	r1, pc, #4	; (adr r1, 8007d20 <_printf_i+0x40>)
 8007d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d20:	08007d79 	.word	0x08007d79
 8007d24:	08007d8d 	.word	0x08007d8d
 8007d28:	08007d09 	.word	0x08007d09
 8007d2c:	08007d09 	.word	0x08007d09
 8007d30:	08007d09 	.word	0x08007d09
 8007d34:	08007d09 	.word	0x08007d09
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007d09 	.word	0x08007d09
 8007d40:	08007d09 	.word	0x08007d09
 8007d44:	08007d09 	.word	0x08007d09
 8007d48:	08007d09 	.word	0x08007d09
 8007d4c:	08007e91 	.word	0x08007e91
 8007d50:	08007db9 	.word	0x08007db9
 8007d54:	08007e4b 	.word	0x08007e4b
 8007d58:	08007d09 	.word	0x08007d09
 8007d5c:	08007d09 	.word	0x08007d09
 8007d60:	08007eb3 	.word	0x08007eb3
 8007d64:	08007d09 	.word	0x08007d09
 8007d68:	08007db9 	.word	0x08007db9
 8007d6c:	08007d09 	.word	0x08007d09
 8007d70:	08007d09 	.word	0x08007d09
 8007d74:	08007e53 	.word	0x08007e53
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	602a      	str	r2, [r5, #0]
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e09f      	b.n	8007ecc <_printf_i+0x1ec>
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	0607      	lsls	r7, r0, #24
 8007d92:	f103 0104 	add.w	r1, r3, #4
 8007d96:	6029      	str	r1, [r5, #0]
 8007d98:	d501      	bpl.n	8007d9e <_printf_i+0xbe>
 8007d9a:	681e      	ldr	r6, [r3, #0]
 8007d9c:	e003      	b.n	8007da6 <_printf_i+0xc6>
 8007d9e:	0646      	lsls	r6, r0, #25
 8007da0:	d5fb      	bpl.n	8007d9a <_printf_i+0xba>
 8007da2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	da03      	bge.n	8007db2 <_printf_i+0xd2>
 8007daa:	232d      	movs	r3, #45	; 0x2d
 8007dac:	4276      	negs	r6, r6
 8007dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db2:	485a      	ldr	r0, [pc, #360]	; (8007f1c <_printf_i+0x23c>)
 8007db4:	230a      	movs	r3, #10
 8007db6:	e012      	b.n	8007dde <_printf_i+0xfe>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	1d19      	adds	r1, r3, #4
 8007dbe:	6029      	str	r1, [r5, #0]
 8007dc0:	0605      	lsls	r5, r0, #24
 8007dc2:	d501      	bpl.n	8007dc8 <_printf_i+0xe8>
 8007dc4:	681e      	ldr	r6, [r3, #0]
 8007dc6:	e002      	b.n	8007dce <_printf_i+0xee>
 8007dc8:	0641      	lsls	r1, r0, #25
 8007dca:	d5fb      	bpl.n	8007dc4 <_printf_i+0xe4>
 8007dcc:	881e      	ldrh	r6, [r3, #0]
 8007dce:	4853      	ldr	r0, [pc, #332]	; (8007f1c <_printf_i+0x23c>)
 8007dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2308      	moveq	r3, #8
 8007dd6:	230a      	movne	r3, #10
 8007dd8:	2100      	movs	r1, #0
 8007dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dde:	6865      	ldr	r5, [r4, #4]
 8007de0:	60a5      	str	r5, [r4, #8]
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	bfa2      	ittt	ge
 8007de6:	6821      	ldrge	r1, [r4, #0]
 8007de8:	f021 0104 	bicge.w	r1, r1, #4
 8007dec:	6021      	strge	r1, [r4, #0]
 8007dee:	b90e      	cbnz	r6, 8007df4 <_printf_i+0x114>
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d04b      	beq.n	8007e8c <_printf_i+0x1ac>
 8007df4:	4615      	mov	r5, r2
 8007df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8007dfe:	5dc7      	ldrb	r7, [r0, r7]
 8007e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e04:	4637      	mov	r7, r6
 8007e06:	42bb      	cmp	r3, r7
 8007e08:	460e      	mov	r6, r1
 8007e0a:	d9f4      	bls.n	8007df6 <_printf_i+0x116>
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d10b      	bne.n	8007e28 <_printf_i+0x148>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07de      	lsls	r6, r3, #31
 8007e14:	d508      	bpl.n	8007e28 <_printf_i+0x148>
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	bfde      	ittt	le
 8007e1e:	2330      	movle	r3, #48	; 0x30
 8007e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e28:	1b52      	subs	r2, r2, r5
 8007e2a:	6122      	str	r2, [r4, #16]
 8007e2c:	f8cd a000 	str.w	sl, [sp]
 8007e30:	464b      	mov	r3, r9
 8007e32:	aa03      	add	r2, sp, #12
 8007e34:	4621      	mov	r1, r4
 8007e36:	4640      	mov	r0, r8
 8007e38:	f7ff fee4 	bl	8007c04 <_printf_common>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d14a      	bne.n	8007ed6 <_printf_i+0x1f6>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e44:	b004      	add	sp, #16
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f043 0320 	orr.w	r3, r3, #32
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	4833      	ldr	r0, [pc, #204]	; (8007f20 <_printf_i+0x240>)
 8007e54:	2778      	movs	r7, #120	; 0x78
 8007e56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	6829      	ldr	r1, [r5, #0]
 8007e5e:	061f      	lsls	r7, r3, #24
 8007e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e64:	d402      	bmi.n	8007e6c <_printf_i+0x18c>
 8007e66:	065f      	lsls	r7, r3, #25
 8007e68:	bf48      	it	mi
 8007e6a:	b2b6      	uxthmi	r6, r6
 8007e6c:	07df      	lsls	r7, r3, #31
 8007e6e:	bf48      	it	mi
 8007e70:	f043 0320 	orrmi.w	r3, r3, #32
 8007e74:	6029      	str	r1, [r5, #0]
 8007e76:	bf48      	it	mi
 8007e78:	6023      	strmi	r3, [r4, #0]
 8007e7a:	b91e      	cbnz	r6, 8007e84 <_printf_i+0x1a4>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	f023 0320 	bic.w	r3, r3, #32
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	2310      	movs	r3, #16
 8007e86:	e7a7      	b.n	8007dd8 <_printf_i+0xf8>
 8007e88:	4824      	ldr	r0, [pc, #144]	; (8007f1c <_printf_i+0x23c>)
 8007e8a:	e7e4      	b.n	8007e56 <_printf_i+0x176>
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	e7bd      	b.n	8007e0c <_printf_i+0x12c>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	6826      	ldr	r6, [r4, #0]
 8007e94:	6961      	ldr	r1, [r4, #20]
 8007e96:	1d18      	adds	r0, r3, #4
 8007e98:	6028      	str	r0, [r5, #0]
 8007e9a:	0635      	lsls	r5, r6, #24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_i+0x1c4>
 8007ea0:	6019      	str	r1, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <_printf_i+0x1ca>
 8007ea4:	0670      	lsls	r0, r6, #25
 8007ea6:	d5fb      	bpl.n	8007ea0 <_printf_i+0x1c0>
 8007ea8:	8019      	strh	r1, [r3, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	4615      	mov	r5, r2
 8007eb0:	e7bc      	b.n	8007e2c <_printf_i+0x14c>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	681d      	ldr	r5, [r3, #0]
 8007eba:	6862      	ldr	r2, [r4, #4]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	b108      	cbz	r0, 8007eca <_printf_i+0x1ea>
 8007ec6:	1b40      	subs	r0, r0, r5
 8007ec8:	6060      	str	r0, [r4, #4]
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed4:	e7aa      	b.n	8007e2c <_printf_i+0x14c>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4649      	mov	r1, r9
 8007edc:	4640      	mov	r0, r8
 8007ede:	47d0      	blx	sl
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d0ad      	beq.n	8007e40 <_printf_i+0x160>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	079b      	lsls	r3, r3, #30
 8007ee8:	d413      	bmi.n	8007f12 <_printf_i+0x232>
 8007eea:	68e0      	ldr	r0, [r4, #12]
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	4298      	cmp	r0, r3
 8007ef0:	bfb8      	it	lt
 8007ef2:	4618      	movlt	r0, r3
 8007ef4:	e7a6      	b.n	8007e44 <_printf_i+0x164>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4632      	mov	r2, r6
 8007efa:	4649      	mov	r1, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	47d0      	blx	sl
 8007f00:	3001      	adds	r0, #1
 8007f02:	d09d      	beq.n	8007e40 <_printf_i+0x160>
 8007f04:	3501      	adds	r5, #1
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	9903      	ldr	r1, [sp, #12]
 8007f0a:	1a5b      	subs	r3, r3, r1
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dcf2      	bgt.n	8007ef6 <_printf_i+0x216>
 8007f10:	e7eb      	b.n	8007eea <_printf_i+0x20a>
 8007f12:	2500      	movs	r5, #0
 8007f14:	f104 0619 	add.w	r6, r4, #25
 8007f18:	e7f5      	b.n	8007f06 <_printf_i+0x226>
 8007f1a:	bf00      	nop
 8007f1c:	0800a3ce 	.word	0x0800a3ce
 8007f20:	0800a3df 	.word	0x0800a3df

08007f24 <std>:
 8007f24:	2300      	movs	r3, #0
 8007f26:	b510      	push	{r4, lr}
 8007f28:	4604      	mov	r4, r0
 8007f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f32:	6083      	str	r3, [r0, #8]
 8007f34:	8181      	strh	r1, [r0, #12]
 8007f36:	6643      	str	r3, [r0, #100]	; 0x64
 8007f38:	81c2      	strh	r2, [r0, #14]
 8007f3a:	6183      	str	r3, [r0, #24]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	2208      	movs	r2, #8
 8007f40:	305c      	adds	r0, #92	; 0x5c
 8007f42:	f000 f916 	bl	8008172 <memset>
 8007f46:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <std+0x38>)
 8007f48:	6263      	str	r3, [r4, #36]	; 0x24
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x3c>)
 8007f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <std+0x40>)
 8007f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <std+0x44>)
 8007f54:	6224      	str	r4, [r4, #32]
 8007f56:	6323      	str	r3, [r4, #48]	; 0x30
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	080080ed 	.word	0x080080ed
 8007f60:	0800810f 	.word	0x0800810f
 8007f64:	08008147 	.word	0x08008147
 8007f68:	0800816b 	.word	0x0800816b

08007f6c <stdio_exit_handler>:
 8007f6c:	4a02      	ldr	r2, [pc, #8]	; (8007f78 <stdio_exit_handler+0xc>)
 8007f6e:	4903      	ldr	r1, [pc, #12]	; (8007f7c <stdio_exit_handler+0x10>)
 8007f70:	4803      	ldr	r0, [pc, #12]	; (8007f80 <stdio_exit_handler+0x14>)
 8007f72:	f000 b869 	b.w	8008048 <_fwalk_sglue>
 8007f76:	bf00      	nop
 8007f78:	2000001c 	.word	0x2000001c
 8007f7c:	08009c19 	.word	0x08009c19
 8007f80:	20000028 	.word	0x20000028

08007f84 <cleanup_stdio>:
 8007f84:	6841      	ldr	r1, [r0, #4]
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <cleanup_stdio+0x34>)
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	d001      	beq.n	8007f94 <cleanup_stdio+0x10>
 8007f90:	f001 fe42 	bl	8009c18 <_fflush_r>
 8007f94:	68a1      	ldr	r1, [r4, #8]
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <cleanup_stdio+0x38>)
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <cleanup_stdio+0x1e>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fe3b 	bl	8009c18 <_fflush_r>
 8007fa2:	68e1      	ldr	r1, [r4, #12]
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <cleanup_stdio+0x3c>)
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d004      	beq.n	8007fb4 <cleanup_stdio+0x30>
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f001 be32 	b.w	8009c18 <_fflush_r>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200003ac 	.word	0x200003ac
 8007fbc:	20000414 	.word	0x20000414
 8007fc0:	2000047c 	.word	0x2000047c

08007fc4 <global_stdio_init.part.0>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <global_stdio_init.part.0+0x30>)
 8007fc8:	4c0b      	ldr	r4, [pc, #44]	; (8007ff8 <global_stdio_init.part.0+0x34>)
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <global_stdio_init.part.0+0x38>)
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	f7ff ffa6 	bl	8007f24 <std>
 8007fd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2109      	movs	r1, #9
 8007fe0:	f7ff ffa0 	bl	8007f24 <std>
 8007fe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fe8:	2202      	movs	r2, #2
 8007fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fee:	2112      	movs	r1, #18
 8007ff0:	f7ff bf98 	b.w	8007f24 <std>
 8007ff4:	200004e4 	.word	0x200004e4
 8007ff8:	200003ac 	.word	0x200003ac
 8007ffc:	08007f6d 	.word	0x08007f6d

08008000 <__sfp_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sfp_lock_acquire+0x8>)
 8008002:	f000 b933 	b.w	800826c <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200004ed 	.word	0x200004ed

0800800c <__sfp_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_release+0x8>)
 800800e:	f000 b92e 	b.w	800826e <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200004ed 	.word	0x200004ed

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sfp_lock_acquire>
 8008020:	6a23      	ldr	r3, [r4, #32]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sfp_lock_release>
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <__sinit+0x28>)
 800802e:	6223      	str	r3, [r4, #32]
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <__sinit+0x2c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f5      	bne.n	8008024 <__sinit+0xc>
 8008038:	f7ff ffc4 	bl	8007fc4 <global_stdio_init.part.0>
 800803c:	e7f2      	b.n	8008024 <__sinit+0xc>
 800803e:	bf00      	nop
 8008040:	08007f85 	.word	0x08007f85
 8008044:	200004e4 	.word	0x200004e4

08008048 <_fwalk_sglue>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	4607      	mov	r7, r0
 800804e:	4688      	mov	r8, r1
 8008050:	4614      	mov	r4, r2
 8008052:	2600      	movs	r6, #0
 8008054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008058:	f1b9 0901 	subs.w	r9, r9, #1
 800805c:	d505      	bpl.n	800806a <_fwalk_sglue+0x22>
 800805e:	6824      	ldr	r4, [r4, #0]
 8008060:	2c00      	cmp	r4, #0
 8008062:	d1f7      	bne.n	8008054 <_fwalk_sglue+0xc>
 8008064:	4630      	mov	r0, r6
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d907      	bls.n	8008080 <_fwalk_sglue+0x38>
 8008070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008074:	3301      	adds	r3, #1
 8008076:	d003      	beq.n	8008080 <_fwalk_sglue+0x38>
 8008078:	4629      	mov	r1, r5
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	4306      	orrs	r6, r0
 8008080:	3568      	adds	r5, #104	; 0x68
 8008082:	e7e9      	b.n	8008058 <_fwalk_sglue+0x10>

08008084 <sniprintf>:
 8008084:	b40c      	push	{r2, r3}
 8008086:	b530      	push	{r4, r5, lr}
 8008088:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <sniprintf+0x64>)
 800808a:	1e0c      	subs	r4, r1, #0
 800808c:	681d      	ldr	r5, [r3, #0]
 800808e:	b09d      	sub	sp, #116	; 0x74
 8008090:	da08      	bge.n	80080a4 <sniprintf+0x20>
 8008092:	238b      	movs	r3, #139	; 0x8b
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800809a:	b01d      	add	sp, #116	; 0x74
 800809c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a0:	b002      	add	sp, #8
 80080a2:	4770      	bx	lr
 80080a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080ac:	bf14      	ite	ne
 80080ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80080b2:	4623      	moveq	r3, r4
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080bc:	9002      	str	r0, [sp, #8]
 80080be:	9006      	str	r0, [sp, #24]
 80080c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080c6:	ab21      	add	r3, sp, #132	; 0x84
 80080c8:	a902      	add	r1, sp, #8
 80080ca:	4628      	mov	r0, r5
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	f001 fc1f 	bl	8009910 <_svfiprintf_r>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	bfbc      	itt	lt
 80080d6:	238b      	movlt	r3, #139	; 0x8b
 80080d8:	602b      	strlt	r3, [r5, #0]
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d0dd      	beq.n	800809a <sniprintf+0x16>
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e7d9      	b.n	800809a <sniprintf+0x16>
 80080e6:	bf00      	nop
 80080e8:	20000074 	.word	0x20000074

080080ec <__sread>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	f000 f86c 	bl	80081d0 <_read_r>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	bfab      	itete	ge
 80080fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008100:	181b      	addge	r3, r3, r0
 8008102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008106:	bfac      	ite	ge
 8008108:	6563      	strge	r3, [r4, #84]	; 0x54
 800810a:	81a3      	strhlt	r3, [r4, #12]
 800810c:	bd10      	pop	{r4, pc}

0800810e <__swrite>:
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	461f      	mov	r7, r3
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	05db      	lsls	r3, r3, #23
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4616      	mov	r6, r2
 800811e:	d505      	bpl.n	800812c <__swrite+0x1e>
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	2302      	movs	r3, #2
 8008126:	2200      	movs	r2, #0
 8008128:	f000 f840 	bl	80081ac <_lseek_r>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	4632      	mov	r2, r6
 800813a:	463b      	mov	r3, r7
 800813c:	4628      	mov	r0, r5
 800813e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	f000 b857 	b.w	80081f4 <_write_r>

08008146 <__sseek>:
 8008146:	b510      	push	{r4, lr}
 8008148:	460c      	mov	r4, r1
 800814a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814e:	f000 f82d 	bl	80081ac <_lseek_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	bf15      	itete	ne
 8008158:	6560      	strne	r0, [r4, #84]	; 0x54
 800815a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800815e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008162:	81a3      	strheq	r3, [r4, #12]
 8008164:	bf18      	it	ne
 8008166:	81a3      	strhne	r3, [r4, #12]
 8008168:	bd10      	pop	{r4, pc}

0800816a <__sclose>:
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 b80d 	b.w	800818c <_close_r>

08008172 <memset>:
 8008172:	4402      	add	r2, r0
 8008174:	4603      	mov	r3, r0
 8008176:	4293      	cmp	r3, r2
 8008178:	d100      	bne.n	800817c <memset+0xa>
 800817a:	4770      	bx	lr
 800817c:	f803 1b01 	strb.w	r1, [r3], #1
 8008180:	e7f9      	b.n	8008176 <memset+0x4>
	...

08008184 <_localeconv_r>:
 8008184:	4800      	ldr	r0, [pc, #0]	; (8008188 <_localeconv_r+0x4>)
 8008186:	4770      	bx	lr
 8008188:	20000168 	.word	0x20000168

0800818c <_close_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_close_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fbc1 	bl	800191e <_close>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_close_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_close_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200004e8 	.word	0x200004e8

080081ac <_lseek_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_lseek_r+0x20>)
 80081b0:	4604      	mov	r4, r0
 80081b2:	4608      	mov	r0, r1
 80081b4:	4611      	mov	r1, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	602a      	str	r2, [r5, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	f7f9 fbd6 	bl	800196c <_lseek>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_lseek_r+0x1e>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_lseek_r+0x1e>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	200004e8 	.word	0x200004e8

080081d0 <_read_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_read_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 fb64 	bl	80018ac <_read>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_read_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_read_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	200004e8 	.word	0x200004e8

080081f4 <_write_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	; (8008214 <_write_r+0x20>)
 80081f8:	4604      	mov	r4, r0
 80081fa:	4608      	mov	r0, r1
 80081fc:	4611      	mov	r1, r2
 80081fe:	2200      	movs	r2, #0
 8008200:	602a      	str	r2, [r5, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f7f9 fb6f 	bl	80018e6 <_write>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_write_r+0x1e>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_write_r+0x1e>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	200004e8 	.word	0x200004e8

08008218 <__errno>:
 8008218:	4b01      	ldr	r3, [pc, #4]	; (8008220 <__errno+0x8>)
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000074 	.word	0x20000074

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	4d0d      	ldr	r5, [pc, #52]	; (800825c <__libc_init_array+0x38>)
 8008228:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <__libc_init_array+0x3c>)
 800822a:	1b64      	subs	r4, r4, r5
 800822c:	10a4      	asrs	r4, r4, #2
 800822e:	2600      	movs	r6, #0
 8008230:	42a6      	cmp	r6, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	4d0b      	ldr	r5, [pc, #44]	; (8008264 <__libc_init_array+0x40>)
 8008236:	4c0c      	ldr	r4, [pc, #48]	; (8008268 <__libc_init_array+0x44>)
 8008238:	f002 f892 	bl	800a360 <_init>
 800823c:	1b64      	subs	r4, r4, r5
 800823e:	10a4      	asrs	r4, r4, #2
 8008240:	2600      	movs	r6, #0
 8008242:	42a6      	cmp	r6, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	f855 3b04 	ldr.w	r3, [r5], #4
 800824c:	4798      	blx	r3
 800824e:	3601      	adds	r6, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	f855 3b04 	ldr.w	r3, [r5], #4
 8008256:	4798      	blx	r3
 8008258:	3601      	adds	r6, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	0800a734 	.word	0x0800a734
 8008260:	0800a734 	.word	0x0800a734
 8008264:	0800a734 	.word	0x0800a734
 8008268:	0800a738 	.word	0x0800a738

0800826c <__retarget_lock_acquire_recursive>:
 800826c:	4770      	bx	lr

0800826e <__retarget_lock_release_recursive>:
 800826e:	4770      	bx	lr

08008270 <quorem>:
 8008270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	6903      	ldr	r3, [r0, #16]
 8008276:	690c      	ldr	r4, [r1, #16]
 8008278:	42a3      	cmp	r3, r4
 800827a:	4607      	mov	r7, r0
 800827c:	db7e      	blt.n	800837c <quorem+0x10c>
 800827e:	3c01      	subs	r4, #1
 8008280:	f101 0814 	add.w	r8, r1, #20
 8008284:	f100 0514 	add.w	r5, r0, #20
 8008288:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008292:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008296:	3301      	adds	r3, #1
 8008298:	429a      	cmp	r2, r3
 800829a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800829e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a6:	d331      	bcc.n	800830c <quorem+0x9c>
 80082a8:	f04f 0e00 	mov.w	lr, #0
 80082ac:	4640      	mov	r0, r8
 80082ae:	46ac      	mov	ip, r5
 80082b0:	46f2      	mov	sl, lr
 80082b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80082b6:	b293      	uxth	r3, r2
 80082b8:	fb06 e303 	mla	r3, r6, r3, lr
 80082bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082c0:	0c1a      	lsrs	r2, r3, #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ebaa 0303 	sub.w	r3, sl, r3
 80082c8:	f8dc a000 	ldr.w	sl, [ip]
 80082cc:	fa13 f38a 	uxtah	r3, r3, sl
 80082d0:	fb06 220e 	mla	r2, r6, lr, r2
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	9b00      	ldr	r3, [sp, #0]
 80082d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082dc:	b292      	uxth	r2, r2
 80082de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80082ea:	4581      	cmp	r9, r0
 80082ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f0:	f84c 3b04 	str.w	r3, [ip], #4
 80082f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082f8:	d2db      	bcs.n	80082b2 <quorem+0x42>
 80082fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80082fe:	b92b      	cbnz	r3, 800830c <quorem+0x9c>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	3b04      	subs	r3, #4
 8008304:	429d      	cmp	r5, r3
 8008306:	461a      	mov	r2, r3
 8008308:	d32c      	bcc.n	8008364 <quorem+0xf4>
 800830a:	613c      	str	r4, [r7, #16]
 800830c:	4638      	mov	r0, r7
 800830e:	f001 f9a5 	bl	800965c <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	db22      	blt.n	800835c <quorem+0xec>
 8008316:	3601      	adds	r6, #1
 8008318:	4629      	mov	r1, r5
 800831a:	2000      	movs	r0, #0
 800831c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008320:	f8d1 c000 	ldr.w	ip, [r1]
 8008324:	b293      	uxth	r3, r2
 8008326:	1ac3      	subs	r3, r0, r3
 8008328:	0c12      	lsrs	r2, r2, #16
 800832a:	fa13 f38c 	uxtah	r3, r3, ip
 800832e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008332:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833c:	45c1      	cmp	r9, r8
 800833e:	f841 3b04 	str.w	r3, [r1], #4
 8008342:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008346:	d2e9      	bcs.n	800831c <quorem+0xac>
 8008348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008350:	b922      	cbnz	r2, 800835c <quorem+0xec>
 8008352:	3b04      	subs	r3, #4
 8008354:	429d      	cmp	r5, r3
 8008356:	461a      	mov	r2, r3
 8008358:	d30a      	bcc.n	8008370 <quorem+0x100>
 800835a:	613c      	str	r4, [r7, #16]
 800835c:	4630      	mov	r0, r6
 800835e:	b003      	add	sp, #12
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	3b04      	subs	r3, #4
 8008368:	2a00      	cmp	r2, #0
 800836a:	d1ce      	bne.n	800830a <quorem+0x9a>
 800836c:	3c01      	subs	r4, #1
 800836e:	e7c9      	b.n	8008304 <quorem+0x94>
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	3b04      	subs	r3, #4
 8008374:	2a00      	cmp	r2, #0
 8008376:	d1f0      	bne.n	800835a <quorem+0xea>
 8008378:	3c01      	subs	r4, #1
 800837a:	e7eb      	b.n	8008354 <quorem+0xe4>
 800837c:	2000      	movs	r0, #0
 800837e:	e7ee      	b.n	800835e <quorem+0xee>

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ed2d 8b04 	vpush	{d8-d9}
 8008388:	69c5      	ldr	r5, [r0, #28]
 800838a:	b093      	sub	sp, #76	; 0x4c
 800838c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008390:	ec57 6b10 	vmov	r6, r7, d0
 8008394:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008398:	9107      	str	r1, [sp, #28]
 800839a:	4604      	mov	r4, r0
 800839c:	920a      	str	r2, [sp, #40]	; 0x28
 800839e:	930d      	str	r3, [sp, #52]	; 0x34
 80083a0:	b975      	cbnz	r5, 80083c0 <_dtoa_r+0x40>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f000 fe2a 	bl	8008ffc <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	61e0      	str	r0, [r4, #28]
 80083ac:	b920      	cbnz	r0, 80083b8 <_dtoa_r+0x38>
 80083ae:	4bae      	ldr	r3, [pc, #696]	; (8008668 <_dtoa_r+0x2e8>)
 80083b0:	21ef      	movs	r1, #239	; 0xef
 80083b2:	48ae      	ldr	r0, [pc, #696]	; (800866c <_dtoa_r+0x2ec>)
 80083b4:	f001 fc90 	bl	8009cd8 <__assert_func>
 80083b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083bc:	6005      	str	r5, [r0, #0]
 80083be:	60c5      	str	r5, [r0, #12]
 80083c0:	69e3      	ldr	r3, [r4, #28]
 80083c2:	6819      	ldr	r1, [r3, #0]
 80083c4:	b151      	cbz	r1, 80083dc <_dtoa_r+0x5c>
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	604a      	str	r2, [r1, #4]
 80083ca:	2301      	movs	r3, #1
 80083cc:	4093      	lsls	r3, r2
 80083ce:	608b      	str	r3, [r1, #8]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 ff07 	bl	80091e4 <_Bfree>
 80083d6:	69e3      	ldr	r3, [r4, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	1e3b      	subs	r3, r7, #0
 80083de:	bfbb      	ittet	lt
 80083e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	9303      	strlt	r3, [sp, #12]
 80083e6:	2300      	movge	r3, #0
 80083e8:	2201      	movlt	r2, #1
 80083ea:	bfac      	ite	ge
 80083ec:	f8c8 3000 	strge.w	r3, [r8]
 80083f0:	f8c8 2000 	strlt.w	r2, [r8]
 80083f4:	4b9e      	ldr	r3, [pc, #632]	; (8008670 <_dtoa_r+0x2f0>)
 80083f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083fa:	ea33 0308 	bics.w	r3, r3, r8
 80083fe:	d11b      	bne.n	8008438 <_dtoa_r+0xb8>
 8008400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008402:	f242 730f 	movw	r3, #9999	; 0x270f
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800840c:	4333      	orrs	r3, r6
 800840e:	f000 8593 	beq.w	8008f38 <_dtoa_r+0xbb8>
 8008412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008414:	b963      	cbnz	r3, 8008430 <_dtoa_r+0xb0>
 8008416:	4b97      	ldr	r3, [pc, #604]	; (8008674 <_dtoa_r+0x2f4>)
 8008418:	e027      	b.n	800846a <_dtoa_r+0xea>
 800841a:	4b97      	ldr	r3, [pc, #604]	; (8008678 <_dtoa_r+0x2f8>)
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	9800      	ldr	r0, [sp, #0]
 8008426:	b013      	add	sp, #76	; 0x4c
 8008428:	ecbd 8b04 	vpop	{d8-d9}
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	4b90      	ldr	r3, [pc, #576]	; (8008674 <_dtoa_r+0x2f4>)
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	3303      	adds	r3, #3
 8008436:	e7f3      	b.n	8008420 <_dtoa_r+0xa0>
 8008438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	ec51 0b17 	vmov	r0, r1, d7
 8008442:	eeb0 8a47 	vmov.f32	s16, s14
 8008446:	eef0 8a67 	vmov.f32	s17, s15
 800844a:	2300      	movs	r3, #0
 800844c:	f7f8 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008450:	4681      	mov	r9, r0
 8008452:	b160      	cbz	r0, 800846e <_dtoa_r+0xee>
 8008454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008456:	2301      	movs	r3, #1
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8568 	beq.w	8008f32 <_dtoa_r+0xbb2>
 8008462:	4b86      	ldr	r3, [pc, #536]	; (800867c <_dtoa_r+0x2fc>)
 8008464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	e7da      	b.n	8008424 <_dtoa_r+0xa4>
 800846e:	aa10      	add	r2, sp, #64	; 0x40
 8008470:	a911      	add	r1, sp, #68	; 0x44
 8008472:	4620      	mov	r0, r4
 8008474:	eeb0 0a48 	vmov.f32	s0, s16
 8008478:	eef0 0a68 	vmov.f32	s1, s17
 800847c:	f001 f994 	bl	80097a8 <__d2b>
 8008480:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008484:	4682      	mov	sl, r0
 8008486:	2d00      	cmp	r5, #0
 8008488:	d07f      	beq.n	800858a <_dtoa_r+0x20a>
 800848a:	ee18 3a90 	vmov	r3, s17
 800848e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008496:	ec51 0b18 	vmov	r0, r1, d8
 800849a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800849e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80084a6:	4619      	mov	r1, r3
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b75      	ldr	r3, [pc, #468]	; (8008680 <_dtoa_r+0x300>)
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	a367      	add	r3, pc, #412	; (adr r3, 8008650 <_dtoa_r+0x2d0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	a367      	add	r3, pc, #412	; (adr r3, 8008658 <_dtoa_r+0x2d8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 feec 	bl	800029c <__adddf3>
 80084c4:	4606      	mov	r6, r0
 80084c6:	4628      	mov	r0, r5
 80084c8:	460f      	mov	r7, r1
 80084ca:	f7f8 f833 	bl	8000534 <__aeabi_i2d>
 80084ce:	a364      	add	r3, pc, #400	; (adr r3, 8008660 <_dtoa_r+0x2e0>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f8 f898 	bl	8000608 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f7 fedc 	bl	800029c <__adddf3>
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	f7f8 fb3e 	bl	8000b68 <__aeabi_d2iz>
 80084ec:	2200      	movs	r2, #0
 80084ee:	4683      	mov	fp, r0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 faf9 	bl	8000aec <__aeabi_dcmplt>
 80084fa:	b148      	cbz	r0, 8008510 <_dtoa_r+0x190>
 80084fc:	4658      	mov	r0, fp
 80084fe:	f7f8 f819 	bl	8000534 <__aeabi_i2d>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f8 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800850a:	b908      	cbnz	r0, 8008510 <_dtoa_r+0x190>
 800850c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008510:	f1bb 0f16 	cmp.w	fp, #22
 8008514:	d857      	bhi.n	80085c6 <_dtoa_r+0x246>
 8008516:	4b5b      	ldr	r3, [pc, #364]	; (8008684 <_dtoa_r+0x304>)
 8008518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	ec51 0b18 	vmov	r0, r1, d8
 8008524:	f7f8 fae2 	bl	8000aec <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	d04e      	beq.n	80085ca <_dtoa_r+0x24a>
 800852c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008530:	2300      	movs	r3, #0
 8008532:	930c      	str	r3, [sp, #48]	; 0x30
 8008534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008536:	1b5b      	subs	r3, r3, r5
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	bf45      	ittet	mi
 800853c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008540:	9305      	strmi	r3, [sp, #20]
 8008542:	2300      	movpl	r3, #0
 8008544:	2300      	movmi	r3, #0
 8008546:	9206      	str	r2, [sp, #24]
 8008548:	bf54      	ite	pl
 800854a:	9305      	strpl	r3, [sp, #20]
 800854c:	9306      	strmi	r3, [sp, #24]
 800854e:	f1bb 0f00 	cmp.w	fp, #0
 8008552:	db3c      	blt.n	80085ce <_dtoa_r+0x24e>
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800855a:	445b      	add	r3, fp
 800855c:	9306      	str	r3, [sp, #24]
 800855e:	2300      	movs	r3, #0
 8008560:	9308      	str	r3, [sp, #32]
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b09      	cmp	r3, #9
 8008566:	d868      	bhi.n	800863a <_dtoa_r+0x2ba>
 8008568:	2b05      	cmp	r3, #5
 800856a:	bfc4      	itt	gt
 800856c:	3b04      	subgt	r3, #4
 800856e:	9307      	strgt	r3, [sp, #28]
 8008570:	9b07      	ldr	r3, [sp, #28]
 8008572:	f1a3 0302 	sub.w	r3, r3, #2
 8008576:	bfcc      	ite	gt
 8008578:	2500      	movgt	r5, #0
 800857a:	2501      	movle	r5, #1
 800857c:	2b03      	cmp	r3, #3
 800857e:	f200 8085 	bhi.w	800868c <_dtoa_r+0x30c>
 8008582:	e8df f003 	tbb	[pc, r3]
 8008586:	3b2e      	.short	0x3b2e
 8008588:	5839      	.short	0x5839
 800858a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800858e:	441d      	add	r5, r3
 8008590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008594:	2b20      	cmp	r3, #32
 8008596:	bfc1      	itttt	gt
 8008598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800859c:	fa08 f803 	lslgt.w	r8, r8, r3
 80085a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80085a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80085a8:	bfd6      	itet	le
 80085aa:	f1c3 0320 	rsble	r3, r3, #32
 80085ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80085b2:	fa06 f003 	lslle.w	r0, r6, r3
 80085b6:	f7f7 ffad 	bl	8000514 <__aeabi_ui2d>
 80085ba:	2201      	movs	r2, #1
 80085bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085c0:	3d01      	subs	r5, #1
 80085c2:	920e      	str	r2, [sp, #56]	; 0x38
 80085c4:	e76f      	b.n	80084a6 <_dtoa_r+0x126>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7b3      	b.n	8008532 <_dtoa_r+0x1b2>
 80085ca:	900c      	str	r0, [sp, #48]	; 0x30
 80085cc:	e7b2      	b.n	8008534 <_dtoa_r+0x1b4>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	eba3 030b 	sub.w	r3, r3, fp
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	f1cb 0300 	rsb	r3, fp, #0
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	2300      	movs	r3, #0
 80085de:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e0:	e7bf      	b.n	8008562 <_dtoa_r+0x1e2>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9309      	str	r3, [sp, #36]	; 0x24
 80085e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc52      	bgt.n	8008692 <_dtoa_r+0x312>
 80085ec:	2301      	movs	r3, #1
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	461a      	mov	r2, r3
 80085f4:	920a      	str	r2, [sp, #40]	; 0x28
 80085f6:	e00b      	b.n	8008610 <_dtoa_r+0x290>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e7f3      	b.n	80085e4 <_dtoa_r+0x264>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	445b      	add	r3, fp
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	3301      	adds	r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	bfb8      	it	lt
 800860e:	2301      	movlt	r3, #1
 8008610:	69e0      	ldr	r0, [r4, #28]
 8008612:	2100      	movs	r1, #0
 8008614:	2204      	movs	r2, #4
 8008616:	f102 0614 	add.w	r6, r2, #20
 800861a:	429e      	cmp	r6, r3
 800861c:	d93d      	bls.n	800869a <_dtoa_r+0x31a>
 800861e:	6041      	str	r1, [r0, #4]
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fd9f 	bl	8009164 <_Balloc>
 8008626:	9000      	str	r0, [sp, #0]
 8008628:	2800      	cmp	r0, #0
 800862a:	d139      	bne.n	80086a0 <_dtoa_r+0x320>
 800862c:	4b16      	ldr	r3, [pc, #88]	; (8008688 <_dtoa_r+0x308>)
 800862e:	4602      	mov	r2, r0
 8008630:	f240 11af 	movw	r1, #431	; 0x1af
 8008634:	e6bd      	b.n	80083b2 <_dtoa_r+0x32>
 8008636:	2301      	movs	r3, #1
 8008638:	e7e1      	b.n	80085fe <_dtoa_r+0x27e>
 800863a:	2501      	movs	r5, #1
 800863c:	2300      	movs	r3, #0
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	9509      	str	r5, [sp, #36]	; 0x24
 8008642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	2200      	movs	r2, #0
 800864c:	2312      	movs	r3, #18
 800864e:	e7d1      	b.n	80085f4 <_dtoa_r+0x274>
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800a3fd 	.word	0x0800a3fd
 800866c:	0800a414 	.word	0x0800a414
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800a3f9 	.word	0x0800a3f9
 8008678:	0800a3f0 	.word	0x0800a3f0
 800867c:	0800a3cd 	.word	0x0800a3cd
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800a500 	.word	0x0800a500
 8008688:	0800a46c 	.word	0x0800a46c
 800868c:	2301      	movs	r3, #1
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	e7d7      	b.n	8008642 <_dtoa_r+0x2c2>
 8008692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	e7ba      	b.n	8008610 <_dtoa_r+0x290>
 800869a:	3101      	adds	r1, #1
 800869c:	0052      	lsls	r2, r2, #1
 800869e:	e7ba      	b.n	8008616 <_dtoa_r+0x296>
 80086a0:	69e3      	ldr	r3, [r4, #28]
 80086a2:	9a00      	ldr	r2, [sp, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	2b0e      	cmp	r3, #14
 80086aa:	f200 80a8 	bhi.w	80087fe <_dtoa_r+0x47e>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f000 80a5 	beq.w	80087fe <_dtoa_r+0x47e>
 80086b4:	f1bb 0f00 	cmp.w	fp, #0
 80086b8:	dd38      	ble.n	800872c <_dtoa_r+0x3ac>
 80086ba:	4bc0      	ldr	r3, [pc, #768]	; (80089bc <_dtoa_r+0x63c>)
 80086bc:	f00b 020f 	and.w	r2, fp, #15
 80086c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086d0:	d019      	beq.n	8008706 <_dtoa_r+0x386>
 80086d2:	4bbb      	ldr	r3, [pc, #748]	; (80089c0 <_dtoa_r+0x640>)
 80086d4:	ec51 0b18 	vmov	r0, r1, d8
 80086d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086dc:	f7f8 f8be 	bl	800085c <__aeabi_ddiv>
 80086e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e4:	f008 080f 	and.w	r8, r8, #15
 80086e8:	2503      	movs	r5, #3
 80086ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089c0 <_dtoa_r+0x640>
 80086ee:	f1b8 0f00 	cmp.w	r8, #0
 80086f2:	d10a      	bne.n	800870a <_dtoa_r+0x38a>
 80086f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f8:	4632      	mov	r2, r6
 80086fa:	463b      	mov	r3, r7
 80086fc:	f7f8 f8ae 	bl	800085c <__aeabi_ddiv>
 8008700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008704:	e02b      	b.n	800875e <_dtoa_r+0x3de>
 8008706:	2502      	movs	r5, #2
 8008708:	e7ef      	b.n	80086ea <_dtoa_r+0x36a>
 800870a:	f018 0f01 	tst.w	r8, #1
 800870e:	d008      	beq.n	8008722 <_dtoa_r+0x3a2>
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008718:	f7f7 ff76 	bl	8000608 <__aeabi_dmul>
 800871c:	3501      	adds	r5, #1
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008726:	f109 0908 	add.w	r9, r9, #8
 800872a:	e7e0      	b.n	80086ee <_dtoa_r+0x36e>
 800872c:	f000 809f 	beq.w	800886e <_dtoa_r+0x4ee>
 8008730:	f1cb 0600 	rsb	r6, fp, #0
 8008734:	4ba1      	ldr	r3, [pc, #644]	; (80089bc <_dtoa_r+0x63c>)
 8008736:	4fa2      	ldr	r7, [pc, #648]	; (80089c0 <_dtoa_r+0x640>)
 8008738:	f006 020f 	and.w	r2, r6, #15
 800873c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	ec51 0b18 	vmov	r0, r1, d8
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008750:	1136      	asrs	r6, r6, #4
 8008752:	2300      	movs	r3, #0
 8008754:	2502      	movs	r5, #2
 8008756:	2e00      	cmp	r6, #0
 8008758:	d17e      	bne.n	8008858 <_dtoa_r+0x4d8>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1d0      	bne.n	8008700 <_dtoa_r+0x380>
 800875e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008760:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8084 	beq.w	8008872 <_dtoa_r+0x4f2>
 800876a:	4b96      	ldr	r3, [pc, #600]	; (80089c4 <_dtoa_r+0x644>)
 800876c:	2200      	movs	r2, #0
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f8 f9bb 	bl	8000aec <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d07b      	beq.n	8008872 <_dtoa_r+0x4f2>
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d078      	beq.n	8008872 <_dtoa_r+0x4f2>
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd39      	ble.n	80087fa <_dtoa_r+0x47a>
 8008786:	4b90      	ldr	r3, [pc, #576]	; (80089c8 <_dtoa_r+0x648>)
 8008788:	2200      	movs	r2, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008796:	9e01      	ldr	r6, [sp, #4]
 8008798:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800879c:	3501      	adds	r5, #1
 800879e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7f7 fec6 	bl	8000534 <__aeabi_i2d>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	4b86      	ldr	r3, [pc, #536]	; (80089cc <_dtoa_r+0x64c>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	f7f7 fd72 	bl	800029c <__adddf3>
 80087b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d158      	bne.n	8008878 <_dtoa_r+0x4f8>
 80087c6:	4b82      	ldr	r3, [pc, #520]	; (80089d0 <_dtoa_r+0x650>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fd63 	bl	8000298 <__aeabi_dsub>
 80087d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087d6:	4680      	mov	r8, r0
 80087d8:	4689      	mov	r9, r1
 80087da:	f7f8 f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8296 	bne.w	8008d10 <_dtoa_r+0x990>
 80087e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087e8:	4640      	mov	r0, r8
 80087ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f97c 	bl	8000aec <__aeabi_dcmplt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f040 8289 	bne.w	8008d0c <_dtoa_r+0x98c>
 80087fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008800:	2b00      	cmp	r3, #0
 8008802:	f2c0 814e 	blt.w	8008aa2 <_dtoa_r+0x722>
 8008806:	f1bb 0f0e 	cmp.w	fp, #14
 800880a:	f300 814a 	bgt.w	8008aa2 <_dtoa_r+0x722>
 800880e:	4b6b      	ldr	r3, [pc, #428]	; (80089bc <_dtoa_r+0x63c>)
 8008810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	f280 80dc 	bge.w	80089d8 <_dtoa_r+0x658>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f300 80d8 	bgt.w	80089d8 <_dtoa_r+0x658>
 8008828:	f040 826f 	bne.w	8008d0a <_dtoa_r+0x98a>
 800882c:	4b68      	ldr	r3, [pc, #416]	; (80089d0 <_dtoa_r+0x650>)
 800882e:	2200      	movs	r2, #0
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f7 fee8 	bl	8000608 <__aeabi_dmul>
 8008838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800883c:	f7f8 f96a 	bl	8000b14 <__aeabi_dcmpge>
 8008840:	9e04      	ldr	r6, [sp, #16]
 8008842:	4637      	mov	r7, r6
 8008844:	2800      	cmp	r0, #0
 8008846:	f040 8245 	bne.w	8008cd4 <_dtoa_r+0x954>
 800884a:	9d00      	ldr	r5, [sp, #0]
 800884c:	2331      	movs	r3, #49	; 0x31
 800884e:	f805 3b01 	strb.w	r3, [r5], #1
 8008852:	f10b 0b01 	add.w	fp, fp, #1
 8008856:	e241      	b.n	8008cdc <_dtoa_r+0x95c>
 8008858:	07f2      	lsls	r2, r6, #31
 800885a:	d505      	bpl.n	8008868 <_dtoa_r+0x4e8>
 800885c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008860:	f7f7 fed2 	bl	8000608 <__aeabi_dmul>
 8008864:	3501      	adds	r5, #1
 8008866:	2301      	movs	r3, #1
 8008868:	1076      	asrs	r6, r6, #1
 800886a:	3708      	adds	r7, #8
 800886c:	e773      	b.n	8008756 <_dtoa_r+0x3d6>
 800886e:	2502      	movs	r5, #2
 8008870:	e775      	b.n	800875e <_dtoa_r+0x3de>
 8008872:	9e04      	ldr	r6, [sp, #16]
 8008874:	465f      	mov	r7, fp
 8008876:	e792      	b.n	800879e <_dtoa_r+0x41e>
 8008878:	9900      	ldr	r1, [sp, #0]
 800887a:	4b50      	ldr	r3, [pc, #320]	; (80089bc <_dtoa_r+0x63c>)
 800887c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008880:	4431      	add	r1, r6
 8008882:	9102      	str	r1, [sp, #8]
 8008884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008886:	eeb0 9a47 	vmov.f32	s18, s14
 800888a:	eef0 9a67 	vmov.f32	s19, s15
 800888e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008896:	2900      	cmp	r1, #0
 8008898:	d044      	beq.n	8008924 <_dtoa_r+0x5a4>
 800889a:	494e      	ldr	r1, [pc, #312]	; (80089d4 <_dtoa_r+0x654>)
 800889c:	2000      	movs	r0, #0
 800889e:	f7f7 ffdd 	bl	800085c <__aeabi_ddiv>
 80088a2:	ec53 2b19 	vmov	r2, r3, d9
 80088a6:	f7f7 fcf7 	bl	8000298 <__aeabi_dsub>
 80088aa:	9d00      	ldr	r5, [sp, #0]
 80088ac:	ec41 0b19 	vmov	d9, r0, r1
 80088b0:	4649      	mov	r1, r9
 80088b2:	4640      	mov	r0, r8
 80088b4:	f7f8 f958 	bl	8000b68 <__aeabi_d2iz>
 80088b8:	4606      	mov	r6, r0
 80088ba:	f7f7 fe3b 	bl	8000534 <__aeabi_i2d>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fce7 	bl	8000298 <__aeabi_dsub>
 80088ca:	3630      	adds	r6, #48	; 0x30
 80088cc:	f805 6b01 	strb.w	r6, [r5], #1
 80088d0:	ec53 2b19 	vmov	r2, r3, d9
 80088d4:	4680      	mov	r8, r0
 80088d6:	4689      	mov	r9, r1
 80088d8:	f7f8 f908 	bl	8000aec <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d164      	bne.n	80089aa <_dtoa_r+0x62a>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	4937      	ldr	r1, [pc, #220]	; (80089c4 <_dtoa_r+0x644>)
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7f7 fcd6 	bl	8000298 <__aeabi_dsub>
 80088ec:	ec53 2b19 	vmov	r2, r3, d9
 80088f0:	f7f8 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 80b6 	bne.w	8008a66 <_dtoa_r+0x6e6>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	429d      	cmp	r5, r3
 80088fe:	f43f af7c 	beq.w	80087fa <_dtoa_r+0x47a>
 8008902:	4b31      	ldr	r3, [pc, #196]	; (80089c8 <_dtoa_r+0x648>)
 8008904:	ec51 0b19 	vmov	r0, r1, d9
 8008908:	2200      	movs	r2, #0
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <_dtoa_r+0x648>)
 8008910:	ec41 0b19 	vmov	d9, r0, r1
 8008914:	2200      	movs	r2, #0
 8008916:	4640      	mov	r0, r8
 8008918:	4649      	mov	r1, r9
 800891a:	f7f7 fe75 	bl	8000608 <__aeabi_dmul>
 800891e:	4680      	mov	r8, r0
 8008920:	4689      	mov	r9, r1
 8008922:	e7c5      	b.n	80088b0 <_dtoa_r+0x530>
 8008924:	ec51 0b17 	vmov	r0, r1, d7
 8008928:	f7f7 fe6e 	bl	8000608 <__aeabi_dmul>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	9d00      	ldr	r5, [sp, #0]
 8008930:	930f      	str	r3, [sp, #60]	; 0x3c
 8008932:	ec41 0b19 	vmov	d9, r0, r1
 8008936:	4649      	mov	r1, r9
 8008938:	4640      	mov	r0, r8
 800893a:	f7f8 f915 	bl	8000b68 <__aeabi_d2iz>
 800893e:	4606      	mov	r6, r0
 8008940:	f7f7 fdf8 	bl	8000534 <__aeabi_i2d>
 8008944:	3630      	adds	r6, #48	; 0x30
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4640      	mov	r0, r8
 800894c:	4649      	mov	r1, r9
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	f805 6b01 	strb.w	r6, [r5], #1
 8008956:	9b02      	ldr	r3, [sp, #8]
 8008958:	429d      	cmp	r5, r3
 800895a:	4680      	mov	r8, r0
 800895c:	4689      	mov	r9, r1
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	d124      	bne.n	80089ae <_dtoa_r+0x62e>
 8008964:	4b1b      	ldr	r3, [pc, #108]	; (80089d4 <_dtoa_r+0x654>)
 8008966:	ec51 0b19 	vmov	r0, r1, d9
 800896a:	f7f7 fc97 	bl	800029c <__adddf3>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	f7f8 f8d7 	bl	8000b28 <__aeabi_dcmpgt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d173      	bne.n	8008a66 <_dtoa_r+0x6e6>
 800897e:	ec53 2b19 	vmov	r2, r3, d9
 8008982:	4914      	ldr	r1, [pc, #80]	; (80089d4 <_dtoa_r+0x654>)
 8008984:	2000      	movs	r0, #0
 8008986:	f7f7 fc87 	bl	8000298 <__aeabi_dsub>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f8 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f43f af2f 	beq.w	80087fa <_dtoa_r+0x47a>
 800899c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800899e:	1e6b      	subs	r3, r5, #1
 80089a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a6:	2b30      	cmp	r3, #48	; 0x30
 80089a8:	d0f8      	beq.n	800899c <_dtoa_r+0x61c>
 80089aa:	46bb      	mov	fp, r7
 80089ac:	e04a      	b.n	8008a44 <_dtoa_r+0x6c4>
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <_dtoa_r+0x648>)
 80089b0:	f7f7 fe2a 	bl	8000608 <__aeabi_dmul>
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	e7bd      	b.n	8008936 <_dtoa_r+0x5b6>
 80089ba:	bf00      	nop
 80089bc:	0800a500 	.word	0x0800a500
 80089c0:	0800a4d8 	.word	0x0800a4d8
 80089c4:	3ff00000 	.word	0x3ff00000
 80089c8:	40240000 	.word	0x40240000
 80089cc:	401c0000 	.word	0x401c0000
 80089d0:	40140000 	.word	0x40140000
 80089d4:	3fe00000 	.word	0x3fe00000
 80089d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089dc:	9d00      	ldr	r5, [sp, #0]
 80089de:	4642      	mov	r2, r8
 80089e0:	464b      	mov	r3, r9
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 ff39 	bl	800085c <__aeabi_ddiv>
 80089ea:	f7f8 f8bd 	bl	8000b68 <__aeabi_d2iz>
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	f7f7 fda0 	bl	8000534 <__aeabi_i2d>
 80089f4:	4642      	mov	r2, r8
 80089f6:	464b      	mov	r3, r9
 80089f8:	f7f7 fe06 	bl	8000608 <__aeabi_dmul>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fc48 	bl	8000298 <__aeabi_dsub>
 8008a08:	9e01      	ldr	r6, [sp, #4]
 8008a0a:	9f04      	ldr	r7, [sp, #16]
 8008a0c:	3630      	adds	r6, #48	; 0x30
 8008a0e:	f805 6b01 	strb.w	r6, [r5], #1
 8008a12:	9e00      	ldr	r6, [sp, #0]
 8008a14:	1bae      	subs	r6, r5, r6
 8008a16:	42b7      	cmp	r7, r6
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	d134      	bne.n	8008a88 <_dtoa_r+0x708>
 8008a1e:	f7f7 fc3d 	bl	800029c <__adddf3>
 8008a22:	4642      	mov	r2, r8
 8008a24:	464b      	mov	r3, r9
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	f7f8 f87d 	bl	8000b28 <__aeabi_dcmpgt>
 8008a2e:	b9c8      	cbnz	r0, 8008a64 <_dtoa_r+0x6e4>
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f8 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a3c:	b110      	cbz	r0, 8008a44 <_dtoa_r+0x6c4>
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	07db      	lsls	r3, r3, #31
 8008a42:	d40f      	bmi.n	8008a64 <_dtoa_r+0x6e4>
 8008a44:	4651      	mov	r1, sl
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fbcc 	bl	80091e4 <_Bfree>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a50:	702b      	strb	r3, [r5, #0]
 8008a52:	f10b 0301 	add.w	r3, fp, #1
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f43f ace2 	beq.w	8008424 <_dtoa_r+0xa4>
 8008a60:	601d      	str	r5, [r3, #0]
 8008a62:	e4df      	b.n	8008424 <_dtoa_r+0xa4>
 8008a64:	465f      	mov	r7, fp
 8008a66:	462b      	mov	r3, r5
 8008a68:	461d      	mov	r5, r3
 8008a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6e:	2a39      	cmp	r2, #57	; 0x39
 8008a70:	d106      	bne.n	8008a80 <_dtoa_r+0x700>
 8008a72:	9a00      	ldr	r2, [sp, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d1f7      	bne.n	8008a68 <_dtoa_r+0x6e8>
 8008a78:	9900      	ldr	r1, [sp, #0]
 8008a7a:	2230      	movs	r2, #48	; 0x30
 8008a7c:	3701      	adds	r7, #1
 8008a7e:	700a      	strb	r2, [r1, #0]
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	3201      	adds	r2, #1
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e790      	b.n	80089aa <_dtoa_r+0x62a>
 8008a88:	4ba3      	ldr	r3, [pc, #652]	; (8008d18 <_dtoa_r+0x998>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fdbc 	bl	8000608 <__aeabi_dmul>
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	f7f8 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d09e      	beq.n	80089de <_dtoa_r+0x65e>
 8008aa0:	e7d0      	b.n	8008a44 <_dtoa_r+0x6c4>
 8008aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	f000 80ca 	beq.w	8008c3e <_dtoa_r+0x8be>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	2a01      	cmp	r2, #1
 8008aae:	f300 80ad 	bgt.w	8008c0c <_dtoa_r+0x88c>
 8008ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	f000 80a5 	beq.w	8008c04 <_dtoa_r+0x884>
 8008aba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008abe:	9e08      	ldr	r6, [sp, #32]
 8008ac0:	9d05      	ldr	r5, [sp, #20]
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	9a06      	ldr	r2, [sp, #24]
 8008aca:	2101      	movs	r1, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	4620      	mov	r0, r4
 8008ad0:	9206      	str	r2, [sp, #24]
 8008ad2:	f000 fc3d 	bl	8009350 <__i2b>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	b165      	cbz	r5, 8008af4 <_dtoa_r+0x774>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd09      	ble.n	8008af4 <_dtoa_r+0x774>
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	9a05      	ldr	r2, [sp, #20]
 8008ae4:	bfa8      	it	ge
 8008ae6:	462b      	movge	r3, r5
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	9205      	str	r2, [sp, #20]
 8008aec:	9a06      	ldr	r2, [sp, #24]
 8008aee:	1aed      	subs	r5, r5, r3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	9b08      	ldr	r3, [sp, #32]
 8008af6:	b1f3      	cbz	r3, 8008b36 <_dtoa_r+0x7b6>
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80a3 	beq.w	8008c46 <_dtoa_r+0x8c6>
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	dd10      	ble.n	8008b26 <_dtoa_r+0x7a6>
 8008b04:	4639      	mov	r1, r7
 8008b06:	4632      	mov	r2, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fce1 	bl	80094d0 <__pow5mult>
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4601      	mov	r1, r0
 8008b12:	4607      	mov	r7, r0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fc31 	bl	800937c <__multiply>
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 fb60 	bl	80091e4 <_Bfree>
 8008b24:	46c2      	mov	sl, r8
 8008b26:	9b08      	ldr	r3, [sp, #32]
 8008b28:	1b9a      	subs	r2, r3, r6
 8008b2a:	d004      	beq.n	8008b36 <_dtoa_r+0x7b6>
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fcce 	bl	80094d0 <__pow5mult>
 8008b34:	4682      	mov	sl, r0
 8008b36:	2101      	movs	r1, #1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fc09 	bl	8009350 <__i2b>
 8008b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	f340 8081 	ble.w	8008c4a <_dtoa_r+0x8ca>
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fcbf 	bl	80094d0 <__pow5mult>
 8008b52:	9b07      	ldr	r3, [sp, #28]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	4606      	mov	r6, r0
 8008b58:	dd7a      	ble.n	8008c50 <_dtoa_r+0x8d0>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	6933      	ldr	r3, [r6, #16]
 8008b60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b64:	6918      	ldr	r0, [r3, #16]
 8008b66:	f000 fba5 	bl	80092b4 <__hi0bits>
 8008b6a:	f1c0 0020 	rsb	r0, r0, #32
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	4418      	add	r0, r3
 8008b72:	f010 001f 	ands.w	r0, r0, #31
 8008b76:	f000 8094 	beq.w	8008ca2 <_dtoa_r+0x922>
 8008b7a:	f1c0 0320 	rsb	r3, r0, #32
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	f340 8085 	ble.w	8008c8e <_dtoa_r+0x90e>
 8008b84:	9b05      	ldr	r3, [sp, #20]
 8008b86:	f1c0 001c 	rsb	r0, r0, #28
 8008b8a:	4403      	add	r3, r0
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	4403      	add	r3, r0
 8008b92:	4405      	add	r5, r0
 8008b94:	9306      	str	r3, [sp, #24]
 8008b96:	9b05      	ldr	r3, [sp, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x828>
 8008b9c:	4651      	mov	r1, sl
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fcef 	bl	8009584 <__lshift>
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x83a>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fce6 	bl	8009584 <__lshift>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d072      	beq.n	8008ca6 <_dtoa_r+0x926>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fd4a 	bl	800965c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da6c      	bge.n	8008ca6 <_dtoa_r+0x926>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4651      	mov	r1, sl
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fb28 	bl	8009228 <__multadd>
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008bde:	4682      	mov	sl, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 81b0 	beq.w	8008f46 <_dtoa_r+0xbc6>
 8008be6:	2300      	movs	r3, #0
 8008be8:	4639      	mov	r1, r7
 8008bea:	220a      	movs	r2, #10
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fb1b 	bl	8009228 <__multadd>
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	f300 8096 	bgt.w	8008d28 <_dtoa_r+0x9a8>
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc59      	bgt.n	8008cb6 <_dtoa_r+0x936>
 8008c02:	e091      	b.n	8008d28 <_dtoa_r+0x9a8>
 8008c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c0a:	e758      	b.n	8008abe <_dtoa_r+0x73e>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	1e5e      	subs	r6, r3, #1
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	bfbf      	itttt	lt
 8008c16:	9b08      	ldrlt	r3, [sp, #32]
 8008c18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008c1a:	9608      	strlt	r6, [sp, #32]
 8008c1c:	1af3      	sublt	r3, r6, r3
 8008c1e:	bfb4      	ite	lt
 8008c20:	18d2      	addlt	r2, r2, r3
 8008c22:	1b9e      	subge	r6, r3, r6
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	bfbc      	itt	lt
 8008c28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c2a:	2600      	movlt	r6, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb7      	itett	lt
 8008c30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c38:	1a9d      	sublt	r5, r3, r2
 8008c3a:	2300      	movlt	r3, #0
 8008c3c:	e741      	b.n	8008ac2 <_dtoa_r+0x742>
 8008c3e:	9e08      	ldr	r6, [sp, #32]
 8008c40:	9d05      	ldr	r5, [sp, #20]
 8008c42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c44:	e748      	b.n	8008ad8 <_dtoa_r+0x758>
 8008c46:	9a08      	ldr	r2, [sp, #32]
 8008c48:	e770      	b.n	8008b2c <_dtoa_r+0x7ac>
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	dc19      	bgt.n	8008c84 <_dtoa_r+0x904>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	b9bb      	cbnz	r3, 8008c84 <_dtoa_r+0x904>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5a:	b99b      	cbnz	r3, 8008c84 <_dtoa_r+0x904>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	b183      	cbz	r3, 8008c8a <_dtoa_r+0x90a>
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	9b06      	ldr	r3, [sp, #24]
 8008c70:	3301      	adds	r3, #1
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	f04f 0801 	mov.w	r8, #1
 8008c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f af6f 	bne.w	8008b5e <_dtoa_r+0x7de>
 8008c80:	2001      	movs	r0, #1
 8008c82:	e774      	b.n	8008b6e <_dtoa_r+0x7ee>
 8008c84:	f04f 0800 	mov.w	r8, #0
 8008c88:	e7f6      	b.n	8008c78 <_dtoa_r+0x8f8>
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	e7f4      	b.n	8008c78 <_dtoa_r+0x8f8>
 8008c8e:	d082      	beq.n	8008b96 <_dtoa_r+0x816>
 8008c90:	9a05      	ldr	r2, [sp, #20]
 8008c92:	331c      	adds	r3, #28
 8008c94:	441a      	add	r2, r3
 8008c96:	9205      	str	r2, [sp, #20]
 8008c98:	9a06      	ldr	r2, [sp, #24]
 8008c9a:	441a      	add	r2, r3
 8008c9c:	441d      	add	r5, r3
 8008c9e:	9206      	str	r2, [sp, #24]
 8008ca0:	e779      	b.n	8008b96 <_dtoa_r+0x816>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	e7f4      	b.n	8008c90 <_dtoa_r+0x910>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc37      	bgt.n	8008d1c <_dtoa_r+0x99c>
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dd34      	ble.n	8008d1c <_dtoa_r+0x99c>
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	b963      	cbnz	r3, 8008cd4 <_dtoa_r+0x954>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 fab2 	bl	8009228 <__multadd>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	4650      	mov	r0, sl
 8008cca:	f000 fcc7 	bl	800965c <__mcmp>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f73f adbb 	bgt.w	800884a <_dtoa_r+0x4ca>
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd6:	9d00      	ldr	r5, [sp, #0]
 8008cd8:	ea6f 0b03 	mvn.w	fp, r3
 8008cdc:	f04f 0800 	mov.w	r8, #0
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fa7e 	bl	80091e4 <_Bfree>
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	f43f aeab 	beq.w	8008a44 <_dtoa_r+0x6c4>
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	d005      	beq.n	8008d00 <_dtoa_r+0x980>
 8008cf4:	45b8      	cmp	r8, r7
 8008cf6:	d003      	beq.n	8008d00 <_dtoa_r+0x980>
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fa72 	bl	80091e4 <_Bfree>
 8008d00:	4639      	mov	r1, r7
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 fa6e 	bl	80091e4 <_Bfree>
 8008d08:	e69c      	b.n	8008a44 <_dtoa_r+0x6c4>
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	4637      	mov	r7, r6
 8008d0e:	e7e1      	b.n	8008cd4 <_dtoa_r+0x954>
 8008d10:	46bb      	mov	fp, r7
 8008d12:	4637      	mov	r7, r6
 8008d14:	e599      	b.n	800884a <_dtoa_r+0x4ca>
 8008d16:	bf00      	nop
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80c8 	beq.w	8008eb4 <_dtoa_r+0xb34>
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	dd05      	ble.n	8008d38 <_dtoa_r+0x9b8>
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fc27 	bl	8009584 <__lshift>
 8008d36:	4607      	mov	r7, r0
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d05b      	beq.n	8008df6 <_dtoa_r+0xa76>
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fa0f 	bl	8009164 <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <_dtoa_r+0x9d6>
 8008d4a:	4b83      	ldr	r3, [pc, #524]	; (8008f58 <_dtoa_r+0xbd8>)
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d52:	f7ff bb2e 	b.w	80083b2 <_dtoa_r+0x32>
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	f107 010c 	add.w	r1, r7, #12
 8008d60:	300c      	adds	r0, #12
 8008d62:	f000 ffab 	bl	8009cbc <memcpy>
 8008d66:	2201      	movs	r2, #1
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fc0a 	bl	8009584 <__lshift>
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	9308      	str	r3, [sp, #32]
 8008d7e:	9b02      	ldr	r3, [sp, #8]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	46b8      	mov	r8, r7
 8008d86:	9306      	str	r3, [sp, #24]
 8008d88:	4607      	mov	r7, r0
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4650      	mov	r0, sl
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	f7ff fa6c 	bl	8008270 <quorem>
 8008d98:	4641      	mov	r1, r8
 8008d9a:	9002      	str	r0, [sp, #8]
 8008d9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008da0:	4650      	mov	r0, sl
 8008da2:	f000 fc5b 	bl	800965c <__mcmp>
 8008da6:	463a      	mov	r2, r7
 8008da8:	9005      	str	r0, [sp, #20]
 8008daa:	4631      	mov	r1, r6
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fc71 	bl	8009694 <__mdiff>
 8008db2:	68c2      	ldr	r2, [r0, #12]
 8008db4:	4605      	mov	r5, r0
 8008db6:	bb02      	cbnz	r2, 8008dfa <_dtoa_r+0xa7a>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4650      	mov	r0, sl
 8008dbc:	f000 fc4e 	bl	800965c <__mcmp>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc8:	f000 fa0c 	bl	80091e4 <_Bfree>
 8008dcc:	9b07      	ldr	r3, [sp, #28]
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	9d04      	ldr	r5, [sp, #16]
 8008dd2:	ea43 0102 	orr.w	r1, r3, r2
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	4319      	orrs	r1, r3
 8008dda:	d110      	bne.n	8008dfe <_dtoa_r+0xa7e>
 8008ddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008de0:	d029      	beq.n	8008e36 <_dtoa_r+0xab6>
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd02      	ble.n	8008dee <_dtoa_r+0xa6e>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	f883 9000 	strb.w	r9, [r3]
 8008df4:	e774      	b.n	8008ce0 <_dtoa_r+0x960>
 8008df6:	4638      	mov	r0, r7
 8008df8:	e7ba      	b.n	8008d70 <_dtoa_r+0x9f0>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7e1      	b.n	8008dc2 <_dtoa_r+0xa42>
 8008dfe:	9b05      	ldr	r3, [sp, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db04      	blt.n	8008e0e <_dtoa_r+0xa8e>
 8008e04:	9907      	ldr	r1, [sp, #28]
 8008e06:	430b      	orrs	r3, r1
 8008e08:	9906      	ldr	r1, [sp, #24]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	d120      	bne.n	8008e50 <_dtoa_r+0xad0>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	dded      	ble.n	8008dee <_dtoa_r+0xa6e>
 8008e12:	4651      	mov	r1, sl
 8008e14:	2201      	movs	r2, #1
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fbb4 	bl	8009584 <__lshift>
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4682      	mov	sl, r0
 8008e20:	f000 fc1c 	bl	800965c <__mcmp>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	dc03      	bgt.n	8008e30 <_dtoa_r+0xab0>
 8008e28:	d1e1      	bne.n	8008dee <_dtoa_r+0xa6e>
 8008e2a:	f019 0f01 	tst.w	r9, #1
 8008e2e:	d0de      	beq.n	8008dee <_dtoa_r+0xa6e>
 8008e30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e34:	d1d8      	bne.n	8008de8 <_dtoa_r+0xa68>
 8008e36:	9a01      	ldr	r2, [sp, #4]
 8008e38:	2339      	movs	r3, #57	; 0x39
 8008e3a:	7013      	strb	r3, [r2, #0]
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	461d      	mov	r5, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e46:	2a39      	cmp	r2, #57	; 0x39
 8008e48:	d06c      	beq.n	8008f24 <_dtoa_r+0xba4>
 8008e4a:	3201      	adds	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	e747      	b.n	8008ce0 <_dtoa_r+0x960>
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	dd07      	ble.n	8008e64 <_dtoa_r+0xae4>
 8008e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e58:	d0ed      	beq.n	8008e36 <_dtoa_r+0xab6>
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	f109 0301 	add.w	r3, r9, #1
 8008e60:	7013      	strb	r3, [r2, #0]
 8008e62:	e73d      	b.n	8008ce0 <_dtoa_r+0x960>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	9a08      	ldr	r2, [sp, #32]
 8008e68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d043      	beq.n	8008ef8 <_dtoa_r+0xb78>
 8008e70:	4651      	mov	r1, sl
 8008e72:	2300      	movs	r3, #0
 8008e74:	220a      	movs	r2, #10
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f9d6 	bl	8009228 <__multadd>
 8008e7c:	45b8      	cmp	r8, r7
 8008e7e:	4682      	mov	sl, r0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	f04f 020a 	mov.w	r2, #10
 8008e88:	4641      	mov	r1, r8
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	d107      	bne.n	8008e9e <_dtoa_r+0xb1e>
 8008e8e:	f000 f9cb 	bl	8009228 <__multadd>
 8008e92:	4680      	mov	r8, r0
 8008e94:	4607      	mov	r7, r0
 8008e96:	9b04      	ldr	r3, [sp, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	e775      	b.n	8008d8a <_dtoa_r+0xa0a>
 8008e9e:	f000 f9c3 	bl	8009228 <__multadd>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f9bc 	bl	8009228 <__multadd>
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	e7f0      	b.n	8008e96 <_dtoa_r+0xb16>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7ff f9d7 	bl	8008270 <quorem>
 8008ec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	f805 9b01 	strb.w	r9, [r5], #1
 8008ecc:	1aea      	subs	r2, r5, r3
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	dd07      	ble.n	8008ee4 <_dtoa_r+0xb64>
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 f9a4 	bl	8009228 <__multadd>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	e7ea      	b.n	8008eba <_dtoa_r+0xb3a>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfc8      	it	gt
 8008eea:	461d      	movgt	r5, r3
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	bfd8      	it	le
 8008ef0:	2501      	movle	r5, #1
 8008ef2:	441d      	add	r5, r3
 8008ef4:	f04f 0800 	mov.w	r8, #0
 8008ef8:	4651      	mov	r1, sl
 8008efa:	2201      	movs	r2, #1
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fb41 	bl	8009584 <__lshift>
 8008f02:	4631      	mov	r1, r6
 8008f04:	4682      	mov	sl, r0
 8008f06:	f000 fba9 	bl	800965c <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dc96      	bgt.n	8008e3c <_dtoa_r+0xabc>
 8008f0e:	d102      	bne.n	8008f16 <_dtoa_r+0xb96>
 8008f10:	f019 0f01 	tst.w	r9, #1
 8008f14:	d192      	bne.n	8008e3c <_dtoa_r+0xabc>
 8008f16:	462b      	mov	r3, r5
 8008f18:	461d      	mov	r5, r3
 8008f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f1e:	2a30      	cmp	r2, #48	; 0x30
 8008f20:	d0fa      	beq.n	8008f18 <_dtoa_r+0xb98>
 8008f22:	e6dd      	b.n	8008ce0 <_dtoa_r+0x960>
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d189      	bne.n	8008e3e <_dtoa_r+0xabe>
 8008f2a:	f10b 0b01 	add.w	fp, fp, #1
 8008f2e:	2331      	movs	r3, #49	; 0x31
 8008f30:	e796      	b.n	8008e60 <_dtoa_r+0xae0>
 8008f32:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <_dtoa_r+0xbdc>)
 8008f34:	f7ff ba99 	b.w	800846a <_dtoa_r+0xea>
 8008f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f47f aa6d 	bne.w	800841a <_dtoa_r+0x9a>
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <_dtoa_r+0xbe0>)
 8008f42:	f7ff ba92 	b.w	800846a <_dtoa_r+0xea>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dcb5      	bgt.n	8008eb8 <_dtoa_r+0xb38>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	f73f aeb1 	bgt.w	8008cb6 <_dtoa_r+0x936>
 8008f54:	e7b0      	b.n	8008eb8 <_dtoa_r+0xb38>
 8008f56:	bf00      	nop
 8008f58:	0800a46c 	.word	0x0800a46c
 8008f5c:	0800a3cc 	.word	0x0800a3cc
 8008f60:	0800a3f0 	.word	0x0800a3f0

08008f64 <_free_r>:
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d044      	beq.n	8008ff4 <_free_r+0x90>
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f1a1 0404 	sub.w	r4, r1, #4
 8008f76:	bfb8      	it	lt
 8008f78:	18e4      	addlt	r4, r4, r3
 8008f7a:	f000 f8e7 	bl	800914c <__malloc_lock>
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <_free_r+0x94>)
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x30>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	b003      	add	sp, #12
 8008f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f90:	f000 b8e2 	b.w	8009158 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x46>
 8008f98:	6825      	ldr	r5, [r4, #0]
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x22>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x50>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x46>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1855      	adds	r5, r2, r1
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x70>
 8008fbc:	6824      	ldr	r4, [r4, #0]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	1854      	adds	r4, r2, r1
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x26>
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	440c      	add	r4, r1
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x26>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x78>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x26>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7ca      	b.n	8008f8a <_free_r+0x26>
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	200004f0 	.word	0x200004f0

08008ffc <malloc>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <malloc+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f000 b823 	b.w	800904c <_malloc_r>
 8009006:	bf00      	nop
 8009008:	20000074 	.word	0x20000074

0800900c <sbrk_aligned>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4e0e      	ldr	r6, [pc, #56]	; (8009048 <sbrk_aligned+0x3c>)
 8009010:	460c      	mov	r4, r1
 8009012:	6831      	ldr	r1, [r6, #0]
 8009014:	4605      	mov	r5, r0
 8009016:	b911      	cbnz	r1, 800901e <sbrk_aligned+0x12>
 8009018:	f000 fe40 	bl	8009c9c <_sbrk_r>
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 fe3b 	bl	8009c9c <_sbrk_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d00a      	beq.n	8009040 <sbrk_aligned+0x34>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d007      	beq.n	8009044 <sbrk_aligned+0x38>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fe30 	bl	8009c9c <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d101      	bne.n	8009044 <sbrk_aligned+0x38>
 8009040:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009044:	4620      	mov	r0, r4
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	200004f4 	.word	0x200004f4

0800904c <_malloc_r>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	1ccd      	adds	r5, r1, #3
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	2d00      	cmp	r5, #0
 8009060:	4607      	mov	r7, r0
 8009062:	db01      	blt.n	8009068 <_malloc_r+0x1c>
 8009064:	42a9      	cmp	r1, r5
 8009066:	d905      	bls.n	8009074 <_malloc_r+0x28>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	2600      	movs	r6, #0
 800906e:	4630      	mov	r0, r6
 8009070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009074:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009148 <_malloc_r+0xfc>
 8009078:	f000 f868 	bl	800914c <__malloc_lock>
 800907c:	f8d8 3000 	ldr.w	r3, [r8]
 8009080:	461c      	mov	r4, r3
 8009082:	bb5c      	cbnz	r4, 80090dc <_malloc_r+0x90>
 8009084:	4629      	mov	r1, r5
 8009086:	4638      	mov	r0, r7
 8009088:	f7ff ffc0 	bl	800900c <sbrk_aligned>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	4604      	mov	r4, r0
 8009090:	d155      	bne.n	800913e <_malloc_r+0xf2>
 8009092:	f8d8 4000 	ldr.w	r4, [r8]
 8009096:	4626      	mov	r6, r4
 8009098:	2e00      	cmp	r6, #0
 800909a:	d145      	bne.n	8009128 <_malloc_r+0xdc>
 800909c:	2c00      	cmp	r4, #0
 800909e:	d048      	beq.n	8009132 <_malloc_r+0xe6>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	4631      	mov	r1, r6
 80090a4:	4638      	mov	r0, r7
 80090a6:	eb04 0903 	add.w	r9, r4, r3
 80090aa:	f000 fdf7 	bl	8009c9c <_sbrk_r>
 80090ae:	4581      	cmp	r9, r0
 80090b0:	d13f      	bne.n	8009132 <_malloc_r+0xe6>
 80090b2:	6821      	ldr	r1, [r4, #0]
 80090b4:	1a6d      	subs	r5, r5, r1
 80090b6:	4629      	mov	r1, r5
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ffa7 	bl	800900c <sbrk_aligned>
 80090be:	3001      	adds	r0, #1
 80090c0:	d037      	beq.n	8009132 <_malloc_r+0xe6>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	442b      	add	r3, r5
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	f8d8 3000 	ldr.w	r3, [r8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d038      	beq.n	8009142 <_malloc_r+0xf6>
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	42a2      	cmp	r2, r4
 80090d4:	d12b      	bne.n	800912e <_malloc_r+0xe2>
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	e00f      	b.n	80090fc <_malloc_r+0xb0>
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	1b52      	subs	r2, r2, r5
 80090e0:	d41f      	bmi.n	8009122 <_malloc_r+0xd6>
 80090e2:	2a0b      	cmp	r2, #11
 80090e4:	d917      	bls.n	8009116 <_malloc_r+0xca>
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	6025      	str	r5, [r4, #0]
 80090ec:	bf18      	it	ne
 80090ee:	6059      	strne	r1, [r3, #4]
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	bf08      	it	eq
 80090f4:	f8c8 1000 	streq.w	r1, [r8]
 80090f8:	5162      	str	r2, [r4, r5]
 80090fa:	604b      	str	r3, [r1, #4]
 80090fc:	4638      	mov	r0, r7
 80090fe:	f104 060b 	add.w	r6, r4, #11
 8009102:	f000 f829 	bl	8009158 <__malloc_unlock>
 8009106:	f026 0607 	bic.w	r6, r6, #7
 800910a:	1d23      	adds	r3, r4, #4
 800910c:	1af2      	subs	r2, r6, r3
 800910e:	d0ae      	beq.n	800906e <_malloc_r+0x22>
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	50a3      	str	r3, [r4, r2]
 8009114:	e7ab      	b.n	800906e <_malloc_r+0x22>
 8009116:	42a3      	cmp	r3, r4
 8009118:	6862      	ldr	r2, [r4, #4]
 800911a:	d1dd      	bne.n	80090d8 <_malloc_r+0x8c>
 800911c:	f8c8 2000 	str.w	r2, [r8]
 8009120:	e7ec      	b.n	80090fc <_malloc_r+0xb0>
 8009122:	4623      	mov	r3, r4
 8009124:	6864      	ldr	r4, [r4, #4]
 8009126:	e7ac      	b.n	8009082 <_malloc_r+0x36>
 8009128:	4634      	mov	r4, r6
 800912a:	6876      	ldr	r6, [r6, #4]
 800912c:	e7b4      	b.n	8009098 <_malloc_r+0x4c>
 800912e:	4613      	mov	r3, r2
 8009130:	e7cc      	b.n	80090cc <_malloc_r+0x80>
 8009132:	230c      	movs	r3, #12
 8009134:	603b      	str	r3, [r7, #0]
 8009136:	4638      	mov	r0, r7
 8009138:	f000 f80e 	bl	8009158 <__malloc_unlock>
 800913c:	e797      	b.n	800906e <_malloc_r+0x22>
 800913e:	6025      	str	r5, [r4, #0]
 8009140:	e7dc      	b.n	80090fc <_malloc_r+0xb0>
 8009142:	605b      	str	r3, [r3, #4]
 8009144:	deff      	udf	#255	; 0xff
 8009146:	bf00      	nop
 8009148:	200004f0 	.word	0x200004f0

0800914c <__malloc_lock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_lock+0x8>)
 800914e:	f7ff b88d 	b.w	800826c <__retarget_lock_acquire_recursive>
 8009152:	bf00      	nop
 8009154:	200004ec 	.word	0x200004ec

08009158 <__malloc_unlock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_unlock+0x8>)
 800915a:	f7ff b888 	b.w	800826e <__retarget_lock_release_recursive>
 800915e:	bf00      	nop
 8009160:	200004ec 	.word	0x200004ec

08009164 <_Balloc>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	69c6      	ldr	r6, [r0, #28]
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	b976      	cbnz	r6, 800918c <_Balloc+0x28>
 800916e:	2010      	movs	r0, #16
 8009170:	f7ff ff44 	bl	8008ffc <malloc>
 8009174:	4602      	mov	r2, r0
 8009176:	61e0      	str	r0, [r4, #28]
 8009178:	b920      	cbnz	r0, 8009184 <_Balloc+0x20>
 800917a:	4b18      	ldr	r3, [pc, #96]	; (80091dc <_Balloc+0x78>)
 800917c:	4818      	ldr	r0, [pc, #96]	; (80091e0 <_Balloc+0x7c>)
 800917e:	216b      	movs	r1, #107	; 0x6b
 8009180:	f000 fdaa 	bl	8009cd8 <__assert_func>
 8009184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009188:	6006      	str	r6, [r0, #0]
 800918a:	60c6      	str	r6, [r0, #12]
 800918c:	69e6      	ldr	r6, [r4, #28]
 800918e:	68f3      	ldr	r3, [r6, #12]
 8009190:	b183      	cbz	r3, 80091b4 <_Balloc+0x50>
 8009192:	69e3      	ldr	r3, [r4, #28]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800919a:	b9b8      	cbnz	r0, 80091cc <_Balloc+0x68>
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f605 	lsl.w	r6, r1, r5
 80091a2:	1d72      	adds	r2, r6, #5
 80091a4:	0092      	lsls	r2, r2, #2
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fdb4 	bl	8009d14 <_calloc_r>
 80091ac:	b160      	cbz	r0, 80091c8 <_Balloc+0x64>
 80091ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091b2:	e00e      	b.n	80091d2 <_Balloc+0x6e>
 80091b4:	2221      	movs	r2, #33	; 0x21
 80091b6:	2104      	movs	r1, #4
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fdab 	bl	8009d14 <_calloc_r>
 80091be:	69e3      	ldr	r3, [r4, #28]
 80091c0:	60f0      	str	r0, [r6, #12]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e4      	bne.n	8009192 <_Balloc+0x2e>
 80091c8:	2000      	movs	r0, #0
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	6802      	ldr	r2, [r0, #0]
 80091ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091d2:	2300      	movs	r3, #0
 80091d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d8:	e7f7      	b.n	80091ca <_Balloc+0x66>
 80091da:	bf00      	nop
 80091dc:	0800a3fd 	.word	0x0800a3fd
 80091e0:	0800a47d 	.word	0x0800a47d

080091e4 <_Bfree>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	69c6      	ldr	r6, [r0, #28]
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b976      	cbnz	r6, 800920c <_Bfree+0x28>
 80091ee:	2010      	movs	r0, #16
 80091f0:	f7ff ff04 	bl	8008ffc <malloc>
 80091f4:	4602      	mov	r2, r0
 80091f6:	61e8      	str	r0, [r5, #28]
 80091f8:	b920      	cbnz	r0, 8009204 <_Bfree+0x20>
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <_Bfree+0x3c>)
 80091fc:	4809      	ldr	r0, [pc, #36]	; (8009224 <_Bfree+0x40>)
 80091fe:	218f      	movs	r1, #143	; 0x8f
 8009200:	f000 fd6a 	bl	8009cd8 <__assert_func>
 8009204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009208:	6006      	str	r6, [r0, #0]
 800920a:	60c6      	str	r6, [r0, #12]
 800920c:	b13c      	cbz	r4, 800921e <_Bfree+0x3a>
 800920e:	69eb      	ldr	r3, [r5, #28]
 8009210:	6862      	ldr	r2, [r4, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009218:	6021      	str	r1, [r4, #0]
 800921a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	0800a3fd 	.word	0x0800a3fd
 8009224:	0800a47d 	.word	0x0800a47d

08009228 <__multadd>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	690d      	ldr	r5, [r1, #16]
 800922e:	4607      	mov	r7, r0
 8009230:	460c      	mov	r4, r1
 8009232:	461e      	mov	r6, r3
 8009234:	f101 0c14 	add.w	ip, r1, #20
 8009238:	2000      	movs	r0, #0
 800923a:	f8dc 3000 	ldr.w	r3, [ip]
 800923e:	b299      	uxth	r1, r3
 8009240:	fb02 6101 	mla	r1, r2, r1, r6
 8009244:	0c1e      	lsrs	r6, r3, #16
 8009246:	0c0b      	lsrs	r3, r1, #16
 8009248:	fb02 3306 	mla	r3, r2, r6, r3
 800924c:	b289      	uxth	r1, r1
 800924e:	3001      	adds	r0, #1
 8009250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009254:	4285      	cmp	r5, r0
 8009256:	f84c 1b04 	str.w	r1, [ip], #4
 800925a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800925e:	dcec      	bgt.n	800923a <__multadd+0x12>
 8009260:	b30e      	cbz	r6, 80092a6 <__multadd+0x7e>
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	42ab      	cmp	r3, r5
 8009266:	dc19      	bgt.n	800929c <__multadd+0x74>
 8009268:	6861      	ldr	r1, [r4, #4]
 800926a:	4638      	mov	r0, r7
 800926c:	3101      	adds	r1, #1
 800926e:	f7ff ff79 	bl	8009164 <_Balloc>
 8009272:	4680      	mov	r8, r0
 8009274:	b928      	cbnz	r0, 8009282 <__multadd+0x5a>
 8009276:	4602      	mov	r2, r0
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <__multadd+0x84>)
 800927a:	480d      	ldr	r0, [pc, #52]	; (80092b0 <__multadd+0x88>)
 800927c:	21ba      	movs	r1, #186	; 0xba
 800927e:	f000 fd2b 	bl	8009cd8 <__assert_func>
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	3202      	adds	r2, #2
 8009286:	f104 010c 	add.w	r1, r4, #12
 800928a:	0092      	lsls	r2, r2, #2
 800928c:	300c      	adds	r0, #12
 800928e:	f000 fd15 	bl	8009cbc <memcpy>
 8009292:	4621      	mov	r1, r4
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ffa5 	bl	80091e4 <_Bfree>
 800929a:	4644      	mov	r4, r8
 800929c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092a0:	3501      	adds	r5, #1
 80092a2:	615e      	str	r6, [r3, #20]
 80092a4:	6125      	str	r5, [r4, #16]
 80092a6:	4620      	mov	r0, r4
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	0800a46c 	.word	0x0800a46c
 80092b0:	0800a47d 	.word	0x0800a47d

080092b4 <__hi0bits>:
 80092b4:	0c03      	lsrs	r3, r0, #16
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	b9d3      	cbnz	r3, 80092f0 <__hi0bits+0x3c>
 80092ba:	0400      	lsls	r0, r0, #16
 80092bc:	2310      	movs	r3, #16
 80092be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092c2:	bf04      	itt	eq
 80092c4:	0200      	lsleq	r0, r0, #8
 80092c6:	3308      	addeq	r3, #8
 80092c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092cc:	bf04      	itt	eq
 80092ce:	0100      	lsleq	r0, r0, #4
 80092d0:	3304      	addeq	r3, #4
 80092d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092d6:	bf04      	itt	eq
 80092d8:	0080      	lsleq	r0, r0, #2
 80092da:	3302      	addeq	r3, #2
 80092dc:	2800      	cmp	r0, #0
 80092de:	db05      	blt.n	80092ec <__hi0bits+0x38>
 80092e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092e4:	f103 0301 	add.w	r3, r3, #1
 80092e8:	bf08      	it	eq
 80092ea:	2320      	moveq	r3, #32
 80092ec:	4618      	mov	r0, r3
 80092ee:	4770      	bx	lr
 80092f0:	2300      	movs	r3, #0
 80092f2:	e7e4      	b.n	80092be <__hi0bits+0xa>

080092f4 <__lo0bits>:
 80092f4:	6803      	ldr	r3, [r0, #0]
 80092f6:	f013 0207 	ands.w	r2, r3, #7
 80092fa:	d00c      	beq.n	8009316 <__lo0bits+0x22>
 80092fc:	07d9      	lsls	r1, r3, #31
 80092fe:	d422      	bmi.n	8009346 <__lo0bits+0x52>
 8009300:	079a      	lsls	r2, r3, #30
 8009302:	bf49      	itett	mi
 8009304:	085b      	lsrmi	r3, r3, #1
 8009306:	089b      	lsrpl	r3, r3, #2
 8009308:	6003      	strmi	r3, [r0, #0]
 800930a:	2201      	movmi	r2, #1
 800930c:	bf5c      	itt	pl
 800930e:	6003      	strpl	r3, [r0, #0]
 8009310:	2202      	movpl	r2, #2
 8009312:	4610      	mov	r0, r2
 8009314:	4770      	bx	lr
 8009316:	b299      	uxth	r1, r3
 8009318:	b909      	cbnz	r1, 800931e <__lo0bits+0x2a>
 800931a:	0c1b      	lsrs	r3, r3, #16
 800931c:	2210      	movs	r2, #16
 800931e:	b2d9      	uxtb	r1, r3
 8009320:	b909      	cbnz	r1, 8009326 <__lo0bits+0x32>
 8009322:	3208      	adds	r2, #8
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	0719      	lsls	r1, r3, #28
 8009328:	bf04      	itt	eq
 800932a:	091b      	lsreq	r3, r3, #4
 800932c:	3204      	addeq	r2, #4
 800932e:	0799      	lsls	r1, r3, #30
 8009330:	bf04      	itt	eq
 8009332:	089b      	lsreq	r3, r3, #2
 8009334:	3202      	addeq	r2, #2
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d403      	bmi.n	8009342 <__lo0bits+0x4e>
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	f102 0201 	add.w	r2, r2, #1
 8009340:	d003      	beq.n	800934a <__lo0bits+0x56>
 8009342:	6003      	str	r3, [r0, #0]
 8009344:	e7e5      	b.n	8009312 <__lo0bits+0x1e>
 8009346:	2200      	movs	r2, #0
 8009348:	e7e3      	b.n	8009312 <__lo0bits+0x1e>
 800934a:	2220      	movs	r2, #32
 800934c:	e7e1      	b.n	8009312 <__lo0bits+0x1e>
	...

08009350 <__i2b>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	2101      	movs	r1, #1
 8009356:	f7ff ff05 	bl	8009164 <_Balloc>
 800935a:	4602      	mov	r2, r0
 800935c:	b928      	cbnz	r0, 800936a <__i2b+0x1a>
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <__i2b+0x24>)
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <__i2b+0x28>)
 8009362:	f240 1145 	movw	r1, #325	; 0x145
 8009366:	f000 fcb7 	bl	8009cd8 <__assert_func>
 800936a:	2301      	movs	r3, #1
 800936c:	6144      	str	r4, [r0, #20]
 800936e:	6103      	str	r3, [r0, #16]
 8009370:	bd10      	pop	{r4, pc}
 8009372:	bf00      	nop
 8009374:	0800a46c 	.word	0x0800a46c
 8009378:	0800a47d 	.word	0x0800a47d

0800937c <__multiply>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	4691      	mov	r9, r2
 8009382:	690a      	ldr	r2, [r1, #16]
 8009384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	bfb8      	it	lt
 800938c:	460b      	movlt	r3, r1
 800938e:	460c      	mov	r4, r1
 8009390:	bfbc      	itt	lt
 8009392:	464c      	movlt	r4, r9
 8009394:	4699      	movlt	r9, r3
 8009396:	6927      	ldr	r7, [r4, #16]
 8009398:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	6861      	ldr	r1, [r4, #4]
 80093a0:	eb07 060a 	add.w	r6, r7, sl
 80093a4:	42b3      	cmp	r3, r6
 80093a6:	b085      	sub	sp, #20
 80093a8:	bfb8      	it	lt
 80093aa:	3101      	addlt	r1, #1
 80093ac:	f7ff feda 	bl	8009164 <_Balloc>
 80093b0:	b930      	cbnz	r0, 80093c0 <__multiply+0x44>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b44      	ldr	r3, [pc, #272]	; (80094c8 <__multiply+0x14c>)
 80093b6:	4845      	ldr	r0, [pc, #276]	; (80094cc <__multiply+0x150>)
 80093b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093bc:	f000 fc8c 	bl	8009cd8 <__assert_func>
 80093c0:	f100 0514 	add.w	r5, r0, #20
 80093c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093c8:	462b      	mov	r3, r5
 80093ca:	2200      	movs	r2, #0
 80093cc:	4543      	cmp	r3, r8
 80093ce:	d321      	bcc.n	8009414 <__multiply+0x98>
 80093d0:	f104 0314 	add.w	r3, r4, #20
 80093d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093d8:	f109 0314 	add.w	r3, r9, #20
 80093dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093e0:	9202      	str	r2, [sp, #8]
 80093e2:	1b3a      	subs	r2, r7, r4
 80093e4:	3a15      	subs	r2, #21
 80093e6:	f022 0203 	bic.w	r2, r2, #3
 80093ea:	3204      	adds	r2, #4
 80093ec:	f104 0115 	add.w	r1, r4, #21
 80093f0:	428f      	cmp	r7, r1
 80093f2:	bf38      	it	cc
 80093f4:	2204      	movcc	r2, #4
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9a02      	ldr	r2, [sp, #8]
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d80c      	bhi.n	800941a <__multiply+0x9e>
 8009400:	2e00      	cmp	r6, #0
 8009402:	dd03      	ble.n	800940c <__multiply+0x90>
 8009404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009408:	2b00      	cmp	r3, #0
 800940a:	d05b      	beq.n	80094c4 <__multiply+0x148>
 800940c:	6106      	str	r6, [r0, #16]
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	e7d8      	b.n	80093cc <__multiply+0x50>
 800941a:	f8b3 a000 	ldrh.w	sl, [r3]
 800941e:	f1ba 0f00 	cmp.w	sl, #0
 8009422:	d024      	beq.n	800946e <__multiply+0xf2>
 8009424:	f104 0e14 	add.w	lr, r4, #20
 8009428:	46a9      	mov	r9, r5
 800942a:	f04f 0c00 	mov.w	ip, #0
 800942e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009432:	f8d9 1000 	ldr.w	r1, [r9]
 8009436:	fa1f fb82 	uxth.w	fp, r2
 800943a:	b289      	uxth	r1, r1
 800943c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009444:	f8d9 2000 	ldr.w	r2, [r9]
 8009448:	4461      	add	r1, ip
 800944a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800944e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009456:	b289      	uxth	r1, r1
 8009458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800945c:	4577      	cmp	r7, lr
 800945e:	f849 1b04 	str.w	r1, [r9], #4
 8009462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009466:	d8e2      	bhi.n	800942e <__multiply+0xb2>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	f845 c002 	str.w	ip, [r5, r2]
 800946e:	9a03      	ldr	r2, [sp, #12]
 8009470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009474:	3304      	adds	r3, #4
 8009476:	f1b9 0f00 	cmp.w	r9, #0
 800947a:	d021      	beq.n	80094c0 <__multiply+0x144>
 800947c:	6829      	ldr	r1, [r5, #0]
 800947e:	f104 0c14 	add.w	ip, r4, #20
 8009482:	46ae      	mov	lr, r5
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	f8bc b000 	ldrh.w	fp, [ip]
 800948c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009490:	fb09 220b 	mla	r2, r9, fp, r2
 8009494:	4452      	add	r2, sl
 8009496:	b289      	uxth	r1, r1
 8009498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800949c:	f84e 1b04 	str.w	r1, [lr], #4
 80094a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094a8:	f8be 1000 	ldrh.w	r1, [lr]
 80094ac:	fb09 110a 	mla	r1, r9, sl, r1
 80094b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094b4:	4567      	cmp	r7, ip
 80094b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094ba:	d8e5      	bhi.n	8009488 <__multiply+0x10c>
 80094bc:	9a01      	ldr	r2, [sp, #4]
 80094be:	50a9      	str	r1, [r5, r2]
 80094c0:	3504      	adds	r5, #4
 80094c2:	e799      	b.n	80093f8 <__multiply+0x7c>
 80094c4:	3e01      	subs	r6, #1
 80094c6:	e79b      	b.n	8009400 <__multiply+0x84>
 80094c8:	0800a46c 	.word	0x0800a46c
 80094cc:	0800a47d 	.word	0x0800a47d

080094d0 <__pow5mult>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4615      	mov	r5, r2
 80094d6:	f012 0203 	ands.w	r2, r2, #3
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	d007      	beq.n	80094f0 <__pow5mult+0x20>
 80094e0:	4c25      	ldr	r4, [pc, #148]	; (8009578 <__pow5mult+0xa8>)
 80094e2:	3a01      	subs	r2, #1
 80094e4:	2300      	movs	r3, #0
 80094e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ea:	f7ff fe9d 	bl	8009228 <__multadd>
 80094ee:	4607      	mov	r7, r0
 80094f0:	10ad      	asrs	r5, r5, #2
 80094f2:	d03d      	beq.n	8009570 <__pow5mult+0xa0>
 80094f4:	69f4      	ldr	r4, [r6, #28]
 80094f6:	b97c      	cbnz	r4, 8009518 <__pow5mult+0x48>
 80094f8:	2010      	movs	r0, #16
 80094fa:	f7ff fd7f 	bl	8008ffc <malloc>
 80094fe:	4602      	mov	r2, r0
 8009500:	61f0      	str	r0, [r6, #28]
 8009502:	b928      	cbnz	r0, 8009510 <__pow5mult+0x40>
 8009504:	4b1d      	ldr	r3, [pc, #116]	; (800957c <__pow5mult+0xac>)
 8009506:	481e      	ldr	r0, [pc, #120]	; (8009580 <__pow5mult+0xb0>)
 8009508:	f240 11b3 	movw	r1, #435	; 0x1b3
 800950c:	f000 fbe4 	bl	8009cd8 <__assert_func>
 8009510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009514:	6004      	str	r4, [r0, #0]
 8009516:	60c4      	str	r4, [r0, #12]
 8009518:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800951c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009520:	b94c      	cbnz	r4, 8009536 <__pow5mult+0x66>
 8009522:	f240 2171 	movw	r1, #625	; 0x271
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ff12 	bl	8009350 <__i2b>
 800952c:	2300      	movs	r3, #0
 800952e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009532:	4604      	mov	r4, r0
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	07eb      	lsls	r3, r5, #31
 800953c:	d50a      	bpl.n	8009554 <__pow5mult+0x84>
 800953e:	4639      	mov	r1, r7
 8009540:	4622      	mov	r2, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ff1a 	bl	800937c <__multiply>
 8009548:	4639      	mov	r1, r7
 800954a:	4680      	mov	r8, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fe49 	bl	80091e4 <_Bfree>
 8009552:	4647      	mov	r7, r8
 8009554:	106d      	asrs	r5, r5, #1
 8009556:	d00b      	beq.n	8009570 <__pow5mult+0xa0>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	b938      	cbnz	r0, 800956c <__pow5mult+0x9c>
 800955c:	4622      	mov	r2, r4
 800955e:	4621      	mov	r1, r4
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ff0b 	bl	800937c <__multiply>
 8009566:	6020      	str	r0, [r4, #0]
 8009568:	f8c0 9000 	str.w	r9, [r0]
 800956c:	4604      	mov	r4, r0
 800956e:	e7e4      	b.n	800953a <__pow5mult+0x6a>
 8009570:	4638      	mov	r0, r7
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	bf00      	nop
 8009578:	0800a5c8 	.word	0x0800a5c8
 800957c:	0800a3fd 	.word	0x0800a3fd
 8009580:	0800a47d 	.word	0x0800a47d

08009584 <__lshift>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	6849      	ldr	r1, [r1, #4]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	4607      	mov	r7, r0
 8009596:	4691      	mov	r9, r2
 8009598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800959c:	f108 0601 	add.w	r6, r8, #1
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	db0b      	blt.n	80095bc <__lshift+0x38>
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff fddd 	bl	8009164 <_Balloc>
 80095aa:	4605      	mov	r5, r0
 80095ac:	b948      	cbnz	r0, 80095c2 <__lshift+0x3e>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <__lshift+0xd0>)
 80095b2:	4829      	ldr	r0, [pc, #164]	; (8009658 <__lshift+0xd4>)
 80095b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095b8:	f000 fb8e 	bl	8009cd8 <__assert_func>
 80095bc:	3101      	adds	r1, #1
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	e7ee      	b.n	80095a0 <__lshift+0x1c>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f100 0114 	add.w	r1, r0, #20
 80095c8:	f100 0210 	add.w	r2, r0, #16
 80095cc:	4618      	mov	r0, r3
 80095ce:	4553      	cmp	r3, sl
 80095d0:	db33      	blt.n	800963a <__lshift+0xb6>
 80095d2:	6920      	ldr	r0, [r4, #16]
 80095d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d8:	f104 0314 	add.w	r3, r4, #20
 80095dc:	f019 091f 	ands.w	r9, r9, #31
 80095e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095e8:	d02b      	beq.n	8009642 <__lshift+0xbe>
 80095ea:	f1c9 0e20 	rsb	lr, r9, #32
 80095ee:	468a      	mov	sl, r1
 80095f0:	2200      	movs	r2, #0
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	fa00 f009 	lsl.w	r0, r0, r9
 80095f8:	4310      	orrs	r0, r2
 80095fa:	f84a 0b04 	str.w	r0, [sl], #4
 80095fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009602:	459c      	cmp	ip, r3
 8009604:	fa22 f20e 	lsr.w	r2, r2, lr
 8009608:	d8f3      	bhi.n	80095f2 <__lshift+0x6e>
 800960a:	ebac 0304 	sub.w	r3, ip, r4
 800960e:	3b15      	subs	r3, #21
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	f104 0015 	add.w	r0, r4, #21
 800961a:	4584      	cmp	ip, r0
 800961c:	bf38      	it	cc
 800961e:	2304      	movcc	r3, #4
 8009620:	50ca      	str	r2, [r1, r3]
 8009622:	b10a      	cbz	r2, 8009628 <__lshift+0xa4>
 8009624:	f108 0602 	add.w	r6, r8, #2
 8009628:	3e01      	subs	r6, #1
 800962a:	4638      	mov	r0, r7
 800962c:	612e      	str	r6, [r5, #16]
 800962e:	4621      	mov	r1, r4
 8009630:	f7ff fdd8 	bl	80091e4 <_Bfree>
 8009634:	4628      	mov	r0, r5
 8009636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963a:	f842 0f04 	str.w	r0, [r2, #4]!
 800963e:	3301      	adds	r3, #1
 8009640:	e7c5      	b.n	80095ce <__lshift+0x4a>
 8009642:	3904      	subs	r1, #4
 8009644:	f853 2b04 	ldr.w	r2, [r3], #4
 8009648:	f841 2f04 	str.w	r2, [r1, #4]!
 800964c:	459c      	cmp	ip, r3
 800964e:	d8f9      	bhi.n	8009644 <__lshift+0xc0>
 8009650:	e7ea      	b.n	8009628 <__lshift+0xa4>
 8009652:	bf00      	nop
 8009654:	0800a46c 	.word	0x0800a46c
 8009658:	0800a47d 	.word	0x0800a47d

0800965c <__mcmp>:
 800965c:	b530      	push	{r4, r5, lr}
 800965e:	6902      	ldr	r2, [r0, #16]
 8009660:	690c      	ldr	r4, [r1, #16]
 8009662:	1b12      	subs	r2, r2, r4
 8009664:	d10e      	bne.n	8009684 <__mcmp+0x28>
 8009666:	f100 0314 	add.w	r3, r0, #20
 800966a:	3114      	adds	r1, #20
 800966c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800967c:	42a5      	cmp	r5, r4
 800967e:	d003      	beq.n	8009688 <__mcmp+0x2c>
 8009680:	d305      	bcc.n	800968e <__mcmp+0x32>
 8009682:	2201      	movs	r2, #1
 8009684:	4610      	mov	r0, r2
 8009686:	bd30      	pop	{r4, r5, pc}
 8009688:	4283      	cmp	r3, r0
 800968a:	d3f3      	bcc.n	8009674 <__mcmp+0x18>
 800968c:	e7fa      	b.n	8009684 <__mcmp+0x28>
 800968e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009692:	e7f7      	b.n	8009684 <__mcmp+0x28>

08009694 <__mdiff>:
 8009694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	4606      	mov	r6, r0
 800969c:	4611      	mov	r1, r2
 800969e:	4620      	mov	r0, r4
 80096a0:	4690      	mov	r8, r2
 80096a2:	f7ff ffdb 	bl	800965c <__mcmp>
 80096a6:	1e05      	subs	r5, r0, #0
 80096a8:	d110      	bne.n	80096cc <__mdiff+0x38>
 80096aa:	4629      	mov	r1, r5
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff fd59 	bl	8009164 <_Balloc>
 80096b2:	b930      	cbnz	r0, 80096c2 <__mdiff+0x2e>
 80096b4:	4b3a      	ldr	r3, [pc, #232]	; (80097a0 <__mdiff+0x10c>)
 80096b6:	4602      	mov	r2, r0
 80096b8:	f240 2137 	movw	r1, #567	; 0x237
 80096bc:	4839      	ldr	r0, [pc, #228]	; (80097a4 <__mdiff+0x110>)
 80096be:	f000 fb0b 	bl	8009cd8 <__assert_func>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	bfa4      	itt	ge
 80096ce:	4643      	movge	r3, r8
 80096d0:	46a0      	movge	r8, r4
 80096d2:	4630      	mov	r0, r6
 80096d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096d8:	bfa6      	itte	ge
 80096da:	461c      	movge	r4, r3
 80096dc:	2500      	movge	r5, #0
 80096de:	2501      	movlt	r5, #1
 80096e0:	f7ff fd40 	bl	8009164 <_Balloc>
 80096e4:	b920      	cbnz	r0, 80096f0 <__mdiff+0x5c>
 80096e6:	4b2e      	ldr	r3, [pc, #184]	; (80097a0 <__mdiff+0x10c>)
 80096e8:	4602      	mov	r2, r0
 80096ea:	f240 2145 	movw	r1, #581	; 0x245
 80096ee:	e7e5      	b.n	80096bc <__mdiff+0x28>
 80096f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096f4:	6926      	ldr	r6, [r4, #16]
 80096f6:	60c5      	str	r5, [r0, #12]
 80096f8:	f104 0914 	add.w	r9, r4, #20
 80096fc:	f108 0514 	add.w	r5, r8, #20
 8009700:	f100 0e14 	add.w	lr, r0, #20
 8009704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800970c:	f108 0210 	add.w	r2, r8, #16
 8009710:	46f2      	mov	sl, lr
 8009712:	2100      	movs	r1, #0
 8009714:	f859 3b04 	ldr.w	r3, [r9], #4
 8009718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800971c:	fa11 f88b 	uxtah	r8, r1, fp
 8009720:	b299      	uxth	r1, r3
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	eba8 0801 	sub.w	r8, r8, r1
 8009728:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800972c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009730:	fa1f f888 	uxth.w	r8, r8
 8009734:	1419      	asrs	r1, r3, #16
 8009736:	454e      	cmp	r6, r9
 8009738:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800973c:	f84a 3b04 	str.w	r3, [sl], #4
 8009740:	d8e8      	bhi.n	8009714 <__mdiff+0x80>
 8009742:	1b33      	subs	r3, r6, r4
 8009744:	3b15      	subs	r3, #21
 8009746:	f023 0303 	bic.w	r3, r3, #3
 800974a:	3304      	adds	r3, #4
 800974c:	3415      	adds	r4, #21
 800974e:	42a6      	cmp	r6, r4
 8009750:	bf38      	it	cc
 8009752:	2304      	movcc	r3, #4
 8009754:	441d      	add	r5, r3
 8009756:	4473      	add	r3, lr
 8009758:	469e      	mov	lr, r3
 800975a:	462e      	mov	r6, r5
 800975c:	4566      	cmp	r6, ip
 800975e:	d30e      	bcc.n	800977e <__mdiff+0xea>
 8009760:	f10c 0203 	add.w	r2, ip, #3
 8009764:	1b52      	subs	r2, r2, r5
 8009766:	f022 0203 	bic.w	r2, r2, #3
 800976a:	3d03      	subs	r5, #3
 800976c:	45ac      	cmp	ip, r5
 800976e:	bf38      	it	cc
 8009770:	2200      	movcc	r2, #0
 8009772:	4413      	add	r3, r2
 8009774:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009778:	b17a      	cbz	r2, 800979a <__mdiff+0x106>
 800977a:	6107      	str	r7, [r0, #16]
 800977c:	e7a4      	b.n	80096c8 <__mdiff+0x34>
 800977e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009782:	fa11 f288 	uxtah	r2, r1, r8
 8009786:	1414      	asrs	r4, r2, #16
 8009788:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800978c:	b292      	uxth	r2, r2
 800978e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009792:	f84e 2b04 	str.w	r2, [lr], #4
 8009796:	1421      	asrs	r1, r4, #16
 8009798:	e7e0      	b.n	800975c <__mdiff+0xc8>
 800979a:	3f01      	subs	r7, #1
 800979c:	e7ea      	b.n	8009774 <__mdiff+0xe0>
 800979e:	bf00      	nop
 80097a0:	0800a46c 	.word	0x0800a46c
 80097a4:	0800a47d 	.word	0x0800a47d

080097a8 <__d2b>:
 80097a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	460f      	mov	r7, r1
 80097ae:	2101      	movs	r1, #1
 80097b0:	ec59 8b10 	vmov	r8, r9, d0
 80097b4:	4616      	mov	r6, r2
 80097b6:	f7ff fcd5 	bl	8009164 <_Balloc>
 80097ba:	4604      	mov	r4, r0
 80097bc:	b930      	cbnz	r0, 80097cc <__d2b+0x24>
 80097be:	4602      	mov	r2, r0
 80097c0:	4b24      	ldr	r3, [pc, #144]	; (8009854 <__d2b+0xac>)
 80097c2:	4825      	ldr	r0, [pc, #148]	; (8009858 <__d2b+0xb0>)
 80097c4:	f240 310f 	movw	r1, #783	; 0x30f
 80097c8:	f000 fa86 	bl	8009cd8 <__assert_func>
 80097cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097d4:	bb2d      	cbnz	r5, 8009822 <__d2b+0x7a>
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	f1b8 0300 	subs.w	r3, r8, #0
 80097dc:	d026      	beq.n	800982c <__d2b+0x84>
 80097de:	4668      	mov	r0, sp
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	f7ff fd87 	bl	80092f4 <__lo0bits>
 80097e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097ea:	b1e8      	cbz	r0, 8009828 <__d2b+0x80>
 80097ec:	f1c0 0320 	rsb	r3, r0, #32
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	430b      	orrs	r3, r1
 80097f6:	40c2      	lsrs	r2, r0
 80097f8:	6163      	str	r3, [r4, #20]
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	61a3      	str	r3, [r4, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bf14      	ite	ne
 8009804:	2202      	movne	r2, #2
 8009806:	2201      	moveq	r2, #1
 8009808:	6122      	str	r2, [r4, #16]
 800980a:	b1bd      	cbz	r5, 800983c <__d2b+0x94>
 800980c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009810:	4405      	add	r5, r0
 8009812:	603d      	str	r5, [r7, #0]
 8009814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009818:	6030      	str	r0, [r6, #0]
 800981a:	4620      	mov	r0, r4
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009826:	e7d6      	b.n	80097d6 <__d2b+0x2e>
 8009828:	6161      	str	r1, [r4, #20]
 800982a:	e7e7      	b.n	80097fc <__d2b+0x54>
 800982c:	a801      	add	r0, sp, #4
 800982e:	f7ff fd61 	bl	80092f4 <__lo0bits>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	6163      	str	r3, [r4, #20]
 8009836:	3020      	adds	r0, #32
 8009838:	2201      	movs	r2, #1
 800983a:	e7e5      	b.n	8009808 <__d2b+0x60>
 800983c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009844:	6038      	str	r0, [r7, #0]
 8009846:	6918      	ldr	r0, [r3, #16]
 8009848:	f7ff fd34 	bl	80092b4 <__hi0bits>
 800984c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009850:	e7e2      	b.n	8009818 <__d2b+0x70>
 8009852:	bf00      	nop
 8009854:	0800a46c 	.word	0x0800a46c
 8009858:	0800a47d 	.word	0x0800a47d

0800985c <__ssputs_r>:
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	688e      	ldr	r6, [r1, #8]
 8009862:	461f      	mov	r7, r3
 8009864:	42be      	cmp	r6, r7
 8009866:	680b      	ldr	r3, [r1, #0]
 8009868:	4682      	mov	sl, r0
 800986a:	460c      	mov	r4, r1
 800986c:	4690      	mov	r8, r2
 800986e:	d82c      	bhi.n	80098ca <__ssputs_r+0x6e>
 8009870:	898a      	ldrh	r2, [r1, #12]
 8009872:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009876:	d026      	beq.n	80098c6 <__ssputs_r+0x6a>
 8009878:	6965      	ldr	r5, [r4, #20]
 800987a:	6909      	ldr	r1, [r1, #16]
 800987c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009880:	eba3 0901 	sub.w	r9, r3, r1
 8009884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009888:	1c7b      	adds	r3, r7, #1
 800988a:	444b      	add	r3, r9
 800988c:	106d      	asrs	r5, r5, #1
 800988e:	429d      	cmp	r5, r3
 8009890:	bf38      	it	cc
 8009892:	461d      	movcc	r5, r3
 8009894:	0553      	lsls	r3, r2, #21
 8009896:	d527      	bpl.n	80098e8 <__ssputs_r+0x8c>
 8009898:	4629      	mov	r1, r5
 800989a:	f7ff fbd7 	bl	800904c <_malloc_r>
 800989e:	4606      	mov	r6, r0
 80098a0:	b360      	cbz	r0, 80098fc <__ssputs_r+0xa0>
 80098a2:	6921      	ldr	r1, [r4, #16]
 80098a4:	464a      	mov	r2, r9
 80098a6:	f000 fa09 	bl	8009cbc <memcpy>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	6126      	str	r6, [r4, #16]
 80098b8:	6165      	str	r5, [r4, #20]
 80098ba:	444e      	add	r6, r9
 80098bc:	eba5 0509 	sub.w	r5, r5, r9
 80098c0:	6026      	str	r6, [r4, #0]
 80098c2:	60a5      	str	r5, [r4, #8]
 80098c4:	463e      	mov	r6, r7
 80098c6:	42be      	cmp	r6, r7
 80098c8:	d900      	bls.n	80098cc <__ssputs_r+0x70>
 80098ca:	463e      	mov	r6, r7
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	4632      	mov	r2, r6
 80098d0:	4641      	mov	r1, r8
 80098d2:	f000 f9c9 	bl	8009c68 <memmove>
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	1b9b      	subs	r3, r3, r6
 80098da:	60a3      	str	r3, [r4, #8]
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	4433      	add	r3, r6
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	2000      	movs	r0, #0
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	462a      	mov	r2, r5
 80098ea:	f000 fa3b 	bl	8009d64 <_realloc_r>
 80098ee:	4606      	mov	r6, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1e0      	bne.n	80098b6 <__ssputs_r+0x5a>
 80098f4:	6921      	ldr	r1, [r4, #16]
 80098f6:	4650      	mov	r0, sl
 80098f8:	f7ff fb34 	bl	8008f64 <_free_r>
 80098fc:	230c      	movs	r3, #12
 80098fe:	f8ca 3000 	str.w	r3, [sl]
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800990e:	e7e9      	b.n	80098e4 <__ssputs_r+0x88>

08009910 <_svfiprintf_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	4698      	mov	r8, r3
 8009916:	898b      	ldrh	r3, [r1, #12]
 8009918:	061b      	lsls	r3, r3, #24
 800991a:	b09d      	sub	sp, #116	; 0x74
 800991c:	4607      	mov	r7, r0
 800991e:	460d      	mov	r5, r1
 8009920:	4614      	mov	r4, r2
 8009922:	d50e      	bpl.n	8009942 <_svfiprintf_r+0x32>
 8009924:	690b      	ldr	r3, [r1, #16]
 8009926:	b963      	cbnz	r3, 8009942 <_svfiprintf_r+0x32>
 8009928:	2140      	movs	r1, #64	; 0x40
 800992a:	f7ff fb8f 	bl	800904c <_malloc_r>
 800992e:	6028      	str	r0, [r5, #0]
 8009930:	6128      	str	r0, [r5, #16]
 8009932:	b920      	cbnz	r0, 800993e <_svfiprintf_r+0x2e>
 8009934:	230c      	movs	r3, #12
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	e0d0      	b.n	8009ae0 <_svfiprintf_r+0x1d0>
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	616b      	str	r3, [r5, #20]
 8009942:	2300      	movs	r3, #0
 8009944:	9309      	str	r3, [sp, #36]	; 0x24
 8009946:	2320      	movs	r3, #32
 8009948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800994c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009950:	2330      	movs	r3, #48	; 0x30
 8009952:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009af8 <_svfiprintf_r+0x1e8>
 8009956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800995a:	f04f 0901 	mov.w	r9, #1
 800995e:	4623      	mov	r3, r4
 8009960:	469a      	mov	sl, r3
 8009962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009966:	b10a      	cbz	r2, 800996c <_svfiprintf_r+0x5c>
 8009968:	2a25      	cmp	r2, #37	; 0x25
 800996a:	d1f9      	bne.n	8009960 <_svfiprintf_r+0x50>
 800996c:	ebba 0b04 	subs.w	fp, sl, r4
 8009970:	d00b      	beq.n	800998a <_svfiprintf_r+0x7a>
 8009972:	465b      	mov	r3, fp
 8009974:	4622      	mov	r2, r4
 8009976:	4629      	mov	r1, r5
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ff6f 	bl	800985c <__ssputs_r>
 800997e:	3001      	adds	r0, #1
 8009980:	f000 80a9 	beq.w	8009ad6 <_svfiprintf_r+0x1c6>
 8009984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009986:	445a      	add	r2, fp
 8009988:	9209      	str	r2, [sp, #36]	; 0x24
 800998a:	f89a 3000 	ldrb.w	r3, [sl]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 80a1 	beq.w	8009ad6 <_svfiprintf_r+0x1c6>
 8009994:	2300      	movs	r3, #0
 8009996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800999e:	f10a 0a01 	add.w	sl, sl, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	9307      	str	r3, [sp, #28]
 80099a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099aa:	931a      	str	r3, [sp, #104]	; 0x68
 80099ac:	4654      	mov	r4, sl
 80099ae:	2205      	movs	r2, #5
 80099b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b4:	4850      	ldr	r0, [pc, #320]	; (8009af8 <_svfiprintf_r+0x1e8>)
 80099b6:	f7f6 fc13 	bl	80001e0 <memchr>
 80099ba:	9a04      	ldr	r2, [sp, #16]
 80099bc:	b9d8      	cbnz	r0, 80099f6 <_svfiprintf_r+0xe6>
 80099be:	06d0      	lsls	r0, r2, #27
 80099c0:	bf44      	itt	mi
 80099c2:	2320      	movmi	r3, #32
 80099c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c8:	0711      	lsls	r1, r2, #28
 80099ca:	bf44      	itt	mi
 80099cc:	232b      	movmi	r3, #43	; 0x2b
 80099ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d2:	f89a 3000 	ldrb.w	r3, [sl]
 80099d6:	2b2a      	cmp	r3, #42	; 0x2a
 80099d8:	d015      	beq.n	8009a06 <_svfiprintf_r+0xf6>
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	4654      	mov	r4, sl
 80099de:	2000      	movs	r0, #0
 80099e0:	f04f 0c0a 	mov.w	ip, #10
 80099e4:	4621      	mov	r1, r4
 80099e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ea:	3b30      	subs	r3, #48	; 0x30
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	d94d      	bls.n	8009a8c <_svfiprintf_r+0x17c>
 80099f0:	b1b0      	cbz	r0, 8009a20 <_svfiprintf_r+0x110>
 80099f2:	9207      	str	r2, [sp, #28]
 80099f4:	e014      	b.n	8009a20 <_svfiprintf_r+0x110>
 80099f6:	eba0 0308 	sub.w	r3, r0, r8
 80099fa:	fa09 f303 	lsl.w	r3, r9, r3
 80099fe:	4313      	orrs	r3, r2
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	46a2      	mov	sl, r4
 8009a04:	e7d2      	b.n	80099ac <_svfiprintf_r+0x9c>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	1d19      	adds	r1, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9103      	str	r1, [sp, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfbb      	ittet	lt
 8009a12:	425b      	neglt	r3, r3
 8009a14:	f042 0202 	orrlt.w	r2, r2, #2
 8009a18:	9307      	strge	r3, [sp, #28]
 8009a1a:	9307      	strlt	r3, [sp, #28]
 8009a1c:	bfb8      	it	lt
 8009a1e:	9204      	strlt	r2, [sp, #16]
 8009a20:	7823      	ldrb	r3, [r4, #0]
 8009a22:	2b2e      	cmp	r3, #46	; 0x2e
 8009a24:	d10c      	bne.n	8009a40 <_svfiprintf_r+0x130>
 8009a26:	7863      	ldrb	r3, [r4, #1]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d134      	bne.n	8009a96 <_svfiprintf_r+0x186>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bfb8      	it	lt
 8009a38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a3c:	3402      	adds	r4, #2
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b08 <_svfiprintf_r+0x1f8>
 8009a44:	7821      	ldrb	r1, [r4, #0]
 8009a46:	2203      	movs	r2, #3
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f7f6 fbc9 	bl	80001e0 <memchr>
 8009a4e:	b138      	cbz	r0, 8009a60 <_svfiprintf_r+0x150>
 8009a50:	9b04      	ldr	r3, [sp, #16]
 8009a52:	eba0 000a 	sub.w	r0, r0, sl
 8009a56:	2240      	movs	r2, #64	; 0x40
 8009a58:	4082      	lsls	r2, r0
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	3401      	adds	r4, #1
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a64:	4825      	ldr	r0, [pc, #148]	; (8009afc <_svfiprintf_r+0x1ec>)
 8009a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a6a:	2206      	movs	r2, #6
 8009a6c:	f7f6 fbb8 	bl	80001e0 <memchr>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d038      	beq.n	8009ae6 <_svfiprintf_r+0x1d6>
 8009a74:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <_svfiprintf_r+0x1f0>)
 8009a76:	bb1b      	cbnz	r3, 8009ac0 <_svfiprintf_r+0x1b0>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	3307      	adds	r3, #7
 8009a7c:	f023 0307 	bic.w	r3, r3, #7
 8009a80:	3308      	adds	r3, #8
 8009a82:	9303      	str	r3, [sp, #12]
 8009a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a86:	4433      	add	r3, r6
 8009a88:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8a:	e768      	b.n	800995e <_svfiprintf_r+0x4e>
 8009a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a90:	460c      	mov	r4, r1
 8009a92:	2001      	movs	r0, #1
 8009a94:	e7a6      	b.n	80099e4 <_svfiprintf_r+0xd4>
 8009a96:	2300      	movs	r3, #0
 8009a98:	3401      	adds	r4, #1
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aa8:	3a30      	subs	r2, #48	; 0x30
 8009aaa:	2a09      	cmp	r2, #9
 8009aac:	d903      	bls.n	8009ab6 <_svfiprintf_r+0x1a6>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0c6      	beq.n	8009a40 <_svfiprintf_r+0x130>
 8009ab2:	9105      	str	r1, [sp, #20]
 8009ab4:	e7c4      	b.n	8009a40 <_svfiprintf_r+0x130>
 8009ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aba:	4604      	mov	r4, r0
 8009abc:	2301      	movs	r3, #1
 8009abe:	e7f0      	b.n	8009aa2 <_svfiprintf_r+0x192>
 8009ac0:	ab03      	add	r3, sp, #12
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <_svfiprintf_r+0x1f4>)
 8009ac8:	a904      	add	r1, sp, #16
 8009aca:	4638      	mov	r0, r7
 8009acc:	f7fd fe64 	bl	8007798 <_printf_float>
 8009ad0:	1c42      	adds	r2, r0, #1
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	d1d6      	bne.n	8009a84 <_svfiprintf_r+0x174>
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	065b      	lsls	r3, r3, #25
 8009ada:	f53f af2d 	bmi.w	8009938 <_svfiprintf_r+0x28>
 8009ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ae0:	b01d      	add	sp, #116	; 0x74
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <_svfiprintf_r+0x1f4>)
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7fe f8f5 	bl	8007ce0 <_printf_i>
 8009af6:	e7eb      	b.n	8009ad0 <_svfiprintf_r+0x1c0>
 8009af8:	0800a5d4 	.word	0x0800a5d4
 8009afc:	0800a5de 	.word	0x0800a5de
 8009b00:	08007799 	.word	0x08007799
 8009b04:	0800985d 	.word	0x0800985d
 8009b08:	0800a5da 	.word	0x0800a5da

08009b0c <__sflush_r>:
 8009b0c:	898a      	ldrh	r2, [r1, #12]
 8009b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	4605      	mov	r5, r0
 8009b14:	0710      	lsls	r0, r2, #28
 8009b16:	460c      	mov	r4, r1
 8009b18:	d458      	bmi.n	8009bcc <__sflush_r+0xc0>
 8009b1a:	684b      	ldr	r3, [r1, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dc05      	bgt.n	8009b2c <__sflush_r+0x20>
 8009b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dc02      	bgt.n	8009b2c <__sflush_r+0x20>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d0f9      	beq.n	8009b26 <__sflush_r+0x1a>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b38:	682f      	ldr	r7, [r5, #0]
 8009b3a:	6a21      	ldr	r1, [r4, #32]
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	d032      	beq.n	8009ba6 <__sflush_r+0x9a>
 8009b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	075a      	lsls	r2, r3, #29
 8009b46:	d505      	bpl.n	8009b54 <__sflush_r+0x48>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	1ac0      	subs	r0, r0, r3
 8009b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b4e:	b10b      	cbz	r3, 8009b54 <__sflush_r+0x48>
 8009b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b52:	1ac0      	subs	r0, r0, r3
 8009b54:	2300      	movs	r3, #0
 8009b56:	4602      	mov	r2, r0
 8009b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b5a:	6a21      	ldr	r1, [r4, #32]
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b0      	blx	r6
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	d106      	bne.n	8009b74 <__sflush_r+0x68>
 8009b66:	6829      	ldr	r1, [r5, #0]
 8009b68:	291d      	cmp	r1, #29
 8009b6a:	d82b      	bhi.n	8009bc4 <__sflush_r+0xb8>
 8009b6c:	4a29      	ldr	r2, [pc, #164]	; (8009c14 <__sflush_r+0x108>)
 8009b6e:	410a      	asrs	r2, r1
 8009b70:	07d6      	lsls	r6, r2, #31
 8009b72:	d427      	bmi.n	8009bc4 <__sflush_r+0xb8>
 8009b74:	2200      	movs	r2, #0
 8009b76:	6062      	str	r2, [r4, #4]
 8009b78:	04d9      	lsls	r1, r3, #19
 8009b7a:	6922      	ldr	r2, [r4, #16]
 8009b7c:	6022      	str	r2, [r4, #0]
 8009b7e:	d504      	bpl.n	8009b8a <__sflush_r+0x7e>
 8009b80:	1c42      	adds	r2, r0, #1
 8009b82:	d101      	bne.n	8009b88 <__sflush_r+0x7c>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b903      	cbnz	r3, 8009b8a <__sflush_r+0x7e>
 8009b88:	6560      	str	r0, [r4, #84]	; 0x54
 8009b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b8c:	602f      	str	r7, [r5, #0]
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	d0c9      	beq.n	8009b26 <__sflush_r+0x1a>
 8009b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b96:	4299      	cmp	r1, r3
 8009b98:	d002      	beq.n	8009ba0 <__sflush_r+0x94>
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7ff f9e2 	bl	8008f64 <_free_r>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ba4:	e7c0      	b.n	8009b28 <__sflush_r+0x1c>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b0      	blx	r6
 8009bac:	1c41      	adds	r1, r0, #1
 8009bae:	d1c8      	bne.n	8009b42 <__sflush_r+0x36>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c5      	beq.n	8009b42 <__sflush_r+0x36>
 8009bb6:	2b1d      	cmp	r3, #29
 8009bb8:	d001      	beq.n	8009bbe <__sflush_r+0xb2>
 8009bba:	2b16      	cmp	r3, #22
 8009bbc:	d101      	bne.n	8009bc2 <__sflush_r+0xb6>
 8009bbe:	602f      	str	r7, [r5, #0]
 8009bc0:	e7b1      	b.n	8009b26 <__sflush_r+0x1a>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	e7ad      	b.n	8009b28 <__sflush_r+0x1c>
 8009bcc:	690f      	ldr	r7, [r1, #16]
 8009bce:	2f00      	cmp	r7, #0
 8009bd0:	d0a9      	beq.n	8009b26 <__sflush_r+0x1a>
 8009bd2:	0793      	lsls	r3, r2, #30
 8009bd4:	680e      	ldr	r6, [r1, #0]
 8009bd6:	bf08      	it	eq
 8009bd8:	694b      	ldreq	r3, [r1, #20]
 8009bda:	600f      	str	r7, [r1, #0]
 8009bdc:	bf18      	it	ne
 8009bde:	2300      	movne	r3, #0
 8009be0:	eba6 0807 	sub.w	r8, r6, r7
 8009be4:	608b      	str	r3, [r1, #8]
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	dd9c      	ble.n	8009b26 <__sflush_r+0x1a>
 8009bec:	6a21      	ldr	r1, [r4, #32]
 8009bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bf0:	4643      	mov	r3, r8
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b0      	blx	r6
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	dc06      	bgt.n	8009c0a <__sflush_r+0xfe>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c08:	e78e      	b.n	8009b28 <__sflush_r+0x1c>
 8009c0a:	4407      	add	r7, r0
 8009c0c:	eba8 0800 	sub.w	r8, r8, r0
 8009c10:	e7e9      	b.n	8009be6 <__sflush_r+0xda>
 8009c12:	bf00      	nop
 8009c14:	dfbffffe 	.word	0xdfbffffe

08009c18 <_fflush_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	690b      	ldr	r3, [r1, #16]
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b913      	cbnz	r3, 8009c28 <_fflush_r+0x10>
 8009c22:	2500      	movs	r5, #0
 8009c24:	4628      	mov	r0, r5
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	b118      	cbz	r0, 8009c32 <_fflush_r+0x1a>
 8009c2a:	6a03      	ldr	r3, [r0, #32]
 8009c2c:	b90b      	cbnz	r3, 8009c32 <_fflush_r+0x1a>
 8009c2e:	f7fe f9f3 	bl	8008018 <__sinit>
 8009c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0f3      	beq.n	8009c22 <_fflush_r+0xa>
 8009c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c3c:	07d0      	lsls	r0, r2, #31
 8009c3e:	d404      	bmi.n	8009c4a <_fflush_r+0x32>
 8009c40:	0599      	lsls	r1, r3, #22
 8009c42:	d402      	bmi.n	8009c4a <_fflush_r+0x32>
 8009c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c46:	f7fe fb11 	bl	800826c <__retarget_lock_acquire_recursive>
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	f7ff ff5d 	bl	8009b0c <__sflush_r>
 8009c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c54:	07da      	lsls	r2, r3, #31
 8009c56:	4605      	mov	r5, r0
 8009c58:	d4e4      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	059b      	lsls	r3, r3, #22
 8009c5e:	d4e1      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c62:	f7fe fb04 	bl	800826e <__retarget_lock_release_recursive>
 8009c66:	e7dd      	b.n	8009c24 <_fflush_r+0xc>

08009c68 <memmove>:
 8009c68:	4288      	cmp	r0, r1
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	eb01 0402 	add.w	r4, r1, r2
 8009c70:	d902      	bls.n	8009c78 <memmove+0x10>
 8009c72:	4284      	cmp	r4, r0
 8009c74:	4623      	mov	r3, r4
 8009c76:	d807      	bhi.n	8009c88 <memmove+0x20>
 8009c78:	1e43      	subs	r3, r0, #1
 8009c7a:	42a1      	cmp	r1, r4
 8009c7c:	d008      	beq.n	8009c90 <memmove+0x28>
 8009c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c86:	e7f8      	b.n	8009c7a <memmove+0x12>
 8009c88:	4402      	add	r2, r0
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	428a      	cmp	r2, r1
 8009c8e:	d100      	bne.n	8009c92 <memmove+0x2a>
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c9a:	e7f7      	b.n	8009c8c <memmove+0x24>

08009c9c <_sbrk_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d06      	ldr	r5, [pc, #24]	; (8009cb8 <_sbrk_r+0x1c>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	f7f7 fe6e 	bl	8001988 <_sbrk>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_sbrk_r+0x1a>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_sbrk_r+0x1a>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	200004e8 	.word	0x200004e8

08009cbc <memcpy>:
 8009cbc:	440a      	add	r2, r1
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009cc4:	d100      	bne.n	8009cc8 <memcpy+0xc>
 8009cc6:	4770      	bx	lr
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd2:	4291      	cmp	r1, r2
 8009cd4:	d1f9      	bne.n	8009cca <memcpy+0xe>
 8009cd6:	bd10      	pop	{r4, pc}

08009cd8 <__assert_func>:
 8009cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cda:	4614      	mov	r4, r2
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <__assert_func+0x2c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	68d8      	ldr	r0, [r3, #12]
 8009ce6:	b14c      	cbz	r4, 8009cfc <__assert_func+0x24>
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <__assert_func+0x30>)
 8009cea:	9100      	str	r1, [sp, #0]
 8009cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cf0:	4906      	ldr	r1, [pc, #24]	; (8009d0c <__assert_func+0x34>)
 8009cf2:	462b      	mov	r3, r5
 8009cf4:	f000 f872 	bl	8009ddc <fiprintf>
 8009cf8:	f000 f882 	bl	8009e00 <abort>
 8009cfc:	4b04      	ldr	r3, [pc, #16]	; (8009d10 <__assert_func+0x38>)
 8009cfe:	461c      	mov	r4, r3
 8009d00:	e7f3      	b.n	8009cea <__assert_func+0x12>
 8009d02:	bf00      	nop
 8009d04:	20000074 	.word	0x20000074
 8009d08:	0800a5ef 	.word	0x0800a5ef
 8009d0c:	0800a5fc 	.word	0x0800a5fc
 8009d10:	0800a62a 	.word	0x0800a62a

08009d14 <_calloc_r>:
 8009d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d16:	fba1 2402 	umull	r2, r4, r1, r2
 8009d1a:	b94c      	cbnz	r4, 8009d30 <_calloc_r+0x1c>
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	9201      	str	r2, [sp, #4]
 8009d20:	f7ff f994 	bl	800904c <_malloc_r>
 8009d24:	9a01      	ldr	r2, [sp, #4]
 8009d26:	4605      	mov	r5, r0
 8009d28:	b930      	cbnz	r0, 8009d38 <_calloc_r+0x24>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	b003      	add	sp, #12
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	220c      	movs	r2, #12
 8009d32:	6002      	str	r2, [r0, #0]
 8009d34:	2500      	movs	r5, #0
 8009d36:	e7f8      	b.n	8009d2a <_calloc_r+0x16>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f7fe fa1a 	bl	8008172 <memset>
 8009d3e:	e7f4      	b.n	8009d2a <_calloc_r+0x16>

08009d40 <__ascii_mbtowc>:
 8009d40:	b082      	sub	sp, #8
 8009d42:	b901      	cbnz	r1, 8009d46 <__ascii_mbtowc+0x6>
 8009d44:	a901      	add	r1, sp, #4
 8009d46:	b142      	cbz	r2, 8009d5a <__ascii_mbtowc+0x1a>
 8009d48:	b14b      	cbz	r3, 8009d5e <__ascii_mbtowc+0x1e>
 8009d4a:	7813      	ldrb	r3, [r2, #0]
 8009d4c:	600b      	str	r3, [r1, #0]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	1e10      	subs	r0, r2, #0
 8009d52:	bf18      	it	ne
 8009d54:	2001      	movne	r0, #1
 8009d56:	b002      	add	sp, #8
 8009d58:	4770      	bx	lr
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	e7fb      	b.n	8009d56 <__ascii_mbtowc+0x16>
 8009d5e:	f06f 0001 	mvn.w	r0, #1
 8009d62:	e7f8      	b.n	8009d56 <__ascii_mbtowc+0x16>

08009d64 <_realloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	b921      	cbnz	r1, 8009d7a <_realloc_r+0x16>
 8009d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4611      	mov	r1, r2
 8009d76:	f7ff b969 	b.w	800904c <_malloc_r>
 8009d7a:	b92a      	cbnz	r2, 8009d88 <_realloc_r+0x24>
 8009d7c:	f7ff f8f2 	bl	8008f64 <_free_r>
 8009d80:	4625      	mov	r5, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	f000 f841 	bl	8009e0e <_malloc_usable_size_r>
 8009d8c:	4284      	cmp	r4, r0
 8009d8e:	4607      	mov	r7, r0
 8009d90:	d802      	bhi.n	8009d98 <_realloc_r+0x34>
 8009d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d96:	d812      	bhi.n	8009dbe <_realloc_r+0x5a>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff f956 	bl	800904c <_malloc_r>
 8009da0:	4605      	mov	r5, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0ed      	beq.n	8009d82 <_realloc_r+0x1e>
 8009da6:	42bc      	cmp	r4, r7
 8009da8:	4622      	mov	r2, r4
 8009daa:	4631      	mov	r1, r6
 8009dac:	bf28      	it	cs
 8009dae:	463a      	movcs	r2, r7
 8009db0:	f7ff ff84 	bl	8009cbc <memcpy>
 8009db4:	4631      	mov	r1, r6
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7ff f8d4 	bl	8008f64 <_free_r>
 8009dbc:	e7e1      	b.n	8009d82 <_realloc_r+0x1e>
 8009dbe:	4635      	mov	r5, r6
 8009dc0:	e7df      	b.n	8009d82 <_realloc_r+0x1e>

08009dc2 <__ascii_wctomb>:
 8009dc2:	b149      	cbz	r1, 8009dd8 <__ascii_wctomb+0x16>
 8009dc4:	2aff      	cmp	r2, #255	; 0xff
 8009dc6:	bf85      	ittet	hi
 8009dc8:	238a      	movhi	r3, #138	; 0x8a
 8009dca:	6003      	strhi	r3, [r0, #0]
 8009dcc:	700a      	strbls	r2, [r1, #0]
 8009dce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009dd2:	bf98      	it	ls
 8009dd4:	2001      	movls	r0, #1
 8009dd6:	4770      	bx	lr
 8009dd8:	4608      	mov	r0, r1
 8009dda:	4770      	bx	lr

08009ddc <fiprintf>:
 8009ddc:	b40e      	push	{r1, r2, r3}
 8009dde:	b503      	push	{r0, r1, lr}
 8009de0:	4601      	mov	r1, r0
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	4805      	ldr	r0, [pc, #20]	; (8009dfc <fiprintf+0x20>)
 8009de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	f000 f83f 	bl	8009e70 <_vfiprintf_r>
 8009df2:	b002      	add	sp, #8
 8009df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df8:	b003      	add	sp, #12
 8009dfa:	4770      	bx	lr
 8009dfc:	20000074 	.word	0x20000074

08009e00 <abort>:
 8009e00:	b508      	push	{r3, lr}
 8009e02:	2006      	movs	r0, #6
 8009e04:	f000 fa0c 	bl	800a220 <raise>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	f7f7 fd45 	bl	8001898 <_exit>

08009e0e <_malloc_usable_size_r>:
 8009e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e12:	1f18      	subs	r0, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	bfbc      	itt	lt
 8009e18:	580b      	ldrlt	r3, [r1, r0]
 8009e1a:	18c0      	addlt	r0, r0, r3
 8009e1c:	4770      	bx	lr

08009e1e <__sfputc_r>:
 8009e1e:	6893      	ldr	r3, [r2, #8]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	b410      	push	{r4}
 8009e26:	6093      	str	r3, [r2, #8]
 8009e28:	da08      	bge.n	8009e3c <__sfputc_r+0x1e>
 8009e2a:	6994      	ldr	r4, [r2, #24]
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	db01      	blt.n	8009e34 <__sfputc_r+0x16>
 8009e30:	290a      	cmp	r1, #10
 8009e32:	d103      	bne.n	8009e3c <__sfputc_r+0x1e>
 8009e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e38:	f000 b934 	b.w	800a0a4 <__swbuf_r>
 8009e3c:	6813      	ldr	r3, [r2, #0]
 8009e3e:	1c58      	adds	r0, r3, #1
 8009e40:	6010      	str	r0, [r2, #0]
 8009e42:	7019      	strb	r1, [r3, #0]
 8009e44:	4608      	mov	r0, r1
 8009e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <__sfputs_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	4614      	mov	r4, r2
 8009e54:	18d5      	adds	r5, r2, r3
 8009e56:	42ac      	cmp	r4, r5
 8009e58:	d101      	bne.n	8009e5e <__sfputs_r+0x12>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e007      	b.n	8009e6e <__sfputs_r+0x22>
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	463a      	mov	r2, r7
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff ffda 	bl	8009e1e <__sfputc_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d1f3      	bne.n	8009e56 <__sfputs_r+0xa>
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e70 <_vfiprintf_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	460d      	mov	r5, r1
 8009e76:	b09d      	sub	sp, #116	; 0x74
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4698      	mov	r8, r3
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	b118      	cbz	r0, 8009e88 <_vfiprintf_r+0x18>
 8009e80:	6a03      	ldr	r3, [r0, #32]
 8009e82:	b90b      	cbnz	r3, 8009e88 <_vfiprintf_r+0x18>
 8009e84:	f7fe f8c8 	bl	8008018 <__sinit>
 8009e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e8a:	07d9      	lsls	r1, r3, #31
 8009e8c:	d405      	bmi.n	8009e9a <_vfiprintf_r+0x2a>
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	059a      	lsls	r2, r3, #22
 8009e92:	d402      	bmi.n	8009e9a <_vfiprintf_r+0x2a>
 8009e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e96:	f7fe f9e9 	bl	800826c <__retarget_lock_acquire_recursive>
 8009e9a:	89ab      	ldrh	r3, [r5, #12]
 8009e9c:	071b      	lsls	r3, r3, #28
 8009e9e:	d501      	bpl.n	8009ea4 <_vfiprintf_r+0x34>
 8009ea0:	692b      	ldr	r3, [r5, #16]
 8009ea2:	b99b      	cbnz	r3, 8009ecc <_vfiprintf_r+0x5c>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 f93a 	bl	800a120 <__swsetup_r>
 8009eac:	b170      	cbz	r0, 8009ecc <_vfiprintf_r+0x5c>
 8009eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb0:	07dc      	lsls	r4, r3, #31
 8009eb2:	d504      	bpl.n	8009ebe <_vfiprintf_r+0x4e>
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eb8:	b01d      	add	sp, #116	; 0x74
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	0598      	lsls	r0, r3, #22
 8009ec2:	d4f7      	bmi.n	8009eb4 <_vfiprintf_r+0x44>
 8009ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ec6:	f7fe f9d2 	bl	800826e <__retarget_lock_release_recursive>
 8009eca:	e7f3      	b.n	8009eb4 <_vfiprintf_r+0x44>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eda:	2330      	movs	r3, #48	; 0x30
 8009edc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a090 <_vfiprintf_r+0x220>
 8009ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee4:	f04f 0901 	mov.w	r9, #1
 8009ee8:	4623      	mov	r3, r4
 8009eea:	469a      	mov	sl, r3
 8009eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef0:	b10a      	cbz	r2, 8009ef6 <_vfiprintf_r+0x86>
 8009ef2:	2a25      	cmp	r2, #37	; 0x25
 8009ef4:	d1f9      	bne.n	8009eea <_vfiprintf_r+0x7a>
 8009ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8009efa:	d00b      	beq.n	8009f14 <_vfiprintf_r+0xa4>
 8009efc:	465b      	mov	r3, fp
 8009efe:	4622      	mov	r2, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ffa2 	bl	8009e4c <__sfputs_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f000 80a9 	beq.w	800a060 <_vfiprintf_r+0x1f0>
 8009f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f10:	445a      	add	r2, fp
 8009f12:	9209      	str	r2, [sp, #36]	; 0x24
 8009f14:	f89a 3000 	ldrb.w	r3, [sl]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80a1 	beq.w	800a060 <_vfiprintf_r+0x1f0>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f28:	f10a 0a01 	add.w	sl, sl, #1
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f34:	931a      	str	r3, [sp, #104]	; 0x68
 8009f36:	4654      	mov	r4, sl
 8009f38:	2205      	movs	r2, #5
 8009f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3e:	4854      	ldr	r0, [pc, #336]	; (800a090 <_vfiprintf_r+0x220>)
 8009f40:	f7f6 f94e 	bl	80001e0 <memchr>
 8009f44:	9a04      	ldr	r2, [sp, #16]
 8009f46:	b9d8      	cbnz	r0, 8009f80 <_vfiprintf_r+0x110>
 8009f48:	06d1      	lsls	r1, r2, #27
 8009f4a:	bf44      	itt	mi
 8009f4c:	2320      	movmi	r3, #32
 8009f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f52:	0713      	lsls	r3, r2, #28
 8009f54:	bf44      	itt	mi
 8009f56:	232b      	movmi	r3, #43	; 0x2b
 8009f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f60:	2b2a      	cmp	r3, #42	; 0x2a
 8009f62:	d015      	beq.n	8009f90 <_vfiprintf_r+0x120>
 8009f64:	9a07      	ldr	r2, [sp, #28]
 8009f66:	4654      	mov	r4, sl
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f04f 0c0a 	mov.w	ip, #10
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f74:	3b30      	subs	r3, #48	; 0x30
 8009f76:	2b09      	cmp	r3, #9
 8009f78:	d94d      	bls.n	800a016 <_vfiprintf_r+0x1a6>
 8009f7a:	b1b0      	cbz	r0, 8009faa <_vfiprintf_r+0x13a>
 8009f7c:	9207      	str	r2, [sp, #28]
 8009f7e:	e014      	b.n	8009faa <_vfiprintf_r+0x13a>
 8009f80:	eba0 0308 	sub.w	r3, r0, r8
 8009f84:	fa09 f303 	lsl.w	r3, r9, r3
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	46a2      	mov	sl, r4
 8009f8e:	e7d2      	b.n	8009f36 <_vfiprintf_r+0xc6>
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	1d19      	adds	r1, r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	9103      	str	r1, [sp, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bfbb      	ittet	lt
 8009f9c:	425b      	neglt	r3, r3
 8009f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa2:	9307      	strge	r3, [sp, #28]
 8009fa4:	9307      	strlt	r3, [sp, #28]
 8009fa6:	bfb8      	it	lt
 8009fa8:	9204      	strlt	r2, [sp, #16]
 8009faa:	7823      	ldrb	r3, [r4, #0]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d10c      	bne.n	8009fca <_vfiprintf_r+0x15a>
 8009fb0:	7863      	ldrb	r3, [r4, #1]
 8009fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb4:	d134      	bne.n	800a020 <_vfiprintf_r+0x1b0>
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	9203      	str	r2, [sp, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfb8      	it	lt
 8009fc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fc6:	3402      	adds	r4, #2
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a0a0 <_vfiprintf_r+0x230>
 8009fce:	7821      	ldrb	r1, [r4, #0]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	f7f6 f904 	bl	80001e0 <memchr>
 8009fd8:	b138      	cbz	r0, 8009fea <_vfiprintf_r+0x17a>
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	eba0 000a 	sub.w	r0, r0, sl
 8009fe0:	2240      	movs	r2, #64	; 0x40
 8009fe2:	4082      	lsls	r2, r0
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fee:	4829      	ldr	r0, [pc, #164]	; (800a094 <_vfiprintf_r+0x224>)
 8009ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	f7f6 f8f3 	bl	80001e0 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d03f      	beq.n	800a07e <_vfiprintf_r+0x20e>
 8009ffe:	4b26      	ldr	r3, [pc, #152]	; (800a098 <_vfiprintf_r+0x228>)
 800a000:	bb1b      	cbnz	r3, 800a04a <_vfiprintf_r+0x1da>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	443b      	add	r3, r7
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e768      	b.n	8009ee8 <_vfiprintf_r+0x78>
 800a016:	fb0c 3202 	mla	r2, ip, r2, r3
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	e7a6      	b.n	8009f6e <_vfiprintf_r+0xfe>
 800a020:	2300      	movs	r3, #0
 800a022:	3401      	adds	r4, #1
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	4619      	mov	r1, r3
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a032:	3a30      	subs	r2, #48	; 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_vfiprintf_r+0x1d0>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c6      	beq.n	8009fca <_vfiprintf_r+0x15a>
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e7c4      	b.n	8009fca <_vfiprintf_r+0x15a>
 800a040:	fb0c 2101 	mla	r1, ip, r1, r2
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	e7f0      	b.n	800a02c <_vfiprintf_r+0x1bc>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b12      	ldr	r3, [pc, #72]	; (800a09c <_vfiprintf_r+0x22c>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4630      	mov	r0, r6
 800a056:	f7fd fb9f 	bl	8007798 <_printf_float>
 800a05a:	4607      	mov	r7, r0
 800a05c:	1c78      	adds	r0, r7, #1
 800a05e:	d1d6      	bne.n	800a00e <_vfiprintf_r+0x19e>
 800a060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d405      	bmi.n	800a072 <_vfiprintf_r+0x202>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_vfiprintf_r+0x202>
 800a06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06e:	f7fe f8fe 	bl	800826e <__retarget_lock_release_recursive>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af1d 	bmi.w	8009eb4 <_vfiprintf_r+0x44>
 800a07a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a07c:	e71c      	b.n	8009eb8 <_vfiprintf_r+0x48>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4b05      	ldr	r3, [pc, #20]	; (800a09c <_vfiprintf_r+0x22c>)
 800a086:	a904      	add	r1, sp, #16
 800a088:	4630      	mov	r0, r6
 800a08a:	f7fd fe29 	bl	8007ce0 <_printf_i>
 800a08e:	e7e4      	b.n	800a05a <_vfiprintf_r+0x1ea>
 800a090:	0800a5d4 	.word	0x0800a5d4
 800a094:	0800a5de 	.word	0x0800a5de
 800a098:	08007799 	.word	0x08007799
 800a09c:	08009e4d 	.word	0x08009e4d
 800a0a0:	0800a5da 	.word	0x0800a5da

0800a0a4 <__swbuf_r>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	4614      	mov	r4, r2
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	b118      	cbz	r0, 800a0b6 <__swbuf_r+0x12>
 800a0ae:	6a03      	ldr	r3, [r0, #32]
 800a0b0:	b90b      	cbnz	r3, 800a0b6 <__swbuf_r+0x12>
 800a0b2:	f7fd ffb1 	bl	8008018 <__sinit>
 800a0b6:	69a3      	ldr	r3, [r4, #24]
 800a0b8:	60a3      	str	r3, [r4, #8]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	071a      	lsls	r2, r3, #28
 800a0be:	d525      	bpl.n	800a10c <__swbuf_r+0x68>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	b31b      	cbz	r3, 800a10c <__swbuf_r+0x68>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	1a98      	subs	r0, r3, r2
 800a0ca:	6963      	ldr	r3, [r4, #20]
 800a0cc:	b2f6      	uxtb	r6, r6
 800a0ce:	4283      	cmp	r3, r0
 800a0d0:	4637      	mov	r7, r6
 800a0d2:	dc04      	bgt.n	800a0de <__swbuf_r+0x3a>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7ff fd9e 	bl	8009c18 <_fflush_r>
 800a0dc:	b9e0      	cbnz	r0, 800a118 <__swbuf_r+0x74>
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	60a3      	str	r3, [r4, #8]
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	6022      	str	r2, [r4, #0]
 800a0ea:	701e      	strb	r6, [r3, #0]
 800a0ec:	6962      	ldr	r2, [r4, #20]
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d004      	beq.n	800a0fe <__swbuf_r+0x5a>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	07db      	lsls	r3, r3, #31
 800a0f8:	d506      	bpl.n	800a108 <__swbuf_r+0x64>
 800a0fa:	2e0a      	cmp	r6, #10
 800a0fc:	d104      	bne.n	800a108 <__swbuf_r+0x64>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f7ff fd89 	bl	8009c18 <_fflush_r>
 800a106:	b938      	cbnz	r0, 800a118 <__swbuf_r+0x74>
 800a108:	4638      	mov	r0, r7
 800a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10c:	4621      	mov	r1, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f806 	bl	800a120 <__swsetup_r>
 800a114:	2800      	cmp	r0, #0
 800a116:	d0d5      	beq.n	800a0c4 <__swbuf_r+0x20>
 800a118:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a11c:	e7f4      	b.n	800a108 <__swbuf_r+0x64>
	...

0800a120 <__swsetup_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4b2a      	ldr	r3, [pc, #168]	; (800a1cc <__swsetup_r+0xac>)
 800a124:	4605      	mov	r5, r0
 800a126:	6818      	ldr	r0, [r3, #0]
 800a128:	460c      	mov	r4, r1
 800a12a:	b118      	cbz	r0, 800a134 <__swsetup_r+0x14>
 800a12c:	6a03      	ldr	r3, [r0, #32]
 800a12e:	b90b      	cbnz	r3, 800a134 <__swsetup_r+0x14>
 800a130:	f7fd ff72 	bl	8008018 <__sinit>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a13a:	0718      	lsls	r0, r3, #28
 800a13c:	d422      	bmi.n	800a184 <__swsetup_r+0x64>
 800a13e:	06d9      	lsls	r1, r3, #27
 800a140:	d407      	bmi.n	800a152 <__swsetup_r+0x32>
 800a142:	2309      	movs	r3, #9
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a150:	e034      	b.n	800a1bc <__swsetup_r+0x9c>
 800a152:	0758      	lsls	r0, r3, #29
 800a154:	d512      	bpl.n	800a17c <__swsetup_r+0x5c>
 800a156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a158:	b141      	cbz	r1, 800a16c <__swsetup_r+0x4c>
 800a15a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a15e:	4299      	cmp	r1, r3
 800a160:	d002      	beq.n	800a168 <__swsetup_r+0x48>
 800a162:	4628      	mov	r0, r5
 800a164:	f7fe fefe 	bl	8008f64 <_free_r>
 800a168:	2300      	movs	r3, #0
 800a16a:	6363      	str	r3, [r4, #52]	; 0x34
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	2300      	movs	r3, #0
 800a176:	6063      	str	r3, [r4, #4]
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	f043 0308 	orr.w	r3, r3, #8
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	6923      	ldr	r3, [r4, #16]
 800a186:	b94b      	cbnz	r3, 800a19c <__swsetup_r+0x7c>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a18e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a192:	d003      	beq.n	800a19c <__swsetup_r+0x7c>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f884 	bl	800a2a4 <__smakebuf_r>
 800a19c:	89a0      	ldrh	r0, [r4, #12]
 800a19e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1a2:	f010 0301 	ands.w	r3, r0, #1
 800a1a6:	d00a      	beq.n	800a1be <__swsetup_r+0x9e>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60a3      	str	r3, [r4, #8]
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	425b      	negs	r3, r3
 800a1b0:	61a3      	str	r3, [r4, #24]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	b943      	cbnz	r3, 800a1c8 <__swsetup_r+0xa8>
 800a1b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1ba:	d1c4      	bne.n	800a146 <__swsetup_r+0x26>
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	0781      	lsls	r1, r0, #30
 800a1c0:	bf58      	it	pl
 800a1c2:	6963      	ldrpl	r3, [r4, #20]
 800a1c4:	60a3      	str	r3, [r4, #8]
 800a1c6:	e7f4      	b.n	800a1b2 <__swsetup_r+0x92>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7f7      	b.n	800a1bc <__swsetup_r+0x9c>
 800a1cc:	20000074 	.word	0x20000074

0800a1d0 <_raise_r>:
 800a1d0:	291f      	cmp	r1, #31
 800a1d2:	b538      	push	{r3, r4, r5, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	d904      	bls.n	800a1e4 <_raise_r+0x14>
 800a1da:	2316      	movs	r3, #22
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1e6:	b112      	cbz	r2, 800a1ee <_raise_r+0x1e>
 800a1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1ec:	b94b      	cbnz	r3, 800a202 <_raise_r+0x32>
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 f830 	bl	800a254 <_getpid_r>
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fe:	f000 b817 	b.w	800a230 <_kill_r>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d00a      	beq.n	800a21c <_raise_r+0x4c>
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	d103      	bne.n	800a212 <_raise_r+0x42>
 800a20a:	2316      	movs	r3, #22
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	e7e7      	b.n	800a1e2 <_raise_r+0x12>
 800a212:	2400      	movs	r4, #0
 800a214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a218:	4628      	mov	r0, r5
 800a21a:	4798      	blx	r3
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7e0      	b.n	800a1e2 <_raise_r+0x12>

0800a220 <raise>:
 800a220:	4b02      	ldr	r3, [pc, #8]	; (800a22c <raise+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7ff bfd3 	b.w	800a1d0 <_raise_r>
 800a22a:	bf00      	nop
 800a22c:	20000074 	.word	0x20000074

0800a230 <_kill_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d07      	ldr	r5, [pc, #28]	; (800a250 <_kill_r+0x20>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	f7f7 fb1b 	bl	8001878 <_kill>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d102      	bne.n	800a24c <_kill_r+0x1c>
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	b103      	cbz	r3, 800a24c <_kill_r+0x1c>
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop
 800a250:	200004e8 	.word	0x200004e8

0800a254 <_getpid_r>:
 800a254:	f7f7 bb08 	b.w	8001868 <_getpid>

0800a258 <__swhatbuf_r>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	460c      	mov	r4, r1
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	2900      	cmp	r1, #0
 800a262:	b096      	sub	sp, #88	; 0x58
 800a264:	4615      	mov	r5, r2
 800a266:	461e      	mov	r6, r3
 800a268:	da0d      	bge.n	800a286 <__swhatbuf_r+0x2e>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	bf0c      	ite	eq
 800a276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a27a:	2340      	movne	r3, #64	; 0x40
 800a27c:	2000      	movs	r0, #0
 800a27e:	6031      	str	r1, [r6, #0]
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	b016      	add	sp, #88	; 0x58
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	466a      	mov	r2, sp
 800a288:	f000 f848 	bl	800a31c <_fstat_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dbec      	blt.n	800a26a <__swhatbuf_r+0x12>
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a29a:	4259      	negs	r1, r3
 800a29c:	4159      	adcs	r1, r3
 800a29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a2:	e7eb      	b.n	800a27c <__swhatbuf_r+0x24>

0800a2a4 <__smakebuf_r>:
 800a2a4:	898b      	ldrh	r3, [r1, #12]
 800a2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2a8:	079d      	lsls	r5, r3, #30
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	d507      	bpl.n	800a2c0 <__smakebuf_r+0x1c>
 800a2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	6163      	str	r3, [r4, #20]
 800a2bc:	b002      	add	sp, #8
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	ab01      	add	r3, sp, #4
 800a2c2:	466a      	mov	r2, sp
 800a2c4:	f7ff ffc8 	bl	800a258 <__swhatbuf_r>
 800a2c8:	9900      	ldr	r1, [sp, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7fe febd 	bl	800904c <_malloc_r>
 800a2d2:	b948      	cbnz	r0, 800a2e8 <__smakebuf_r+0x44>
 800a2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d8:	059a      	lsls	r2, r3, #22
 800a2da:	d4ef      	bmi.n	800a2bc <__smakebuf_r+0x18>
 800a2dc:	f023 0303 	bic.w	r3, r3, #3
 800a2e0:	f043 0302 	orr.w	r3, r3, #2
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	e7e3      	b.n	800a2b0 <__smakebuf_r+0xc>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	9b00      	ldr	r3, [sp, #0]
 800a2f4:	6163      	str	r3, [r4, #20]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	6120      	str	r0, [r4, #16]
 800a2fa:	b15b      	cbz	r3, 800a314 <__smakebuf_r+0x70>
 800a2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f81d 	bl	800a340 <_isatty_r>
 800a306:	b128      	cbz	r0, 800a314 <__smakebuf_r+0x70>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	431d      	orrs	r5, r3
 800a318:	81a5      	strh	r5, [r4, #12]
 800a31a:	e7cf      	b.n	800a2bc <__smakebuf_r+0x18>

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f7f7 fb04 	bl	8001936 <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	200004e8 	.word	0x200004e8

0800a340 <_isatty_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	; (800a35c <_isatty_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f7 fb03 	bl	8001956 <_isatty>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_isatty_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_isatty_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	200004e8 	.word	0x200004e8

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
