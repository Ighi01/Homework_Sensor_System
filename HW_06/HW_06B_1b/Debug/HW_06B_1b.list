
HW_06B_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800a340  0800a340  0001a340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f4  0800a6f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6fc  0800a6fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e0  0800a8e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800a8e4  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103e8  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002198  00000000  00000000  0003063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  000327d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5d  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017679  00000000  00000000  000343d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c6e  00000000  00000000  0004ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009168c  00000000  00000000  0005d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000548c  00000000  00000000  000eed48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f41d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a328 	.word	0x0800a328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a328 	.word	0x0800a328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//------------------TIMER Interrupt Service Routine -----------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f58:	b0a6      	sub	sp, #152	; 0x98
 8000f5a:	af06      	add	r7, sp, #24
 8000f5c:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	f040 8091 	bne.w	800108a <HAL_TIM_PeriodElapsedCallback+0x136>
	{
		//tell to LIS2DE which register you want to read from
		//the MSB of the subaddress is set to 1 to activate the auto increment, see datasheet pag.22
		if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, &ACC_OUT_X, 1, 50) != HAL_OK)
 8000f68:	2332      	movs	r3, #50	; 0x32
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000f70:	2150      	movs	r1, #80	; 0x50
 8000f72:	484a      	ldr	r0, [pc, #296]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000f74:	f001 fdd2 	bl	8002b1c <HAL_I2C_Master_Transmit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x2e>
			Error_Handler();
 8000f7e:	f000 faa1 	bl	80014c4 <Error_Handler>

		//Read data from the register (x)
		//1 is summed to the address to tell the slave that we need to read data (see datasheet pag.22)
		if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &x, sizeof(x), 50) != HAL_OK)
 8000f82:	2332      	movs	r3, #50	; 0x32
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f8a:	2151      	movs	r1, #81	; 0x51
 8000f8c:	4843      	ldr	r0, [pc, #268]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000f8e:	f001 fec3 	bl	8002d18 <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>
			Error_Handler();
 8000f98:	f000 fa94 	bl	80014c4 <Error_Handler>

		//Read data from the register (y)
		if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &y, sizeof(y), 50) != HAL_OK)
 8000f9c:	2332      	movs	r3, #50	; 0x32
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000fa4:	2151      	movs	r1, #81	; 0x51
 8000fa6:	483d      	ldr	r0, [pc, #244]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000fa8:	f001 feb6 	bl	8002d18 <HAL_I2C_Master_Receive>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x62>
			Error_Handler();
 8000fb2:	f000 fa87 	bl	80014c4 <Error_Handler>

		//Read data from the register (z)
		if(HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADD+1, (uint8_t*) &z, sizeof(z), 50) != HAL_OK)
 8000fb6:	2332      	movs	r3, #50	; 0x32
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000fbe:	2151      	movs	r1, #81	; 0x51
 8000fc0:	4836      	ldr	r0, [pc, #216]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000fc2:	f001 fea9 	bl	8002d18 <HAL_I2C_Master_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x7c>
			Error_Handler();
 8000fcc:	f000 fa7a 	bl	80014c4 <Error_Handler>

		//conversion in g
		float x_g = x/64.0;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff faac 	bl	8000534 <__aeabi_i2d>
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000fe2:	f7ff fc3b 	bl	800085c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fde3 	bl	8000bb8 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
		float y_g = y/64.0;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa99 	bl	8000534 <__aeabi_i2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001008:	f7ff fc28 	bl	800085c <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fdd0 	bl	8000bb8 <__aeabi_d2f>
 8001018:	4603      	mov	r3, r0
 800101a:	67bb      	str	r3, [r7, #120]	; 0x78
		float z_g = z/64.0;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800101e:	f993 3000 	ldrsb.w	r3, [r3]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa86 	bl	8000534 <__aeabi_i2d>
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 800102e:	f7ff fc15 	bl	800085c <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fdbd 	bl	8000bb8 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	677b      	str	r3, [r7, #116]	; 0x74

		char string[100];

		int length = snprintf(string,sizeof(string),"X: %1.2fg\r\nY: %1.2fg\r\nZ: %1.2fg\r\n\r\n",x_g,y_g,z_g);
 8001042:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001044:	f7ff fa88 	bl	8000558 <__aeabi_f2d>
 8001048:	4604      	mov	r4, r0
 800104a:	460d      	mov	r5, r1
 800104c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800104e:	f7ff fa83 	bl	8000558 <__aeabi_f2d>
 8001052:	4680      	mov	r8, r0
 8001054:	4689      	mov	r9, r1
 8001056:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001058:	f7ff fa7e 	bl	8000558 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	f107 000c 	add.w	r0, r7, #12
 8001064:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001068:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800106c:	e9cd 4500 	strd	r4, r5, [sp]
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001072:	2164      	movs	r1, #100	; 0x64
 8001074:	f006 ffe8 	bl	8008048 <sniprintf>
 8001078:	6738      	str	r0, [r7, #112]	; 0x70
		//Transmit data on UART_DMA
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)string, length);
 800107a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800107c:	b29a      	uxth	r2, r3
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001086:	f005 faad 	bl	80065e4 <HAL_UART_Transmit_DMA>

	}
}
 800108a:	bf00      	nop
 800108c:	3780      	adds	r7, #128	; 0x80
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001094:	20000250 	.word	0x20000250
 8001098:	2000000a 	.word	0x2000000a
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	2000039c 	.word	0x2000039c
 80010a4:	2000039d 	.word	0x2000039d
 80010a8:	2000039e 	.word	0x2000039e
 80010ac:	40500000 	.word	0x40500000
 80010b0:	0800a340 	.word	0x0800a340
 80010b4:	20000298 	.word	0x20000298

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 fcb7 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f831 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 f98f 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ca:	f000 f965 	bl	8001398 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ce:	f000 f939 	bl	8001344 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010d2:	f000 f895 	bl	8001200 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010d6:	f000 f8c1 	bl	800125c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim2);
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <main+0x5c>)
 80010dc:	f004 fbfc 	bl	80058d8 <HAL_TIM_Base_Start_IT>
  // send the configuration values to the 3 registers
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG1, 2, 100);
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <main+0x60>)
 80010e8:	2150      	movs	r1, #80	; 0x50
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <main+0x64>)
 80010ec:	f001 fd16 	bl	8002b1c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG2, 2, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2302      	movs	r3, #2
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <main+0x68>)
 80010f8:	2150      	movs	r1, #80	; 0x50
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <main+0x64>)
 80010fc:	f001 fd0e 	bl	8002b1c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADD, CTRL_REG4, 2, 100);
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2302      	movs	r3, #2
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <main+0x6c>)
 8001108:	2150      	movs	r1, #80	; 0x50
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <main+0x64>)
 800110c:	f001 fd06 	bl	8002b1c <HAL_I2C_Master_Transmit>

  while (1)
 8001110:	e7fe      	b.n	8001110 <main+0x58>
 8001112:	bf00      	nop
 8001114:	20000250 	.word	0x20000250
 8001118:	20000000 	.word	0x20000000
 800111c:	200001fc 	.word	0x200001fc
 8001120:	20000004 	.word	0x20000004
 8001124:	20000008 	.word	0x20000008

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fffd 	bl	8008136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <SystemClock_Config+0xd0>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SystemClock_Config+0xd0>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemClock_Config+0xd4>)
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <SystemClock_Config+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800119c:	2310      	movs	r3, #16
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011aa:	2307      	movs	r3, #7
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fea8 	bl	8004f08 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011be:	f000 f981 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f90a 	bl	80053f8 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ea:	f000 f96b 	bl	80014c4 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x50>)
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <MX_I2C1_Init+0x54>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_I2C1_Init+0x50>)
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_I2C1_Init+0x58>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_I2C1_Init+0x50>)
 800121e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C1_Init+0x50>)
 800123e:	f001 fb29 	bl	8002894 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f93c 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001fc 	.word	0x200001fc
 8001254:	40005400 	.word	0x40005400
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_TIM2_Init+0xe4>)
 800128e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_TIM2_Init+0xe4>)
 8001296:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800129a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_TIM2_Init+0xe4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b6:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012b8:	f004 fabe 	bl	8005838 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012c2:	f000 f8ff 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	4619      	mov	r1, r3
 80012d2:	481b      	ldr	r0, [pc, #108]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012d4:	f004 fd20 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012de:	f000 f8f1 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012e2:	4817      	ldr	r0, [pc, #92]	; (8001340 <MX_TIM2_Init+0xe4>)
 80012e4:	f004 fb5a 	bl	800599c <HAL_TIM_OC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012ee:	f000 f8e9 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012f2:	2320      	movs	r3, #32
 80012f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4619      	mov	r1, r3
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <MX_TIM2_Init+0xe4>)
 8001302:	f005 f89f 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800130c:	f000 f8da 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_TIM2_Init+0xe4>)
 8001328:	f004 fc9a 	bl	8005c60 <HAL_TIM_OC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001332:	f000 f8c7 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3738      	adds	r7, #56	; 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000250 	.word	0x20000250

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f005 f8e4 	bl	8006548 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f89d 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000298 	.word	0x20000298
 8001394:	40004400 	.word	0x40004400

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2010      	movs	r0, #16
 80013c0:	f000 fc83 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013c4:	2010      	movs	r0, #16
 80013c6:	f000 fc9c 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2011      	movs	r0, #17
 80013d0:	f000 fc7b 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013d4:	2011      	movs	r0, #17
 80013d6:	f000 fc94 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_GPIO_Init+0xd4>)
 8001474:	f001 f9f4 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_GPIO_Init+0xd8>)
 8001490:	f001 f862 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001494:	2320      	movs	r3, #32
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_GPIO_Init+0xd4>)
 80014ac:	f001 f854 	bl	8002558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020800 	.word	0x40020800

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_MspInit+0x4c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x4c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150e:	2007      	movs	r0, #7
 8001510:	f000 fbd0 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_I2C_MspInit+0x94>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d134      	bne.n	80015ac <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001570:	2304      	movs	r3, #4
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <HAL_I2C_MspInit+0x9c>)
 800157c:	f000 ffec 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 800158a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_I2C_MspInit+0x98>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	201f      	movs	r0, #31
 80015a2:	f000 fb92 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a6:	201f      	movs	r0, #31
 80015a8:	f000 fbab 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40005400 	.word	0x40005400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400

080015c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d115      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_TIM_Base_MspInit+0x48>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_TIM_Base_MspInit+0x48>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_TIM_Base_MspInit+0x48>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201c      	movs	r0, #28
 80015f4:	f000 fb69 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f8:	201c      	movs	r0, #28
 80015fa:	f000 fb82 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_UART_MspInit+0x14c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	f040 8090 	bne.w	8001750 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_UART_MspInit+0x150>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a48      	ldr	r2, [pc, #288]	; (800175c <HAL_UART_MspInit+0x150>)
 800163a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_UART_MspInit+0x150>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_UART_MspInit+0x150>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a41      	ldr	r2, [pc, #260]	; (800175c <HAL_UART_MspInit+0x150>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_UART_MspInit+0x150>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001668:	230c      	movs	r3, #12
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001678:	2307      	movs	r3, #7
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4837      	ldr	r0, [pc, #220]	; (8001760 <HAL_UART_MspInit+0x154>)
 8001684:	f000 ff68 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_UART_MspInit+0x158>)
 800168a:	4a37      	ldr	r2, [pc, #220]	; (8001768 <HAL_UART_MspInit+0x15c>)
 800168c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_UART_MspInit+0x158>)
 8001690:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001694:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_UART_MspInit+0x158>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <HAL_UART_MspInit+0x158>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016aa:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016c8:	4826      	ldr	r0, [pc, #152]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016ca:	f000 fb35 	bl	8001d38 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016d4:	f7ff fef6 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <HAL_UART_MspInit+0x158>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_UART_MspInit+0x160>)
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_UART_MspInit+0x164>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_UART_MspInit+0x160>)
 80016ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_UART_MspInit+0x160>)
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_UART_MspInit+0x160>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_UART_MspInit+0x160>)
 8001700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001704:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_UART_MspInit+0x160>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_UART_MspInit+0x160>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_UART_MspInit+0x160>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_UART_MspInit+0x160>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_UART_MspInit+0x160>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001724:	4811      	ldr	r0, [pc, #68]	; (800176c <HAL_UART_MspInit+0x160>)
 8001726:	f000 fb07 	bl	8001d38 <HAL_DMA_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001730:	f7ff fec8 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_UART_MspInit+0x160>)
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
 800173a:	4a0c      	ldr	r2, [pc, #48]	; (800176c <HAL_UART_MspInit+0x160>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2026      	movs	r0, #38	; 0x26
 8001746:	f000 fac0 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800174a:	2026      	movs	r0, #38	; 0x26
 800174c:	f000 fad9 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004400 	.word	0x40004400
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	200002dc 	.word	0x200002dc
 8001768:	40026088 	.word	0x40026088
 800176c:	2000033c 	.word	0x2000033c
 8001770:	400260a0 	.word	0x400260a0

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c0:	f000 f988 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA1_Stream5_IRQHandler+0x10>)
 80017ce:	f000 fc4b 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002dc 	.word	0x200002dc

080017dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream6_IRQHandler+0x10>)
 80017e2:	f000 fc41 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000033c 	.word	0x2000033c

080017f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM2_IRQHandler+0x10>)
 80017f6:	f004 f92a 	bl	8005a4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000250 	.word	0x20000250

08001804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <I2C1_EV_IRQHandler+0x10>)
 800180a:	f001 fcab 	bl	8003164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001fc 	.word	0x200001fc

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f004 ff5f 	bl	80066e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000298 	.word	0x20000298

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001846:	f006 fcc9 	bl	80081dc <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
  return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
  while (1) {}    /* Make sure we hang here */
 800186e:	e7fe      	b.n	800186e <_exit+0x12>

08001870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001882:	f3af 8000 	nop.w
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
  }

  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e009      	b.n	80018d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf1      	blt.n	80018bc <_write+0x12>
  }
  return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_close>:

int _close(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_isatty>:

int _isatty(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f006 fc2e 	bl	80081dc <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20018000 	.word	0x20018000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200003a0 	.word	0x200003a0
 80019b4:	200004f8 	.word	0x200004f8

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd7 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f006 fbed 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fb53 	bl	80010b8 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a20:	0800a704 	.word	0x0800a704
  ldr r2, =_sbss
 8001a24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a28:	200004f4 	.word	0x200004f4

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f92b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd34 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f943 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f000 f90b 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	20000014 	.word	0x20000014
 8001ad0:	20000010 	.word	0x20000010

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000014 	.word	0x20000014
 8001af8:	200003a4 	.word	0x200003a4

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200003a4 	.word	0x200003a4

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff feda 	bl	8001afc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e099      	b.n	8001e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e00f      	b.n	8001d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff fec1 	bl	8001afc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d908      	bls.n	8001d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e078      	b.n	8001e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_DMA_Init+0x158>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d117      	bne.n	8001e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb0f 	bl	8002460 <DMA_CheckFifoParam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e56:	2301      	movs	r3, #1
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fac6 	bl	80023f4 <DMA_CalcBaseAndBitshift>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	223f      	movs	r2, #63	; 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	f010803f 	.word	0xf010803f

08001e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Start_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e040      	b.n	8001f3c <HAL_DMA_Start_IT+0xa8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12f      	bne.n	8001f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fa58 	bl	8002398 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	223f      	movs	r2, #63	; 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0216 	orr.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f52:	f7ff fdd3 	bl	8001afc <HAL_GetTick>
 8001f56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e052      	b.n	800201c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_Abort+0x62>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc6:	e013      	b.n	8001ff0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc8:	f7ff fd98 	bl	8001afc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e015      	b.n	800201c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e4      	bne.n	8001fc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00c      	b.n	800205c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2205      	movs	r2, #5
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002074:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_DMA_IRQHandler+0x248>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a8e      	ldr	r2, [pc, #568]	; (80022b4 <HAL_DMA_IRQHandler+0x24c>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a9b      	lsrs	r3, r3, #10
 8002080:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2208      	movs	r2, #8
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0204 	bic.w	r2, r2, #4
 80020ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2208      	movs	r2, #8
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2201      	movs	r2, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2204      	movs	r2, #4
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d012      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2204      	movs	r2, #4
 800212e:	409a      	lsls	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2210      	movs	r2, #16
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d043      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03c      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2210      	movs	r2, #16
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d024      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
 8002196:	e01f      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e016      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0208 	bic.w	r2, r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2220      	movs	r2, #32
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 808f 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8087 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	2220      	movs	r2, #32
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b05      	cmp	r3, #5
 8002210:	d136      	bne.n	8002280 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0216 	bic.w	r2, r2, #22
 8002220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002230:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_DMA_IRQHandler+0x1da>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0208 	bic.w	r2, r2, #8
 8002250:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	d07e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
        }
        return;
 800227e:	e079      	b.n	8002374 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e02c      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e01e      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0210 	bic.w	r2, r2, #16
 80022e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	2b00      	cmp	r3, #0
 800230e:	d032      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d022      	beq.n	8002362 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d307      	bcc.n	8002350 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f2      	bne.n	8002334 <HAL_DMA_IRQHandler+0x2cc>
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002350:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
 8002372:	e000      	b.n	8002376 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002374:	bf00      	nop
    }
  }
}
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238a:	b2db      	uxtb	r3, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d108      	bne.n	80023d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023d6:	e007      	b.n	80023e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	60da      	str	r2, [r3, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b10      	subs	r3, #16
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <DMA_CalcBaseAndBitshift+0x64>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <DMA_CalcBaseAndBitshift+0x68>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d909      	bls.n	8002436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	; 0x58
 8002434:	e007      	b.n	8002446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	aaaaaaab 	.word	0xaaaaaaab
 800245c:	0800a37c 	.word	0x0800a37c

08002460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d856      	bhi.n	800252e <DMA_CheckFifoParam+0xce>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <DMA_CheckFifoParam+0x28>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	08002499 	.word	0x08002499
 800248c:	080024ab 	.word	0x080024ab
 8002490:	08002499 	.word	0x08002499
 8002494:	0800252f 	.word	0x0800252f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d046      	beq.n	8002532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e043      	b.n	8002532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b2:	d140      	bne.n	8002536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e03d      	b.n	8002536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c2:	d121      	bne.n	8002508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d837      	bhi.n	800253a <DMA_CheckFifoParam+0xda>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <DMA_CheckFifoParam+0x70>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e7 	.word	0x080024e7
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	080024f9 	.word	0x080024f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e030      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d025      	beq.n	800253e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f6:	e022      	b.n	800253e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002506:	e01c      	b.n	8002542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d903      	bls.n	8002516 <DMA_CheckFifoParam+0xb6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002514:	e018      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      break;
 800251a:	e015      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e00b      	b.n	8002546 <DMA_CheckFifoParam+0xe6>
      break;
 800252e:	bf00      	nop
 8002530:	e00a      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e008      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e006      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e004      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e002      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;   
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
    }
  } 
  
  return status; 
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e159      	b.n	8002828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 8148 	bne.w	8002822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d130      	bne.n	800260c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b03      	cmp	r3, #3
 8002616:	d017      	beq.n	8002648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a2 	beq.w	8002822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x202>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a48      	ldr	r2, [pc, #288]	; (800284c <HAL_GPIO_Init+0x2f4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x1fe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_GPIO_Init+0x2f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a46      	ldr	r2, [pc, #280]	; (8002854 <HAL_GPIO_Init+0x2fc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x1f6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_GPIO_Init+0x300>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x1f2>
 8002746:	2304      	movs	r3, #4
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274a:	2307      	movs	r3, #7
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x204>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_GPIO_Init+0x304>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_GPIO_Init+0x304>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_GPIO_Init+0x304>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_GPIO_Init+0x304>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_GPIO_Init+0x304>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_GPIO_Init+0x304>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f aea2 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e12b      	b.n	8002afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fe30 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f8:	f002 ff76 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d807      	bhi.n	8002918 <HAL_I2C_Init+0x84>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_I2C_Init+0x278>)
 800290c:	4293      	cmp	r3, r2
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e006      	b.n	8002926 <HAL_I2C_Init+0x92>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a7d      	ldr	r2, [pc, #500]	; (8002b10 <HAL_I2C_Init+0x27c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0e7      	b.n	8002afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a78      	ldr	r2, [pc, #480]	; (8002b14 <HAL_I2C_Init+0x280>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_I2C_Init+0x274>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d802      	bhi.n	8002968 <HAL_I2C_Init+0xd4>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	e009      	b.n	800297c <HAL_I2C_Init+0xe8>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_I2C_Init+0x284>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	3301      	adds	r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800298e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	495c      	ldr	r1, [pc, #368]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002998:	428b      	cmp	r3, r1
 800299a:	d819      	bhi.n	80029d0 <HAL_I2C_Init+0x13c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e59      	subs	r1, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b0:	400b      	ands	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_I2C_Init+0x138>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e59      	subs	r1, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	e051      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e04f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <HAL_I2C_Init+0x168>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_I2C_Init+0x18e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x196>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <HAL_I2C_Init+0x1bc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e58      	subs	r0, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	440b      	add	r3, r1
 8002a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	e00f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6911      	ldr	r1, [r2, #16]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	000186a0 	.word	0x000186a0
 8002b0c:	001e847f 	.word	0x001e847f
 8002b10:	003d08ff 	.word	0x003d08ff
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	460b      	mov	r3, r1
 8002b2a:	817b      	strh	r3, [r7, #10]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b30:	f7fe ffe4 	bl	8001afc <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 80e0 	bne.w	8002d04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2319      	movs	r3, #25
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4970      	ldr	r1, [pc, #448]	; (8002d10 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f001 ffb0 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0d3      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x50>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0cc      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d007      	beq.n	8002b92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2210      	movs	r2, #16
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	893a      	ldrh	r2, [r7, #8]
 8002bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f001 fd72 	bl	80046c4 <I2C_MasterRequestWrite>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e08d      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c00:	e066      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f002 f82a 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d107      	bne.n	8002c2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x188>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	6a39      	ldr	r1, [r7, #32]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f002 f81a 	bl	8004ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01a      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d194      	bne.n	8002c02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	00100002 	.word	0x00100002
 8002d14:	ffff0000 	.word	0xffff0000

08002d18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	; 0x30
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	460b      	mov	r3, r1
 8002d26:	817b      	strh	r3, [r7, #10]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7fe fee6 	bl	8001afc <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	f040 820b 	bne.w	8003156 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	497c      	ldr	r1, [pc, #496]	; (8002f3c <HAL_I2C_Master_Receive+0x224>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f001 feb2 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	e1fe      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Master_Receive+0x50>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e1f7      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d007      	beq.n	8002d8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2222      	movs	r2, #34	; 0x22
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2210      	movs	r2, #16
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	893a      	ldrh	r2, [r7, #8]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_I2C_Master_Receive+0x228>)
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 fcf6 	bl	80047c8 <I2C_MasterRequestRead>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1b8      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e18c      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d11b      	bne.n	8002e56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e16c      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d11b      	bne.n	8002e96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	e14c      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ebc:	e138      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f200 80f1 	bhi.w	80030aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d123      	bne.n	8002f18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f001 ff77 	bl	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e139      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f16:	e10b      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d14e      	bne.n	8002fbe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	2200      	movs	r2, #0
 8002f28:	4906      	ldr	r1, [pc, #24]	; (8002f44 <HAL_I2C_Master_Receive+0x22c>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f001 fdc2 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e10e      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fbc:	e0b8      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4966      	ldr	r1, [pc, #408]	; (8003160 <HAL_I2C_Master_Receive+0x448>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f001 fd73 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0bf      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	2200      	movs	r2, #0
 8003022:	494f      	ldr	r1, [pc, #316]	; (8003160 <HAL_I2C_Master_Receive+0x448>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 fd45 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e091      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a8:	e042      	b.n	8003130 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 fe8a 	bl	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e04c      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d118      	bne.n	8003130 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f aec2 	bne.w	8002ebe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3728      	adds	r7, #40	; 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00010004 	.word	0x00010004

08003164 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003184:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b10      	cmp	r3, #16
 8003192:	d003      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0x38>
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	f040 80b1 	bne.w	80032fe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031bc:	d003      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x62>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_EV_IRQHandler+0x66>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x68>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f000 8114 	beq.w	80033fa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x90>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f001 fe73 	bl	8004ed2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fcbf 	bl	8003b70 <I2C_Master_SB>
 80031f2:	e083      	b.n	80032fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0xac>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fd37 	bl	8003c7c <I2C_Master_ADD10>
 800320e:	e075      	b.n	80032fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0xc8>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fd53 	bl	8003cd0 <I2C_Master_ADDR>
 800322a:	e067      	b.n	80032fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d036      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003244:	f000 80db 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x10a>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x10a>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f937 	bl	80034da <I2C_MasterTransmit_TXE>
 800326c:	e046      	b.n	80032fc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80c2 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80bc 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b21      	cmp	r3, #33	; 0x21
 800328a:	d103      	bne.n	8003294 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f9c0 	bl	8003612 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	e0b4      	b.n	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	f040 80b1 	bne.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa2e 	bl	80036fe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	e0ac      	b.n	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	f000 80a4 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x178>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x178>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 faa6 	bl	8003826 <I2C_MasterReceive_RXNE>
 80032da:	e00f      	b.n	80032fc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 808b 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8085 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb51 	bl	800399c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fa:	e080      	b.n	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
 80032fc:	e07f      	b.n	80033fe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e007      	b.n	8003320 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d011      	beq.n	800334e <HAL_I2C_EV_IRQHandler+0x1ea>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 ff11 	bl	800416e <I2C_Slave_ADDR>
 800334c:	e05a      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_I2C_EV_IRQHandler+0x206>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 ff4c 	bl	8004200 <I2C_Slave_STOPF>
 8003368:	e04c      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	2b21      	cmp	r3, #33	; 0x21
 800336e:	d002      	beq.n	8003376 <HAL_I2C_EV_IRQHandler+0x212>
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	2b29      	cmp	r3, #41	; 0x29
 8003374:	d120      	bne.n	80033b8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_I2C_EV_IRQHandler+0x238>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_I2C_EV_IRQHandler+0x238>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fe2c 	bl	8003ff2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339a:	e032      	b.n	8003402 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02d      	beq.n	8003402 <HAL_I2C_EV_IRQHandler+0x29e>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d028      	beq.n	8003402 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fe5b 	bl	800406c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b6:	e024      	b.n	8003402 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x27a>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x27a>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fe69 	bl	80040ae <I2C_SlaveReceive_RXNE>
 80033dc:	e012      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fe99 	bl	800412a <I2C_SlaveReceive_BTF>
 80033f8:	e004      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80033fa:	bf00      	nop
 80033fc:	e002      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003402:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
 8003466:	4613      	mov	r3, r2
 8003468:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d150      	bne.n	80035a2 <I2C_MasterTransmit_TXE+0xc8>
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d14d      	bne.n	80035a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d01d      	beq.n	8003548 <I2C_MasterTransmit_TXE+0x6e>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b20      	cmp	r3, #32
 8003510:	d01a      	beq.n	8003548 <I2C_MasterTransmit_TXE+0x6e>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003518:	d016      	beq.n	8003548 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003528:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2211      	movs	r2, #17
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff62 	bl	800340a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003546:	e060      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003556:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d107      	bne.n	8003592 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff7d 	bl	800348a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003590:	e03b      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff35 	bl	800340a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035a0:	e033      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b21      	cmp	r3, #33	; 0x21
 80035a6:	d005      	beq.n	80035b4 <I2C_MasterTransmit_TXE+0xda>
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d12d      	bne.n	800360a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b22      	cmp	r3, #34	; 0x22
 80035b2:	d12a      	bne.n	800360a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035ce:	e01c      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d103      	bne.n	80035e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f88e 	bl	80036fe <I2C_MemoryTransmit_TXE_BTF>
}
 80035e2:	e012      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003608:	e7ff      	b.n	800360a <I2C_MasterTransmit_TXE+0x130>
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d164      	bne.n	80036f6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800365a:	e04c      	b.n	80036f6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d01d      	beq.n	800369e <I2C_MasterTransmit_BTF+0x8c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b20      	cmp	r3, #32
 8003666:	d01a      	beq.n	800369e <I2C_MasterTransmit_BTF+0x8c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366e:	d016      	beq.n	800369e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800367e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2211      	movs	r2, #17
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff feb7 	bl	800340a <HAL_I2C_MasterTxCpltCallback>
}
 800369c:	e02b      	b.n	80036f6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d107      	bne.n	80036e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fed2 	bl	800348a <HAL_I2C_MemTxCpltCallback>
}
 80036e6:	e006      	b.n	80036f6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fe8a 	bl	800340a <HAL_I2C_MasterTxCpltCallback>
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11d      	bne.n	8003752 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10b      	bne.n	8003736 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	b2da      	uxtb	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	1c9a      	adds	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003734:	e073      	b.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373a:	b29b      	uxth	r3, r3
 800373c:	121b      	asrs	r3, r3, #8
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003750:	e065      	b.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10b      	bne.n	8003772 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003770:	e055      	b.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	2b02      	cmp	r3, #2
 8003778:	d151      	bne.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b22      	cmp	r3, #34	; 0x22
 800377e:	d10d      	bne.n	800379c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
}
 800379a:	e040      	b.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d015      	beq.n	80037d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b21      	cmp	r3, #33	; 0x21
 80037aa:	d112      	bne.n	80037d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037d0:	e025      	b.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d120      	bne.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b21      	cmp	r3, #33	; 0x21
 80037e0:	d11d      	bne.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fe36 	bl	800348a <HAL_I2C_MemTxCpltCallback>
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b22      	cmp	r3, #34	; 0x22
 8003838:	f040 80ac 	bne.w	8003994 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d921      	bls.n	800388e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b03      	cmp	r3, #3
 8003878:	f040 808c 	bne.w	8003994 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800388c:	e082      	b.n	8003994 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	2b02      	cmp	r3, #2
 8003894:	d075      	beq.n	8003982 <I2C_MasterReceive_RXNE+0x15c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <I2C_MasterReceive_RXNE+0x7c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d16f      	bne.n	8003982 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f001 fa5e 	bl	8004d64 <I2C_WaitOnSTOPRequestThroughIT>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d142      	bne.n	8003934 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d10a      	bne.n	800391e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fdc1 	bl	800349e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800391c:	e03a      	b.n	8003994 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2212      	movs	r2, #18
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fd76 	bl	800341e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003932:	e02f      	b.n	8003994 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003942:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fd99 	bl	80034b2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003980:	e008      	b.n	8003994 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	605a      	str	r2, [r3, #4]
}
 8003992:	e7ff      	b.n	8003994 <I2C_MasterReceive_RXNE+0x16e>
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039ea:	e0bd      	b.n	8003b68 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d129      	bne.n	8003a4a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00a      	beq.n	8003a22 <I2C_MasterReceive_BTF+0x86>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d007      	beq.n	8003a22 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a48:	e08e      	b.n	8003b68 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d176      	bne.n	8003b42 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d002      	beq.n	8003a60 <I2C_MasterReceive_BTF+0xc4>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d108      	bne.n	8003a72 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e019      	b.n	8003aa6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d002      	beq.n	8003a7e <I2C_MasterReceive_BTF+0xe2>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d108      	bne.n	8003a90 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e00a      	b.n	8003aa6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d007      	beq.n	8003aa6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b00:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d10a      	bne.n	8003b2c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fcba 	bl	800349e <HAL_I2C_MemRxCpltCallback>
}
 8003b2a:	e01d      	b.n	8003b68 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2212      	movs	r2, #18
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fc6f 	bl	800341e <HAL_I2C_MasterRxCpltCallback>
}
 8003b40:	e012      	b.n	8003b68 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d117      	bne.n	8003bb4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b9c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b9e:	e067      	b.n	8003c70 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
}
 8003bb2:	e05d      	b.n	8003c70 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bbc:	d133      	bne.n	8003c26 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b21      	cmp	r3, #33	; 0x21
 8003bc8:	d109      	bne.n	8003bde <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bda:	611a      	str	r2, [r3, #16]
 8003bdc:	e008      	b.n	8003bf0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <I2C_Master_SB+0x92>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d032      	beq.n	8003c70 <I2C_Master_SB+0x100>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d02d      	beq.n	8003c70 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c22:	605a      	str	r2, [r3, #4]
}
 8003c24:	e024      	b.n	8003c70 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	11db      	asrs	r3, r3, #7
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0306 	and.w	r3, r3, #6
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f063 030f 	orn	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]
}
 8003c4a:	e011      	b.n	8003c70 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10d      	bne.n	8003c70 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	11db      	asrs	r3, r3, #7
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0306 	and.w	r3, r3, #6
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f063 030e 	orn	r3, r3, #14
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <I2C_Master_ADD10+0x26>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <I2C_Master_ADD10+0x48>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	605a      	str	r2, [r3, #4]
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b091      	sub	sp, #68	; 0x44
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b22      	cmp	r3, #34	; 0x22
 8003cf8:	f040 8169 	bne.w	8003fce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <I2C_Master_ADDR+0x54>
 8003d04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d10b      	bne.n	8003d24 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	e160      	b.n	8003fe6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11d      	bne.n	8003d68 <I2C_Master_ADDR+0x98>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d34:	d118      	bne.n	8003d68 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50
 8003d66:	e13e      	b.n	8003fe6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e115      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 808a 	bne.w	8003eba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dac:	d137      	bne.n	8003e1e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d113      	bne.n	8003df6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	e0e7      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e0d3      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d02e      	beq.n	8003e82 <I2C_Master_ADDR+0x1b2>
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d02b      	beq.n	8003e82 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b12      	cmp	r3, #18
 8003e2e:	d102      	bne.n	8003e36 <I2C_Master_ADDR+0x166>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d125      	bne.n	8003e82 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d00e      	beq.n	8003e5a <I2C_Master_ADDR+0x18a>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d00b      	beq.n	8003e5a <I2C_Master_ADDR+0x18a>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d008      	beq.n	8003e5a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e007      	b.n	8003e6a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	e0a1      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e085      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d14d      	bne.n	8003f60 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d016      	beq.n	8003ef8 <I2C_Master_ADDR+0x228>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d013      	beq.n	8003ef8 <I2C_Master_ADDR+0x228>
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d010      	beq.n	8003ef8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e007      	b.n	8003f08 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d117      	bne.n	8003f48 <I2C_Master_ADDR+0x278>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f1e:	d00b      	beq.n	8003f38 <I2C_Master_ADDR+0x268>
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d008      	beq.n	8003f38 <I2C_Master_ADDR+0x268>
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d005      	beq.n	8003f38 <I2C_Master_ADDR+0x268>
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d002      	beq.n	8003f38 <I2C_Master_ADDR+0x268>
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d107      	bne.n	8003f48 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	e032      	b.n	8003fc6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d117      	bne.n	8003fb0 <I2C_Master_ADDR+0x2e0>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f86:	d00b      	beq.n	8003fa0 <I2C_Master_ADDR+0x2d0>
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d008      	beq.n	8003fa0 <I2C_Master_ADDR+0x2d0>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d005      	beq.n	8003fa0 <I2C_Master_ADDR+0x2d0>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d002      	beq.n	8003fa0 <I2C_Master_ADDR+0x2d0>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d107      	bne.n	8003fb0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fcc:	e00b      	b.n	8003fe6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	e7ff      	b.n	8003fe6 <I2C_Master_ADDR+0x316>
 8003fe6:	bf00      	nop
 8003fe8:	3744      	adds	r7, #68	; 0x44
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <I2C_SlaveTransmit_TXE+0x72>
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b29      	cmp	r3, #41	; 0x29
 800403e:	d111      	bne.n	8004064 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2221      	movs	r2, #33	; 0x21
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2228      	movs	r2, #40	; 0x28
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff f9e7 	bl	8003432 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d011      	beq.n	80040a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d02c      	beq.n	8004122 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d114      	bne.n	8004122 <I2C_SlaveReceive_RXNE+0x74>
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b2a      	cmp	r3, #42	; 0x2a
 80040fc:	d111      	bne.n	8004122 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2222      	movs	r2, #34	; 0x22
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2228      	movs	r2, #40	; 0x28
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff f992 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004188:	2b28      	cmp	r3, #40	; 0x28
 800418a:	d125      	bne.n	80041d8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	81bb      	strh	r3, [r7, #12]
 80041ba:	e002      	b.n	80041c2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041ca:	89ba      	ldrh	r2, [r7, #12]
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff f942 	bl	800345a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041d6:	e00e      	b.n	80041f6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800421e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d172      	bne.n	8004344 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b22      	cmp	r3, #34	; 0x22
 8004262:	d002      	beq.n	800426a <I2C_Slave_STOPF+0x6a>
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b2a      	cmp	r3, #42	; 0x2a
 8004268:	d135      	bne.n	80042d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f043 0204 	orr.w	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe f86a 	bl	800237c <HAL_DMA_GetState>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d049      	beq.n	8004342 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4a69      	ldr	r2, [pc, #420]	; (8004458 <I2C_Slave_STOPF+0x258>)
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd feb2 	bl	8002024 <HAL_DMA_Abort_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d03d      	beq.n	8004342 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042d4:	e035      	b.n	8004342 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004308:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe f834 	bl	800237c <HAL_DMA_GetState>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d014      	beq.n	8004344 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	4a4e      	ldr	r2, [pc, #312]	; (8004458 <I2C_Slave_STOPF+0x258>)
 8004320:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fe7c 	bl	8002024 <HAL_DMA_Abort_IT>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800433c:	4610      	mov	r0, r2
 800433e:	4798      	blx	r3
 8004340:	e000      	b.n	8004344 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004342:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03e      	beq.n	80043cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d112      	bne.n	8004382 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d112      	bne.n	80043b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f843 	bl	8004460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043da:	e039      	b.n	8004450 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b2a      	cmp	r3, #42	; 0x2a
 80043e0:	d109      	bne.n	80043f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2228      	movs	r2, #40	; 0x28
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff f828 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b28      	cmp	r3, #40	; 0x28
 8004400:	d111      	bne.n	8004426 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <I2C_Slave_STOPF+0x25c>)
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff f829 	bl	8003476 <HAL_I2C_ListenCpltCallback>
}
 8004424:	e014      	b.n	8004450 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	2b22      	cmp	r3, #34	; 0x22
 800442c:	d002      	beq.n	8004434 <I2C_Slave_STOPF+0x234>
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b22      	cmp	r3, #34	; 0x22
 8004432:	d10d      	bne.n	8004450 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe fffb 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	08004965 	.word	0x08004965
 800445c:	ffff0000 	.word	0xffff0000

08004460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d002      	beq.n	8004484 <I2C_ITError+0x24>
 800447e:	7bbb      	ldrb	r3, [r7, #14]
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d10a      	bne.n	800449a <I2C_ITError+0x3a>
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b22      	cmp	r3, #34	; 0x22
 8004488:	d107      	bne.n	800449a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044a0:	2b28      	cmp	r3, #40	; 0x28
 80044a2:	d107      	bne.n	80044b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2228      	movs	r2, #40	; 0x28
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044b2:	e015      	b.n	80044e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c2:	d00a      	beq.n	80044da <I2C_ITError+0x7a>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b60      	cmp	r3, #96	; 0x60
 80044c8:	d007      	beq.n	80044da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d162      	bne.n	80045b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d020      	beq.n	8004550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	4a6a      	ldr	r2, [pc, #424]	; (80046bc <I2C_ITError+0x25c>)
 8004514:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd fd82 	bl	8002024 <HAL_DMA_Abort_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8089 	beq.w	800463a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454a:	4610      	mov	r0, r2
 800454c:	4798      	blx	r3
 800454e:	e074      	b.n	800463a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	4a59      	ldr	r2, [pc, #356]	; (80046bc <I2C_ITError+0x25c>)
 8004556:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fd61 	bl	8002024 <HAL_DMA_Abort_IT>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d068      	beq.n	800463a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d10b      	bne.n	800458e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
 80045b4:	e041      	b.n	800463a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b60      	cmp	r3, #96	; 0x60
 80045c0:	d125      	bne.n	800460e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d10b      	bne.n	80045f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe ff5d 	bl	80034c6 <HAL_I2C_AbortCpltCallback>
 800460c:	e015      	b.n	800463a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d10b      	bne.n	8004634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fe ff3c 	bl	80034b2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d113      	bne.n	80046b4 <I2C_ITError+0x254>
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d110      	bne.n	80046b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <I2C_ITError+0x260>)
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe fee1 	bl	8003476 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	08004965 	.word	0x08004965
 80046c0:	ffff0000 	.word	0xffff0000

080046c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	460b      	mov	r3, r1
 80046d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d006      	beq.n	80046ee <I2C_MasterRequestWrite+0x2a>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d003      	beq.n	80046ee <I2C_MasterRequestWrite+0x2a>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e00b      	b.n	8004718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b12      	cmp	r3, #18
 8004706:	d107      	bne.n	8004718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9c5 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e035      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d108      	bne.n	8004768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e01b      	b.n	80047a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	11db      	asrs	r3, r3, #7
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f063 030f 	orn	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <I2C_MasterRequestWrite+0xfc>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f9eb 	bl	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e010      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4907      	ldr	r1, [pc, #28]	; (80047c4 <I2C_MasterRequestWrite+0x100>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f9db 	bl	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	00010008 	.word	0x00010008
 80047c4:	00010002 	.word	0x00010002

080047c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	460b      	mov	r3, r1
 80047d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d006      	beq.n	8004802 <I2C_MasterRequestRead+0x3a>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d003      	beq.n	8004802 <I2C_MasterRequestRead+0x3a>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004800:	d108      	bne.n	8004814 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e00b      	b.n	800482c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2b11      	cmp	r3, #17
 800481a:	d107      	bne.n	800482c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f93b 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	d103      	bne.n	800485c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e079      	b.n	8004954 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004868:	d108      	bne.n	800487c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	e05f      	b.n	800493c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	11db      	asrs	r3, r3, #7
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0306 	and.w	r3, r3, #6
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f063 030f 	orn	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4930      	ldr	r1, [pc, #192]	; (800495c <I2C_MasterRequestRead+0x194>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f961 	bl	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e054      	b.n	8004954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4929      	ldr	r1, [pc, #164]	; (8004960 <I2C_MasterRequestRead+0x198>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f951 	bl	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e044      	b.n	8004954 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8d9 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	d103      	bne.n	8004920 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e017      	b.n	8004954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004924:	897b      	ldrh	r3, [r7, #10]
 8004926:	11db      	asrs	r3, r3, #7
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0306 	and.w	r3, r3, #6
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f063 030e 	orn	r3, r3, #14
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <I2C_MasterRequestRead+0x198>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f90d 	bl	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010008 	.word	0x00010008
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800497e:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <I2C_DMAAbort+0x148>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	4a4a      	ldr	r2, [pc, #296]	; (8004ab0 <I2C_DMAAbort+0x14c>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0a1a      	lsrs	r2, r3, #8
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	00da      	lsls	r2, r3, #3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049aa:	e00a      	b.n	80049c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	d0ea      	beq.n	8004998 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	2200      	movs	r2, #0
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	2200      	movs	r2, #0
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a04:	2200      	movs	r2, #0
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d10e      	bne.n	8004a52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7fe fd3b 	bl	80034c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a50:	e027      	b.n	8004aa2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a58:	2b28      	cmp	r3, #40	; 0x28
 8004a5a:	d117      	bne.n	8004a8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2228      	movs	r2, #40	; 0x28
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a8a:	e007      	b.n	8004a9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a9c:	6978      	ldr	r0, [r7, #20]
 8004a9e:	f7fe fd08 	bl	80034b2 <HAL_I2C_ErrorCallback>
}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	14f8b589 	.word	0x14f8b589

08004ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac4:	e025      	b.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004acc:	d021      	beq.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fd f815 	bl	8001afc <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d116      	bne.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e023      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10d      	bne.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	e00c      	b.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d0b6      	beq.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b70:	e051      	b.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d123      	bne.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0204 	orr.w	r2, r3, #4
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e046      	b.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd0:	d021      	beq.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fc ff93 	bl	8001afc <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e020      	b.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10c      	bne.n	8004c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e00b      	b.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d18d      	bne.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6c:	e02d      	b.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f900 	bl	8004e74 <I2C_IsAcknowledgeFailed>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e02d      	b.n	8004cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d021      	beq.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fc ff39 	bl	8001afc <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d116      	bne.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e007      	b.n	8004cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d1ca      	bne.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cee:	e02d      	b.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f8bf 	bl	8004e74 <I2C_IsAcknowledgeFailed>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e02d      	b.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d06:	d021      	beq.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d08:	f7fc fef8 	bl	8001afc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d302      	bcc.n	8004d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d116      	bne.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e007      	b.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d1ca      	bne.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	0a1a      	lsrs	r2, r3, #8
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e008      	b.n	8004db4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db0:	d0e9      	beq.n	8004d86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	2000000c 	.word	0x2000000c
 8004dc4:	14f8b589 	.word	0x14f8b589

08004dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dd4:	e042      	b.n	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d119      	bne.n	8004e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0210 	mvn.w	r2, #16
 8004dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e029      	b.n	8004e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fc fe70 	bl	8001afc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d116      	bne.n	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e007      	b.n	8004e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d1b5      	bne.n	8004dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d11b      	bne.n	8004ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ee2:	d103      	bne.n	8004eec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004eea:	e007      	b.n	8004efc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ef4:	d102      	bne.n	8004efc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2208      	movs	r2, #8
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e267      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d075      	beq.n	8005012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f26:	4b88      	ldr	r3, [pc, #544]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00c      	beq.n	8004f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f32:	4b85      	ldr	r3, [pc, #532]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d112      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3e:	4b82      	ldr	r3, [pc, #520]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f4a:	d10b      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	4b7e      	ldr	r3, [pc, #504]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05b      	beq.n	8005010 <HAL_RCC_OscConfig+0x108>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d157      	bne.n	8005010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e242      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d106      	bne.n	8004f7c <HAL_RCC_OscConfig+0x74>
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a75      	ldr	r2, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e01d      	b.n	8004fb8 <HAL_RCC_OscConfig+0xb0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x98>
 8004f86:	4b70      	ldr	r3, [pc, #448]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6f      	ldr	r2, [pc, #444]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a6c      	ldr	r2, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCC_OscConfig+0xb0>
 8004fa0:	4b69      	ldr	r3, [pc, #420]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a68      	ldr	r2, [pc, #416]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b66      	ldr	r3, [pc, #408]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a65      	ldr	r2, [pc, #404]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fd9c 	bl	8001afc <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fc fd98 	bl	8001afc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e207      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0xc0>
 8004fe6:	e014      	b.n	8005012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7fc fd88 	bl	8001afc <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7fc fd84 	bl	8001afc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e1f3      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005002:	4b51      	ldr	r3, [pc, #324]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0xe8>
 800500e:	e000      	b.n	8005012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d063      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005032:	2b08      	cmp	r3, #8
 8005034:	d11c      	bne.n	8005070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005036:	4b44      	ldr	r3, [pc, #272]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_RCC_OscConfig+0x152>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d001      	beq.n	800505a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e1c7      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4937      	ldr	r1, [pc, #220]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	e03a      	b.n	80050e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005078:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_RCC_OscConfig+0x244>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fc fd3d 	bl	8001afc <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005086:	f7fc fd39 	bl	8001afc <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1a8      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4925      	ldr	r1, [pc, #148]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]
 80050b8:	e015      	b.n	80050e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x244>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc fd1c 	bl	8001afc <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fc fd18 	bl	8001afc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e187      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d036      	beq.n	8005160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <HAL_RCC_OscConfig+0x248>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc fcfc 	bl	8001afc <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005108:	f7fc fcf8 	bl	8001afc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e167      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_OscConfig+0x240>)
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x200>
 8005126:	e01b      	b.n	8005160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_OscConfig+0x248>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512e:	f7fc fce5 	bl	8001afc <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	e00e      	b.n	8005154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005136:	f7fc fce1 	bl	8001afc <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d907      	bls.n	8005154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e150      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
 8005148:	40023800 	.word	0x40023800
 800514c:	42470000 	.word	0x42470000
 8005150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	4b88      	ldr	r3, [pc, #544]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ea      	bne.n	8005136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8097 	beq.w	800529c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005172:	4b81      	ldr	r3, [pc, #516]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	4b7d      	ldr	r3, [pc, #500]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a7c      	ldr	r2, [pc, #496]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
 800518e:	4b7a      	ldr	r3, [pc, #488]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b77      	ldr	r3, [pc, #476]	; (800537c <HAL_RCC_OscConfig+0x474>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d118      	bne.n	80051dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051aa:	4b74      	ldr	r3, [pc, #464]	; (800537c <HAL_RCC_OscConfig+0x474>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a73      	ldr	r2, [pc, #460]	; (800537c <HAL_RCC_OscConfig+0x474>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b6:	f7fc fca1 	bl	8001afc <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7fc fc9d 	bl	8001afc <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e10c      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0x474>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x2ea>
 80051e4:	4b64      	ldr	r3, [pc, #400]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4a63      	ldr	r2, [pc, #396]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x324>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x30c>
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4a5e      	ldr	r2, [pc, #376]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	6713      	str	r3, [r2, #112]	; 0x70
 8005206:	4b5c      	ldr	r3, [pc, #368]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a5b      	ldr	r2, [pc, #364]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x324>
 8005214:	4b58      	ldr	r3, [pc, #352]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	4a57      	ldr	r2, [pc, #348]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6713      	str	r3, [r2, #112]	; 0x70
 8005220:	4b55      	ldr	r3, [pc, #340]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a54      	ldr	r2, [pc, #336]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005226:	f023 0304 	bic.w	r3, r3, #4
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d015      	beq.n	8005260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fc fc62 	bl	8001afc <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fc fc5e 	bl	8001afc <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0cb      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	4b49      	ldr	r3, [pc, #292]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ee      	beq.n	800523c <HAL_RCC_OscConfig+0x334>
 800525e:	e014      	b.n	800528a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005260:	f7fc fc4c 	bl	8001afc <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fc fc48 	bl	8001afc <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0b5      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527e:	4b3e      	ldr	r3, [pc, #248]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ee      	bne.n	8005268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b39      	ldr	r3, [pc, #228]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	4a38      	ldr	r2, [pc, #224]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a1 	beq.w	80053e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052a6:	4b34      	ldr	r3, [pc, #208]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d05c      	beq.n	800536c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d141      	bne.n	800533e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_OscConfig+0x478>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc fc1c 	bl	8001afc <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fc fc18 	bl	8001afc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e087      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b27      	ldr	r3, [pc, #156]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	3b01      	subs	r3, #1
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	491b      	ldr	r1, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005310:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x478>)
 8005312:	2201      	movs	r2, #1
 8005314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005316:	f7fc fbf1 	bl	8001afc <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531e:	f7fc fbed 	bl	8001afc <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e05c      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x416>
 800533c:	e054      	b.n	80053e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <HAL_RCC_OscConfig+0x478>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fc fbda 	bl	8001afc <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534c:	f7fc fbd6 	bl	8001afc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e045      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_OscConfig+0x470>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x444>
 800536a:	e03d      	b.n	80053e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e038      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
 8005378:	40023800 	.word	0x40023800
 800537c:	40007000 	.word	0x40007000
 8005380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d028      	beq.n	80053e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d121      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d11a      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053bc:	4293      	cmp	r3, r2
 80053be:	d111      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	3b01      	subs	r3, #1
 80053ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800

080053f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0cc      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800540c:	4b68      	ldr	r3, [pc, #416]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d90c      	bls.n	8005434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b63      	ldr	r3, [pc, #396]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0b8      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800544c:	4b59      	ldr	r3, [pc, #356]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4a58      	ldr	r2, [pc, #352]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005464:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a52      	ldr	r2, [pc, #328]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800546e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005470:	4b50      	ldr	r3, [pc, #320]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	494d      	ldr	r1, [pc, #308]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d044      	beq.n	8005518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	4b47      	ldr	r3, [pc, #284]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d119      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07f      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d003      	beq.n	80054b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d107      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b6:	4b3f      	ldr	r3, [pc, #252]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e06f      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c6:	4b3b      	ldr	r3, [pc, #236]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e067      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054d6:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f023 0203 	bic.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4934      	ldr	r1, [pc, #208]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054e8:	f7fc fb08 	bl	8001afc <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f0:	f7fc fb04 	bl	8001afc <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e04f      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 020c 	and.w	r2, r3, #12
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	429a      	cmp	r2, r3
 8005516:	d1eb      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d20c      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e032      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4916      	ldr	r1, [pc, #88]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	490e      	ldr	r1, [pc, #56]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800557e:	f000 f821 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8005582:	4602      	mov	r2, r0
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	490a      	ldr	r1, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005590:	5ccb      	ldrb	r3, [r1, r3]
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_RCC_ClockConfig+0x1c8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fc fa68 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023c00 	.word	0x40023c00
 80055b4:	40023800 	.word	0x40023800
 80055b8:	0800a364 	.word	0x0800a364
 80055bc:	2000000c 	.word	0x2000000c
 80055c0:	20000010 	.word	0x20000010

080055c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b094      	sub	sp, #80	; 0x50
 80055ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	647b      	str	r3, [r7, #68]	; 0x44
 80055d0:	2300      	movs	r3, #0
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d4:	2300      	movs	r3, #0
 80055d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055dc:	4b79      	ldr	r3, [pc, #484]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d00d      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x40>
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	f200 80e1 	bhi.w	80057b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0x34>
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d003      	beq.n	80055fe <HAL_RCC_GetSysClockFreq+0x3a>
 80055f6:	e0db      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f8:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80055fc:	e0db      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055fe:	4b73      	ldr	r3, [pc, #460]	; (80057cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005602:	e0d8      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005604:	4b6f      	ldr	r3, [pc, #444]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800560e:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d063      	beq.n	80056e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561a:	4b6a      	ldr	r3, [pc, #424]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	099b      	lsrs	r3, r3, #6
 8005620:	2200      	movs	r2, #0
 8005622:	63bb      	str	r3, [r7, #56]	; 0x38
 8005624:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
 800562e:	2300      	movs	r3, #0
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
 8005632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	f04f 0000 	mov.w	r0, #0
 800563e:	f04f 0100 	mov.w	r1, #0
 8005642:	0159      	lsls	r1, r3, #5
 8005644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005648:	0150      	lsls	r0, r2, #5
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4621      	mov	r1, r4
 8005650:	1a51      	subs	r1, r2, r1
 8005652:	6139      	str	r1, [r7, #16]
 8005654:	4629      	mov	r1, r5
 8005656:	eb63 0301 	sbc.w	r3, r3, r1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005668:	4659      	mov	r1, fp
 800566a:	018b      	lsls	r3, r1, #6
 800566c:	4651      	mov	r1, sl
 800566e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005672:	4651      	mov	r1, sl
 8005674:	018a      	lsls	r2, r1, #6
 8005676:	4651      	mov	r1, sl
 8005678:	ebb2 0801 	subs.w	r8, r2, r1
 800567c:	4659      	mov	r1, fp
 800567e:	eb63 0901 	sbc.w	r9, r3, r1
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800568e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	4623      	mov	r3, r4
 800569c:	eb18 0303 	adds.w	r3, r8, r3
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	462b      	mov	r3, r5
 80056a4:	eb49 0303 	adc.w	r3, r9, r3
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056b6:	4629      	mov	r1, r5
 80056b8:	024b      	lsls	r3, r1, #9
 80056ba:	4621      	mov	r1, r4
 80056bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056c0:	4621      	mov	r1, r4
 80056c2:	024a      	lsls	r2, r1, #9
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ca:	2200      	movs	r2, #0
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d4:	f7fb fac0 	bl	8000c58 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4613      	mov	r3, r2
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e0:	e058      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e2:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	2200      	movs	r2, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	4611      	mov	r1, r2
 80056ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056f2:	623b      	str	r3, [r7, #32]
 80056f4:	2300      	movs	r3, #0
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	f04f 0000 	mov.w	r0, #0
 8005704:	f04f 0100 	mov.w	r1, #0
 8005708:	0159      	lsls	r1, r3, #5
 800570a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800570e:	0150      	lsls	r0, r2, #5
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4641      	mov	r1, r8
 8005716:	ebb2 0a01 	subs.w	sl, r2, r1
 800571a:	4649      	mov	r1, r9
 800571c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800572c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005734:	ebb2 040a 	subs.w	r4, r2, sl
 8005738:	eb63 050b 	sbc.w	r5, r3, fp
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	00eb      	lsls	r3, r5, #3
 8005746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800574a:	00e2      	lsls	r2, r4, #3
 800574c:	4614      	mov	r4, r2
 800574e:	461d      	mov	r5, r3
 8005750:	4643      	mov	r3, r8
 8005752:	18e3      	adds	r3, r4, r3
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	464b      	mov	r3, r9
 8005758:	eb45 0303 	adc.w	r3, r5, r3
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800576a:	4629      	mov	r1, r5
 800576c:	028b      	lsls	r3, r1, #10
 800576e:	4621      	mov	r1, r4
 8005770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005774:	4621      	mov	r1, r4
 8005776:	028a      	lsls	r2, r1, #10
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577e:	2200      	movs	r2, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	61fa      	str	r2, [r7, #28]
 8005784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005788:	f7fb fa66 	bl	8000c58 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	3301      	adds	r3, #1
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ae:	e002      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3750      	adds	r7, #80	; 0x50
 80057bc:	46bd      	mov	sp, r7
 80057be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	00f42400 	.word	0x00f42400
 80057cc:	007a1200 	.word	0x007a1200

080057d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	2000000c 	.word	0x2000000c

080057e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057ec:	f7ff fff0 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0a9b      	lsrs	r3, r3, #10
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	0800a374 	.word	0x0800a374

08005810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005814:	f7ff ffdc 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	0b5b      	lsrs	r3, r3, #13
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4903      	ldr	r1, [pc, #12]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40023800 	.word	0x40023800
 8005834:	0800a374 	.word	0x0800a374

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e041      	b.n	80058ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb feae 	bl	80015c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 fb3e 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e044      	b.n	800597a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <HAL_TIM_Base_Start_IT+0xb0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d013      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1a      	ldr	r2, [pc, #104]	; (800598c <HAL_TIM_Base_Start_IT+0xb4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_TIM_Base_Start_IT+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a17      	ldr	r2, [pc, #92]	; (8005994 <HAL_TIM_Base_Start_IT+0xbc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a16      	ldr	r2, [pc, #88]	; (8005998 <HAL_TIM_Base_Start_IT+0xc0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d010      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e007      	b.n	8005978 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000

0800599c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e041      	b.n	8005a32 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f839 	bl	8005a3a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f000 fa8c 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d122      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d11b      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0202 	mvn.w	r2, #2
 8005a7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fa12 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005a96:	e005      	b.n	8005aa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fa04 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa15 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d122      	bne.n	8005afe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d11b      	bne.n	8005afe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0204 	mvn.w	r2, #4
 8005ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f9e8 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005aea:	e005      	b.n	8005af8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9da 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9eb 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d122      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d11b      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f06f 0208 	mvn.w	r2, #8
 8005b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2204      	movs	r2, #4
 8005b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f9be 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005b3e:	e005      	b.n	8005b4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f9b0 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9c1 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d122      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d11b      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0210 	mvn.w	r2, #16
 8005b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f994 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005b92:	e005      	b.n	8005ba0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f986 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f997 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0201 	mvn.w	r2, #1
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fb f9c1 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fc9b 	bl	8006534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d10e      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f95c 	bl	8005ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0220 	mvn.w	r2, #32
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fc65 	bl	8006520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e048      	b.n	8005d10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d839      	bhi.n	8005d00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cc9 	.word	0x08005cc9
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005d01 	.word	0x08005d01
 8005ca0:	08005d01 	.word	0x08005d01
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005d01 	.word	0x08005d01
 8005cac:	08005d01 	.word	0x08005d01
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d01 	.word	0x08005d01
 8005cc0:	08005d01 	.word	0x08005d01
 8005cc4:	08005cf3 	.word	0x08005cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f992 	bl	8005ff8 <TIM_OC1_SetConfig>
      break;
 8005cd4:	e017      	b.n	8005d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 f9f1 	bl	80060c4 <TIM_OC2_SetConfig>
      break;
 8005ce2:	e010      	b.n	8005d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fa56 	bl	800619c <TIM_OC3_SetConfig>
      break;
 8005cf0:	e009      	b.n	8005d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fab9 	bl	8006270 <TIM_OC4_SetConfig>
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_ConfigClockSource+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0b4      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6c:	d03e      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0xd4>
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	f200 8087 	bhi.w	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	f000 8086 	beq.w	8005e8a <HAL_TIM_ConfigClockSource+0x172>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d87f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d01a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xa6>
 8005d88:	2b70      	cmp	r3, #112	; 0x70
 8005d8a:	d87b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d050      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x11a>
 8005d90:	2b60      	cmp	r3, #96	; 0x60
 8005d92:	d877      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d03c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xfa>
 8005d98:	2b50      	cmp	r3, #80	; 0x50
 8005d9a:	d873      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d058      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x13a>
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d86f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d064      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d86b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d060      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d867      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d05a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	e062      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f000 fb19 	bl	8006404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
      break;
 8005dea:	e04f      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f000 fb02 	bl	8006404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0e:	609a      	str	r2, [r3, #8]
      break;
 8005e10:	e03c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fa76 	bl	8006310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2150      	movs	r1, #80	; 0x50
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 facf 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e30:	e02c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fa95 	bl	800636e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2160      	movs	r1, #96	; 0x60
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fabf 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e50:	e01c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 fa56 	bl	8006310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2140      	movs	r1, #64	; 0x40
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 faaf 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e70:	e00c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 faa6 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e82:	e003      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a34      	ldr	r2, [pc, #208]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a30      	ldr	r2, [pc, #192]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2f      	ldr	r2, [pc, #188]	; (8005fe8 <TIM_Base_SetConfig+0xf0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01b      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d017      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00f      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <TIM_Base_SetConfig+0xf0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <TIM_Base_SetConfig+0xf4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <TIM_Base_SetConfig+0xf8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <TIM_Base_SetConfig+0xfc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d108      	bne.n	8005f94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	615a      	str	r2, [r3, #20]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800

08005ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f023 0201 	bic.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0302 	bic.w	r3, r3, #2
 8006040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <TIM_OC1_SetConfig+0xc8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10c      	bne.n	800606e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0308 	bic.w	r3, r3, #8
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <TIM_OC1_SetConfig+0xc8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000

080060c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0210 	bic.w	r2, r3, #16
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0320 	bic.w	r3, r3, #32
 800610e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <TIM_OC2_SetConfig+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10d      	bne.n	8006140 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <TIM_OC2_SetConfig+0xd4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800614e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000

0800619c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_OC3_SetConfig+0xd0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10d      	bne.n	8006216 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_OC3_SetConfig+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40010000 	.word	0x40010000

08006270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	031b      	lsls	r3, r3, #12
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <TIM_OC4_SetConfig+0x9c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d109      	bne.n	80062e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000

08006310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 030a 	bic.w	r3, r3, #10
 800634c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f023 0210 	bic.w	r2, r3, #16
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f043 0307 	orr.w	r3, r3, #7
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800641e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	431a      	orrs	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e050      	b.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d018      	beq.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d013      	beq.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00e      	beq.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d009      	beq.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a13      	ldr	r2, [pc, #76]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10c      	bne.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40014000 	.word	0x40014000

08006520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e03f      	b.n	80065da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fb f84c 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2224      	movs	r2, #36	; 0x24
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fdd1 	bl	8007134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d165      	bne.n	80066ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_UART_Transmit_DMA+0x26>
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e05e      	b.n	80066cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_UART_Transmit_DMA+0x38>
 8006618:	2302      	movs	r3, #2
 800661a:	e057      	b.n	80066cc <HAL_UART_Transmit_DMA+0xe8>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2221      	movs	r2, #33	; 0x21
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	4a22      	ldr	r2, [pc, #136]	; (80066d4 <HAL_UART_Transmit_DMA+0xf0>)
 800664a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <HAL_UART_Transmit_DMA+0xf4>)
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	4a20      	ldr	r2, [pc, #128]	; (80066dc <HAL_UART_Transmit_DMA+0xf8>)
 800665a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	2200      	movs	r2, #0
 8006662:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3304      	adds	r3, #4
 8006678:	461a      	mov	r2, r3
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	f7fb fc0a 	bl	8001e94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006688:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	617b      	str	r3, [r7, #20]
   return(result);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b2:	627a      	str	r2, [r7, #36]	; 0x24
 80066b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6a39      	ldr	r1, [r7, #32]
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	08006c65 	.word	0x08006c65
 80066d8:	08006cff 	.word	0x08006cff
 80066dc:	08006d1b 	.word	0x08006d1b

080066e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b0ba      	sub	sp, #232	; 0xe8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006706:	2300      	movs	r3, #0
 8006708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800671e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_UART_IRQHandler+0x66>
 8006732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fc3c 	bl	8006fbc <UART_Receive_IT>
      return;
 8006744:	e256      	b.n	8006bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80de 	beq.w	800690c <HAL_UART_IRQHandler+0x22c>
 8006750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80d1 	beq.w	800690c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_UART_IRQHandler+0xae>
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f043 0201 	orr.w	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_UART_IRQHandler+0xd2>
 800679a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f043 0202 	orr.w	r2, r3, #2
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <HAL_UART_IRQHandler+0xf6>
 80067be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f043 0204 	orr.w	r2, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d011      	beq.n	8006806 <HAL_UART_IRQHandler+0x126>
 80067e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d105      	bne.n	80067fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f043 0208 	orr.w	r2, r3, #8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 81ed 	beq.w	8006bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_UART_IRQHandler+0x14e>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fbc7 	bl	8006fbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <HAL_UART_IRQHandler+0x17a>
 8006852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d04f      	beq.n	80068fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 facf 	bl	8006dfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d141      	bne.n	80068f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800689a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800689e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1d9      	bne.n	800686e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d013      	beq.n	80068ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	4a7d      	ldr	r2, [pc, #500]	; (8006abc <HAL_UART_IRQHandler+0x3dc>)
 80068c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fb fba8 	bl	8002024 <HAL_DMA_Abort_IT>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	e00e      	b.n	8006908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f9a4 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	e00a      	b.n	8006908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9a0 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	e006      	b.n	8006908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f99c 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006906:	e170      	b.n	8006bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006908:	bf00      	nop
    return;
 800690a:	e16e      	b.n	8006bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	2b01      	cmp	r3, #1
 8006912:	f040 814a 	bne.w	8006baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8143 	beq.w	8006baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 813c 	beq.w	8006baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	f040 80b4 	bne.w	8006ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8140 	beq.w	8006bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006976:	429a      	cmp	r2, r3
 8006978:	f080 8139 	bcs.w	8006bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698e:	f000 8088 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1d9      	bne.n	8006992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3314      	adds	r3, #20
 80069fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e1      	bne.n	80069de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e3      	bne.n	8006a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e3      	bne.n	8006a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fb fa51 	bl	8001f44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8ca 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ab8:	e099      	b.n	8006bee <HAL_UART_IRQHandler+0x50e>
 8006aba:	bf00      	nop
 8006abc:	08006ec5 	.word	0x08006ec5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 808b 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8086 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e3      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b42:	633a      	str	r2, [r7, #48]	; 0x30
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0310 	bic.w	r3, r3, #16
 8006b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b88:	61fa      	str	r2, [r7, #28]
 8006b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	69b9      	ldr	r1, [r7, #24]
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	617b      	str	r3, [r7, #20]
   return(result);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e3      	bne.n	8006b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f852 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ba8:	e023      	b.n	8006bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <HAL_UART_IRQHandler+0x4ea>
 8006bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f992 	bl	8006eec <UART_Transmit_IT>
    return;
 8006bc8:	e014      	b.n	8006bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x514>
 8006bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9d2 	bl	8006f8c <UART_EndTransmit_IT>
    return;
 8006be8:	e004      	b.n	8006bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bf2:	bf00      	nop
  }
}
 8006bf4:	37e8      	adds	r7, #232	; 0xe8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop

08006bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b090      	sub	sp, #64	; 0x40
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d137      	bne.n	8006cf0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	2200      	movs	r2, #0
 8006c84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	623b      	str	r3, [r7, #32]
   return(result);
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cda:	61fa      	str	r2, [r7, #28]
 8006cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	69b9      	ldr	r1, [r7, #24]
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cee:	e002      	b.n	8006cf6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006cf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006cf2:	f7ff ff83 	bl	8006bfc <HAL_UART_TxCpltCallback>
}
 8006cf6:	bf00      	nop
 8006cf8:	3740      	adds	r7, #64	; 0x40
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff ff7f 	bl	8006c10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b21      	cmp	r3, #33	; 0x21
 8006d4c:	d108      	bne.n	8006d60 <UART_DMAError+0x46>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d5a:	68b8      	ldr	r0, [r7, #8]
 8006d5c:	f000 f827 	bl	8006dae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	bf0c      	ite	eq
 8006d6e:	2301      	moveq	r3, #1
 8006d70:	2300      	movne	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b22      	cmp	r3, #34	; 0x22
 8006d80:	d108      	bne.n	8006d94 <UART_DMAError+0x7a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d8e:	68b8      	ldr	r0, [r7, #8]
 8006d90:	f000 f835 	bl	8006dfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	f043 0210 	orr.w	r2, r3, #16
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f7ff ff49 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b089      	sub	sp, #36	; 0x24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	61ba      	str	r2, [r7, #24]
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6979      	ldr	r1, [r7, #20]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	613b      	str	r3, [r7, #16]
   return(result);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e5      	bne.n	8006db6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006df2:	bf00      	nop
 8006df4:	3724      	adds	r7, #36	; 0x24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b095      	sub	sp, #84	; 0x54
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e26:	643a      	str	r2, [r7, #64]	; 0x40
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d119      	bne.n	8006eaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 0310 	bic.w	r3, r3, #16
 8006e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e96:	61ba      	str	r2, [r7, #24]
 8006e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e5      	bne.n	8006e76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eb8:	bf00      	nop
 8006eba:	3754      	adds	r7, #84	; 0x54
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff feaa 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b21      	cmp	r3, #33	; 0x21
 8006efe:	d13e      	bne.n	8006f7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f08:	d114      	bne.n	8006f34 <UART_Transmit_IT+0x48>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d110      	bne.n	8006f34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	1c9a      	adds	r2, r3, #2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]
 8006f32:	e008      	b.n	8006f46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6211      	str	r1, [r2, #32]
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4619      	mov	r1, r3
 8006f54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fe25 	bl	8006bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	; 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b22      	cmp	r3, #34	; 0x22
 8006fce:	f040 80ab 	bne.w	8007128 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d117      	bne.n	800700c <UART_Receive_IT+0x50>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d113      	bne.n	800700c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	629a      	str	r2, [r3, #40]	; 0x28
 800700a:	e026      	b.n	800705a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d007      	beq.n	8007030 <UART_Receive_IT+0x74>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <UART_Receive_IT+0x82>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e008      	b.n	8007050 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800706a:	2b00      	cmp	r3, #0
 800706c:	d15a      	bne.n	8007124 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0220 	bic.w	r2, r2, #32
 800707c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800708c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d135      	bne.n	800711a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	613b      	str	r3, [r7, #16]
   return(result);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d4:	623a      	str	r2, [r7, #32]
 80070d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	69f9      	ldr	r1, [r7, #28]
 80070da:	6a3a      	ldr	r2, [r7, #32]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e5      	bne.n	80070b4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	d10a      	bne.n	800710c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fd9a 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
 8007118:	e002      	b.n	8007120 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fd82 	bl	8006c24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	e002      	b.n	800712a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3730      	adds	r7, #48	; 0x30
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007138:	b0c0      	sub	sp, #256	; 0x100
 800713a:	af00      	add	r7, sp, #0
 800713c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	68d9      	ldr	r1, [r3, #12]
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	ea40 0301 	orr.w	r3, r0, r1
 800715c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	431a      	orrs	r2, r3
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800718c:	f021 010c 	bic.w	r1, r1, #12
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800719a:	430b      	orrs	r3, r1
 800719c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ae:	6999      	ldr	r1, [r3, #24]
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	ea40 0301 	orr.w	r3, r0, r1
 80071ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b8f      	ldr	r3, [pc, #572]	; (8007400 <UART_SetConfig+0x2cc>)
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d005      	beq.n	80071d4 <UART_SetConfig+0xa0>
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b8d      	ldr	r3, [pc, #564]	; (8007404 <UART_SetConfig+0x2d0>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7fe fb1c 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 80071d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071dc:	e003      	b.n	80071e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071de:	f7fe fb03 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 80071e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f0:	f040 810c 	bne.w	800740c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	1891      	adds	r1, r2, r2
 800720c:	65b9      	str	r1, [r7, #88]	; 0x58
 800720e:	415b      	adcs	r3, r3
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007216:	4621      	mov	r1, r4
 8007218:	eb12 0801 	adds.w	r8, r2, r1
 800721c:	4629      	mov	r1, r5
 800721e:	eb43 0901 	adc.w	r9, r3, r1
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007236:	4690      	mov	r8, r2
 8007238:	4699      	mov	r9, r3
 800723a:	4623      	mov	r3, r4
 800723c:	eb18 0303 	adds.w	r3, r8, r3
 8007240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007244:	462b      	mov	r3, r5
 8007246:	eb49 0303 	adc.w	r3, r9, r3
 800724a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800725a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800725e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007262:	460b      	mov	r3, r1
 8007264:	18db      	adds	r3, r3, r3
 8007266:	653b      	str	r3, [r7, #80]	; 0x50
 8007268:	4613      	mov	r3, r2
 800726a:	eb42 0303 	adc.w	r3, r2, r3
 800726e:	657b      	str	r3, [r7, #84]	; 0x54
 8007270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007278:	f7f9 fcee 	bl	8000c58 <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4b61      	ldr	r3, [pc, #388]	; (8007408 <UART_SetConfig+0x2d4>)
 8007282:	fba3 2302 	umull	r2, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	011c      	lsls	r4, r3, #4
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80072a4:	415b      	adcs	r3, r3
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072ac:	4641      	mov	r1, r8
 80072ae:	eb12 0a01 	adds.w	sl, r2, r1
 80072b2:	4649      	mov	r1, r9
 80072b4:	eb43 0b01 	adc.w	fp, r3, r1
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072cc:	4692      	mov	sl, r2
 80072ce:	469b      	mov	fp, r3
 80072d0:	4643      	mov	r3, r8
 80072d2:	eb1a 0303 	adds.w	r3, sl, r3
 80072d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072da:	464b      	mov	r3, r9
 80072dc:	eb4b 0303 	adc.w	r3, fp, r3
 80072e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072f8:	460b      	mov	r3, r1
 80072fa:	18db      	adds	r3, r3, r3
 80072fc:	643b      	str	r3, [r7, #64]	; 0x40
 80072fe:	4613      	mov	r3, r2
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	647b      	str	r3, [r7, #68]	; 0x44
 8007306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800730a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800730e:	f7f9 fca3 	bl	8000c58 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4611      	mov	r1, r2
 8007318:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <UART_SetConfig+0x2d4>)
 800731a:	fba3 2301 	umull	r2, r3, r3, r1
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2264      	movs	r2, #100	; 0x64
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	1acb      	subs	r3, r1, r3
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800732e:	4b36      	ldr	r3, [pc, #216]	; (8007408 <UART_SetConfig+0x2d4>)
 8007330:	fba3 2302 	umull	r2, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733c:	441c      	add	r4, r3
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800734c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	1891      	adds	r1, r2, r2
 8007356:	63b9      	str	r1, [r7, #56]	; 0x38
 8007358:	415b      	adcs	r3, r3
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007360:	4641      	mov	r1, r8
 8007362:	1851      	adds	r1, r2, r1
 8007364:	6339      	str	r1, [r7, #48]	; 0x30
 8007366:	4649      	mov	r1, r9
 8007368:	414b      	adcs	r3, r1
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007378:	4659      	mov	r1, fp
 800737a:	00cb      	lsls	r3, r1, #3
 800737c:	4651      	mov	r1, sl
 800737e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007382:	4651      	mov	r1, sl
 8007384:	00ca      	lsls	r2, r1, #3
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	4603      	mov	r3, r0
 800738c:	4642      	mov	r2, r8
 800738e:	189b      	adds	r3, r3, r2
 8007390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007394:	464b      	mov	r3, r9
 8007396:	460a      	mov	r2, r1
 8007398:	eb42 0303 	adc.w	r3, r2, r3
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073b4:	460b      	mov	r3, r1
 80073b6:	18db      	adds	r3, r3, r3
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ba:	4613      	mov	r3, r2
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ca:	f7f9 fc45 	bl	8000c58 <__aeabi_uldivmod>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <UART_SetConfig+0x2d4>)
 80073d4:	fba3 1302 	umull	r1, r3, r3, r2
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	2164      	movs	r1, #100	; 0x64
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	3332      	adds	r3, #50	; 0x32
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <UART_SetConfig+0x2d4>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	f003 0207 	and.w	r2, r3, #7
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4422      	add	r2, r4
 80073fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073fc:	e106      	b.n	800760c <UART_SetConfig+0x4d8>
 80073fe:	bf00      	nop
 8007400:	40011000 	.word	0x40011000
 8007404:	40011400 	.word	0x40011400
 8007408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800740c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800741a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	1891      	adds	r1, r2, r2
 8007424:	6239      	str	r1, [r7, #32]
 8007426:	415b      	adcs	r3, r3
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
 800742a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800742e:	4641      	mov	r1, r8
 8007430:	1854      	adds	r4, r2, r1
 8007432:	4649      	mov	r1, r9
 8007434:	eb43 0501 	adc.w	r5, r3, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	00eb      	lsls	r3, r5, #3
 8007442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007446:	00e2      	lsls	r2, r4, #3
 8007448:	4614      	mov	r4, r2
 800744a:	461d      	mov	r5, r3
 800744c:	4643      	mov	r3, r8
 800744e:	18e3      	adds	r3, r4, r3
 8007450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007454:	464b      	mov	r3, r9
 8007456:	eb45 0303 	adc.w	r3, r5, r3
 800745a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800746a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800747a:	4629      	mov	r1, r5
 800747c:	008b      	lsls	r3, r1, #2
 800747e:	4621      	mov	r1, r4
 8007480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007484:	4621      	mov	r1, r4
 8007486:	008a      	lsls	r2, r1, #2
 8007488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800748c:	f7f9 fbe4 	bl	8000c58 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b60      	ldr	r3, [pc, #384]	; (8007618 <UART_SetConfig+0x4e4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	61b9      	str	r1, [r7, #24]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6139      	str	r1, [r7, #16]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074f4:	464b      	mov	r3, r9
 80074f6:	460a      	mov	r2, r1
 80074f8:	eb42 0303 	adc.w	r3, r2, r3
 80074fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	67bb      	str	r3, [r7, #120]	; 0x78
 800750a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007518:	4649      	mov	r1, r9
 800751a:	008b      	lsls	r3, r1, #2
 800751c:	4641      	mov	r1, r8
 800751e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007522:	4641      	mov	r1, r8
 8007524:	008a      	lsls	r2, r1, #2
 8007526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800752a:	f7f9 fb95 	bl	8000c58 <__aeabi_uldivmod>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4611      	mov	r1, r2
 8007534:	4b38      	ldr	r3, [pc, #224]	; (8007618 <UART_SetConfig+0x4e4>)
 8007536:	fba3 2301 	umull	r2, r3, r3, r1
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	2264      	movs	r2, #100	; 0x64
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	1acb      	subs	r3, r1, r3
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	3332      	adds	r3, #50	; 0x32
 8007548:	4a33      	ldr	r2, [pc, #204]	; (8007618 <UART_SetConfig+0x4e4>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007554:	441c      	add	r4, r3
 8007556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800755a:	2200      	movs	r2, #0
 800755c:	673b      	str	r3, [r7, #112]	; 0x70
 800755e:	677a      	str	r2, [r7, #116]	; 0x74
 8007560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	415b      	adcs	r3, r3
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a6:	464b      	mov	r3, r9
 80075a8:	460a      	mov	r2, r1
 80075aa:	eb42 0303 	adc.w	r3, r2, r3
 80075ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	663b      	str	r3, [r7, #96]	; 0x60
 80075ba:	667a      	str	r2, [r7, #100]	; 0x64
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075c8:	4649      	mov	r1, r9
 80075ca:	008b      	lsls	r3, r1, #2
 80075cc:	4641      	mov	r1, r8
 80075ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d2:	4641      	mov	r1, r8
 80075d4:	008a      	lsls	r2, r1, #2
 80075d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075da:	f7f9 fb3d 	bl	8000c58 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <UART_SetConfig+0x4e4>)
 80075e4:	fba3 1302 	umull	r1, r3, r3, r2
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	2164      	movs	r1, #100	; 0x64
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	3332      	adds	r3, #50	; 0x32
 80075f6:	4a08      	ldr	r2, [pc, #32]	; (8007618 <UART_SetConfig+0x4e4>)
 80075f8:	fba2 2303 	umull	r2, r3, r2, r3
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	f003 020f 	and.w	r2, r3, #15
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4422      	add	r2, r4
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007618:	51eb851f 	.word	0x51eb851f

0800761c <__cvt>:
 800761c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	ec55 4b10 	vmov	r4, r5, d0
 8007624:	2d00      	cmp	r5, #0
 8007626:	460e      	mov	r6, r1
 8007628:	4619      	mov	r1, r3
 800762a:	462b      	mov	r3, r5
 800762c:	bfbb      	ittet	lt
 800762e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007632:	461d      	movlt	r5, r3
 8007634:	2300      	movge	r3, #0
 8007636:	232d      	movlt	r3, #45	; 0x2d
 8007638:	700b      	strb	r3, [r1, #0]
 800763a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800763c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007640:	4691      	mov	r9, r2
 8007642:	f023 0820 	bic.w	r8, r3, #32
 8007646:	bfbc      	itt	lt
 8007648:	4622      	movlt	r2, r4
 800764a:	4614      	movlt	r4, r2
 800764c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007650:	d005      	beq.n	800765e <__cvt+0x42>
 8007652:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007656:	d100      	bne.n	800765a <__cvt+0x3e>
 8007658:	3601      	adds	r6, #1
 800765a:	2102      	movs	r1, #2
 800765c:	e000      	b.n	8007660 <__cvt+0x44>
 800765e:	2103      	movs	r1, #3
 8007660:	ab03      	add	r3, sp, #12
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	ab02      	add	r3, sp, #8
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	ec45 4b10 	vmov	d0, r4, r5
 800766c:	4653      	mov	r3, sl
 800766e:	4632      	mov	r2, r6
 8007670:	f000 fe6a 	bl	8008348 <_dtoa_r>
 8007674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007678:	4607      	mov	r7, r0
 800767a:	d102      	bne.n	8007682 <__cvt+0x66>
 800767c:	f019 0f01 	tst.w	r9, #1
 8007680:	d022      	beq.n	80076c8 <__cvt+0xac>
 8007682:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007686:	eb07 0906 	add.w	r9, r7, r6
 800768a:	d110      	bne.n	80076ae <__cvt+0x92>
 800768c:	783b      	ldrb	r3, [r7, #0]
 800768e:	2b30      	cmp	r3, #48	; 0x30
 8007690:	d10a      	bne.n	80076a8 <__cvt+0x8c>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f9 fa1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800769e:	b918      	cbnz	r0, 80076a8 <__cvt+0x8c>
 80076a0:	f1c6 0601 	rsb	r6, r6, #1
 80076a4:	f8ca 6000 	str.w	r6, [sl]
 80076a8:	f8da 3000 	ldr.w	r3, [sl]
 80076ac:	4499      	add	r9, r3
 80076ae:	2200      	movs	r2, #0
 80076b0:	2300      	movs	r3, #0
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7f9 fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80076ba:	b108      	cbz	r0, 80076c0 <__cvt+0xa4>
 80076bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80076c0:	2230      	movs	r2, #48	; 0x30
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	454b      	cmp	r3, r9
 80076c6:	d307      	bcc.n	80076d8 <__cvt+0xbc>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076cc:	1bdb      	subs	r3, r3, r7
 80076ce:	4638      	mov	r0, r7
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	b004      	add	sp, #16
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	1c59      	adds	r1, r3, #1
 80076da:	9103      	str	r1, [sp, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e7f0      	b.n	80076c2 <__cvt+0xa6>

080076e0 <__exponent>:
 80076e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076e2:	4603      	mov	r3, r0
 80076e4:	2900      	cmp	r1, #0
 80076e6:	bfb8      	it	lt
 80076e8:	4249      	neglt	r1, r1
 80076ea:	f803 2b02 	strb.w	r2, [r3], #2
 80076ee:	bfb4      	ite	lt
 80076f0:	222d      	movlt	r2, #45	; 0x2d
 80076f2:	222b      	movge	r2, #43	; 0x2b
 80076f4:	2909      	cmp	r1, #9
 80076f6:	7042      	strb	r2, [r0, #1]
 80076f8:	dd2a      	ble.n	8007750 <__exponent+0x70>
 80076fa:	f10d 0207 	add.w	r2, sp, #7
 80076fe:	4617      	mov	r7, r2
 8007700:	260a      	movs	r6, #10
 8007702:	4694      	mov	ip, r2
 8007704:	fb91 f5f6 	sdiv	r5, r1, r6
 8007708:	fb06 1415 	mls	r4, r6, r5, r1
 800770c:	3430      	adds	r4, #48	; 0x30
 800770e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007712:	460c      	mov	r4, r1
 8007714:	2c63      	cmp	r4, #99	; 0x63
 8007716:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800771a:	4629      	mov	r1, r5
 800771c:	dcf1      	bgt.n	8007702 <__exponent+0x22>
 800771e:	3130      	adds	r1, #48	; 0x30
 8007720:	f1ac 0402 	sub.w	r4, ip, #2
 8007724:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007728:	1c41      	adds	r1, r0, #1
 800772a:	4622      	mov	r2, r4
 800772c:	42ba      	cmp	r2, r7
 800772e:	d30a      	bcc.n	8007746 <__exponent+0x66>
 8007730:	f10d 0209 	add.w	r2, sp, #9
 8007734:	eba2 020c 	sub.w	r2, r2, ip
 8007738:	42bc      	cmp	r4, r7
 800773a:	bf88      	it	hi
 800773c:	2200      	movhi	r2, #0
 800773e:	4413      	add	r3, r2
 8007740:	1a18      	subs	r0, r3, r0
 8007742:	b003      	add	sp, #12
 8007744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007746:	f812 5b01 	ldrb.w	r5, [r2], #1
 800774a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800774e:	e7ed      	b.n	800772c <__exponent+0x4c>
 8007750:	2330      	movs	r3, #48	; 0x30
 8007752:	3130      	adds	r1, #48	; 0x30
 8007754:	7083      	strb	r3, [r0, #2]
 8007756:	70c1      	strb	r1, [r0, #3]
 8007758:	1d03      	adds	r3, r0, #4
 800775a:	e7f1      	b.n	8007740 <__exponent+0x60>

0800775c <_printf_float>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	ed2d 8b02 	vpush	{d8}
 8007764:	b08d      	sub	sp, #52	; 0x34
 8007766:	460c      	mov	r4, r1
 8007768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800776c:	4616      	mov	r6, r2
 800776e:	461f      	mov	r7, r3
 8007770:	4605      	mov	r5, r0
 8007772:	f000 fce9 	bl	8008148 <_localeconv_r>
 8007776:	f8d0 a000 	ldr.w	sl, [r0]
 800777a:	4650      	mov	r0, sl
 800777c:	f7f8 fd80 	bl	8000280 <strlen>
 8007780:	2300      	movs	r3, #0
 8007782:	930a      	str	r3, [sp, #40]	; 0x28
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	f8d8 3000 	ldr.w	r3, [r8]
 800778c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007790:	3307      	adds	r3, #7
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	f103 0208 	add.w	r2, r3, #8
 800779a:	f8c8 2000 	str.w	r2, [r8]
 800779e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ac:	ee08 0a10 	vmov	s16, r0
 80077b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b8:	4b9e      	ldr	r3, [pc, #632]	; (8007a34 <_printf_float+0x2d8>)
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077be:	f7f9 f9bd 	bl	8000b3c <__aeabi_dcmpun>
 80077c2:	bb88      	cbnz	r0, 8007828 <_printf_float+0xcc>
 80077c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c8:	4b9a      	ldr	r3, [pc, #616]	; (8007a34 <_printf_float+0x2d8>)
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ce:	f7f9 f997 	bl	8000b00 <__aeabi_dcmple>
 80077d2:	bb48      	cbnz	r0, 8007828 <_printf_float+0xcc>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f9 f986 	bl	8000aec <__aeabi_dcmplt>
 80077e0:	b110      	cbz	r0, 80077e8 <_printf_float+0x8c>
 80077e2:	232d      	movs	r3, #45	; 0x2d
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e8:	4a93      	ldr	r2, [pc, #588]	; (8007a38 <_printf_float+0x2dc>)
 80077ea:	4b94      	ldr	r3, [pc, #592]	; (8007a3c <_printf_float+0x2e0>)
 80077ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077f0:	bf94      	ite	ls
 80077f2:	4690      	movls	r8, r2
 80077f4:	4698      	movhi	r8, r3
 80077f6:	2303      	movs	r3, #3
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	f04f 0900 	mov.w	r9, #0
 8007806:	9700      	str	r7, [sp, #0]
 8007808:	4633      	mov	r3, r6
 800780a:	aa0b      	add	r2, sp, #44	; 0x2c
 800780c:	4621      	mov	r1, r4
 800780e:	4628      	mov	r0, r5
 8007810:	f000 f9da 	bl	8007bc8 <_printf_common>
 8007814:	3001      	adds	r0, #1
 8007816:	f040 8090 	bne.w	800793a <_printf_float+0x1de>
 800781a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800781e:	b00d      	add	sp, #52	; 0x34
 8007820:	ecbd 8b02 	vpop	{d8}
 8007824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f9 f984 	bl	8000b3c <__aeabi_dcmpun>
 8007834:	b140      	cbz	r0, 8007848 <_printf_float+0xec>
 8007836:	464b      	mov	r3, r9
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfbc      	itt	lt
 800783c:	232d      	movlt	r3, #45	; 0x2d
 800783e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007842:	4a7f      	ldr	r2, [pc, #508]	; (8007a40 <_printf_float+0x2e4>)
 8007844:	4b7f      	ldr	r3, [pc, #508]	; (8007a44 <_printf_float+0x2e8>)
 8007846:	e7d1      	b.n	80077ec <_printf_float+0x90>
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	d13f      	bne.n	80078d4 <_printf_float+0x178>
 8007854:	2306      	movs	r3, #6
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	9b05      	ldr	r3, [sp, #20]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	ab0a      	add	r3, sp, #40	; 0x28
 8007866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800786a:	ab09      	add	r3, sp, #36	; 0x24
 800786c:	ec49 8b10 	vmov	d0, r8, r9
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff fecf 	bl	800761c <__cvt>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007882:	2b47      	cmp	r3, #71	; 0x47
 8007884:	4680      	mov	r8, r0
 8007886:	d108      	bne.n	800789a <_printf_float+0x13e>
 8007888:	1cc8      	adds	r0, r1, #3
 800788a:	db02      	blt.n	8007892 <_printf_float+0x136>
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	dd41      	ble.n	8007916 <_printf_float+0x1ba>
 8007892:	f1ab 0302 	sub.w	r3, fp, #2
 8007896:	fa5f fb83 	uxtb.w	fp, r3
 800789a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800789e:	d820      	bhi.n	80078e2 <_printf_float+0x186>
 80078a0:	3901      	subs	r1, #1
 80078a2:	465a      	mov	r2, fp
 80078a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078a8:	9109      	str	r1, [sp, #36]	; 0x24
 80078aa:	f7ff ff19 	bl	80076e0 <__exponent>
 80078ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b0:	1813      	adds	r3, r2, r0
 80078b2:	2a01      	cmp	r2, #1
 80078b4:	4681      	mov	r9, r0
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	dc02      	bgt.n	80078c0 <_printf_float+0x164>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	07d2      	lsls	r2, r2, #31
 80078be:	d501      	bpl.n	80078c4 <_printf_float+0x168>
 80078c0:	3301      	adds	r3, #1
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d09c      	beq.n	8007806 <_printf_float+0xaa>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d2:	e798      	b.n	8007806 <_printf_float+0xaa>
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	2a47      	cmp	r2, #71	; 0x47
 80078d8:	d1be      	bne.n	8007858 <_printf_float+0xfc>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1bc      	bne.n	8007858 <_printf_float+0xfc>
 80078de:	2301      	movs	r3, #1
 80078e0:	e7b9      	b.n	8007856 <_printf_float+0xfa>
 80078e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078e6:	d118      	bne.n	800791a <_printf_float+0x1be>
 80078e8:	2900      	cmp	r1, #0
 80078ea:	6863      	ldr	r3, [r4, #4]
 80078ec:	dd0b      	ble.n	8007906 <_printf_float+0x1aa>
 80078ee:	6121      	str	r1, [r4, #16]
 80078f0:	b913      	cbnz	r3, 80078f8 <_printf_float+0x19c>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	07d0      	lsls	r0, r2, #31
 80078f6:	d502      	bpl.n	80078fe <_printf_float+0x1a2>
 80078f8:	3301      	adds	r3, #1
 80078fa:	440b      	add	r3, r1
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007900:	f04f 0900 	mov.w	r9, #0
 8007904:	e7de      	b.n	80078c4 <_printf_float+0x168>
 8007906:	b913      	cbnz	r3, 800790e <_printf_float+0x1b2>
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	07d2      	lsls	r2, r2, #31
 800790c:	d501      	bpl.n	8007912 <_printf_float+0x1b6>
 800790e:	3302      	adds	r3, #2
 8007910:	e7f4      	b.n	80078fc <_printf_float+0x1a0>
 8007912:	2301      	movs	r3, #1
 8007914:	e7f2      	b.n	80078fc <_printf_float+0x1a0>
 8007916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791c:	4299      	cmp	r1, r3
 800791e:	db05      	blt.n	800792c <_printf_float+0x1d0>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	6121      	str	r1, [r4, #16]
 8007924:	07d8      	lsls	r0, r3, #31
 8007926:	d5ea      	bpl.n	80078fe <_printf_float+0x1a2>
 8007928:	1c4b      	adds	r3, r1, #1
 800792a:	e7e7      	b.n	80078fc <_printf_float+0x1a0>
 800792c:	2900      	cmp	r1, #0
 800792e:	bfd4      	ite	le
 8007930:	f1c1 0202 	rsble	r2, r1, #2
 8007934:	2201      	movgt	r2, #1
 8007936:	4413      	add	r3, r2
 8007938:	e7e0      	b.n	80078fc <_printf_float+0x1a0>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	055a      	lsls	r2, r3, #21
 800793e:	d407      	bmi.n	8007950 <_printf_float+0x1f4>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	4642      	mov	r2, r8
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	d12c      	bne.n	80079a8 <_printf_float+0x24c>
 800794e:	e764      	b.n	800781a <_printf_float+0xbe>
 8007950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007954:	f240 80e0 	bls.w	8007b18 <_printf_float+0x3bc>
 8007958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	f7f9 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d034      	beq.n	80079d2 <_printf_float+0x276>
 8007968:	4a37      	ldr	r2, [pc, #220]	; (8007a48 <_printf_float+0x2ec>)
 800796a:	2301      	movs	r3, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f af51 	beq.w	800781a <_printf_float+0xbe>
 8007978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797c:	429a      	cmp	r2, r3
 800797e:	db02      	blt.n	8007986 <_printf_float+0x22a>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	07d8      	lsls	r0, r3, #31
 8007984:	d510      	bpl.n	80079a8 <_printf_float+0x24c>
 8007986:	ee18 3a10 	vmov	r3, s16
 800798a:	4652      	mov	r2, sl
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f af41 	beq.w	800781a <_printf_float+0xbe>
 8007998:	f04f 0800 	mov.w	r8, #0
 800799c:	f104 091a 	add.w	r9, r4, #26
 80079a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a2:	3b01      	subs	r3, #1
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dc09      	bgt.n	80079bc <_printf_float+0x260>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	079b      	lsls	r3, r3, #30
 80079ac:	f100 8107 	bmi.w	8007bbe <_printf_float+0x462>
 80079b0:	68e0      	ldr	r0, [r4, #12]
 80079b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b4:	4298      	cmp	r0, r3
 80079b6:	bfb8      	it	lt
 80079b8:	4618      	movlt	r0, r3
 80079ba:	e730      	b.n	800781e <_printf_float+0xc2>
 80079bc:	2301      	movs	r3, #1
 80079be:	464a      	mov	r2, r9
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f af27 	beq.w	800781a <_printf_float+0xbe>
 80079cc:	f108 0801 	add.w	r8, r8, #1
 80079d0:	e7e6      	b.n	80079a0 <_printf_float+0x244>
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc39      	bgt.n	8007a4c <_printf_float+0x2f0>
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <_printf_float+0x2ec>)
 80079da:	2301      	movs	r3, #1
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	f43f af19 	beq.w	800781a <_printf_float+0xbe>
 80079e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079ec:	4313      	orrs	r3, r2
 80079ee:	d102      	bne.n	80079f6 <_printf_float+0x29a>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07d9      	lsls	r1, r3, #31
 80079f4:	d5d8      	bpl.n	80079a8 <_printf_float+0x24c>
 80079f6:	ee18 3a10 	vmov	r3, s16
 80079fa:	4652      	mov	r2, sl
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af09 	beq.w	800781a <_printf_float+0xbe>
 8007a08:	f04f 0900 	mov.w	r9, #0
 8007a0c:	f104 0a1a 	add.w	sl, r4, #26
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	425b      	negs	r3, r3
 8007a14:	454b      	cmp	r3, r9
 8007a16:	dc01      	bgt.n	8007a1c <_printf_float+0x2c0>
 8007a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1a:	e792      	b.n	8007942 <_printf_float+0x1e6>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4652      	mov	r2, sl
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f aef7 	beq.w	800781a <_printf_float+0xbe>
 8007a2c:	f109 0901 	add.w	r9, r9, #1
 8007a30:	e7ee      	b.n	8007a10 <_printf_float+0x2b4>
 8007a32:	bf00      	nop
 8007a34:	7fefffff 	.word	0x7fefffff
 8007a38:	0800a384 	.word	0x0800a384
 8007a3c:	0800a388 	.word	0x0800a388
 8007a40:	0800a38c 	.word	0x0800a38c
 8007a44:	0800a390 	.word	0x0800a390
 8007a48:	0800a394 	.word	0x0800a394
 8007a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a50:	429a      	cmp	r2, r3
 8007a52:	bfa8      	it	ge
 8007a54:	461a      	movge	r2, r3
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	4691      	mov	r9, r2
 8007a5a:	dc37      	bgt.n	8007acc <_printf_float+0x370>
 8007a5c:	f04f 0b00 	mov.w	fp, #0
 8007a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a64:	f104 021a 	add.w	r2, r4, #26
 8007a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a6a:	9305      	str	r3, [sp, #20]
 8007a6c:	eba3 0309 	sub.w	r3, r3, r9
 8007a70:	455b      	cmp	r3, fp
 8007a72:	dc33      	bgt.n	8007adc <_printf_float+0x380>
 8007a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	db3b      	blt.n	8007af4 <_printf_float+0x398>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07da      	lsls	r2, r3, #31
 8007a80:	d438      	bmi.n	8007af4 <_printf_float+0x398>
 8007a82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a86:	eba2 0903 	sub.w	r9, r2, r3
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	1ad2      	subs	r2, r2, r3
 8007a8e:	4591      	cmp	r9, r2
 8007a90:	bfa8      	it	ge
 8007a92:	4691      	movge	r9, r2
 8007a94:	f1b9 0f00 	cmp.w	r9, #0
 8007a98:	dc35      	bgt.n	8007b06 <_printf_float+0x3aa>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aa2:	f104 0a1a 	add.w	sl, r4, #26
 8007aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aaa:	1a9b      	subs	r3, r3, r2
 8007aac:	eba3 0309 	sub.w	r3, r3, r9
 8007ab0:	4543      	cmp	r3, r8
 8007ab2:	f77f af79 	ble.w	80079a8 <_printf_float+0x24c>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f aeaa 	beq.w	800781a <_printf_float+0xbe>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	e7ec      	b.n	8007aa6 <_printf_float+0x34a>
 8007acc:	4613      	mov	r3, r2
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d1c0      	bne.n	8007a5c <_printf_float+0x300>
 8007ada:	e69e      	b.n	800781a <_printf_float+0xbe>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	9205      	str	r2, [sp, #20]
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f ae97 	beq.w	800781a <_printf_float+0xbe>
 8007aec:	9a05      	ldr	r2, [sp, #20]
 8007aee:	f10b 0b01 	add.w	fp, fp, #1
 8007af2:	e7b9      	b.n	8007a68 <_printf_float+0x30c>
 8007af4:	ee18 3a10 	vmov	r3, s16
 8007af8:	4652      	mov	r2, sl
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	d1be      	bne.n	8007a82 <_printf_float+0x326>
 8007b04:	e689      	b.n	800781a <_printf_float+0xbe>
 8007b06:	9a05      	ldr	r2, [sp, #20]
 8007b08:	464b      	mov	r3, r9
 8007b0a:	4442      	add	r2, r8
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1c1      	bne.n	8007a9a <_printf_float+0x33e>
 8007b16:	e680      	b.n	800781a <_printf_float+0xbe>
 8007b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1a:	2a01      	cmp	r2, #1
 8007b1c:	dc01      	bgt.n	8007b22 <_printf_float+0x3c6>
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d53a      	bpl.n	8007b98 <_printf_float+0x43c>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4642      	mov	r2, r8
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f43f ae74 	beq.w	800781a <_printf_float+0xbe>
 8007b32:	ee18 3a10 	vmov	r3, s16
 8007b36:	4652      	mov	r2, sl
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f ae6b 	beq.w	800781a <_printf_float+0xbe>
 8007b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b50:	f7f8 ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b54:	b9d8      	cbnz	r0, 8007b8e <_printf_float+0x432>
 8007b56:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007b5a:	f108 0201 	add.w	r2, r8, #1
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	d10e      	bne.n	8007b86 <_printf_float+0x42a>
 8007b68:	e657      	b.n	800781a <_printf_float+0xbe>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f ae50 	beq.w	800781a <_printf_float+0xbe>
 8007b7a:	f108 0801 	add.w	r8, r8, #1
 8007b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b80:	3b01      	subs	r3, #1
 8007b82:	4543      	cmp	r3, r8
 8007b84:	dcf1      	bgt.n	8007b6a <_printf_float+0x40e>
 8007b86:	464b      	mov	r3, r9
 8007b88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b8c:	e6da      	b.n	8007944 <_printf_float+0x1e8>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	f104 0a1a 	add.w	sl, r4, #26
 8007b96:	e7f2      	b.n	8007b7e <_printf_float+0x422>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	e7df      	b.n	8007b5e <_printf_float+0x402>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	464a      	mov	r2, r9
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f43f ae36 	beq.w	800781a <_printf_float+0xbe>
 8007bae:	f108 0801 	add.w	r8, r8, #1
 8007bb2:	68e3      	ldr	r3, [r4, #12]
 8007bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bb6:	1a5b      	subs	r3, r3, r1
 8007bb8:	4543      	cmp	r3, r8
 8007bba:	dcf0      	bgt.n	8007b9e <_printf_float+0x442>
 8007bbc:	e6f8      	b.n	80079b0 <_printf_float+0x254>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	f104 0919 	add.w	r9, r4, #25
 8007bc6:	e7f4      	b.n	8007bb2 <_printf_float+0x456>

08007bc8 <_printf_common>:
 8007bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bcc:	4616      	mov	r6, r2
 8007bce:	4699      	mov	r9, r3
 8007bd0:	688a      	ldr	r2, [r1, #8]
 8007bd2:	690b      	ldr	r3, [r1, #16]
 8007bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	bfb8      	it	lt
 8007bdc:	4613      	movlt	r3, r2
 8007bde:	6033      	str	r3, [r6, #0]
 8007be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007be4:	4607      	mov	r7, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b10a      	cbz	r2, 8007bee <_printf_common+0x26>
 8007bea:	3301      	adds	r3, #1
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	0699      	lsls	r1, r3, #26
 8007bf2:	bf42      	ittt	mi
 8007bf4:	6833      	ldrmi	r3, [r6, #0]
 8007bf6:	3302      	addmi	r3, #2
 8007bf8:	6033      	strmi	r3, [r6, #0]
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	f015 0506 	ands.w	r5, r5, #6
 8007c00:	d106      	bne.n	8007c10 <_printf_common+0x48>
 8007c02:	f104 0a19 	add.w	sl, r4, #25
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	6832      	ldr	r2, [r6, #0]
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	42ab      	cmp	r3, r5
 8007c0e:	dc26      	bgt.n	8007c5e <_printf_common+0x96>
 8007c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c14:	1e13      	subs	r3, r2, #0
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	bf18      	it	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	0692      	lsls	r2, r2, #26
 8007c1e:	d42b      	bmi.n	8007c78 <_printf_common+0xb0>
 8007c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d01e      	beq.n	8007c6c <_printf_common+0xa4>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	6922      	ldr	r2, [r4, #16]
 8007c32:	f003 0306 	and.w	r3, r3, #6
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	bf02      	ittt	eq
 8007c3a:	68e5      	ldreq	r5, [r4, #12]
 8007c3c:	6833      	ldreq	r3, [r6, #0]
 8007c3e:	1aed      	subeq	r5, r5, r3
 8007c40:	68a3      	ldr	r3, [r4, #8]
 8007c42:	bf0c      	ite	eq
 8007c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c48:	2500      	movne	r5, #0
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	bfc4      	itt	gt
 8007c4e:	1a9b      	subgt	r3, r3, r2
 8007c50:	18ed      	addgt	r5, r5, r3
 8007c52:	2600      	movs	r6, #0
 8007c54:	341a      	adds	r4, #26
 8007c56:	42b5      	cmp	r5, r6
 8007c58:	d11a      	bne.n	8007c90 <_printf_common+0xc8>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e008      	b.n	8007c70 <_printf_common+0xa8>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4652      	mov	r2, sl
 8007c62:	4649      	mov	r1, r9
 8007c64:	4638      	mov	r0, r7
 8007c66:	47c0      	blx	r8
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d103      	bne.n	8007c74 <_printf_common+0xac>
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	3501      	adds	r5, #1
 8007c76:	e7c6      	b.n	8007c06 <_printf_common+0x3e>
 8007c78:	18e1      	adds	r1, r4, r3
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	2030      	movs	r0, #48	; 0x30
 8007c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c82:	4422      	add	r2, r4
 8007c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	e7c7      	b.n	8007c20 <_printf_common+0x58>
 8007c90:	2301      	movs	r3, #1
 8007c92:	4622      	mov	r2, r4
 8007c94:	4649      	mov	r1, r9
 8007c96:	4638      	mov	r0, r7
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d0e6      	beq.n	8007c6c <_printf_common+0xa4>
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7d9      	b.n	8007c56 <_printf_common+0x8e>
	...

08007ca4 <_printf_i>:
 8007ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	7e0f      	ldrb	r7, [r1, #24]
 8007caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cac:	2f78      	cmp	r7, #120	; 0x78
 8007cae:	4691      	mov	r9, r2
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	469a      	mov	sl, r3
 8007cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cba:	d807      	bhi.n	8007ccc <_printf_i+0x28>
 8007cbc:	2f62      	cmp	r7, #98	; 0x62
 8007cbe:	d80a      	bhi.n	8007cd6 <_printf_i+0x32>
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	f000 80d4 	beq.w	8007e6e <_printf_i+0x1ca>
 8007cc6:	2f58      	cmp	r7, #88	; 0x58
 8007cc8:	f000 80c0 	beq.w	8007e4c <_printf_i+0x1a8>
 8007ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cd4:	e03a      	b.n	8007d4c <_printf_i+0xa8>
 8007cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cda:	2b15      	cmp	r3, #21
 8007cdc:	d8f6      	bhi.n	8007ccc <_printf_i+0x28>
 8007cde:	a101      	add	r1, pc, #4	; (adr r1, 8007ce4 <_printf_i+0x40>)
 8007ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce4:	08007d3d 	.word	0x08007d3d
 8007ce8:	08007d51 	.word	0x08007d51
 8007cec:	08007ccd 	.word	0x08007ccd
 8007cf0:	08007ccd 	.word	0x08007ccd
 8007cf4:	08007ccd 	.word	0x08007ccd
 8007cf8:	08007ccd 	.word	0x08007ccd
 8007cfc:	08007d51 	.word	0x08007d51
 8007d00:	08007ccd 	.word	0x08007ccd
 8007d04:	08007ccd 	.word	0x08007ccd
 8007d08:	08007ccd 	.word	0x08007ccd
 8007d0c:	08007ccd 	.word	0x08007ccd
 8007d10:	08007e55 	.word	0x08007e55
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007e0f 	.word	0x08007e0f
 8007d1c:	08007ccd 	.word	0x08007ccd
 8007d20:	08007ccd 	.word	0x08007ccd
 8007d24:	08007e77 	.word	0x08007e77
 8007d28:	08007ccd 	.word	0x08007ccd
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007ccd 	.word	0x08007ccd
 8007d34:	08007ccd 	.word	0x08007ccd
 8007d38:	08007e17 	.word	0x08007e17
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	1d1a      	adds	r2, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	602a      	str	r2, [r5, #0]
 8007d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e09f      	b.n	8007e90 <_printf_i+0x1ec>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	0607      	lsls	r7, r0, #24
 8007d56:	f103 0104 	add.w	r1, r3, #4
 8007d5a:	6029      	str	r1, [r5, #0]
 8007d5c:	d501      	bpl.n	8007d62 <_printf_i+0xbe>
 8007d5e:	681e      	ldr	r6, [r3, #0]
 8007d60:	e003      	b.n	8007d6a <_printf_i+0xc6>
 8007d62:	0646      	lsls	r6, r0, #25
 8007d64:	d5fb      	bpl.n	8007d5e <_printf_i+0xba>
 8007d66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	da03      	bge.n	8007d76 <_printf_i+0xd2>
 8007d6e:	232d      	movs	r3, #45	; 0x2d
 8007d70:	4276      	negs	r6, r6
 8007d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d76:	485a      	ldr	r0, [pc, #360]	; (8007ee0 <_printf_i+0x23c>)
 8007d78:	230a      	movs	r3, #10
 8007d7a:	e012      	b.n	8007da2 <_printf_i+0xfe>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	6820      	ldr	r0, [r4, #0]
 8007d80:	1d19      	adds	r1, r3, #4
 8007d82:	6029      	str	r1, [r5, #0]
 8007d84:	0605      	lsls	r5, r0, #24
 8007d86:	d501      	bpl.n	8007d8c <_printf_i+0xe8>
 8007d88:	681e      	ldr	r6, [r3, #0]
 8007d8a:	e002      	b.n	8007d92 <_printf_i+0xee>
 8007d8c:	0641      	lsls	r1, r0, #25
 8007d8e:	d5fb      	bpl.n	8007d88 <_printf_i+0xe4>
 8007d90:	881e      	ldrh	r6, [r3, #0]
 8007d92:	4853      	ldr	r0, [pc, #332]	; (8007ee0 <_printf_i+0x23c>)
 8007d94:	2f6f      	cmp	r7, #111	; 0x6f
 8007d96:	bf0c      	ite	eq
 8007d98:	2308      	moveq	r3, #8
 8007d9a:	230a      	movne	r3, #10
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007da2:	6865      	ldr	r5, [r4, #4]
 8007da4:	60a5      	str	r5, [r4, #8]
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	bfa2      	ittt	ge
 8007daa:	6821      	ldrge	r1, [r4, #0]
 8007dac:	f021 0104 	bicge.w	r1, r1, #4
 8007db0:	6021      	strge	r1, [r4, #0]
 8007db2:	b90e      	cbnz	r6, 8007db8 <_printf_i+0x114>
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	d04b      	beq.n	8007e50 <_printf_i+0x1ac>
 8007db8:	4615      	mov	r5, r2
 8007dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007dc2:	5dc7      	ldrb	r7, [r0, r7]
 8007dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dc8:	4637      	mov	r7, r6
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	460e      	mov	r6, r1
 8007dce:	d9f4      	bls.n	8007dba <_printf_i+0x116>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d10b      	bne.n	8007dec <_printf_i+0x148>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07de      	lsls	r6, r3, #31
 8007dd8:	d508      	bpl.n	8007dec <_printf_i+0x148>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	bfde      	ittt	le
 8007de2:	2330      	movle	r3, #48	; 0x30
 8007de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007dec:	1b52      	subs	r2, r2, r5
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	f8cd a000 	str.w	sl, [sp]
 8007df4:	464b      	mov	r3, r9
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff fee4 	bl	8007bc8 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14a      	bne.n	8007e9a <_printf_i+0x1f6>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	f043 0320 	orr.w	r3, r3, #32
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	4833      	ldr	r0, [pc, #204]	; (8007ee4 <_printf_i+0x240>)
 8007e18:	2778      	movs	r7, #120	; 0x78
 8007e1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	6829      	ldr	r1, [r5, #0]
 8007e22:	061f      	lsls	r7, r3, #24
 8007e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e28:	d402      	bmi.n	8007e30 <_printf_i+0x18c>
 8007e2a:	065f      	lsls	r7, r3, #25
 8007e2c:	bf48      	it	mi
 8007e2e:	b2b6      	uxthmi	r6, r6
 8007e30:	07df      	lsls	r7, r3, #31
 8007e32:	bf48      	it	mi
 8007e34:	f043 0320 	orrmi.w	r3, r3, #32
 8007e38:	6029      	str	r1, [r5, #0]
 8007e3a:	bf48      	it	mi
 8007e3c:	6023      	strmi	r3, [r4, #0]
 8007e3e:	b91e      	cbnz	r6, 8007e48 <_printf_i+0x1a4>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	f023 0320 	bic.w	r3, r3, #32
 8007e46:	6023      	str	r3, [r4, #0]
 8007e48:	2310      	movs	r3, #16
 8007e4a:	e7a7      	b.n	8007d9c <_printf_i+0xf8>
 8007e4c:	4824      	ldr	r0, [pc, #144]	; (8007ee0 <_printf_i+0x23c>)
 8007e4e:	e7e4      	b.n	8007e1a <_printf_i+0x176>
 8007e50:	4615      	mov	r5, r2
 8007e52:	e7bd      	b.n	8007dd0 <_printf_i+0x12c>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	6826      	ldr	r6, [r4, #0]
 8007e58:	6961      	ldr	r1, [r4, #20]
 8007e5a:	1d18      	adds	r0, r3, #4
 8007e5c:	6028      	str	r0, [r5, #0]
 8007e5e:	0635      	lsls	r5, r6, #24
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0x1c4>
 8007e64:	6019      	str	r1, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <_printf_i+0x1ca>
 8007e68:	0670      	lsls	r0, r6, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0x1c0>
 8007e6c:	8019      	strh	r1, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	4615      	mov	r5, r2
 8007e74:	e7bc      	b.n	8007df0 <_printf_i+0x14c>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	602a      	str	r2, [r5, #0]
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	2100      	movs	r1, #0
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7f8 f9ac 	bl	80001e0 <memchr>
 8007e88:	b108      	cbz	r0, 8007e8e <_printf_i+0x1ea>
 8007e8a:	1b40      	subs	r0, r0, r5
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	2300      	movs	r3, #0
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e98:	e7aa      	b.n	8007df0 <_printf_i+0x14c>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	47d0      	blx	sl
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0ad      	beq.n	8007e04 <_printf_i+0x160>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	d413      	bmi.n	8007ed6 <_printf_i+0x232>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	bfb8      	it	lt
 8007eb6:	4618      	movlt	r0, r3
 8007eb8:	e7a6      	b.n	8007e08 <_printf_i+0x164>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	47d0      	blx	sl
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d09d      	beq.n	8007e04 <_printf_i+0x160>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	9903      	ldr	r1, [sp, #12]
 8007ece:	1a5b      	subs	r3, r3, r1
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dcf2      	bgt.n	8007eba <_printf_i+0x216>
 8007ed4:	e7eb      	b.n	8007eae <_printf_i+0x20a>
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	f104 0619 	add.w	r6, r4, #25
 8007edc:	e7f5      	b.n	8007eca <_printf_i+0x226>
 8007ede:	bf00      	nop
 8007ee0:	0800a396 	.word	0x0800a396
 8007ee4:	0800a3a7 	.word	0x0800a3a7

08007ee8 <std>:
 8007ee8:	2300      	movs	r3, #0
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
 8007eee:	e9c0 3300 	strd	r3, r3, [r0]
 8007ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ef6:	6083      	str	r3, [r0, #8]
 8007ef8:	8181      	strh	r1, [r0, #12]
 8007efa:	6643      	str	r3, [r0, #100]	; 0x64
 8007efc:	81c2      	strh	r2, [r0, #14]
 8007efe:	6183      	str	r3, [r0, #24]
 8007f00:	4619      	mov	r1, r3
 8007f02:	2208      	movs	r2, #8
 8007f04:	305c      	adds	r0, #92	; 0x5c
 8007f06:	f000 f916 	bl	8008136 <memset>
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <std+0x38>)
 8007f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <std+0x3c>)
 8007f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <std+0x40>)
 8007f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <std+0x44>)
 8007f18:	6224      	str	r4, [r4, #32]
 8007f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	080080b1 	.word	0x080080b1
 8007f24:	080080d3 	.word	0x080080d3
 8007f28:	0800810b 	.word	0x0800810b
 8007f2c:	0800812f 	.word	0x0800812f

08007f30 <stdio_exit_handler>:
 8007f30:	4a02      	ldr	r2, [pc, #8]	; (8007f3c <stdio_exit_handler+0xc>)
 8007f32:	4903      	ldr	r1, [pc, #12]	; (8007f40 <stdio_exit_handler+0x10>)
 8007f34:	4803      	ldr	r0, [pc, #12]	; (8007f44 <stdio_exit_handler+0x14>)
 8007f36:	f000 b869 	b.w	800800c <_fwalk_sglue>
 8007f3a:	bf00      	nop
 8007f3c:	20000018 	.word	0x20000018
 8007f40:	08009be1 	.word	0x08009be1
 8007f44:	20000024 	.word	0x20000024

08007f48 <cleanup_stdio>:
 8007f48:	6841      	ldr	r1, [r0, #4]
 8007f4a:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <cleanup_stdio+0x34>)
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	4604      	mov	r4, r0
 8007f52:	d001      	beq.n	8007f58 <cleanup_stdio+0x10>
 8007f54:	f001 fe44 	bl	8009be0 <_fflush_r>
 8007f58:	68a1      	ldr	r1, [r4, #8]
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <cleanup_stdio+0x38>)
 8007f5c:	4299      	cmp	r1, r3
 8007f5e:	d002      	beq.n	8007f66 <cleanup_stdio+0x1e>
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 fe3d 	bl	8009be0 <_fflush_r>
 8007f66:	68e1      	ldr	r1, [r4, #12]
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <cleanup_stdio+0x3c>)
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	d004      	beq.n	8007f78 <cleanup_stdio+0x30>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f74:	f001 be34 	b.w	8009be0 <_fflush_r>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200003a8 	.word	0x200003a8
 8007f80:	20000410 	.word	0x20000410
 8007f84:	20000478 	.word	0x20000478

08007f88 <global_stdio_init.part.0>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <global_stdio_init.part.0+0x30>)
 8007f8c:	4c0b      	ldr	r4, [pc, #44]	; (8007fbc <global_stdio_init.part.0+0x34>)
 8007f8e:	4a0c      	ldr	r2, [pc, #48]	; (8007fc0 <global_stdio_init.part.0+0x38>)
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	4620      	mov	r0, r4
 8007f94:	2200      	movs	r2, #0
 8007f96:	2104      	movs	r1, #4
 8007f98:	f7ff ffa6 	bl	8007ee8 <std>
 8007f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	2109      	movs	r1, #9
 8007fa4:	f7ff ffa0 	bl	8007ee8 <std>
 8007fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fac:	2202      	movs	r2, #2
 8007fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb2:	2112      	movs	r1, #18
 8007fb4:	f7ff bf98 	b.w	8007ee8 <std>
 8007fb8:	200004e0 	.word	0x200004e0
 8007fbc:	200003a8 	.word	0x200003a8
 8007fc0:	08007f31 	.word	0x08007f31

08007fc4 <__sfp_lock_acquire>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__sfp_lock_acquire+0x8>)
 8007fc6:	f000 b933 	b.w	8008230 <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200004e9 	.word	0x200004e9

08007fd0 <__sfp_lock_release>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sfp_lock_release+0x8>)
 8007fd2:	f000 b92e 	b.w	8008232 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200004e9 	.word	0x200004e9

08007fdc <__sinit>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4604      	mov	r4, r0
 8007fe0:	f7ff fff0 	bl	8007fc4 <__sfp_lock_acquire>
 8007fe4:	6a23      	ldr	r3, [r4, #32]
 8007fe6:	b11b      	cbz	r3, 8007ff0 <__sinit+0x14>
 8007fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fec:	f7ff bff0 	b.w	8007fd0 <__sfp_lock_release>
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__sinit+0x28>)
 8007ff2:	6223      	str	r3, [r4, #32]
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <__sinit+0x2c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1f5      	bne.n	8007fe8 <__sinit+0xc>
 8007ffc:	f7ff ffc4 	bl	8007f88 <global_stdio_init.part.0>
 8008000:	e7f2      	b.n	8007fe8 <__sinit+0xc>
 8008002:	bf00      	nop
 8008004:	08007f49 	.word	0x08007f49
 8008008:	200004e0 	.word	0x200004e0

0800800c <_fwalk_sglue>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	4607      	mov	r7, r0
 8008012:	4688      	mov	r8, r1
 8008014:	4614      	mov	r4, r2
 8008016:	2600      	movs	r6, #0
 8008018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800801c:	f1b9 0901 	subs.w	r9, r9, #1
 8008020:	d505      	bpl.n	800802e <_fwalk_sglue+0x22>
 8008022:	6824      	ldr	r4, [r4, #0]
 8008024:	2c00      	cmp	r4, #0
 8008026:	d1f7      	bne.n	8008018 <_fwalk_sglue+0xc>
 8008028:	4630      	mov	r0, r6
 800802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d907      	bls.n	8008044 <_fwalk_sglue+0x38>
 8008034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008038:	3301      	adds	r3, #1
 800803a:	d003      	beq.n	8008044 <_fwalk_sglue+0x38>
 800803c:	4629      	mov	r1, r5
 800803e:	4638      	mov	r0, r7
 8008040:	47c0      	blx	r8
 8008042:	4306      	orrs	r6, r0
 8008044:	3568      	adds	r5, #104	; 0x68
 8008046:	e7e9      	b.n	800801c <_fwalk_sglue+0x10>

08008048 <sniprintf>:
 8008048:	b40c      	push	{r2, r3}
 800804a:	b530      	push	{r4, r5, lr}
 800804c:	4b17      	ldr	r3, [pc, #92]	; (80080ac <sniprintf+0x64>)
 800804e:	1e0c      	subs	r4, r1, #0
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	b09d      	sub	sp, #116	; 0x74
 8008054:	da08      	bge.n	8008068 <sniprintf+0x20>
 8008056:	238b      	movs	r3, #139	; 0x8b
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800805e:	b01d      	add	sp, #116	; 0x74
 8008060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008064:	b002      	add	sp, #8
 8008066:	4770      	bx	lr
 8008068:	f44f 7302 	mov.w	r3, #520	; 0x208
 800806c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008070:	bf14      	ite	ne
 8008072:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008076:	4623      	moveq	r3, r4
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008080:	9002      	str	r0, [sp, #8]
 8008082:	9006      	str	r0, [sp, #24]
 8008084:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008088:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800808a:	ab21      	add	r3, sp, #132	; 0x84
 800808c:	a902      	add	r1, sp, #8
 800808e:	4628      	mov	r0, r5
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	f001 fc21 	bl	80098d8 <_svfiprintf_r>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	bfbc      	itt	lt
 800809a:	238b      	movlt	r3, #139	; 0x8b
 800809c:	602b      	strlt	r3, [r5, #0]
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d0dd      	beq.n	800805e <sniprintf+0x16>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e7d9      	b.n	800805e <sniprintf+0x16>
 80080aa:	bf00      	nop
 80080ac:	20000070 	.word	0x20000070

080080b0 <__sread>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	460c      	mov	r4, r1
 80080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b8:	f000 f86c 	bl	8008194 <_read_r>
 80080bc:	2800      	cmp	r0, #0
 80080be:	bfab      	itete	ge
 80080c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080c2:	89a3      	ldrhlt	r3, [r4, #12]
 80080c4:	181b      	addge	r3, r3, r0
 80080c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ca:	bfac      	ite	ge
 80080cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ce:	81a3      	strhlt	r3, [r4, #12]
 80080d0:	bd10      	pop	{r4, pc}

080080d2 <__swrite>:
 80080d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d6:	461f      	mov	r7, r3
 80080d8:	898b      	ldrh	r3, [r1, #12]
 80080da:	05db      	lsls	r3, r3, #23
 80080dc:	4605      	mov	r5, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	4616      	mov	r6, r2
 80080e2:	d505      	bpl.n	80080f0 <__swrite+0x1e>
 80080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e8:	2302      	movs	r3, #2
 80080ea:	2200      	movs	r2, #0
 80080ec:	f000 f840 	bl	8008170 <_lseek_r>
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	4628      	mov	r0, r5
 8008102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	f000 b857 	b.w	80081b8 <_write_r>

0800810a <__sseek>:
 800810a:	b510      	push	{r4, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008112:	f000 f82d 	bl	8008170 <_lseek_r>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	bf15      	itete	ne
 800811c:	6560      	strne	r0, [r4, #84]	; 0x54
 800811e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008126:	81a3      	strheq	r3, [r4, #12]
 8008128:	bf18      	it	ne
 800812a:	81a3      	strhne	r3, [r4, #12]
 800812c:	bd10      	pop	{r4, pc}

0800812e <__sclose>:
 800812e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008132:	f000 b80d 	b.w	8008150 <_close_r>

08008136 <memset>:
 8008136:	4402      	add	r2, r0
 8008138:	4603      	mov	r3, r0
 800813a:	4293      	cmp	r3, r2
 800813c:	d100      	bne.n	8008140 <memset+0xa>
 800813e:	4770      	bx	lr
 8008140:	f803 1b01 	strb.w	r1, [r3], #1
 8008144:	e7f9      	b.n	800813a <memset+0x4>
	...

08008148 <_localeconv_r>:
 8008148:	4800      	ldr	r0, [pc, #0]	; (800814c <_localeconv_r+0x4>)
 800814a:	4770      	bx	lr
 800814c:	20000164 	.word	0x20000164

08008150 <_close_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	; (800816c <_close_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7f9 fbc1 	bl	80018e2 <_close>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_close_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_close_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	200004e4 	.word	0x200004e4

08008170 <_lseek_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_lseek_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f9 fbd6 	bl	8001930 <_lseek>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_lseek_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_lseek_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200004e4 	.word	0x200004e4

08008194 <_read_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_read_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7f9 fb64 	bl	8001870 <_read>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_read_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_read_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	200004e4 	.word	0x200004e4

080081b8 <_write_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	; (80081d8 <_write_r+0x20>)
 80081bc:	4604      	mov	r4, r0
 80081be:	4608      	mov	r0, r1
 80081c0:	4611      	mov	r1, r2
 80081c2:	2200      	movs	r2, #0
 80081c4:	602a      	str	r2, [r5, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	f7f9 fb6f 	bl	80018aa <_write>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_write_r+0x1e>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_write_r+0x1e>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	200004e4 	.word	0x200004e4

080081dc <__errno>:
 80081dc:	4b01      	ldr	r3, [pc, #4]	; (80081e4 <__errno+0x8>)
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000070 	.word	0x20000070

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4d0d      	ldr	r5, [pc, #52]	; (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <__libc_init_array+0x3c>)
 80081ee:	1b64      	subs	r4, r4, r5
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2600      	movs	r6, #0
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4d0b      	ldr	r5, [pc, #44]	; (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x44>)
 80081fc:	f002 f894 	bl	800a328 <_init>
 8008200:	1b64      	subs	r4, r4, r5
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2600      	movs	r6, #0
 8008206:	42a6      	cmp	r6, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008210:	4798      	blx	r3
 8008212:	3601      	adds	r6, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f855 3b04 	ldr.w	r3, [r5], #4
 800821a:	4798      	blx	r3
 800821c:	3601      	adds	r6, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	0800a6fc 	.word	0x0800a6fc
 8008224:	0800a6fc 	.word	0x0800a6fc
 8008228:	0800a6fc 	.word	0x0800a6fc
 800822c:	0800a700 	.word	0x0800a700

08008230 <__retarget_lock_acquire_recursive>:
 8008230:	4770      	bx	lr

08008232 <__retarget_lock_release_recursive>:
 8008232:	4770      	bx	lr

08008234 <quorem>:
 8008234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	6903      	ldr	r3, [r0, #16]
 800823a:	690c      	ldr	r4, [r1, #16]
 800823c:	42a3      	cmp	r3, r4
 800823e:	4607      	mov	r7, r0
 8008240:	db7e      	blt.n	8008340 <quorem+0x10c>
 8008242:	3c01      	subs	r4, #1
 8008244:	f101 0814 	add.w	r8, r1, #20
 8008248:	f100 0514 	add.w	r5, r0, #20
 800824c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800825a:	3301      	adds	r3, #1
 800825c:	429a      	cmp	r2, r3
 800825e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008262:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008266:	fbb2 f6f3 	udiv	r6, r2, r3
 800826a:	d331      	bcc.n	80082d0 <quorem+0x9c>
 800826c:	f04f 0e00 	mov.w	lr, #0
 8008270:	4640      	mov	r0, r8
 8008272:	46ac      	mov	ip, r5
 8008274:	46f2      	mov	sl, lr
 8008276:	f850 2b04 	ldr.w	r2, [r0], #4
 800827a:	b293      	uxth	r3, r2
 800827c:	fb06 e303 	mla	r3, r6, r3, lr
 8008280:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008284:	0c1a      	lsrs	r2, r3, #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ebaa 0303 	sub.w	r3, sl, r3
 800828c:	f8dc a000 	ldr.w	sl, [ip]
 8008290:	fa13 f38a 	uxtah	r3, r3, sl
 8008294:	fb06 220e 	mla	r2, r6, lr, r2
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a0:	b292      	uxth	r2, r2
 80082a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80082ae:	4581      	cmp	r9, r0
 80082b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b4:	f84c 3b04 	str.w	r3, [ip], #4
 80082b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082bc:	d2db      	bcs.n	8008276 <quorem+0x42>
 80082be:	f855 300b 	ldr.w	r3, [r5, fp]
 80082c2:	b92b      	cbnz	r3, 80082d0 <quorem+0x9c>
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	3b04      	subs	r3, #4
 80082c8:	429d      	cmp	r5, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	d32c      	bcc.n	8008328 <quorem+0xf4>
 80082ce:	613c      	str	r4, [r7, #16]
 80082d0:	4638      	mov	r0, r7
 80082d2:	f001 f9a7 	bl	8009624 <__mcmp>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	db22      	blt.n	8008320 <quorem+0xec>
 80082da:	3601      	adds	r6, #1
 80082dc:	4629      	mov	r1, r5
 80082de:	2000      	movs	r0, #0
 80082e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082e4:	f8d1 c000 	ldr.w	ip, [r1]
 80082e8:	b293      	uxth	r3, r2
 80082ea:	1ac3      	subs	r3, r0, r3
 80082ec:	0c12      	lsrs	r2, r2, #16
 80082ee:	fa13 f38c 	uxtah	r3, r3, ip
 80082f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80082f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008300:	45c1      	cmp	r9, r8
 8008302:	f841 3b04 	str.w	r3, [r1], #4
 8008306:	ea4f 4022 	mov.w	r0, r2, asr #16
 800830a:	d2e9      	bcs.n	80082e0 <quorem+0xac>
 800830c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008314:	b922      	cbnz	r2, 8008320 <quorem+0xec>
 8008316:	3b04      	subs	r3, #4
 8008318:	429d      	cmp	r5, r3
 800831a:	461a      	mov	r2, r3
 800831c:	d30a      	bcc.n	8008334 <quorem+0x100>
 800831e:	613c      	str	r4, [r7, #16]
 8008320:	4630      	mov	r0, r6
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	3b04      	subs	r3, #4
 800832c:	2a00      	cmp	r2, #0
 800832e:	d1ce      	bne.n	80082ce <quorem+0x9a>
 8008330:	3c01      	subs	r4, #1
 8008332:	e7c9      	b.n	80082c8 <quorem+0x94>
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	3b04      	subs	r3, #4
 8008338:	2a00      	cmp	r2, #0
 800833a:	d1f0      	bne.n	800831e <quorem+0xea>
 800833c:	3c01      	subs	r4, #1
 800833e:	e7eb      	b.n	8008318 <quorem+0xe4>
 8008340:	2000      	movs	r0, #0
 8008342:	e7ee      	b.n	8008322 <quorem+0xee>
 8008344:	0000      	movs	r0, r0
	...

08008348 <_dtoa_r>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	ed2d 8b04 	vpush	{d8-d9}
 8008350:	69c5      	ldr	r5, [r0, #28]
 8008352:	b093      	sub	sp, #76	; 0x4c
 8008354:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008358:	ec57 6b10 	vmov	r6, r7, d0
 800835c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008360:	9107      	str	r1, [sp, #28]
 8008362:	4604      	mov	r4, r0
 8008364:	920a      	str	r2, [sp, #40]	; 0x28
 8008366:	930d      	str	r3, [sp, #52]	; 0x34
 8008368:	b975      	cbnz	r5, 8008388 <_dtoa_r+0x40>
 800836a:	2010      	movs	r0, #16
 800836c:	f000 fe2a 	bl	8008fc4 <malloc>
 8008370:	4602      	mov	r2, r0
 8008372:	61e0      	str	r0, [r4, #28]
 8008374:	b920      	cbnz	r0, 8008380 <_dtoa_r+0x38>
 8008376:	4bae      	ldr	r3, [pc, #696]	; (8008630 <_dtoa_r+0x2e8>)
 8008378:	21ef      	movs	r1, #239	; 0xef
 800837a:	48ae      	ldr	r0, [pc, #696]	; (8008634 <_dtoa_r+0x2ec>)
 800837c:	f001 fc90 	bl	8009ca0 <__assert_func>
 8008380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008384:	6005      	str	r5, [r0, #0]
 8008386:	60c5      	str	r5, [r0, #12]
 8008388:	69e3      	ldr	r3, [r4, #28]
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	b151      	cbz	r1, 80083a4 <_dtoa_r+0x5c>
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	604a      	str	r2, [r1, #4]
 8008392:	2301      	movs	r3, #1
 8008394:	4093      	lsls	r3, r2
 8008396:	608b      	str	r3, [r1, #8]
 8008398:	4620      	mov	r0, r4
 800839a:	f000 ff07 	bl	80091ac <_Bfree>
 800839e:	69e3      	ldr	r3, [r4, #28]
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	1e3b      	subs	r3, r7, #0
 80083a6:	bfbb      	ittet	lt
 80083a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	9303      	strlt	r3, [sp, #12]
 80083ae:	2300      	movge	r3, #0
 80083b0:	2201      	movlt	r2, #1
 80083b2:	bfac      	ite	ge
 80083b4:	f8c8 3000 	strge.w	r3, [r8]
 80083b8:	f8c8 2000 	strlt.w	r2, [r8]
 80083bc:	4b9e      	ldr	r3, [pc, #632]	; (8008638 <_dtoa_r+0x2f0>)
 80083be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083c2:	ea33 0308 	bics.w	r3, r3, r8
 80083c6:	d11b      	bne.n	8008400 <_dtoa_r+0xb8>
 80083c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80083d4:	4333      	orrs	r3, r6
 80083d6:	f000 8593 	beq.w	8008f00 <_dtoa_r+0xbb8>
 80083da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083dc:	b963      	cbnz	r3, 80083f8 <_dtoa_r+0xb0>
 80083de:	4b97      	ldr	r3, [pc, #604]	; (800863c <_dtoa_r+0x2f4>)
 80083e0:	e027      	b.n	8008432 <_dtoa_r+0xea>
 80083e2:	4b97      	ldr	r3, [pc, #604]	; (8008640 <_dtoa_r+0x2f8>)
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	9800      	ldr	r0, [sp, #0]
 80083ee:	b013      	add	sp, #76	; 0x4c
 80083f0:	ecbd 8b04 	vpop	{d8-d9}
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	4b90      	ldr	r3, [pc, #576]	; (800863c <_dtoa_r+0x2f4>)
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	3303      	adds	r3, #3
 80083fe:	e7f3      	b.n	80083e8 <_dtoa_r+0xa0>
 8008400:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	ec51 0b17 	vmov	r0, r1, d7
 800840a:	eeb0 8a47 	vmov.f32	s16, s14
 800840e:	eef0 8a67 	vmov.f32	s17, s15
 8008412:	2300      	movs	r3, #0
 8008414:	f7f8 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008418:	4681      	mov	r9, r0
 800841a:	b160      	cbz	r0, 8008436 <_dtoa_r+0xee>
 800841c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800841e:	2301      	movs	r3, #1
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8568 	beq.w	8008efa <_dtoa_r+0xbb2>
 800842a:	4b86      	ldr	r3, [pc, #536]	; (8008644 <_dtoa_r+0x2fc>)
 800842c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	3b01      	subs	r3, #1
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	e7da      	b.n	80083ec <_dtoa_r+0xa4>
 8008436:	aa10      	add	r2, sp, #64	; 0x40
 8008438:	a911      	add	r1, sp, #68	; 0x44
 800843a:	4620      	mov	r0, r4
 800843c:	eeb0 0a48 	vmov.f32	s0, s16
 8008440:	eef0 0a68 	vmov.f32	s1, s17
 8008444:	f001 f994 	bl	8009770 <__d2b>
 8008448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800844c:	4682      	mov	sl, r0
 800844e:	2d00      	cmp	r5, #0
 8008450:	d07f      	beq.n	8008552 <_dtoa_r+0x20a>
 8008452:	ee18 3a90 	vmov	r3, s17
 8008456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800845a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800845e:	ec51 0b18 	vmov	r0, r1, d8
 8008462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800846a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800846e:	4619      	mov	r1, r3
 8008470:	2200      	movs	r2, #0
 8008472:	4b75      	ldr	r3, [pc, #468]	; (8008648 <_dtoa_r+0x300>)
 8008474:	f7f7 ff10 	bl	8000298 <__aeabi_dsub>
 8008478:	a367      	add	r3, pc, #412	; (adr r3, 8008618 <_dtoa_r+0x2d0>)
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	f7f8 f8c3 	bl	8000608 <__aeabi_dmul>
 8008482:	a367      	add	r3, pc, #412	; (adr r3, 8008620 <_dtoa_r+0x2d8>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f7 ff08 	bl	800029c <__adddf3>
 800848c:	4606      	mov	r6, r0
 800848e:	4628      	mov	r0, r5
 8008490:	460f      	mov	r7, r1
 8008492:	f7f8 f84f 	bl	8000534 <__aeabi_i2d>
 8008496:	a364      	add	r3, pc, #400	; (adr r3, 8008628 <_dtoa_r+0x2e0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f8 f8b4 	bl	8000608 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f7 fef8 	bl	800029c <__adddf3>
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	f7f8 fb5a 	bl	8000b68 <__aeabi_d2iz>
 80084b4:	2200      	movs	r2, #0
 80084b6:	4683      	mov	fp, r0
 80084b8:	2300      	movs	r3, #0
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f8 fb15 	bl	8000aec <__aeabi_dcmplt>
 80084c2:	b148      	cbz	r0, 80084d8 <_dtoa_r+0x190>
 80084c4:	4658      	mov	r0, fp
 80084c6:	f7f8 f835 	bl	8000534 <__aeabi_i2d>
 80084ca:	4632      	mov	r2, r6
 80084cc:	463b      	mov	r3, r7
 80084ce:	f7f8 fb03 	bl	8000ad8 <__aeabi_dcmpeq>
 80084d2:	b908      	cbnz	r0, 80084d8 <_dtoa_r+0x190>
 80084d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084d8:	f1bb 0f16 	cmp.w	fp, #22
 80084dc:	d857      	bhi.n	800858e <_dtoa_r+0x246>
 80084de:	4b5b      	ldr	r3, [pc, #364]	; (800864c <_dtoa_r+0x304>)
 80084e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	ec51 0b18 	vmov	r0, r1, d8
 80084ec:	f7f8 fafe 	bl	8000aec <__aeabi_dcmplt>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d04e      	beq.n	8008592 <_dtoa_r+0x24a>
 80084f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084f8:	2300      	movs	r3, #0
 80084fa:	930c      	str	r3, [sp, #48]	; 0x30
 80084fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fe:	1b5b      	subs	r3, r3, r5
 8008500:	1e5a      	subs	r2, r3, #1
 8008502:	bf45      	ittet	mi
 8008504:	f1c3 0301 	rsbmi	r3, r3, #1
 8008508:	9305      	strmi	r3, [sp, #20]
 800850a:	2300      	movpl	r3, #0
 800850c:	2300      	movmi	r3, #0
 800850e:	9206      	str	r2, [sp, #24]
 8008510:	bf54      	ite	pl
 8008512:	9305      	strpl	r3, [sp, #20]
 8008514:	9306      	strmi	r3, [sp, #24]
 8008516:	f1bb 0f00 	cmp.w	fp, #0
 800851a:	db3c      	blt.n	8008596 <_dtoa_r+0x24e>
 800851c:	9b06      	ldr	r3, [sp, #24]
 800851e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008522:	445b      	add	r3, fp
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	2300      	movs	r3, #0
 8008528:	9308      	str	r3, [sp, #32]
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	2b09      	cmp	r3, #9
 800852e:	d868      	bhi.n	8008602 <_dtoa_r+0x2ba>
 8008530:	2b05      	cmp	r3, #5
 8008532:	bfc4      	itt	gt
 8008534:	3b04      	subgt	r3, #4
 8008536:	9307      	strgt	r3, [sp, #28]
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	f1a3 0302 	sub.w	r3, r3, #2
 800853e:	bfcc      	ite	gt
 8008540:	2500      	movgt	r5, #0
 8008542:	2501      	movle	r5, #1
 8008544:	2b03      	cmp	r3, #3
 8008546:	f200 8085 	bhi.w	8008654 <_dtoa_r+0x30c>
 800854a:	e8df f003 	tbb	[pc, r3]
 800854e:	3b2e      	.short	0x3b2e
 8008550:	5839      	.short	0x5839
 8008552:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008556:	441d      	add	r5, r3
 8008558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800855c:	2b20      	cmp	r3, #32
 800855e:	bfc1      	itttt	gt
 8008560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008564:	fa08 f803 	lslgt.w	r8, r8, r3
 8008568:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800856c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008570:	bfd6      	itet	le
 8008572:	f1c3 0320 	rsble	r3, r3, #32
 8008576:	ea48 0003 	orrgt.w	r0, r8, r3
 800857a:	fa06 f003 	lslle.w	r0, r6, r3
 800857e:	f7f7 ffc9 	bl	8000514 <__aeabi_ui2d>
 8008582:	2201      	movs	r2, #1
 8008584:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008588:	3d01      	subs	r5, #1
 800858a:	920e      	str	r2, [sp, #56]	; 0x38
 800858c:	e76f      	b.n	800846e <_dtoa_r+0x126>
 800858e:	2301      	movs	r3, #1
 8008590:	e7b3      	b.n	80084fa <_dtoa_r+0x1b2>
 8008592:	900c      	str	r0, [sp, #48]	; 0x30
 8008594:	e7b2      	b.n	80084fc <_dtoa_r+0x1b4>
 8008596:	9b05      	ldr	r3, [sp, #20]
 8008598:	eba3 030b 	sub.w	r3, r3, fp
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	f1cb 0300 	rsb	r3, fp, #0
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a8:	e7bf      	b.n	800852a <_dtoa_r+0x1e2>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9309      	str	r3, [sp, #36]	; 0x24
 80085ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc52      	bgt.n	800865a <_dtoa_r+0x312>
 80085b4:	2301      	movs	r3, #1
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	461a      	mov	r2, r3
 80085bc:	920a      	str	r2, [sp, #40]	; 0x28
 80085be:	e00b      	b.n	80085d8 <_dtoa_r+0x290>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f3      	b.n	80085ac <_dtoa_r+0x264>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ca:	445b      	add	r3, fp
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	3301      	adds	r3, #1
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	bfb8      	it	lt
 80085d6:	2301      	movlt	r3, #1
 80085d8:	69e0      	ldr	r0, [r4, #28]
 80085da:	2100      	movs	r1, #0
 80085dc:	2204      	movs	r2, #4
 80085de:	f102 0614 	add.w	r6, r2, #20
 80085e2:	429e      	cmp	r6, r3
 80085e4:	d93d      	bls.n	8008662 <_dtoa_r+0x31a>
 80085e6:	6041      	str	r1, [r0, #4]
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fd9f 	bl	800912c <_Balloc>
 80085ee:	9000      	str	r0, [sp, #0]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d139      	bne.n	8008668 <_dtoa_r+0x320>
 80085f4:	4b16      	ldr	r3, [pc, #88]	; (8008650 <_dtoa_r+0x308>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f240 11af 	movw	r1, #431	; 0x1af
 80085fc:	e6bd      	b.n	800837a <_dtoa_r+0x32>
 80085fe:	2301      	movs	r3, #1
 8008600:	e7e1      	b.n	80085c6 <_dtoa_r+0x27e>
 8008602:	2501      	movs	r5, #1
 8008604:	2300      	movs	r3, #0
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	9509      	str	r5, [sp, #36]	; 0x24
 800860a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	2312      	movs	r3, #18
 8008616:	e7d1      	b.n	80085bc <_dtoa_r+0x274>
 8008618:	636f4361 	.word	0x636f4361
 800861c:	3fd287a7 	.word	0x3fd287a7
 8008620:	8b60c8b3 	.word	0x8b60c8b3
 8008624:	3fc68a28 	.word	0x3fc68a28
 8008628:	509f79fb 	.word	0x509f79fb
 800862c:	3fd34413 	.word	0x3fd34413
 8008630:	0800a3c5 	.word	0x0800a3c5
 8008634:	0800a3dc 	.word	0x0800a3dc
 8008638:	7ff00000 	.word	0x7ff00000
 800863c:	0800a3c1 	.word	0x0800a3c1
 8008640:	0800a3b8 	.word	0x0800a3b8
 8008644:	0800a395 	.word	0x0800a395
 8008648:	3ff80000 	.word	0x3ff80000
 800864c:	0800a4c8 	.word	0x0800a4c8
 8008650:	0800a434 	.word	0x0800a434
 8008654:	2301      	movs	r3, #1
 8008656:	9309      	str	r3, [sp, #36]	; 0x24
 8008658:	e7d7      	b.n	800860a <_dtoa_r+0x2c2>
 800865a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	e7ba      	b.n	80085d8 <_dtoa_r+0x290>
 8008662:	3101      	adds	r1, #1
 8008664:	0052      	lsls	r2, r2, #1
 8008666:	e7ba      	b.n	80085de <_dtoa_r+0x296>
 8008668:	69e3      	ldr	r3, [r4, #28]
 800866a:	9a00      	ldr	r2, [sp, #0]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	2b0e      	cmp	r3, #14
 8008672:	f200 80a8 	bhi.w	80087c6 <_dtoa_r+0x47e>
 8008676:	2d00      	cmp	r5, #0
 8008678:	f000 80a5 	beq.w	80087c6 <_dtoa_r+0x47e>
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	dd38      	ble.n	80086f4 <_dtoa_r+0x3ac>
 8008682:	4bc0      	ldr	r3, [pc, #768]	; (8008984 <_dtoa_r+0x63c>)
 8008684:	f00b 020f 	and.w	r2, fp, #15
 8008688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008690:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008694:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008698:	d019      	beq.n	80086ce <_dtoa_r+0x386>
 800869a:	4bbb      	ldr	r3, [pc, #748]	; (8008988 <_dtoa_r+0x640>)
 800869c:	ec51 0b18 	vmov	r0, r1, d8
 80086a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a4:	f7f8 f8da 	bl	800085c <__aeabi_ddiv>
 80086a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ac:	f008 080f 	and.w	r8, r8, #15
 80086b0:	2503      	movs	r5, #3
 80086b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008988 <_dtoa_r+0x640>
 80086b6:	f1b8 0f00 	cmp.w	r8, #0
 80086ba:	d10a      	bne.n	80086d2 <_dtoa_r+0x38a>
 80086bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086c0:	4632      	mov	r2, r6
 80086c2:	463b      	mov	r3, r7
 80086c4:	f7f8 f8ca 	bl	800085c <__aeabi_ddiv>
 80086c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086cc:	e02b      	b.n	8008726 <_dtoa_r+0x3de>
 80086ce:	2502      	movs	r5, #2
 80086d0:	e7ef      	b.n	80086b2 <_dtoa_r+0x36a>
 80086d2:	f018 0f01 	tst.w	r8, #1
 80086d6:	d008      	beq.n	80086ea <_dtoa_r+0x3a2>
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086e0:	f7f7 ff92 	bl	8000608 <__aeabi_dmul>
 80086e4:	3501      	adds	r5, #1
 80086e6:	4606      	mov	r6, r0
 80086e8:	460f      	mov	r7, r1
 80086ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086ee:	f109 0908 	add.w	r9, r9, #8
 80086f2:	e7e0      	b.n	80086b6 <_dtoa_r+0x36e>
 80086f4:	f000 809f 	beq.w	8008836 <_dtoa_r+0x4ee>
 80086f8:	f1cb 0600 	rsb	r6, fp, #0
 80086fc:	4ba1      	ldr	r3, [pc, #644]	; (8008984 <_dtoa_r+0x63c>)
 80086fe:	4fa2      	ldr	r7, [pc, #648]	; (8008988 <_dtoa_r+0x640>)
 8008700:	f006 020f 	and.w	r2, r6, #15
 8008704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	ec51 0b18 	vmov	r0, r1, d8
 8008710:	f7f7 ff7a 	bl	8000608 <__aeabi_dmul>
 8008714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008718:	1136      	asrs	r6, r6, #4
 800871a:	2300      	movs	r3, #0
 800871c:	2502      	movs	r5, #2
 800871e:	2e00      	cmp	r6, #0
 8008720:	d17e      	bne.n	8008820 <_dtoa_r+0x4d8>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d0      	bne.n	80086c8 <_dtoa_r+0x380>
 8008726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008728:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8084 	beq.w	800883a <_dtoa_r+0x4f2>
 8008732:	4b96      	ldr	r3, [pc, #600]	; (800898c <_dtoa_r+0x644>)
 8008734:	2200      	movs	r2, #0
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	f7f8 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	d07b      	beq.n	800883a <_dtoa_r+0x4f2>
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d078      	beq.n	800883a <_dtoa_r+0x4f2>
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	dd39      	ble.n	80087c2 <_dtoa_r+0x47a>
 800874e:	4b90      	ldr	r3, [pc, #576]	; (8008990 <_dtoa_r+0x648>)
 8008750:	2200      	movs	r2, #0
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f7f7 ff57 	bl	8000608 <__aeabi_dmul>
 800875a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800875e:	9e01      	ldr	r6, [sp, #4]
 8008760:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008764:	3501      	adds	r5, #1
 8008766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800876a:	4628      	mov	r0, r5
 800876c:	f7f7 fee2 	bl	8000534 <__aeabi_i2d>
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	f7f7 ff48 	bl	8000608 <__aeabi_dmul>
 8008778:	4b86      	ldr	r3, [pc, #536]	; (8008994 <_dtoa_r+0x64c>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 fd8e 	bl	800029c <__adddf3>
 8008780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	2e00      	cmp	r6, #0
 800878c:	d158      	bne.n	8008840 <_dtoa_r+0x4f8>
 800878e:	4b82      	ldr	r3, [pc, #520]	; (8008998 <_dtoa_r+0x650>)
 8008790:	2200      	movs	r2, #0
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f7 fd7f 	bl	8000298 <__aeabi_dsub>
 800879a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800879e:	4680      	mov	r8, r0
 80087a0:	4689      	mov	r9, r1
 80087a2:	f7f8 f9c1 	bl	8000b28 <__aeabi_dcmpgt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 8296 	bne.w	8008cd8 <_dtoa_r+0x990>
 80087ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087b0:	4640      	mov	r0, r8
 80087b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087b6:	4649      	mov	r1, r9
 80087b8:	f7f8 f998 	bl	8000aec <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f040 8289 	bne.w	8008cd4 <_dtoa_r+0x98c>
 80087c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f2c0 814e 	blt.w	8008a6a <_dtoa_r+0x722>
 80087ce:	f1bb 0f0e 	cmp.w	fp, #14
 80087d2:	f300 814a 	bgt.w	8008a6a <_dtoa_r+0x722>
 80087d6:	4b6b      	ldr	r3, [pc, #428]	; (8008984 <_dtoa_r+0x63c>)
 80087d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f280 80dc 	bge.w	80089a0 <_dtoa_r+0x658>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f300 80d8 	bgt.w	80089a0 <_dtoa_r+0x658>
 80087f0:	f040 826f 	bne.w	8008cd2 <_dtoa_r+0x98a>
 80087f4:	4b68      	ldr	r3, [pc, #416]	; (8008998 <_dtoa_r+0x650>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_dmul>
 8008800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008804:	f7f8 f986 	bl	8000b14 <__aeabi_dcmpge>
 8008808:	9e04      	ldr	r6, [sp, #16]
 800880a:	4637      	mov	r7, r6
 800880c:	2800      	cmp	r0, #0
 800880e:	f040 8245 	bne.w	8008c9c <_dtoa_r+0x954>
 8008812:	9d00      	ldr	r5, [sp, #0]
 8008814:	2331      	movs	r3, #49	; 0x31
 8008816:	f805 3b01 	strb.w	r3, [r5], #1
 800881a:	f10b 0b01 	add.w	fp, fp, #1
 800881e:	e241      	b.n	8008ca4 <_dtoa_r+0x95c>
 8008820:	07f2      	lsls	r2, r6, #31
 8008822:	d505      	bpl.n	8008830 <_dtoa_r+0x4e8>
 8008824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008828:	f7f7 feee 	bl	8000608 <__aeabi_dmul>
 800882c:	3501      	adds	r5, #1
 800882e:	2301      	movs	r3, #1
 8008830:	1076      	asrs	r6, r6, #1
 8008832:	3708      	adds	r7, #8
 8008834:	e773      	b.n	800871e <_dtoa_r+0x3d6>
 8008836:	2502      	movs	r5, #2
 8008838:	e775      	b.n	8008726 <_dtoa_r+0x3de>
 800883a:	9e04      	ldr	r6, [sp, #16]
 800883c:	465f      	mov	r7, fp
 800883e:	e792      	b.n	8008766 <_dtoa_r+0x41e>
 8008840:	9900      	ldr	r1, [sp, #0]
 8008842:	4b50      	ldr	r3, [pc, #320]	; (8008984 <_dtoa_r+0x63c>)
 8008844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008848:	4431      	add	r1, r6
 800884a:	9102      	str	r1, [sp, #8]
 800884c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800884e:	eeb0 9a47 	vmov.f32	s18, s14
 8008852:	eef0 9a67 	vmov.f32	s19, s15
 8008856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800885a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885e:	2900      	cmp	r1, #0
 8008860:	d044      	beq.n	80088ec <_dtoa_r+0x5a4>
 8008862:	494e      	ldr	r1, [pc, #312]	; (800899c <_dtoa_r+0x654>)
 8008864:	2000      	movs	r0, #0
 8008866:	f7f7 fff9 	bl	800085c <__aeabi_ddiv>
 800886a:	ec53 2b19 	vmov	r2, r3, d9
 800886e:	f7f7 fd13 	bl	8000298 <__aeabi_dsub>
 8008872:	9d00      	ldr	r5, [sp, #0]
 8008874:	ec41 0b19 	vmov	d9, r0, r1
 8008878:	4649      	mov	r1, r9
 800887a:	4640      	mov	r0, r8
 800887c:	f7f8 f974 	bl	8000b68 <__aeabi_d2iz>
 8008880:	4606      	mov	r6, r0
 8008882:	f7f7 fe57 	bl	8000534 <__aeabi_i2d>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f7 fd03 	bl	8000298 <__aeabi_dsub>
 8008892:	3630      	adds	r6, #48	; 0x30
 8008894:	f805 6b01 	strb.w	r6, [r5], #1
 8008898:	ec53 2b19 	vmov	r2, r3, d9
 800889c:	4680      	mov	r8, r0
 800889e:	4689      	mov	r9, r1
 80088a0:	f7f8 f924 	bl	8000aec <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d164      	bne.n	8008972 <_dtoa_r+0x62a>
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	4937      	ldr	r1, [pc, #220]	; (800898c <_dtoa_r+0x644>)
 80088ae:	2000      	movs	r0, #0
 80088b0:	f7f7 fcf2 	bl	8000298 <__aeabi_dsub>
 80088b4:	ec53 2b19 	vmov	r2, r3, d9
 80088b8:	f7f8 f918 	bl	8000aec <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f040 80b6 	bne.w	8008a2e <_dtoa_r+0x6e6>
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	429d      	cmp	r5, r3
 80088c6:	f43f af7c 	beq.w	80087c2 <_dtoa_r+0x47a>
 80088ca:	4b31      	ldr	r3, [pc, #196]	; (8008990 <_dtoa_r+0x648>)
 80088cc:	ec51 0b19 	vmov	r0, r1, d9
 80088d0:	2200      	movs	r2, #0
 80088d2:	f7f7 fe99 	bl	8000608 <__aeabi_dmul>
 80088d6:	4b2e      	ldr	r3, [pc, #184]	; (8008990 <_dtoa_r+0x648>)
 80088d8:	ec41 0b19 	vmov	d9, r0, r1
 80088dc:	2200      	movs	r2, #0
 80088de:	4640      	mov	r0, r8
 80088e0:	4649      	mov	r1, r9
 80088e2:	f7f7 fe91 	bl	8000608 <__aeabi_dmul>
 80088e6:	4680      	mov	r8, r0
 80088e8:	4689      	mov	r9, r1
 80088ea:	e7c5      	b.n	8008878 <_dtoa_r+0x530>
 80088ec:	ec51 0b17 	vmov	r0, r1, d7
 80088f0:	f7f7 fe8a 	bl	8000608 <__aeabi_dmul>
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	9d00      	ldr	r5, [sp, #0]
 80088f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088fa:	ec41 0b19 	vmov	d9, r0, r1
 80088fe:	4649      	mov	r1, r9
 8008900:	4640      	mov	r0, r8
 8008902:	f7f8 f931 	bl	8000b68 <__aeabi_d2iz>
 8008906:	4606      	mov	r6, r0
 8008908:	f7f7 fe14 	bl	8000534 <__aeabi_i2d>
 800890c:	3630      	adds	r6, #48	; 0x30
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4640      	mov	r0, r8
 8008914:	4649      	mov	r1, r9
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	f805 6b01 	strb.w	r6, [r5], #1
 800891e:	9b02      	ldr	r3, [sp, #8]
 8008920:	429d      	cmp	r5, r3
 8008922:	4680      	mov	r8, r0
 8008924:	4689      	mov	r9, r1
 8008926:	f04f 0200 	mov.w	r2, #0
 800892a:	d124      	bne.n	8008976 <_dtoa_r+0x62e>
 800892c:	4b1b      	ldr	r3, [pc, #108]	; (800899c <_dtoa_r+0x654>)
 800892e:	ec51 0b19 	vmov	r0, r1, d9
 8008932:	f7f7 fcb3 	bl	800029c <__adddf3>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f8 f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8008942:	2800      	cmp	r0, #0
 8008944:	d173      	bne.n	8008a2e <_dtoa_r+0x6e6>
 8008946:	ec53 2b19 	vmov	r2, r3, d9
 800894a:	4914      	ldr	r1, [pc, #80]	; (800899c <_dtoa_r+0x654>)
 800894c:	2000      	movs	r0, #0
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4640      	mov	r0, r8
 8008958:	4649      	mov	r1, r9
 800895a:	f7f8 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f43f af2f 	beq.w	80087c2 <_dtoa_r+0x47a>
 8008964:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008966:	1e6b      	subs	r3, r5, #1
 8008968:	930f      	str	r3, [sp, #60]	; 0x3c
 800896a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800896e:	2b30      	cmp	r3, #48	; 0x30
 8008970:	d0f8      	beq.n	8008964 <_dtoa_r+0x61c>
 8008972:	46bb      	mov	fp, r7
 8008974:	e04a      	b.n	8008a0c <_dtoa_r+0x6c4>
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <_dtoa_r+0x648>)
 8008978:	f7f7 fe46 	bl	8000608 <__aeabi_dmul>
 800897c:	4680      	mov	r8, r0
 800897e:	4689      	mov	r9, r1
 8008980:	e7bd      	b.n	80088fe <_dtoa_r+0x5b6>
 8008982:	bf00      	nop
 8008984:	0800a4c8 	.word	0x0800a4c8
 8008988:	0800a4a0 	.word	0x0800a4a0
 800898c:	3ff00000 	.word	0x3ff00000
 8008990:	40240000 	.word	0x40240000
 8008994:	401c0000 	.word	0x401c0000
 8008998:	40140000 	.word	0x40140000
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089a4:	9d00      	ldr	r5, [sp, #0]
 80089a6:	4642      	mov	r2, r8
 80089a8:	464b      	mov	r3, r9
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 ff55 	bl	800085c <__aeabi_ddiv>
 80089b2:	f7f8 f8d9 	bl	8000b68 <__aeabi_d2iz>
 80089b6:	9001      	str	r0, [sp, #4]
 80089b8:	f7f7 fdbc 	bl	8000534 <__aeabi_i2d>
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	f7f7 fe22 	bl	8000608 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f7 fc64 	bl	8000298 <__aeabi_dsub>
 80089d0:	9e01      	ldr	r6, [sp, #4]
 80089d2:	9f04      	ldr	r7, [sp, #16]
 80089d4:	3630      	adds	r6, #48	; 0x30
 80089d6:	f805 6b01 	strb.w	r6, [r5], #1
 80089da:	9e00      	ldr	r6, [sp, #0]
 80089dc:	1bae      	subs	r6, r5, r6
 80089de:	42b7      	cmp	r7, r6
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	d134      	bne.n	8008a50 <_dtoa_r+0x708>
 80089e6:	f7f7 fc59 	bl	800029c <__adddf3>
 80089ea:	4642      	mov	r2, r8
 80089ec:	464b      	mov	r3, r9
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	f7f8 f899 	bl	8000b28 <__aeabi_dcmpgt>
 80089f6:	b9c8      	cbnz	r0, 8008a2c <_dtoa_r+0x6e4>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f8 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a04:	b110      	cbz	r0, 8008a0c <_dtoa_r+0x6c4>
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	07db      	lsls	r3, r3, #31
 8008a0a:	d40f      	bmi.n	8008a2c <_dtoa_r+0x6e4>
 8008a0c:	4651      	mov	r1, sl
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 fbcc 	bl	80091ac <_Bfree>
 8008a14:	2300      	movs	r3, #0
 8008a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a18:	702b      	strb	r3, [r5, #0]
 8008a1a:	f10b 0301 	add.w	r3, fp, #1
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f43f ace2 	beq.w	80083ec <_dtoa_r+0xa4>
 8008a28:	601d      	str	r5, [r3, #0]
 8008a2a:	e4df      	b.n	80083ec <_dtoa_r+0xa4>
 8008a2c:	465f      	mov	r7, fp
 8008a2e:	462b      	mov	r3, r5
 8008a30:	461d      	mov	r5, r3
 8008a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a36:	2a39      	cmp	r2, #57	; 0x39
 8008a38:	d106      	bne.n	8008a48 <_dtoa_r+0x700>
 8008a3a:	9a00      	ldr	r2, [sp, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d1f7      	bne.n	8008a30 <_dtoa_r+0x6e8>
 8008a40:	9900      	ldr	r1, [sp, #0]
 8008a42:	2230      	movs	r2, #48	; 0x30
 8008a44:	3701      	adds	r7, #1
 8008a46:	700a      	strb	r2, [r1, #0]
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e790      	b.n	8008972 <_dtoa_r+0x62a>
 8008a50:	4ba3      	ldr	r3, [pc, #652]	; (8008ce0 <_dtoa_r+0x998>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	f7f7 fdd8 	bl	8000608 <__aeabi_dmul>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	f7f8 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d09e      	beq.n	80089a6 <_dtoa_r+0x65e>
 8008a68:	e7d0      	b.n	8008a0c <_dtoa_r+0x6c4>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80ca 	beq.w	8008c06 <_dtoa_r+0x8be>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	f300 80ad 	bgt.w	8008bd4 <_dtoa_r+0x88c>
 8008a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f000 80a5 	beq.w	8008bcc <_dtoa_r+0x884>
 8008a82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a86:	9e08      	ldr	r6, [sp, #32]
 8008a88:	9d05      	ldr	r5, [sp, #20]
 8008a8a:	9a05      	ldr	r2, [sp, #20]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	9205      	str	r2, [sp, #20]
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	2101      	movs	r1, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	4620      	mov	r0, r4
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	f000 fc3d 	bl	8009318 <__i2b>
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	b165      	cbz	r5, 8008abc <_dtoa_r+0x774>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd09      	ble.n	8008abc <_dtoa_r+0x774>
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	9a05      	ldr	r2, [sp, #20]
 8008aac:	bfa8      	it	ge
 8008aae:	462b      	movge	r3, r5
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	9205      	str	r2, [sp, #20]
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	1aed      	subs	r5, r5, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	9306      	str	r3, [sp, #24]
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	b1f3      	cbz	r3, 8008afe <_dtoa_r+0x7b6>
 8008ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80a3 	beq.w	8008c0e <_dtoa_r+0x8c6>
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	dd10      	ble.n	8008aee <_dtoa_r+0x7a6>
 8008acc:	4639      	mov	r1, r7
 8008ace:	4632      	mov	r2, r6
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fce1 	bl	8009498 <__pow5mult>
 8008ad6:	4652      	mov	r2, sl
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4607      	mov	r7, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fc31 	bl	8009344 <__multiply>
 8008ae2:	4651      	mov	r1, sl
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fb60 	bl	80091ac <_Bfree>
 8008aec:	46c2      	mov	sl, r8
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	1b9a      	subs	r2, r3, r6
 8008af2:	d004      	beq.n	8008afe <_dtoa_r+0x7b6>
 8008af4:	4651      	mov	r1, sl
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 fcce 	bl	8009498 <__pow5mult>
 8008afc:	4682      	mov	sl, r0
 8008afe:	2101      	movs	r1, #1
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fc09 	bl	8009318 <__i2b>
 8008b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	f340 8081 	ble.w	8008c12 <_dtoa_r+0x8ca>
 8008b10:	461a      	mov	r2, r3
 8008b12:	4601      	mov	r1, r0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fcbf 	bl	8009498 <__pow5mult>
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	4606      	mov	r6, r0
 8008b20:	dd7a      	ble.n	8008c18 <_dtoa_r+0x8d0>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	6933      	ldr	r3, [r6, #16]
 8008b28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b2c:	6918      	ldr	r0, [r3, #16]
 8008b2e:	f000 fba5 	bl	800927c <__hi0bits>
 8008b32:	f1c0 0020 	rsb	r0, r0, #32
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	4418      	add	r0, r3
 8008b3a:	f010 001f 	ands.w	r0, r0, #31
 8008b3e:	f000 8094 	beq.w	8008c6a <_dtoa_r+0x922>
 8008b42:	f1c0 0320 	rsb	r3, r0, #32
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	f340 8085 	ble.w	8008c56 <_dtoa_r+0x90e>
 8008b4c:	9b05      	ldr	r3, [sp, #20]
 8008b4e:	f1c0 001c 	rsb	r0, r0, #28
 8008b52:	4403      	add	r3, r0
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	4403      	add	r3, r0
 8008b5a:	4405      	add	r5, r0
 8008b5c:	9306      	str	r3, [sp, #24]
 8008b5e:	9b05      	ldr	r3, [sp, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dd05      	ble.n	8008b70 <_dtoa_r+0x828>
 8008b64:	4651      	mov	r1, sl
 8008b66:	461a      	mov	r2, r3
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fcef 	bl	800954c <__lshift>
 8008b6e:	4682      	mov	sl, r0
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd05      	ble.n	8008b82 <_dtoa_r+0x83a>
 8008b76:	4631      	mov	r1, r6
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fce6 	bl	800954c <__lshift>
 8008b80:	4606      	mov	r6, r0
 8008b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d072      	beq.n	8008c6e <_dtoa_r+0x926>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f000 fd4a 	bl	8009624 <__mcmp>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	da6c      	bge.n	8008c6e <_dtoa_r+0x926>
 8008b94:	2300      	movs	r3, #0
 8008b96:	4651      	mov	r1, sl
 8008b98:	220a      	movs	r2, #10
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fb28 	bl	80091f0 <__multadd>
 8008ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81b0 	beq.w	8008f0e <_dtoa_r+0xbc6>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fb1b 	bl	80091f0 <__multadd>
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	f300 8096 	bgt.w	8008cf0 <_dtoa_r+0x9a8>
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	dc59      	bgt.n	8008c7e <_dtoa_r+0x936>
 8008bca:	e091      	b.n	8008cf0 <_dtoa_r+0x9a8>
 8008bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bd2:	e758      	b.n	8008a86 <_dtoa_r+0x73e>
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	1e5e      	subs	r6, r3, #1
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	bfbf      	itttt	lt
 8008bde:	9b08      	ldrlt	r3, [sp, #32]
 8008be0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008be2:	9608      	strlt	r6, [sp, #32]
 8008be4:	1af3      	sublt	r3, r6, r3
 8008be6:	bfb4      	ite	lt
 8008be8:	18d2      	addlt	r2, r2, r3
 8008bea:	1b9e      	subge	r6, r3, r6
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	bfbc      	itt	lt
 8008bf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008bf2:	2600      	movlt	r6, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb7      	itett	lt
 8008bf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008bfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c00:	1a9d      	sublt	r5, r3, r2
 8008c02:	2300      	movlt	r3, #0
 8008c04:	e741      	b.n	8008a8a <_dtoa_r+0x742>
 8008c06:	9e08      	ldr	r6, [sp, #32]
 8008c08:	9d05      	ldr	r5, [sp, #20]
 8008c0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c0c:	e748      	b.n	8008aa0 <_dtoa_r+0x758>
 8008c0e:	9a08      	ldr	r2, [sp, #32]
 8008c10:	e770      	b.n	8008af4 <_dtoa_r+0x7ac>
 8008c12:	9b07      	ldr	r3, [sp, #28]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	dc19      	bgt.n	8008c4c <_dtoa_r+0x904>
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	b9bb      	cbnz	r3, 8008c4c <_dtoa_r+0x904>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c22:	b99b      	cbnz	r3, 8008c4c <_dtoa_r+0x904>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c2a:	0d1b      	lsrs	r3, r3, #20
 8008c2c:	051b      	lsls	r3, r3, #20
 8008c2e:	b183      	cbz	r3, 8008c52 <_dtoa_r+0x90a>
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	9306      	str	r3, [sp, #24]
 8008c3c:	f04f 0801 	mov.w	r8, #1
 8008c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f47f af6f 	bne.w	8008b26 <_dtoa_r+0x7de>
 8008c48:	2001      	movs	r0, #1
 8008c4a:	e774      	b.n	8008b36 <_dtoa_r+0x7ee>
 8008c4c:	f04f 0800 	mov.w	r8, #0
 8008c50:	e7f6      	b.n	8008c40 <_dtoa_r+0x8f8>
 8008c52:	4698      	mov	r8, r3
 8008c54:	e7f4      	b.n	8008c40 <_dtoa_r+0x8f8>
 8008c56:	d082      	beq.n	8008b5e <_dtoa_r+0x816>
 8008c58:	9a05      	ldr	r2, [sp, #20]
 8008c5a:	331c      	adds	r3, #28
 8008c5c:	441a      	add	r2, r3
 8008c5e:	9205      	str	r2, [sp, #20]
 8008c60:	9a06      	ldr	r2, [sp, #24]
 8008c62:	441a      	add	r2, r3
 8008c64:	441d      	add	r5, r3
 8008c66:	9206      	str	r2, [sp, #24]
 8008c68:	e779      	b.n	8008b5e <_dtoa_r+0x816>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	e7f4      	b.n	8008c58 <_dtoa_r+0x910>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dc37      	bgt.n	8008ce4 <_dtoa_r+0x99c>
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	dd34      	ble.n	8008ce4 <_dtoa_r+0x99c>
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	b963      	cbnz	r3, 8008c9c <_dtoa_r+0x954>
 8008c82:	4631      	mov	r1, r6
 8008c84:	2205      	movs	r2, #5
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 fab2 	bl	80091f0 <__multadd>
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	4606      	mov	r6, r0
 8008c90:	4650      	mov	r0, sl
 8008c92:	f000 fcc7 	bl	8009624 <__mcmp>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f73f adbb 	bgt.w	8008812 <_dtoa_r+0x4ca>
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9e:	9d00      	ldr	r5, [sp, #0]
 8008ca0:	ea6f 0b03 	mvn.w	fp, r3
 8008ca4:	f04f 0800 	mov.w	r8, #0
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fa7e 	bl	80091ac <_Bfree>
 8008cb0:	2f00      	cmp	r7, #0
 8008cb2:	f43f aeab 	beq.w	8008a0c <_dtoa_r+0x6c4>
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	d005      	beq.n	8008cc8 <_dtoa_r+0x980>
 8008cbc:	45b8      	cmp	r8, r7
 8008cbe:	d003      	beq.n	8008cc8 <_dtoa_r+0x980>
 8008cc0:	4641      	mov	r1, r8
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fa72 	bl	80091ac <_Bfree>
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fa6e 	bl	80091ac <_Bfree>
 8008cd0:	e69c      	b.n	8008a0c <_dtoa_r+0x6c4>
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	4637      	mov	r7, r6
 8008cd6:	e7e1      	b.n	8008c9c <_dtoa_r+0x954>
 8008cd8:	46bb      	mov	fp, r7
 8008cda:	4637      	mov	r7, r6
 8008cdc:	e599      	b.n	8008812 <_dtoa_r+0x4ca>
 8008cde:	bf00      	nop
 8008ce0:	40240000 	.word	0x40240000
 8008ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80c8 	beq.w	8008e7c <_dtoa_r+0xb34>
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	2d00      	cmp	r5, #0
 8008cf2:	dd05      	ble.n	8008d00 <_dtoa_r+0x9b8>
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fc27 	bl	800954c <__lshift>
 8008cfe:	4607      	mov	r7, r0
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	d05b      	beq.n	8008dbe <_dtoa_r+0xa76>
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fa0f 	bl	800912c <_Balloc>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	b928      	cbnz	r0, 8008d1e <_dtoa_r+0x9d6>
 8008d12:	4b83      	ldr	r3, [pc, #524]	; (8008f20 <_dtoa_r+0xbd8>)
 8008d14:	4602      	mov	r2, r0
 8008d16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d1a:	f7ff bb2e 	b.w	800837a <_dtoa_r+0x32>
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	3202      	adds	r2, #2
 8008d22:	0092      	lsls	r2, r2, #2
 8008d24:	f107 010c 	add.w	r1, r7, #12
 8008d28:	300c      	adds	r0, #12
 8008d2a:	f000 ffab 	bl	8009c84 <memcpy>
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4629      	mov	r1, r5
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fc0a 	bl	800954c <__lshift>
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d42:	4413      	add	r3, r2
 8008d44:	9308      	str	r3, [sp, #32]
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	46b8      	mov	r8, r7
 8008d4e:	9306      	str	r3, [sp, #24]
 8008d50:	4607      	mov	r7, r0
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	4631      	mov	r1, r6
 8008d56:	3b01      	subs	r3, #1
 8008d58:	4650      	mov	r0, sl
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	f7ff fa6a 	bl	8008234 <quorem>
 8008d60:	4641      	mov	r1, r8
 8008d62:	9002      	str	r0, [sp, #8]
 8008d64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d68:	4650      	mov	r0, sl
 8008d6a:	f000 fc5b 	bl	8009624 <__mcmp>
 8008d6e:	463a      	mov	r2, r7
 8008d70:	9005      	str	r0, [sp, #20]
 8008d72:	4631      	mov	r1, r6
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 fc71 	bl	800965c <__mdiff>
 8008d7a:	68c2      	ldr	r2, [r0, #12]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	bb02      	cbnz	r2, 8008dc2 <_dtoa_r+0xa7a>
 8008d80:	4601      	mov	r1, r0
 8008d82:	4650      	mov	r0, sl
 8008d84:	f000 fc4e 	bl	8009624 <__mcmp>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d90:	f000 fa0c 	bl	80091ac <_Bfree>
 8008d94:	9b07      	ldr	r3, [sp, #28]
 8008d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d98:	9d04      	ldr	r5, [sp, #16]
 8008d9a:	ea43 0102 	orr.w	r1, r3, r2
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	4319      	orrs	r1, r3
 8008da2:	d110      	bne.n	8008dc6 <_dtoa_r+0xa7e>
 8008da4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008da8:	d029      	beq.n	8008dfe <_dtoa_r+0xab6>
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dd02      	ble.n	8008db6 <_dtoa_r+0xa6e>
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	f883 9000 	strb.w	r9, [r3]
 8008dbc:	e774      	b.n	8008ca8 <_dtoa_r+0x960>
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	e7ba      	b.n	8008d38 <_dtoa_r+0x9f0>
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	e7e1      	b.n	8008d8a <_dtoa_r+0xa42>
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db04      	blt.n	8008dd6 <_dtoa_r+0xa8e>
 8008dcc:	9907      	ldr	r1, [sp, #28]
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	9906      	ldr	r1, [sp, #24]
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	d120      	bne.n	8008e18 <_dtoa_r+0xad0>
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	dded      	ble.n	8008db6 <_dtoa_r+0xa6e>
 8008dda:	4651      	mov	r1, sl
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 fbb4 	bl	800954c <__lshift>
 8008de4:	4631      	mov	r1, r6
 8008de6:	4682      	mov	sl, r0
 8008de8:	f000 fc1c 	bl	8009624 <__mcmp>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	dc03      	bgt.n	8008df8 <_dtoa_r+0xab0>
 8008df0:	d1e1      	bne.n	8008db6 <_dtoa_r+0xa6e>
 8008df2:	f019 0f01 	tst.w	r9, #1
 8008df6:	d0de      	beq.n	8008db6 <_dtoa_r+0xa6e>
 8008df8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dfc:	d1d8      	bne.n	8008db0 <_dtoa_r+0xa68>
 8008dfe:	9a01      	ldr	r2, [sp, #4]
 8008e00:	2339      	movs	r3, #57	; 0x39
 8008e02:	7013      	strb	r3, [r2, #0]
 8008e04:	462b      	mov	r3, r5
 8008e06:	461d      	mov	r5, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e0e:	2a39      	cmp	r2, #57	; 0x39
 8008e10:	d06c      	beq.n	8008eec <_dtoa_r+0xba4>
 8008e12:	3201      	adds	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e747      	b.n	8008ca8 <_dtoa_r+0x960>
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	dd07      	ble.n	8008e2c <_dtoa_r+0xae4>
 8008e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e20:	d0ed      	beq.n	8008dfe <_dtoa_r+0xab6>
 8008e22:	9a01      	ldr	r2, [sp, #4]
 8008e24:	f109 0301 	add.w	r3, r9, #1
 8008e28:	7013      	strb	r3, [r2, #0]
 8008e2a:	e73d      	b.n	8008ca8 <_dtoa_r+0x960>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	9a08      	ldr	r2, [sp, #32]
 8008e30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d043      	beq.n	8008ec0 <_dtoa_r+0xb78>
 8008e38:	4651      	mov	r1, sl
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 f9d6 	bl	80091f0 <__multadd>
 8008e44:	45b8      	cmp	r8, r7
 8008e46:	4682      	mov	sl, r0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	f04f 020a 	mov.w	r2, #10
 8008e50:	4641      	mov	r1, r8
 8008e52:	4620      	mov	r0, r4
 8008e54:	d107      	bne.n	8008e66 <_dtoa_r+0xb1e>
 8008e56:	f000 f9cb 	bl	80091f0 <__multadd>
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	3301      	adds	r3, #1
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	e775      	b.n	8008d52 <_dtoa_r+0xa0a>
 8008e66:	f000 f9c3 	bl	80091f0 <__multadd>
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f9bc 	bl	80091f0 <__multadd>
 8008e78:	4607      	mov	r7, r0
 8008e7a:	e7f0      	b.n	8008e5e <_dtoa_r+0xb16>
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	9d00      	ldr	r5, [sp, #0]
 8008e82:	4631      	mov	r1, r6
 8008e84:	4650      	mov	r0, sl
 8008e86:	f7ff f9d5 	bl	8008234 <quorem>
 8008e8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e8e:	9b00      	ldr	r3, [sp, #0]
 8008e90:	f805 9b01 	strb.w	r9, [r5], #1
 8008e94:	1aea      	subs	r2, r5, r3
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	dd07      	ble.n	8008eac <_dtoa_r+0xb64>
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	220a      	movs	r2, #10
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f9a4 	bl	80091f0 <__multadd>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	e7ea      	b.n	8008e82 <_dtoa_r+0xb3a>
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfc8      	it	gt
 8008eb2:	461d      	movgt	r5, r3
 8008eb4:	9b00      	ldr	r3, [sp, #0]
 8008eb6:	bfd8      	it	le
 8008eb8:	2501      	movle	r5, #1
 8008eba:	441d      	add	r5, r3
 8008ebc:	f04f 0800 	mov.w	r8, #0
 8008ec0:	4651      	mov	r1, sl
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fb41 	bl	800954c <__lshift>
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4682      	mov	sl, r0
 8008ece:	f000 fba9 	bl	8009624 <__mcmp>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	dc96      	bgt.n	8008e04 <_dtoa_r+0xabc>
 8008ed6:	d102      	bne.n	8008ede <_dtoa_r+0xb96>
 8008ed8:	f019 0f01 	tst.w	r9, #1
 8008edc:	d192      	bne.n	8008e04 <_dtoa_r+0xabc>
 8008ede:	462b      	mov	r3, r5
 8008ee0:	461d      	mov	r5, r3
 8008ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee6:	2a30      	cmp	r2, #48	; 0x30
 8008ee8:	d0fa      	beq.n	8008ee0 <_dtoa_r+0xb98>
 8008eea:	e6dd      	b.n	8008ca8 <_dtoa_r+0x960>
 8008eec:	9a00      	ldr	r2, [sp, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d189      	bne.n	8008e06 <_dtoa_r+0xabe>
 8008ef2:	f10b 0b01 	add.w	fp, fp, #1
 8008ef6:	2331      	movs	r3, #49	; 0x31
 8008ef8:	e796      	b.n	8008e28 <_dtoa_r+0xae0>
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <_dtoa_r+0xbdc>)
 8008efc:	f7ff ba99 	b.w	8008432 <_dtoa_r+0xea>
 8008f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f47f aa6d 	bne.w	80083e2 <_dtoa_r+0x9a>
 8008f08:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <_dtoa_r+0xbe0>)
 8008f0a:	f7ff ba92 	b.w	8008432 <_dtoa_r+0xea>
 8008f0e:	9b01      	ldr	r3, [sp, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dcb5      	bgt.n	8008e80 <_dtoa_r+0xb38>
 8008f14:	9b07      	ldr	r3, [sp, #28]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	f73f aeb1 	bgt.w	8008c7e <_dtoa_r+0x936>
 8008f1c:	e7b0      	b.n	8008e80 <_dtoa_r+0xb38>
 8008f1e:	bf00      	nop
 8008f20:	0800a434 	.word	0x0800a434
 8008f24:	0800a394 	.word	0x0800a394
 8008f28:	0800a3b8 	.word	0x0800a3b8

08008f2c <_free_r>:
 8008f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	d044      	beq.n	8008fbc <_free_r+0x90>
 8008f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f36:	9001      	str	r0, [sp, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f3e:	bfb8      	it	lt
 8008f40:	18e4      	addlt	r4, r4, r3
 8008f42:	f000 f8e7 	bl	8009114 <__malloc_lock>
 8008f46:	4a1e      	ldr	r2, [pc, #120]	; (8008fc0 <_free_r+0x94>)
 8008f48:	9801      	ldr	r0, [sp, #4]
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	b933      	cbnz	r3, 8008f5c <_free_r+0x30>
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	6014      	str	r4, [r2, #0]
 8008f52:	b003      	add	sp, #12
 8008f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f58:	f000 b8e2 	b.w	8009120 <__malloc_unlock>
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d908      	bls.n	8008f72 <_free_r+0x46>
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf01      	itttt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	1949      	addeq	r1, r1, r5
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	e7ed      	b.n	8008f4e <_free_r+0x22>
 8008f72:	461a      	mov	r2, r3
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	b10b      	cbz	r3, 8008f7c <_free_r+0x50>
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d9fa      	bls.n	8008f72 <_free_r+0x46>
 8008f7c:	6811      	ldr	r1, [r2, #0]
 8008f7e:	1855      	adds	r5, r2, r1
 8008f80:	42a5      	cmp	r5, r4
 8008f82:	d10b      	bne.n	8008f9c <_free_r+0x70>
 8008f84:	6824      	ldr	r4, [r4, #0]
 8008f86:	4421      	add	r1, r4
 8008f88:	1854      	adds	r4, r2, r1
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	6011      	str	r1, [r2, #0]
 8008f8e:	d1e0      	bne.n	8008f52 <_free_r+0x26>
 8008f90:	681c      	ldr	r4, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	6053      	str	r3, [r2, #4]
 8008f96:	440c      	add	r4, r1
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	e7da      	b.n	8008f52 <_free_r+0x26>
 8008f9c:	d902      	bls.n	8008fa4 <_free_r+0x78>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	6003      	str	r3, [r0, #0]
 8008fa2:	e7d6      	b.n	8008f52 <_free_r+0x26>
 8008fa4:	6825      	ldr	r5, [r4, #0]
 8008fa6:	1961      	adds	r1, r4, r5
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf04      	itt	eq
 8008fac:	6819      	ldreq	r1, [r3, #0]
 8008fae:	685b      	ldreq	r3, [r3, #4]
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	bf04      	itt	eq
 8008fb4:	1949      	addeq	r1, r1, r5
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	6054      	str	r4, [r2, #4]
 8008fba:	e7ca      	b.n	8008f52 <_free_r+0x26>
 8008fbc:	b003      	add	sp, #12
 8008fbe:	bd30      	pop	{r4, r5, pc}
 8008fc0:	200004ec 	.word	0x200004ec

08008fc4 <malloc>:
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <malloc+0xc>)
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	f000 b823 	b.w	8009014 <_malloc_r>
 8008fce:	bf00      	nop
 8008fd0:	20000070 	.word	0x20000070

08008fd4 <sbrk_aligned>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4e0e      	ldr	r6, [pc, #56]	; (8009010 <sbrk_aligned+0x3c>)
 8008fd8:	460c      	mov	r4, r1
 8008fda:	6831      	ldr	r1, [r6, #0]
 8008fdc:	4605      	mov	r5, r0
 8008fde:	b911      	cbnz	r1, 8008fe6 <sbrk_aligned+0x12>
 8008fe0:	f000 fe40 	bl	8009c64 <_sbrk_r>
 8008fe4:	6030      	str	r0, [r6, #0]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 fe3b 	bl	8009c64 <_sbrk_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d00a      	beq.n	8009008 <sbrk_aligned+0x34>
 8008ff2:	1cc4      	adds	r4, r0, #3
 8008ff4:	f024 0403 	bic.w	r4, r4, #3
 8008ff8:	42a0      	cmp	r0, r4
 8008ffa:	d007      	beq.n	800900c <sbrk_aligned+0x38>
 8008ffc:	1a21      	subs	r1, r4, r0
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 fe30 	bl	8009c64 <_sbrk_r>
 8009004:	3001      	adds	r0, #1
 8009006:	d101      	bne.n	800900c <sbrk_aligned+0x38>
 8009008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800900c:	4620      	mov	r0, r4
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	200004f0 	.word	0x200004f0

08009014 <_malloc_r>:
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	1ccd      	adds	r5, r1, #3
 800901a:	f025 0503 	bic.w	r5, r5, #3
 800901e:	3508      	adds	r5, #8
 8009020:	2d0c      	cmp	r5, #12
 8009022:	bf38      	it	cc
 8009024:	250c      	movcc	r5, #12
 8009026:	2d00      	cmp	r5, #0
 8009028:	4607      	mov	r7, r0
 800902a:	db01      	blt.n	8009030 <_malloc_r+0x1c>
 800902c:	42a9      	cmp	r1, r5
 800902e:	d905      	bls.n	800903c <_malloc_r+0x28>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	2600      	movs	r6, #0
 8009036:	4630      	mov	r0, r6
 8009038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009110 <_malloc_r+0xfc>
 8009040:	f000 f868 	bl	8009114 <__malloc_lock>
 8009044:	f8d8 3000 	ldr.w	r3, [r8]
 8009048:	461c      	mov	r4, r3
 800904a:	bb5c      	cbnz	r4, 80090a4 <_malloc_r+0x90>
 800904c:	4629      	mov	r1, r5
 800904e:	4638      	mov	r0, r7
 8009050:	f7ff ffc0 	bl	8008fd4 <sbrk_aligned>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	4604      	mov	r4, r0
 8009058:	d155      	bne.n	8009106 <_malloc_r+0xf2>
 800905a:	f8d8 4000 	ldr.w	r4, [r8]
 800905e:	4626      	mov	r6, r4
 8009060:	2e00      	cmp	r6, #0
 8009062:	d145      	bne.n	80090f0 <_malloc_r+0xdc>
 8009064:	2c00      	cmp	r4, #0
 8009066:	d048      	beq.n	80090fa <_malloc_r+0xe6>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	4631      	mov	r1, r6
 800906c:	4638      	mov	r0, r7
 800906e:	eb04 0903 	add.w	r9, r4, r3
 8009072:	f000 fdf7 	bl	8009c64 <_sbrk_r>
 8009076:	4581      	cmp	r9, r0
 8009078:	d13f      	bne.n	80090fa <_malloc_r+0xe6>
 800907a:	6821      	ldr	r1, [r4, #0]
 800907c:	1a6d      	subs	r5, r5, r1
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ffa7 	bl	8008fd4 <sbrk_aligned>
 8009086:	3001      	adds	r0, #1
 8009088:	d037      	beq.n	80090fa <_malloc_r+0xe6>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	442b      	add	r3, r5
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	f8d8 3000 	ldr.w	r3, [r8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d038      	beq.n	800910a <_malloc_r+0xf6>
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	42a2      	cmp	r2, r4
 800909c:	d12b      	bne.n	80090f6 <_malloc_r+0xe2>
 800909e:	2200      	movs	r2, #0
 80090a0:	605a      	str	r2, [r3, #4]
 80090a2:	e00f      	b.n	80090c4 <_malloc_r+0xb0>
 80090a4:	6822      	ldr	r2, [r4, #0]
 80090a6:	1b52      	subs	r2, r2, r5
 80090a8:	d41f      	bmi.n	80090ea <_malloc_r+0xd6>
 80090aa:	2a0b      	cmp	r2, #11
 80090ac:	d917      	bls.n	80090de <_malloc_r+0xca>
 80090ae:	1961      	adds	r1, r4, r5
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	6025      	str	r5, [r4, #0]
 80090b4:	bf18      	it	ne
 80090b6:	6059      	strne	r1, [r3, #4]
 80090b8:	6863      	ldr	r3, [r4, #4]
 80090ba:	bf08      	it	eq
 80090bc:	f8c8 1000 	streq.w	r1, [r8]
 80090c0:	5162      	str	r2, [r4, r5]
 80090c2:	604b      	str	r3, [r1, #4]
 80090c4:	4638      	mov	r0, r7
 80090c6:	f104 060b 	add.w	r6, r4, #11
 80090ca:	f000 f829 	bl	8009120 <__malloc_unlock>
 80090ce:	f026 0607 	bic.w	r6, r6, #7
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	1af2      	subs	r2, r6, r3
 80090d6:	d0ae      	beq.n	8009036 <_malloc_r+0x22>
 80090d8:	1b9b      	subs	r3, r3, r6
 80090da:	50a3      	str	r3, [r4, r2]
 80090dc:	e7ab      	b.n	8009036 <_malloc_r+0x22>
 80090de:	42a3      	cmp	r3, r4
 80090e0:	6862      	ldr	r2, [r4, #4]
 80090e2:	d1dd      	bne.n	80090a0 <_malloc_r+0x8c>
 80090e4:	f8c8 2000 	str.w	r2, [r8]
 80090e8:	e7ec      	b.n	80090c4 <_malloc_r+0xb0>
 80090ea:	4623      	mov	r3, r4
 80090ec:	6864      	ldr	r4, [r4, #4]
 80090ee:	e7ac      	b.n	800904a <_malloc_r+0x36>
 80090f0:	4634      	mov	r4, r6
 80090f2:	6876      	ldr	r6, [r6, #4]
 80090f4:	e7b4      	b.n	8009060 <_malloc_r+0x4c>
 80090f6:	4613      	mov	r3, r2
 80090f8:	e7cc      	b.n	8009094 <_malloc_r+0x80>
 80090fa:	230c      	movs	r3, #12
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4638      	mov	r0, r7
 8009100:	f000 f80e 	bl	8009120 <__malloc_unlock>
 8009104:	e797      	b.n	8009036 <_malloc_r+0x22>
 8009106:	6025      	str	r5, [r4, #0]
 8009108:	e7dc      	b.n	80090c4 <_malloc_r+0xb0>
 800910a:	605b      	str	r3, [r3, #4]
 800910c:	deff      	udf	#255	; 0xff
 800910e:	bf00      	nop
 8009110:	200004ec 	.word	0x200004ec

08009114 <__malloc_lock>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__malloc_lock+0x8>)
 8009116:	f7ff b88b 	b.w	8008230 <__retarget_lock_acquire_recursive>
 800911a:	bf00      	nop
 800911c:	200004e8 	.word	0x200004e8

08009120 <__malloc_unlock>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__malloc_unlock+0x8>)
 8009122:	f7ff b886 	b.w	8008232 <__retarget_lock_release_recursive>
 8009126:	bf00      	nop
 8009128:	200004e8 	.word	0x200004e8

0800912c <_Balloc>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	69c6      	ldr	r6, [r0, #28]
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	b976      	cbnz	r6, 8009154 <_Balloc+0x28>
 8009136:	2010      	movs	r0, #16
 8009138:	f7ff ff44 	bl	8008fc4 <malloc>
 800913c:	4602      	mov	r2, r0
 800913e:	61e0      	str	r0, [r4, #28]
 8009140:	b920      	cbnz	r0, 800914c <_Balloc+0x20>
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <_Balloc+0x78>)
 8009144:	4818      	ldr	r0, [pc, #96]	; (80091a8 <_Balloc+0x7c>)
 8009146:	216b      	movs	r1, #107	; 0x6b
 8009148:	f000 fdaa 	bl	8009ca0 <__assert_func>
 800914c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009150:	6006      	str	r6, [r0, #0]
 8009152:	60c6      	str	r6, [r0, #12]
 8009154:	69e6      	ldr	r6, [r4, #28]
 8009156:	68f3      	ldr	r3, [r6, #12]
 8009158:	b183      	cbz	r3, 800917c <_Balloc+0x50>
 800915a:	69e3      	ldr	r3, [r4, #28]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009162:	b9b8      	cbnz	r0, 8009194 <_Balloc+0x68>
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f605 	lsl.w	r6, r1, r5
 800916a:	1d72      	adds	r2, r6, #5
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fdb4 	bl	8009cdc <_calloc_r>
 8009174:	b160      	cbz	r0, 8009190 <_Balloc+0x64>
 8009176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800917a:	e00e      	b.n	800919a <_Balloc+0x6e>
 800917c:	2221      	movs	r2, #33	; 0x21
 800917e:	2104      	movs	r1, #4
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fdab 	bl	8009cdc <_calloc_r>
 8009186:	69e3      	ldr	r3, [r4, #28]
 8009188:	60f0      	str	r0, [r6, #12]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e4      	bne.n	800915a <_Balloc+0x2e>
 8009190:	2000      	movs	r0, #0
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	6802      	ldr	r2, [r0, #0]
 8009196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800919a:	2300      	movs	r3, #0
 800919c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091a0:	e7f7      	b.n	8009192 <_Balloc+0x66>
 80091a2:	bf00      	nop
 80091a4:	0800a3c5 	.word	0x0800a3c5
 80091a8:	0800a445 	.word	0x0800a445

080091ac <_Bfree>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	69c6      	ldr	r6, [r0, #28]
 80091b0:	4605      	mov	r5, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	b976      	cbnz	r6, 80091d4 <_Bfree+0x28>
 80091b6:	2010      	movs	r0, #16
 80091b8:	f7ff ff04 	bl	8008fc4 <malloc>
 80091bc:	4602      	mov	r2, r0
 80091be:	61e8      	str	r0, [r5, #28]
 80091c0:	b920      	cbnz	r0, 80091cc <_Bfree+0x20>
 80091c2:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <_Bfree+0x3c>)
 80091c4:	4809      	ldr	r0, [pc, #36]	; (80091ec <_Bfree+0x40>)
 80091c6:	218f      	movs	r1, #143	; 0x8f
 80091c8:	f000 fd6a 	bl	8009ca0 <__assert_func>
 80091cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091d0:	6006      	str	r6, [r0, #0]
 80091d2:	60c6      	str	r6, [r0, #12]
 80091d4:	b13c      	cbz	r4, 80091e6 <_Bfree+0x3a>
 80091d6:	69eb      	ldr	r3, [r5, #28]
 80091d8:	6862      	ldr	r2, [r4, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091e0:	6021      	str	r1, [r4, #0]
 80091e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	0800a3c5 	.word	0x0800a3c5
 80091ec:	0800a445 	.word	0x0800a445

080091f0 <__multadd>:
 80091f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f4:	690d      	ldr	r5, [r1, #16]
 80091f6:	4607      	mov	r7, r0
 80091f8:	460c      	mov	r4, r1
 80091fa:	461e      	mov	r6, r3
 80091fc:	f101 0c14 	add.w	ip, r1, #20
 8009200:	2000      	movs	r0, #0
 8009202:	f8dc 3000 	ldr.w	r3, [ip]
 8009206:	b299      	uxth	r1, r3
 8009208:	fb02 6101 	mla	r1, r2, r1, r6
 800920c:	0c1e      	lsrs	r6, r3, #16
 800920e:	0c0b      	lsrs	r3, r1, #16
 8009210:	fb02 3306 	mla	r3, r2, r6, r3
 8009214:	b289      	uxth	r1, r1
 8009216:	3001      	adds	r0, #1
 8009218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800921c:	4285      	cmp	r5, r0
 800921e:	f84c 1b04 	str.w	r1, [ip], #4
 8009222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009226:	dcec      	bgt.n	8009202 <__multadd+0x12>
 8009228:	b30e      	cbz	r6, 800926e <__multadd+0x7e>
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	42ab      	cmp	r3, r5
 800922e:	dc19      	bgt.n	8009264 <__multadd+0x74>
 8009230:	6861      	ldr	r1, [r4, #4]
 8009232:	4638      	mov	r0, r7
 8009234:	3101      	adds	r1, #1
 8009236:	f7ff ff79 	bl	800912c <_Balloc>
 800923a:	4680      	mov	r8, r0
 800923c:	b928      	cbnz	r0, 800924a <__multadd+0x5a>
 800923e:	4602      	mov	r2, r0
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <__multadd+0x84>)
 8009242:	480d      	ldr	r0, [pc, #52]	; (8009278 <__multadd+0x88>)
 8009244:	21ba      	movs	r1, #186	; 0xba
 8009246:	f000 fd2b 	bl	8009ca0 <__assert_func>
 800924a:	6922      	ldr	r2, [r4, #16]
 800924c:	3202      	adds	r2, #2
 800924e:	f104 010c 	add.w	r1, r4, #12
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	300c      	adds	r0, #12
 8009256:	f000 fd15 	bl	8009c84 <memcpy>
 800925a:	4621      	mov	r1, r4
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff ffa5 	bl	80091ac <_Bfree>
 8009262:	4644      	mov	r4, r8
 8009264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009268:	3501      	adds	r5, #1
 800926a:	615e      	str	r6, [r3, #20]
 800926c:	6125      	str	r5, [r4, #16]
 800926e:	4620      	mov	r0, r4
 8009270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009274:	0800a434 	.word	0x0800a434
 8009278:	0800a445 	.word	0x0800a445

0800927c <__hi0bits>:
 800927c:	0c03      	lsrs	r3, r0, #16
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	b9d3      	cbnz	r3, 80092b8 <__hi0bits+0x3c>
 8009282:	0400      	lsls	r0, r0, #16
 8009284:	2310      	movs	r3, #16
 8009286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800928a:	bf04      	itt	eq
 800928c:	0200      	lsleq	r0, r0, #8
 800928e:	3308      	addeq	r3, #8
 8009290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009294:	bf04      	itt	eq
 8009296:	0100      	lsleq	r0, r0, #4
 8009298:	3304      	addeq	r3, #4
 800929a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800929e:	bf04      	itt	eq
 80092a0:	0080      	lsleq	r0, r0, #2
 80092a2:	3302      	addeq	r3, #2
 80092a4:	2800      	cmp	r0, #0
 80092a6:	db05      	blt.n	80092b4 <__hi0bits+0x38>
 80092a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092ac:	f103 0301 	add.w	r3, r3, #1
 80092b0:	bf08      	it	eq
 80092b2:	2320      	moveq	r3, #32
 80092b4:	4618      	mov	r0, r3
 80092b6:	4770      	bx	lr
 80092b8:	2300      	movs	r3, #0
 80092ba:	e7e4      	b.n	8009286 <__hi0bits+0xa>

080092bc <__lo0bits>:
 80092bc:	6803      	ldr	r3, [r0, #0]
 80092be:	f013 0207 	ands.w	r2, r3, #7
 80092c2:	d00c      	beq.n	80092de <__lo0bits+0x22>
 80092c4:	07d9      	lsls	r1, r3, #31
 80092c6:	d422      	bmi.n	800930e <__lo0bits+0x52>
 80092c8:	079a      	lsls	r2, r3, #30
 80092ca:	bf49      	itett	mi
 80092cc:	085b      	lsrmi	r3, r3, #1
 80092ce:	089b      	lsrpl	r3, r3, #2
 80092d0:	6003      	strmi	r3, [r0, #0]
 80092d2:	2201      	movmi	r2, #1
 80092d4:	bf5c      	itt	pl
 80092d6:	6003      	strpl	r3, [r0, #0]
 80092d8:	2202      	movpl	r2, #2
 80092da:	4610      	mov	r0, r2
 80092dc:	4770      	bx	lr
 80092de:	b299      	uxth	r1, r3
 80092e0:	b909      	cbnz	r1, 80092e6 <__lo0bits+0x2a>
 80092e2:	0c1b      	lsrs	r3, r3, #16
 80092e4:	2210      	movs	r2, #16
 80092e6:	b2d9      	uxtb	r1, r3
 80092e8:	b909      	cbnz	r1, 80092ee <__lo0bits+0x32>
 80092ea:	3208      	adds	r2, #8
 80092ec:	0a1b      	lsrs	r3, r3, #8
 80092ee:	0719      	lsls	r1, r3, #28
 80092f0:	bf04      	itt	eq
 80092f2:	091b      	lsreq	r3, r3, #4
 80092f4:	3204      	addeq	r2, #4
 80092f6:	0799      	lsls	r1, r3, #30
 80092f8:	bf04      	itt	eq
 80092fa:	089b      	lsreq	r3, r3, #2
 80092fc:	3202      	addeq	r2, #2
 80092fe:	07d9      	lsls	r1, r3, #31
 8009300:	d403      	bmi.n	800930a <__lo0bits+0x4e>
 8009302:	085b      	lsrs	r3, r3, #1
 8009304:	f102 0201 	add.w	r2, r2, #1
 8009308:	d003      	beq.n	8009312 <__lo0bits+0x56>
 800930a:	6003      	str	r3, [r0, #0]
 800930c:	e7e5      	b.n	80092da <__lo0bits+0x1e>
 800930e:	2200      	movs	r2, #0
 8009310:	e7e3      	b.n	80092da <__lo0bits+0x1e>
 8009312:	2220      	movs	r2, #32
 8009314:	e7e1      	b.n	80092da <__lo0bits+0x1e>
	...

08009318 <__i2b>:
 8009318:	b510      	push	{r4, lr}
 800931a:	460c      	mov	r4, r1
 800931c:	2101      	movs	r1, #1
 800931e:	f7ff ff05 	bl	800912c <_Balloc>
 8009322:	4602      	mov	r2, r0
 8009324:	b928      	cbnz	r0, 8009332 <__i2b+0x1a>
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <__i2b+0x24>)
 8009328:	4805      	ldr	r0, [pc, #20]	; (8009340 <__i2b+0x28>)
 800932a:	f240 1145 	movw	r1, #325	; 0x145
 800932e:	f000 fcb7 	bl	8009ca0 <__assert_func>
 8009332:	2301      	movs	r3, #1
 8009334:	6144      	str	r4, [r0, #20]
 8009336:	6103      	str	r3, [r0, #16]
 8009338:	bd10      	pop	{r4, pc}
 800933a:	bf00      	nop
 800933c:	0800a434 	.word	0x0800a434
 8009340:	0800a445 	.word	0x0800a445

08009344 <__multiply>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	4691      	mov	r9, r2
 800934a:	690a      	ldr	r2, [r1, #16]
 800934c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	bfb8      	it	lt
 8009354:	460b      	movlt	r3, r1
 8009356:	460c      	mov	r4, r1
 8009358:	bfbc      	itt	lt
 800935a:	464c      	movlt	r4, r9
 800935c:	4699      	movlt	r9, r3
 800935e:	6927      	ldr	r7, [r4, #16]
 8009360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009364:	68a3      	ldr	r3, [r4, #8]
 8009366:	6861      	ldr	r1, [r4, #4]
 8009368:	eb07 060a 	add.w	r6, r7, sl
 800936c:	42b3      	cmp	r3, r6
 800936e:	b085      	sub	sp, #20
 8009370:	bfb8      	it	lt
 8009372:	3101      	addlt	r1, #1
 8009374:	f7ff feda 	bl	800912c <_Balloc>
 8009378:	b930      	cbnz	r0, 8009388 <__multiply+0x44>
 800937a:	4602      	mov	r2, r0
 800937c:	4b44      	ldr	r3, [pc, #272]	; (8009490 <__multiply+0x14c>)
 800937e:	4845      	ldr	r0, [pc, #276]	; (8009494 <__multiply+0x150>)
 8009380:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009384:	f000 fc8c 	bl	8009ca0 <__assert_func>
 8009388:	f100 0514 	add.w	r5, r0, #20
 800938c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009390:	462b      	mov	r3, r5
 8009392:	2200      	movs	r2, #0
 8009394:	4543      	cmp	r3, r8
 8009396:	d321      	bcc.n	80093dc <__multiply+0x98>
 8009398:	f104 0314 	add.w	r3, r4, #20
 800939c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093a0:	f109 0314 	add.w	r3, r9, #20
 80093a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093a8:	9202      	str	r2, [sp, #8]
 80093aa:	1b3a      	subs	r2, r7, r4
 80093ac:	3a15      	subs	r2, #21
 80093ae:	f022 0203 	bic.w	r2, r2, #3
 80093b2:	3204      	adds	r2, #4
 80093b4:	f104 0115 	add.w	r1, r4, #21
 80093b8:	428f      	cmp	r7, r1
 80093ba:	bf38      	it	cc
 80093bc:	2204      	movcc	r2, #4
 80093be:	9201      	str	r2, [sp, #4]
 80093c0:	9a02      	ldr	r2, [sp, #8]
 80093c2:	9303      	str	r3, [sp, #12]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d80c      	bhi.n	80093e2 <__multiply+0x9e>
 80093c8:	2e00      	cmp	r6, #0
 80093ca:	dd03      	ble.n	80093d4 <__multiply+0x90>
 80093cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d05b      	beq.n	800948c <__multiply+0x148>
 80093d4:	6106      	str	r6, [r0, #16]
 80093d6:	b005      	add	sp, #20
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	f843 2b04 	str.w	r2, [r3], #4
 80093e0:	e7d8      	b.n	8009394 <__multiply+0x50>
 80093e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80093e6:	f1ba 0f00 	cmp.w	sl, #0
 80093ea:	d024      	beq.n	8009436 <__multiply+0xf2>
 80093ec:	f104 0e14 	add.w	lr, r4, #20
 80093f0:	46a9      	mov	r9, r5
 80093f2:	f04f 0c00 	mov.w	ip, #0
 80093f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093fa:	f8d9 1000 	ldr.w	r1, [r9]
 80093fe:	fa1f fb82 	uxth.w	fp, r2
 8009402:	b289      	uxth	r1, r1
 8009404:	fb0a 110b 	mla	r1, sl, fp, r1
 8009408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800940c:	f8d9 2000 	ldr.w	r2, [r9]
 8009410:	4461      	add	r1, ip
 8009412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009416:	fb0a c20b 	mla	r2, sl, fp, ip
 800941a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800941e:	b289      	uxth	r1, r1
 8009420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009424:	4577      	cmp	r7, lr
 8009426:	f849 1b04 	str.w	r1, [r9], #4
 800942a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800942e:	d8e2      	bhi.n	80093f6 <__multiply+0xb2>
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	f845 c002 	str.w	ip, [r5, r2]
 8009436:	9a03      	ldr	r2, [sp, #12]
 8009438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800943c:	3304      	adds	r3, #4
 800943e:	f1b9 0f00 	cmp.w	r9, #0
 8009442:	d021      	beq.n	8009488 <__multiply+0x144>
 8009444:	6829      	ldr	r1, [r5, #0]
 8009446:	f104 0c14 	add.w	ip, r4, #20
 800944a:	46ae      	mov	lr, r5
 800944c:	f04f 0a00 	mov.w	sl, #0
 8009450:	f8bc b000 	ldrh.w	fp, [ip]
 8009454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009458:	fb09 220b 	mla	r2, r9, fp, r2
 800945c:	4452      	add	r2, sl
 800945e:	b289      	uxth	r1, r1
 8009460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009464:	f84e 1b04 	str.w	r1, [lr], #4
 8009468:	f85c 1b04 	ldr.w	r1, [ip], #4
 800946c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009470:	f8be 1000 	ldrh.w	r1, [lr]
 8009474:	fb09 110a 	mla	r1, r9, sl, r1
 8009478:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800947c:	4567      	cmp	r7, ip
 800947e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009482:	d8e5      	bhi.n	8009450 <__multiply+0x10c>
 8009484:	9a01      	ldr	r2, [sp, #4]
 8009486:	50a9      	str	r1, [r5, r2]
 8009488:	3504      	adds	r5, #4
 800948a:	e799      	b.n	80093c0 <__multiply+0x7c>
 800948c:	3e01      	subs	r6, #1
 800948e:	e79b      	b.n	80093c8 <__multiply+0x84>
 8009490:	0800a434 	.word	0x0800a434
 8009494:	0800a445 	.word	0x0800a445

08009498 <__pow5mult>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4615      	mov	r5, r2
 800949e:	f012 0203 	ands.w	r2, r2, #3
 80094a2:	4606      	mov	r6, r0
 80094a4:	460f      	mov	r7, r1
 80094a6:	d007      	beq.n	80094b8 <__pow5mult+0x20>
 80094a8:	4c25      	ldr	r4, [pc, #148]	; (8009540 <__pow5mult+0xa8>)
 80094aa:	3a01      	subs	r2, #1
 80094ac:	2300      	movs	r3, #0
 80094ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094b2:	f7ff fe9d 	bl	80091f0 <__multadd>
 80094b6:	4607      	mov	r7, r0
 80094b8:	10ad      	asrs	r5, r5, #2
 80094ba:	d03d      	beq.n	8009538 <__pow5mult+0xa0>
 80094bc:	69f4      	ldr	r4, [r6, #28]
 80094be:	b97c      	cbnz	r4, 80094e0 <__pow5mult+0x48>
 80094c0:	2010      	movs	r0, #16
 80094c2:	f7ff fd7f 	bl	8008fc4 <malloc>
 80094c6:	4602      	mov	r2, r0
 80094c8:	61f0      	str	r0, [r6, #28]
 80094ca:	b928      	cbnz	r0, 80094d8 <__pow5mult+0x40>
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <__pow5mult+0xac>)
 80094ce:	481e      	ldr	r0, [pc, #120]	; (8009548 <__pow5mult+0xb0>)
 80094d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80094d4:	f000 fbe4 	bl	8009ca0 <__assert_func>
 80094d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094dc:	6004      	str	r4, [r0, #0]
 80094de:	60c4      	str	r4, [r0, #12]
 80094e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80094e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094e8:	b94c      	cbnz	r4, 80094fe <__pow5mult+0x66>
 80094ea:	f240 2171 	movw	r1, #625	; 0x271
 80094ee:	4630      	mov	r0, r6
 80094f0:	f7ff ff12 	bl	8009318 <__i2b>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094fa:	4604      	mov	r4, r0
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	f04f 0900 	mov.w	r9, #0
 8009502:	07eb      	lsls	r3, r5, #31
 8009504:	d50a      	bpl.n	800951c <__pow5mult+0x84>
 8009506:	4639      	mov	r1, r7
 8009508:	4622      	mov	r2, r4
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ff1a 	bl	8009344 <__multiply>
 8009510:	4639      	mov	r1, r7
 8009512:	4680      	mov	r8, r0
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fe49 	bl	80091ac <_Bfree>
 800951a:	4647      	mov	r7, r8
 800951c:	106d      	asrs	r5, r5, #1
 800951e:	d00b      	beq.n	8009538 <__pow5mult+0xa0>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	b938      	cbnz	r0, 8009534 <__pow5mult+0x9c>
 8009524:	4622      	mov	r2, r4
 8009526:	4621      	mov	r1, r4
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ff0b 	bl	8009344 <__multiply>
 800952e:	6020      	str	r0, [r4, #0]
 8009530:	f8c0 9000 	str.w	r9, [r0]
 8009534:	4604      	mov	r4, r0
 8009536:	e7e4      	b.n	8009502 <__pow5mult+0x6a>
 8009538:	4638      	mov	r0, r7
 800953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953e:	bf00      	nop
 8009540:	0800a590 	.word	0x0800a590
 8009544:	0800a3c5 	.word	0x0800a3c5
 8009548:	0800a445 	.word	0x0800a445

0800954c <__lshift>:
 800954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	6849      	ldr	r1, [r1, #4]
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800955a:	68a3      	ldr	r3, [r4, #8]
 800955c:	4607      	mov	r7, r0
 800955e:	4691      	mov	r9, r2
 8009560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009564:	f108 0601 	add.w	r6, r8, #1
 8009568:	42b3      	cmp	r3, r6
 800956a:	db0b      	blt.n	8009584 <__lshift+0x38>
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff fddd 	bl	800912c <_Balloc>
 8009572:	4605      	mov	r5, r0
 8009574:	b948      	cbnz	r0, 800958a <__lshift+0x3e>
 8009576:	4602      	mov	r2, r0
 8009578:	4b28      	ldr	r3, [pc, #160]	; (800961c <__lshift+0xd0>)
 800957a:	4829      	ldr	r0, [pc, #164]	; (8009620 <__lshift+0xd4>)
 800957c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009580:	f000 fb8e 	bl	8009ca0 <__assert_func>
 8009584:	3101      	adds	r1, #1
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	e7ee      	b.n	8009568 <__lshift+0x1c>
 800958a:	2300      	movs	r3, #0
 800958c:	f100 0114 	add.w	r1, r0, #20
 8009590:	f100 0210 	add.w	r2, r0, #16
 8009594:	4618      	mov	r0, r3
 8009596:	4553      	cmp	r3, sl
 8009598:	db33      	blt.n	8009602 <__lshift+0xb6>
 800959a:	6920      	ldr	r0, [r4, #16]
 800959c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095a0:	f104 0314 	add.w	r3, r4, #20
 80095a4:	f019 091f 	ands.w	r9, r9, #31
 80095a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095b0:	d02b      	beq.n	800960a <__lshift+0xbe>
 80095b2:	f1c9 0e20 	rsb	lr, r9, #32
 80095b6:	468a      	mov	sl, r1
 80095b8:	2200      	movs	r2, #0
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	fa00 f009 	lsl.w	r0, r0, r9
 80095c0:	4310      	orrs	r0, r2
 80095c2:	f84a 0b04 	str.w	r0, [sl], #4
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	459c      	cmp	ip, r3
 80095cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80095d0:	d8f3      	bhi.n	80095ba <__lshift+0x6e>
 80095d2:	ebac 0304 	sub.w	r3, ip, r4
 80095d6:	3b15      	subs	r3, #21
 80095d8:	f023 0303 	bic.w	r3, r3, #3
 80095dc:	3304      	adds	r3, #4
 80095de:	f104 0015 	add.w	r0, r4, #21
 80095e2:	4584      	cmp	ip, r0
 80095e4:	bf38      	it	cc
 80095e6:	2304      	movcc	r3, #4
 80095e8:	50ca      	str	r2, [r1, r3]
 80095ea:	b10a      	cbz	r2, 80095f0 <__lshift+0xa4>
 80095ec:	f108 0602 	add.w	r6, r8, #2
 80095f0:	3e01      	subs	r6, #1
 80095f2:	4638      	mov	r0, r7
 80095f4:	612e      	str	r6, [r5, #16]
 80095f6:	4621      	mov	r1, r4
 80095f8:	f7ff fdd8 	bl	80091ac <_Bfree>
 80095fc:	4628      	mov	r0, r5
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	f842 0f04 	str.w	r0, [r2, #4]!
 8009606:	3301      	adds	r3, #1
 8009608:	e7c5      	b.n	8009596 <__lshift+0x4a>
 800960a:	3904      	subs	r1, #4
 800960c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009610:	f841 2f04 	str.w	r2, [r1, #4]!
 8009614:	459c      	cmp	ip, r3
 8009616:	d8f9      	bhi.n	800960c <__lshift+0xc0>
 8009618:	e7ea      	b.n	80095f0 <__lshift+0xa4>
 800961a:	bf00      	nop
 800961c:	0800a434 	.word	0x0800a434
 8009620:	0800a445 	.word	0x0800a445

08009624 <__mcmp>:
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	6902      	ldr	r2, [r0, #16]
 8009628:	690c      	ldr	r4, [r1, #16]
 800962a:	1b12      	subs	r2, r2, r4
 800962c:	d10e      	bne.n	800964c <__mcmp+0x28>
 800962e:	f100 0314 	add.w	r3, r0, #20
 8009632:	3114      	adds	r1, #20
 8009634:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009638:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800963c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009640:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009644:	42a5      	cmp	r5, r4
 8009646:	d003      	beq.n	8009650 <__mcmp+0x2c>
 8009648:	d305      	bcc.n	8009656 <__mcmp+0x32>
 800964a:	2201      	movs	r2, #1
 800964c:	4610      	mov	r0, r2
 800964e:	bd30      	pop	{r4, r5, pc}
 8009650:	4283      	cmp	r3, r0
 8009652:	d3f3      	bcc.n	800963c <__mcmp+0x18>
 8009654:	e7fa      	b.n	800964c <__mcmp+0x28>
 8009656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800965a:	e7f7      	b.n	800964c <__mcmp+0x28>

0800965c <__mdiff>:
 800965c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	460c      	mov	r4, r1
 8009662:	4606      	mov	r6, r0
 8009664:	4611      	mov	r1, r2
 8009666:	4620      	mov	r0, r4
 8009668:	4690      	mov	r8, r2
 800966a:	f7ff ffdb 	bl	8009624 <__mcmp>
 800966e:	1e05      	subs	r5, r0, #0
 8009670:	d110      	bne.n	8009694 <__mdiff+0x38>
 8009672:	4629      	mov	r1, r5
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff fd59 	bl	800912c <_Balloc>
 800967a:	b930      	cbnz	r0, 800968a <__mdiff+0x2e>
 800967c:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <__mdiff+0x10c>)
 800967e:	4602      	mov	r2, r0
 8009680:	f240 2137 	movw	r1, #567	; 0x237
 8009684:	4839      	ldr	r0, [pc, #228]	; (800976c <__mdiff+0x110>)
 8009686:	f000 fb0b 	bl	8009ca0 <__assert_func>
 800968a:	2301      	movs	r3, #1
 800968c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009694:	bfa4      	itt	ge
 8009696:	4643      	movge	r3, r8
 8009698:	46a0      	movge	r8, r4
 800969a:	4630      	mov	r0, r6
 800969c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096a0:	bfa6      	itte	ge
 80096a2:	461c      	movge	r4, r3
 80096a4:	2500      	movge	r5, #0
 80096a6:	2501      	movlt	r5, #1
 80096a8:	f7ff fd40 	bl	800912c <_Balloc>
 80096ac:	b920      	cbnz	r0, 80096b8 <__mdiff+0x5c>
 80096ae:	4b2e      	ldr	r3, [pc, #184]	; (8009768 <__mdiff+0x10c>)
 80096b0:	4602      	mov	r2, r0
 80096b2:	f240 2145 	movw	r1, #581	; 0x245
 80096b6:	e7e5      	b.n	8009684 <__mdiff+0x28>
 80096b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096bc:	6926      	ldr	r6, [r4, #16]
 80096be:	60c5      	str	r5, [r0, #12]
 80096c0:	f104 0914 	add.w	r9, r4, #20
 80096c4:	f108 0514 	add.w	r5, r8, #20
 80096c8:	f100 0e14 	add.w	lr, r0, #20
 80096cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096d4:	f108 0210 	add.w	r2, r8, #16
 80096d8:	46f2      	mov	sl, lr
 80096da:	2100      	movs	r1, #0
 80096dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80096e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096e4:	fa11 f88b 	uxtah	r8, r1, fp
 80096e8:	b299      	uxth	r1, r3
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	eba8 0801 	sub.w	r8, r8, r1
 80096f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096f8:	fa1f f888 	uxth.w	r8, r8
 80096fc:	1419      	asrs	r1, r3, #16
 80096fe:	454e      	cmp	r6, r9
 8009700:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009704:	f84a 3b04 	str.w	r3, [sl], #4
 8009708:	d8e8      	bhi.n	80096dc <__mdiff+0x80>
 800970a:	1b33      	subs	r3, r6, r4
 800970c:	3b15      	subs	r3, #21
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	3304      	adds	r3, #4
 8009714:	3415      	adds	r4, #21
 8009716:	42a6      	cmp	r6, r4
 8009718:	bf38      	it	cc
 800971a:	2304      	movcc	r3, #4
 800971c:	441d      	add	r5, r3
 800971e:	4473      	add	r3, lr
 8009720:	469e      	mov	lr, r3
 8009722:	462e      	mov	r6, r5
 8009724:	4566      	cmp	r6, ip
 8009726:	d30e      	bcc.n	8009746 <__mdiff+0xea>
 8009728:	f10c 0203 	add.w	r2, ip, #3
 800972c:	1b52      	subs	r2, r2, r5
 800972e:	f022 0203 	bic.w	r2, r2, #3
 8009732:	3d03      	subs	r5, #3
 8009734:	45ac      	cmp	ip, r5
 8009736:	bf38      	it	cc
 8009738:	2200      	movcc	r2, #0
 800973a:	4413      	add	r3, r2
 800973c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009740:	b17a      	cbz	r2, 8009762 <__mdiff+0x106>
 8009742:	6107      	str	r7, [r0, #16]
 8009744:	e7a4      	b.n	8009690 <__mdiff+0x34>
 8009746:	f856 8b04 	ldr.w	r8, [r6], #4
 800974a:	fa11 f288 	uxtah	r2, r1, r8
 800974e:	1414      	asrs	r4, r2, #16
 8009750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009754:	b292      	uxth	r2, r2
 8009756:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800975a:	f84e 2b04 	str.w	r2, [lr], #4
 800975e:	1421      	asrs	r1, r4, #16
 8009760:	e7e0      	b.n	8009724 <__mdiff+0xc8>
 8009762:	3f01      	subs	r7, #1
 8009764:	e7ea      	b.n	800973c <__mdiff+0xe0>
 8009766:	bf00      	nop
 8009768:	0800a434 	.word	0x0800a434
 800976c:	0800a445 	.word	0x0800a445

08009770 <__d2b>:
 8009770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009774:	460f      	mov	r7, r1
 8009776:	2101      	movs	r1, #1
 8009778:	ec59 8b10 	vmov	r8, r9, d0
 800977c:	4616      	mov	r6, r2
 800977e:	f7ff fcd5 	bl	800912c <_Balloc>
 8009782:	4604      	mov	r4, r0
 8009784:	b930      	cbnz	r0, 8009794 <__d2b+0x24>
 8009786:	4602      	mov	r2, r0
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <__d2b+0xac>)
 800978a:	4825      	ldr	r0, [pc, #148]	; (8009820 <__d2b+0xb0>)
 800978c:	f240 310f 	movw	r1, #783	; 0x30f
 8009790:	f000 fa86 	bl	8009ca0 <__assert_func>
 8009794:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800979c:	bb2d      	cbnz	r5, 80097ea <__d2b+0x7a>
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	f1b8 0300 	subs.w	r3, r8, #0
 80097a4:	d026      	beq.n	80097f4 <__d2b+0x84>
 80097a6:	4668      	mov	r0, sp
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	f7ff fd87 	bl	80092bc <__lo0bits>
 80097ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097b2:	b1e8      	cbz	r0, 80097f0 <__d2b+0x80>
 80097b4:	f1c0 0320 	rsb	r3, r0, #32
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	430b      	orrs	r3, r1
 80097be:	40c2      	lsrs	r2, r0
 80097c0:	6163      	str	r3, [r4, #20]
 80097c2:	9201      	str	r2, [sp, #4]
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	61a3      	str	r3, [r4, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf14      	ite	ne
 80097cc:	2202      	movne	r2, #2
 80097ce:	2201      	moveq	r2, #1
 80097d0:	6122      	str	r2, [r4, #16]
 80097d2:	b1bd      	cbz	r5, 8009804 <__d2b+0x94>
 80097d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097d8:	4405      	add	r5, r0
 80097da:	603d      	str	r5, [r7, #0]
 80097dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	4620      	mov	r0, r4
 80097e4:	b003      	add	sp, #12
 80097e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ee:	e7d6      	b.n	800979e <__d2b+0x2e>
 80097f0:	6161      	str	r1, [r4, #20]
 80097f2:	e7e7      	b.n	80097c4 <__d2b+0x54>
 80097f4:	a801      	add	r0, sp, #4
 80097f6:	f7ff fd61 	bl	80092bc <__lo0bits>
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	6163      	str	r3, [r4, #20]
 80097fe:	3020      	adds	r0, #32
 8009800:	2201      	movs	r2, #1
 8009802:	e7e5      	b.n	80097d0 <__d2b+0x60>
 8009804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800980c:	6038      	str	r0, [r7, #0]
 800980e:	6918      	ldr	r0, [r3, #16]
 8009810:	f7ff fd34 	bl	800927c <__hi0bits>
 8009814:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009818:	e7e2      	b.n	80097e0 <__d2b+0x70>
 800981a:	bf00      	nop
 800981c:	0800a434 	.word	0x0800a434
 8009820:	0800a445 	.word	0x0800a445

08009824 <__ssputs_r>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	688e      	ldr	r6, [r1, #8]
 800982a:	461f      	mov	r7, r3
 800982c:	42be      	cmp	r6, r7
 800982e:	680b      	ldr	r3, [r1, #0]
 8009830:	4682      	mov	sl, r0
 8009832:	460c      	mov	r4, r1
 8009834:	4690      	mov	r8, r2
 8009836:	d82c      	bhi.n	8009892 <__ssputs_r+0x6e>
 8009838:	898a      	ldrh	r2, [r1, #12]
 800983a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800983e:	d026      	beq.n	800988e <__ssputs_r+0x6a>
 8009840:	6965      	ldr	r5, [r4, #20]
 8009842:	6909      	ldr	r1, [r1, #16]
 8009844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009848:	eba3 0901 	sub.w	r9, r3, r1
 800984c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009850:	1c7b      	adds	r3, r7, #1
 8009852:	444b      	add	r3, r9
 8009854:	106d      	asrs	r5, r5, #1
 8009856:	429d      	cmp	r5, r3
 8009858:	bf38      	it	cc
 800985a:	461d      	movcc	r5, r3
 800985c:	0553      	lsls	r3, r2, #21
 800985e:	d527      	bpl.n	80098b0 <__ssputs_r+0x8c>
 8009860:	4629      	mov	r1, r5
 8009862:	f7ff fbd7 	bl	8009014 <_malloc_r>
 8009866:	4606      	mov	r6, r0
 8009868:	b360      	cbz	r0, 80098c4 <__ssputs_r+0xa0>
 800986a:	6921      	ldr	r1, [r4, #16]
 800986c:	464a      	mov	r2, r9
 800986e:	f000 fa09 	bl	8009c84 <memcpy>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	6126      	str	r6, [r4, #16]
 8009880:	6165      	str	r5, [r4, #20]
 8009882:	444e      	add	r6, r9
 8009884:	eba5 0509 	sub.w	r5, r5, r9
 8009888:	6026      	str	r6, [r4, #0]
 800988a:	60a5      	str	r5, [r4, #8]
 800988c:	463e      	mov	r6, r7
 800988e:	42be      	cmp	r6, r7
 8009890:	d900      	bls.n	8009894 <__ssputs_r+0x70>
 8009892:	463e      	mov	r6, r7
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	4632      	mov	r2, r6
 8009898:	4641      	mov	r1, r8
 800989a:	f000 f9c9 	bl	8009c30 <memmove>
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	60a3      	str	r3, [r4, #8]
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	4433      	add	r3, r6
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	2000      	movs	r0, #0
 80098ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b0:	462a      	mov	r2, r5
 80098b2:	f000 fa3b 	bl	8009d2c <_realloc_r>
 80098b6:	4606      	mov	r6, r0
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d1e0      	bne.n	800987e <__ssputs_r+0x5a>
 80098bc:	6921      	ldr	r1, [r4, #16]
 80098be:	4650      	mov	r0, sl
 80098c0:	f7ff fb34 	bl	8008f2c <_free_r>
 80098c4:	230c      	movs	r3, #12
 80098c6:	f8ca 3000 	str.w	r3, [sl]
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d6:	e7e9      	b.n	80098ac <__ssputs_r+0x88>

080098d8 <_svfiprintf_r>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4698      	mov	r8, r3
 80098de:	898b      	ldrh	r3, [r1, #12]
 80098e0:	061b      	lsls	r3, r3, #24
 80098e2:	b09d      	sub	sp, #116	; 0x74
 80098e4:	4607      	mov	r7, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	4614      	mov	r4, r2
 80098ea:	d50e      	bpl.n	800990a <_svfiprintf_r+0x32>
 80098ec:	690b      	ldr	r3, [r1, #16]
 80098ee:	b963      	cbnz	r3, 800990a <_svfiprintf_r+0x32>
 80098f0:	2140      	movs	r1, #64	; 0x40
 80098f2:	f7ff fb8f 	bl	8009014 <_malloc_r>
 80098f6:	6028      	str	r0, [r5, #0]
 80098f8:	6128      	str	r0, [r5, #16]
 80098fa:	b920      	cbnz	r0, 8009906 <_svfiprintf_r+0x2e>
 80098fc:	230c      	movs	r3, #12
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009904:	e0d0      	b.n	8009aa8 <_svfiprintf_r+0x1d0>
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	616b      	str	r3, [r5, #20]
 800990a:	2300      	movs	r3, #0
 800990c:	9309      	str	r3, [sp, #36]	; 0x24
 800990e:	2320      	movs	r3, #32
 8009910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009914:	f8cd 800c 	str.w	r8, [sp, #12]
 8009918:	2330      	movs	r3, #48	; 0x30
 800991a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ac0 <_svfiprintf_r+0x1e8>
 800991e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009922:	f04f 0901 	mov.w	r9, #1
 8009926:	4623      	mov	r3, r4
 8009928:	469a      	mov	sl, r3
 800992a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800992e:	b10a      	cbz	r2, 8009934 <_svfiprintf_r+0x5c>
 8009930:	2a25      	cmp	r2, #37	; 0x25
 8009932:	d1f9      	bne.n	8009928 <_svfiprintf_r+0x50>
 8009934:	ebba 0b04 	subs.w	fp, sl, r4
 8009938:	d00b      	beq.n	8009952 <_svfiprintf_r+0x7a>
 800993a:	465b      	mov	r3, fp
 800993c:	4622      	mov	r2, r4
 800993e:	4629      	mov	r1, r5
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff ff6f 	bl	8009824 <__ssputs_r>
 8009946:	3001      	adds	r0, #1
 8009948:	f000 80a9 	beq.w	8009a9e <_svfiprintf_r+0x1c6>
 800994c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800994e:	445a      	add	r2, fp
 8009950:	9209      	str	r2, [sp, #36]	; 0x24
 8009952:	f89a 3000 	ldrb.w	r3, [sl]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80a1 	beq.w	8009a9e <_svfiprintf_r+0x1c6>
 800995c:	2300      	movs	r3, #0
 800995e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009966:	f10a 0a01 	add.w	sl, sl, #1
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	9307      	str	r3, [sp, #28]
 800996e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009972:	931a      	str	r3, [sp, #104]	; 0x68
 8009974:	4654      	mov	r4, sl
 8009976:	2205      	movs	r2, #5
 8009978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997c:	4850      	ldr	r0, [pc, #320]	; (8009ac0 <_svfiprintf_r+0x1e8>)
 800997e:	f7f6 fc2f 	bl	80001e0 <memchr>
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	b9d8      	cbnz	r0, 80099be <_svfiprintf_r+0xe6>
 8009986:	06d0      	lsls	r0, r2, #27
 8009988:	bf44      	itt	mi
 800998a:	2320      	movmi	r3, #32
 800998c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009990:	0711      	lsls	r1, r2, #28
 8009992:	bf44      	itt	mi
 8009994:	232b      	movmi	r3, #43	; 0x2b
 8009996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999a:	f89a 3000 	ldrb.w	r3, [sl]
 800999e:	2b2a      	cmp	r3, #42	; 0x2a
 80099a0:	d015      	beq.n	80099ce <_svfiprintf_r+0xf6>
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	4654      	mov	r4, sl
 80099a6:	2000      	movs	r0, #0
 80099a8:	f04f 0c0a 	mov.w	ip, #10
 80099ac:	4621      	mov	r1, r4
 80099ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b2:	3b30      	subs	r3, #48	; 0x30
 80099b4:	2b09      	cmp	r3, #9
 80099b6:	d94d      	bls.n	8009a54 <_svfiprintf_r+0x17c>
 80099b8:	b1b0      	cbz	r0, 80099e8 <_svfiprintf_r+0x110>
 80099ba:	9207      	str	r2, [sp, #28]
 80099bc:	e014      	b.n	80099e8 <_svfiprintf_r+0x110>
 80099be:	eba0 0308 	sub.w	r3, r0, r8
 80099c2:	fa09 f303 	lsl.w	r3, r9, r3
 80099c6:	4313      	orrs	r3, r2
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	46a2      	mov	sl, r4
 80099cc:	e7d2      	b.n	8009974 <_svfiprintf_r+0x9c>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	1d19      	adds	r1, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	9103      	str	r1, [sp, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfbb      	ittet	lt
 80099da:	425b      	neglt	r3, r3
 80099dc:	f042 0202 	orrlt.w	r2, r2, #2
 80099e0:	9307      	strge	r3, [sp, #28]
 80099e2:	9307      	strlt	r3, [sp, #28]
 80099e4:	bfb8      	it	lt
 80099e6:	9204      	strlt	r2, [sp, #16]
 80099e8:	7823      	ldrb	r3, [r4, #0]
 80099ea:	2b2e      	cmp	r3, #46	; 0x2e
 80099ec:	d10c      	bne.n	8009a08 <_svfiprintf_r+0x130>
 80099ee:	7863      	ldrb	r3, [r4, #1]
 80099f0:	2b2a      	cmp	r3, #42	; 0x2a
 80099f2:	d134      	bne.n	8009a5e <_svfiprintf_r+0x186>
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	1d1a      	adds	r2, r3, #4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	9203      	str	r2, [sp, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bfb8      	it	lt
 8009a00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a04:	3402      	adds	r4, #2
 8009a06:	9305      	str	r3, [sp, #20]
 8009a08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ad0 <_svfiprintf_r+0x1f8>
 8009a0c:	7821      	ldrb	r1, [r4, #0]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	4650      	mov	r0, sl
 8009a12:	f7f6 fbe5 	bl	80001e0 <memchr>
 8009a16:	b138      	cbz	r0, 8009a28 <_svfiprintf_r+0x150>
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	eba0 000a 	sub.w	r0, r0, sl
 8009a1e:	2240      	movs	r2, #64	; 0x40
 8009a20:	4082      	lsls	r2, r0
 8009a22:	4313      	orrs	r3, r2
 8009a24:	3401      	adds	r4, #1
 8009a26:	9304      	str	r3, [sp, #16]
 8009a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2c:	4825      	ldr	r0, [pc, #148]	; (8009ac4 <_svfiprintf_r+0x1ec>)
 8009a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a32:	2206      	movs	r2, #6
 8009a34:	f7f6 fbd4 	bl	80001e0 <memchr>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d038      	beq.n	8009aae <_svfiprintf_r+0x1d6>
 8009a3c:	4b22      	ldr	r3, [pc, #136]	; (8009ac8 <_svfiprintf_r+0x1f0>)
 8009a3e:	bb1b      	cbnz	r3, 8009a88 <_svfiprintf_r+0x1b0>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	3307      	adds	r3, #7
 8009a44:	f023 0307 	bic.w	r3, r3, #7
 8009a48:	3308      	adds	r3, #8
 8009a4a:	9303      	str	r3, [sp, #12]
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	4433      	add	r3, r6
 8009a50:	9309      	str	r3, [sp, #36]	; 0x24
 8009a52:	e768      	b.n	8009926 <_svfiprintf_r+0x4e>
 8009a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a58:	460c      	mov	r4, r1
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e7a6      	b.n	80099ac <_svfiprintf_r+0xd4>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	3401      	adds	r4, #1
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	4619      	mov	r1, r3
 8009a66:	f04f 0c0a 	mov.w	ip, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a70:	3a30      	subs	r2, #48	; 0x30
 8009a72:	2a09      	cmp	r2, #9
 8009a74:	d903      	bls.n	8009a7e <_svfiprintf_r+0x1a6>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0c6      	beq.n	8009a08 <_svfiprintf_r+0x130>
 8009a7a:	9105      	str	r1, [sp, #20]
 8009a7c:	e7c4      	b.n	8009a08 <_svfiprintf_r+0x130>
 8009a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a82:	4604      	mov	r4, r0
 8009a84:	2301      	movs	r3, #1
 8009a86:	e7f0      	b.n	8009a6a <_svfiprintf_r+0x192>
 8009a88:	ab03      	add	r3, sp, #12
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	462a      	mov	r2, r5
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <_svfiprintf_r+0x1f4>)
 8009a90:	a904      	add	r1, sp, #16
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7fd fe62 	bl	800775c <_printf_float>
 8009a98:	1c42      	adds	r2, r0, #1
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	d1d6      	bne.n	8009a4c <_svfiprintf_r+0x174>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	065b      	lsls	r3, r3, #25
 8009aa2:	f53f af2d 	bmi.w	8009900 <_svfiprintf_r+0x28>
 8009aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	ab03      	add	r3, sp, #12
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <_svfiprintf_r+0x1f4>)
 8009ab6:	a904      	add	r1, sp, #16
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7fe f8f3 	bl	8007ca4 <_printf_i>
 8009abe:	e7eb      	b.n	8009a98 <_svfiprintf_r+0x1c0>
 8009ac0:	0800a59c 	.word	0x0800a59c
 8009ac4:	0800a5a6 	.word	0x0800a5a6
 8009ac8:	0800775d 	.word	0x0800775d
 8009acc:	08009825 	.word	0x08009825
 8009ad0:	0800a5a2 	.word	0x0800a5a2

08009ad4 <__sflush_r>:
 8009ad4:	898a      	ldrh	r2, [r1, #12]
 8009ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	4605      	mov	r5, r0
 8009adc:	0710      	lsls	r0, r2, #28
 8009ade:	460c      	mov	r4, r1
 8009ae0:	d458      	bmi.n	8009b94 <__sflush_r+0xc0>
 8009ae2:	684b      	ldr	r3, [r1, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc05      	bgt.n	8009af4 <__sflush_r+0x20>
 8009ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dc02      	bgt.n	8009af4 <__sflush_r+0x20>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d0f9      	beq.n	8009aee <__sflush_r+0x1a>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b00:	682f      	ldr	r7, [r5, #0]
 8009b02:	6a21      	ldr	r1, [r4, #32]
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	d032      	beq.n	8009b6e <__sflush_r+0x9a>
 8009b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	075a      	lsls	r2, r3, #29
 8009b0e:	d505      	bpl.n	8009b1c <__sflush_r+0x48>
 8009b10:	6863      	ldr	r3, [r4, #4]
 8009b12:	1ac0      	subs	r0, r0, r3
 8009b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b16:	b10b      	cbz	r3, 8009b1c <__sflush_r+0x48>
 8009b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b1a:	1ac0      	subs	r0, r0, r3
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4602      	mov	r2, r0
 8009b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b22:	6a21      	ldr	r1, [r4, #32]
 8009b24:	4628      	mov	r0, r5
 8009b26:	47b0      	blx	r6
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	d106      	bne.n	8009b3c <__sflush_r+0x68>
 8009b2e:	6829      	ldr	r1, [r5, #0]
 8009b30:	291d      	cmp	r1, #29
 8009b32:	d82b      	bhi.n	8009b8c <__sflush_r+0xb8>
 8009b34:	4a29      	ldr	r2, [pc, #164]	; (8009bdc <__sflush_r+0x108>)
 8009b36:	410a      	asrs	r2, r1
 8009b38:	07d6      	lsls	r6, r2, #31
 8009b3a:	d427      	bmi.n	8009b8c <__sflush_r+0xb8>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	6062      	str	r2, [r4, #4]
 8009b40:	04d9      	lsls	r1, r3, #19
 8009b42:	6922      	ldr	r2, [r4, #16]
 8009b44:	6022      	str	r2, [r4, #0]
 8009b46:	d504      	bpl.n	8009b52 <__sflush_r+0x7e>
 8009b48:	1c42      	adds	r2, r0, #1
 8009b4a:	d101      	bne.n	8009b50 <__sflush_r+0x7c>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b903      	cbnz	r3, 8009b52 <__sflush_r+0x7e>
 8009b50:	6560      	str	r0, [r4, #84]	; 0x54
 8009b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b54:	602f      	str	r7, [r5, #0]
 8009b56:	2900      	cmp	r1, #0
 8009b58:	d0c9      	beq.n	8009aee <__sflush_r+0x1a>
 8009b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	d002      	beq.n	8009b68 <__sflush_r+0x94>
 8009b62:	4628      	mov	r0, r5
 8009b64:	f7ff f9e2 	bl	8008f2c <_free_r>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b6c:	e7c0      	b.n	8009af0 <__sflush_r+0x1c>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b0      	blx	r6
 8009b74:	1c41      	adds	r1, r0, #1
 8009b76:	d1c8      	bne.n	8009b0a <__sflush_r+0x36>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0c5      	beq.n	8009b0a <__sflush_r+0x36>
 8009b7e:	2b1d      	cmp	r3, #29
 8009b80:	d001      	beq.n	8009b86 <__sflush_r+0xb2>
 8009b82:	2b16      	cmp	r3, #22
 8009b84:	d101      	bne.n	8009b8a <__sflush_r+0xb6>
 8009b86:	602f      	str	r7, [r5, #0]
 8009b88:	e7b1      	b.n	8009aee <__sflush_r+0x1a>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	e7ad      	b.n	8009af0 <__sflush_r+0x1c>
 8009b94:	690f      	ldr	r7, [r1, #16]
 8009b96:	2f00      	cmp	r7, #0
 8009b98:	d0a9      	beq.n	8009aee <__sflush_r+0x1a>
 8009b9a:	0793      	lsls	r3, r2, #30
 8009b9c:	680e      	ldr	r6, [r1, #0]
 8009b9e:	bf08      	it	eq
 8009ba0:	694b      	ldreq	r3, [r1, #20]
 8009ba2:	600f      	str	r7, [r1, #0]
 8009ba4:	bf18      	it	ne
 8009ba6:	2300      	movne	r3, #0
 8009ba8:	eba6 0807 	sub.w	r8, r6, r7
 8009bac:	608b      	str	r3, [r1, #8]
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	dd9c      	ble.n	8009aee <__sflush_r+0x1a>
 8009bb4:	6a21      	ldr	r1, [r4, #32]
 8009bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb8:	4643      	mov	r3, r8
 8009bba:	463a      	mov	r2, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b0      	blx	r6
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dc06      	bgt.n	8009bd2 <__sflush_r+0xfe>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd0:	e78e      	b.n	8009af0 <__sflush_r+0x1c>
 8009bd2:	4407      	add	r7, r0
 8009bd4:	eba8 0800 	sub.w	r8, r8, r0
 8009bd8:	e7e9      	b.n	8009bae <__sflush_r+0xda>
 8009bda:	bf00      	nop
 8009bdc:	dfbffffe 	.word	0xdfbffffe

08009be0 <_fflush_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	690b      	ldr	r3, [r1, #16]
 8009be4:	4605      	mov	r5, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	b913      	cbnz	r3, 8009bf0 <_fflush_r+0x10>
 8009bea:	2500      	movs	r5, #0
 8009bec:	4628      	mov	r0, r5
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	b118      	cbz	r0, 8009bfa <_fflush_r+0x1a>
 8009bf2:	6a03      	ldr	r3, [r0, #32]
 8009bf4:	b90b      	cbnz	r3, 8009bfa <_fflush_r+0x1a>
 8009bf6:	f7fe f9f1 	bl	8007fdc <__sinit>
 8009bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0f3      	beq.n	8009bea <_fflush_r+0xa>
 8009c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c04:	07d0      	lsls	r0, r2, #31
 8009c06:	d404      	bmi.n	8009c12 <_fflush_r+0x32>
 8009c08:	0599      	lsls	r1, r3, #22
 8009c0a:	d402      	bmi.n	8009c12 <_fflush_r+0x32>
 8009c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0e:	f7fe fb0f 	bl	8008230 <__retarget_lock_acquire_recursive>
 8009c12:	4628      	mov	r0, r5
 8009c14:	4621      	mov	r1, r4
 8009c16:	f7ff ff5d 	bl	8009ad4 <__sflush_r>
 8009c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c1c:	07da      	lsls	r2, r3, #31
 8009c1e:	4605      	mov	r5, r0
 8009c20:	d4e4      	bmi.n	8009bec <_fflush_r+0xc>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	059b      	lsls	r3, r3, #22
 8009c26:	d4e1      	bmi.n	8009bec <_fflush_r+0xc>
 8009c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c2a:	f7fe fb02 	bl	8008232 <__retarget_lock_release_recursive>
 8009c2e:	e7dd      	b.n	8009bec <_fflush_r+0xc>

08009c30 <memmove>:
 8009c30:	4288      	cmp	r0, r1
 8009c32:	b510      	push	{r4, lr}
 8009c34:	eb01 0402 	add.w	r4, r1, r2
 8009c38:	d902      	bls.n	8009c40 <memmove+0x10>
 8009c3a:	4284      	cmp	r4, r0
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	d807      	bhi.n	8009c50 <memmove+0x20>
 8009c40:	1e43      	subs	r3, r0, #1
 8009c42:	42a1      	cmp	r1, r4
 8009c44:	d008      	beq.n	8009c58 <memmove+0x28>
 8009c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c4e:	e7f8      	b.n	8009c42 <memmove+0x12>
 8009c50:	4402      	add	r2, r0
 8009c52:	4601      	mov	r1, r0
 8009c54:	428a      	cmp	r2, r1
 8009c56:	d100      	bne.n	8009c5a <memmove+0x2a>
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c62:	e7f7      	b.n	8009c54 <memmove+0x24>

08009c64 <_sbrk_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4d06      	ldr	r5, [pc, #24]	; (8009c80 <_sbrk_r+0x1c>)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	4608      	mov	r0, r1
 8009c6e:	602b      	str	r3, [r5, #0]
 8009c70:	f7f7 fe6c 	bl	800194c <_sbrk>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_sbrk_r+0x1a>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_sbrk_r+0x1a>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	200004e4 	.word	0x200004e4

08009c84 <memcpy>:
 8009c84:	440a      	add	r2, r1
 8009c86:	4291      	cmp	r1, r2
 8009c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c8c:	d100      	bne.n	8009c90 <memcpy+0xc>
 8009c8e:	4770      	bx	lr
 8009c90:	b510      	push	{r4, lr}
 8009c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c9a:	4291      	cmp	r1, r2
 8009c9c:	d1f9      	bne.n	8009c92 <memcpy+0xe>
 8009c9e:	bd10      	pop	{r4, pc}

08009ca0 <__assert_func>:
 8009ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <__assert_func+0x2c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4605      	mov	r5, r0
 8009cac:	68d8      	ldr	r0, [r3, #12]
 8009cae:	b14c      	cbz	r4, 8009cc4 <__assert_func+0x24>
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <__assert_func+0x30>)
 8009cb2:	9100      	str	r1, [sp, #0]
 8009cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cb8:	4906      	ldr	r1, [pc, #24]	; (8009cd4 <__assert_func+0x34>)
 8009cba:	462b      	mov	r3, r5
 8009cbc:	f000 f872 	bl	8009da4 <fiprintf>
 8009cc0:	f000 f882 	bl	8009dc8 <abort>
 8009cc4:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <__assert_func+0x38>)
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	e7f3      	b.n	8009cb2 <__assert_func+0x12>
 8009cca:	bf00      	nop
 8009ccc:	20000070 	.word	0x20000070
 8009cd0:	0800a5b7 	.word	0x0800a5b7
 8009cd4:	0800a5c4 	.word	0x0800a5c4
 8009cd8:	0800a5f2 	.word	0x0800a5f2

08009cdc <_calloc_r>:
 8009cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cde:	fba1 2402 	umull	r2, r4, r1, r2
 8009ce2:	b94c      	cbnz	r4, 8009cf8 <_calloc_r+0x1c>
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	9201      	str	r2, [sp, #4]
 8009ce8:	f7ff f994 	bl	8009014 <_malloc_r>
 8009cec:	9a01      	ldr	r2, [sp, #4]
 8009cee:	4605      	mov	r5, r0
 8009cf0:	b930      	cbnz	r0, 8009d00 <_calloc_r+0x24>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	b003      	add	sp, #12
 8009cf6:	bd30      	pop	{r4, r5, pc}
 8009cf8:	220c      	movs	r2, #12
 8009cfa:	6002      	str	r2, [r0, #0]
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	e7f8      	b.n	8009cf2 <_calloc_r+0x16>
 8009d00:	4621      	mov	r1, r4
 8009d02:	f7fe fa18 	bl	8008136 <memset>
 8009d06:	e7f4      	b.n	8009cf2 <_calloc_r+0x16>

08009d08 <__ascii_mbtowc>:
 8009d08:	b082      	sub	sp, #8
 8009d0a:	b901      	cbnz	r1, 8009d0e <__ascii_mbtowc+0x6>
 8009d0c:	a901      	add	r1, sp, #4
 8009d0e:	b142      	cbz	r2, 8009d22 <__ascii_mbtowc+0x1a>
 8009d10:	b14b      	cbz	r3, 8009d26 <__ascii_mbtowc+0x1e>
 8009d12:	7813      	ldrb	r3, [r2, #0]
 8009d14:	600b      	str	r3, [r1, #0]
 8009d16:	7812      	ldrb	r2, [r2, #0]
 8009d18:	1e10      	subs	r0, r2, #0
 8009d1a:	bf18      	it	ne
 8009d1c:	2001      	movne	r0, #1
 8009d1e:	b002      	add	sp, #8
 8009d20:	4770      	bx	lr
 8009d22:	4610      	mov	r0, r2
 8009d24:	e7fb      	b.n	8009d1e <__ascii_mbtowc+0x16>
 8009d26:	f06f 0001 	mvn.w	r0, #1
 8009d2a:	e7f8      	b.n	8009d1e <__ascii_mbtowc+0x16>

08009d2c <_realloc_r>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	4680      	mov	r8, r0
 8009d32:	4614      	mov	r4, r2
 8009d34:	460e      	mov	r6, r1
 8009d36:	b921      	cbnz	r1, 8009d42 <_realloc_r+0x16>
 8009d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	f7ff b969 	b.w	8009014 <_malloc_r>
 8009d42:	b92a      	cbnz	r2, 8009d50 <_realloc_r+0x24>
 8009d44:	f7ff f8f2 	bl	8008f2c <_free_r>
 8009d48:	4625      	mov	r5, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	f000 f841 	bl	8009dd6 <_malloc_usable_size_r>
 8009d54:	4284      	cmp	r4, r0
 8009d56:	4607      	mov	r7, r0
 8009d58:	d802      	bhi.n	8009d60 <_realloc_r+0x34>
 8009d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d5e:	d812      	bhi.n	8009d86 <_realloc_r+0x5a>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7ff f956 	bl	8009014 <_malloc_r>
 8009d68:	4605      	mov	r5, r0
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0ed      	beq.n	8009d4a <_realloc_r+0x1e>
 8009d6e:	42bc      	cmp	r4, r7
 8009d70:	4622      	mov	r2, r4
 8009d72:	4631      	mov	r1, r6
 8009d74:	bf28      	it	cs
 8009d76:	463a      	movcs	r2, r7
 8009d78:	f7ff ff84 	bl	8009c84 <memcpy>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f7ff f8d4 	bl	8008f2c <_free_r>
 8009d84:	e7e1      	b.n	8009d4a <_realloc_r+0x1e>
 8009d86:	4635      	mov	r5, r6
 8009d88:	e7df      	b.n	8009d4a <_realloc_r+0x1e>

08009d8a <__ascii_wctomb>:
 8009d8a:	b149      	cbz	r1, 8009da0 <__ascii_wctomb+0x16>
 8009d8c:	2aff      	cmp	r2, #255	; 0xff
 8009d8e:	bf85      	ittet	hi
 8009d90:	238a      	movhi	r3, #138	; 0x8a
 8009d92:	6003      	strhi	r3, [r0, #0]
 8009d94:	700a      	strbls	r2, [r1, #0]
 8009d96:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009d9a:	bf98      	it	ls
 8009d9c:	2001      	movls	r0, #1
 8009d9e:	4770      	bx	lr
 8009da0:	4608      	mov	r0, r1
 8009da2:	4770      	bx	lr

08009da4 <fiprintf>:
 8009da4:	b40e      	push	{r1, r2, r3}
 8009da6:	b503      	push	{r0, r1, lr}
 8009da8:	4601      	mov	r1, r0
 8009daa:	ab03      	add	r3, sp, #12
 8009dac:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <fiprintf+0x20>)
 8009dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db2:	6800      	ldr	r0, [r0, #0]
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	f000 f83f 	bl	8009e38 <_vfiprintf_r>
 8009dba:	b002      	add	sp, #8
 8009dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc0:	b003      	add	sp, #12
 8009dc2:	4770      	bx	lr
 8009dc4:	20000070 	.word	0x20000070

08009dc8 <abort>:
 8009dc8:	b508      	push	{r3, lr}
 8009dca:	2006      	movs	r0, #6
 8009dcc:	f000 fa0c 	bl	800a1e8 <raise>
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7f7 fd43 	bl	800185c <_exit>

08009dd6 <_malloc_usable_size_r>:
 8009dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dda:	1f18      	subs	r0, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbc      	itt	lt
 8009de0:	580b      	ldrlt	r3, [r1, r0]
 8009de2:	18c0      	addlt	r0, r0, r3
 8009de4:	4770      	bx	lr

08009de6 <__sfputc_r>:
 8009de6:	6893      	ldr	r3, [r2, #8]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	b410      	push	{r4}
 8009dee:	6093      	str	r3, [r2, #8]
 8009df0:	da08      	bge.n	8009e04 <__sfputc_r+0x1e>
 8009df2:	6994      	ldr	r4, [r2, #24]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	db01      	blt.n	8009dfc <__sfputc_r+0x16>
 8009df8:	290a      	cmp	r1, #10
 8009dfa:	d103      	bne.n	8009e04 <__sfputc_r+0x1e>
 8009dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e00:	f000 b934 	b.w	800a06c <__swbuf_r>
 8009e04:	6813      	ldr	r3, [r2, #0]
 8009e06:	1c58      	adds	r0, r3, #1
 8009e08:	6010      	str	r0, [r2, #0]
 8009e0a:	7019      	strb	r1, [r3, #0]
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <__sfputs_r>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	4606      	mov	r6, r0
 8009e18:	460f      	mov	r7, r1
 8009e1a:	4614      	mov	r4, r2
 8009e1c:	18d5      	adds	r5, r2, r3
 8009e1e:	42ac      	cmp	r4, r5
 8009e20:	d101      	bne.n	8009e26 <__sfputs_r+0x12>
 8009e22:	2000      	movs	r0, #0
 8009e24:	e007      	b.n	8009e36 <__sfputs_r+0x22>
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7ff ffda 	bl	8009de6 <__sfputc_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d1f3      	bne.n	8009e1e <__sfputs_r+0xa>
 8009e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e38 <_vfiprintf_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	b09d      	sub	sp, #116	; 0x74
 8009e40:	4614      	mov	r4, r2
 8009e42:	4698      	mov	r8, r3
 8009e44:	4606      	mov	r6, r0
 8009e46:	b118      	cbz	r0, 8009e50 <_vfiprintf_r+0x18>
 8009e48:	6a03      	ldr	r3, [r0, #32]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <_vfiprintf_r+0x18>
 8009e4c:	f7fe f8c6 	bl	8007fdc <__sinit>
 8009e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	d405      	bmi.n	8009e62 <_vfiprintf_r+0x2a>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	059a      	lsls	r2, r3, #22
 8009e5a:	d402      	bmi.n	8009e62 <_vfiprintf_r+0x2a>
 8009e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e5e:	f7fe f9e7 	bl	8008230 <__retarget_lock_acquire_recursive>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	071b      	lsls	r3, r3, #28
 8009e66:	d501      	bpl.n	8009e6c <_vfiprintf_r+0x34>
 8009e68:	692b      	ldr	r3, [r5, #16]
 8009e6a:	b99b      	cbnz	r3, 8009e94 <_vfiprintf_r+0x5c>
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f93a 	bl	800a0e8 <__swsetup_r>
 8009e74:	b170      	cbz	r0, 8009e94 <_vfiprintf_r+0x5c>
 8009e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e78:	07dc      	lsls	r4, r3, #31
 8009e7a:	d504      	bpl.n	8009e86 <_vfiprintf_r+0x4e>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e80:	b01d      	add	sp, #116	; 0x74
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	89ab      	ldrh	r3, [r5, #12]
 8009e88:	0598      	lsls	r0, r3, #22
 8009e8a:	d4f7      	bmi.n	8009e7c <_vfiprintf_r+0x44>
 8009e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e8e:	f7fe f9d0 	bl	8008232 <__retarget_lock_release_recursive>
 8009e92:	e7f3      	b.n	8009e7c <_vfiprintf_r+0x44>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9309      	str	r3, [sp, #36]	; 0x24
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea2:	2330      	movs	r3, #48	; 0x30
 8009ea4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a058 <_vfiprintf_r+0x220>
 8009ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eac:	f04f 0901 	mov.w	r9, #1
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	469a      	mov	sl, r3
 8009eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_vfiprintf_r+0x86>
 8009eba:	2a25      	cmp	r2, #37	; 0x25
 8009ebc:	d1f9      	bne.n	8009eb2 <_vfiprintf_r+0x7a>
 8009ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec2:	d00b      	beq.n	8009edc <_vfiprintf_r+0xa4>
 8009ec4:	465b      	mov	r3, fp
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ffa2 	bl	8009e14 <__sfputs_r>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f000 80a9 	beq.w	800a028 <_vfiprintf_r+0x1f0>
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	445a      	add	r2, fp
 8009eda:	9209      	str	r2, [sp, #36]	; 0x24
 8009edc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 80a1 	beq.w	800a028 <_vfiprintf_r+0x1f0>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef0:	f10a 0a01 	add.w	sl, sl, #1
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	9307      	str	r3, [sp, #28]
 8009ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009efc:	931a      	str	r3, [sp, #104]	; 0x68
 8009efe:	4654      	mov	r4, sl
 8009f00:	2205      	movs	r2, #5
 8009f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f06:	4854      	ldr	r0, [pc, #336]	; (800a058 <_vfiprintf_r+0x220>)
 8009f08:	f7f6 f96a 	bl	80001e0 <memchr>
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	b9d8      	cbnz	r0, 8009f48 <_vfiprintf_r+0x110>
 8009f10:	06d1      	lsls	r1, r2, #27
 8009f12:	bf44      	itt	mi
 8009f14:	2320      	movmi	r3, #32
 8009f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1a:	0713      	lsls	r3, r2, #28
 8009f1c:	bf44      	itt	mi
 8009f1e:	232b      	movmi	r3, #43	; 0x2b
 8009f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f24:	f89a 3000 	ldrb.w	r3, [sl]
 8009f28:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2a:	d015      	beq.n	8009f58 <_vfiprintf_r+0x120>
 8009f2c:	9a07      	ldr	r2, [sp, #28]
 8009f2e:	4654      	mov	r4, sl
 8009f30:	2000      	movs	r0, #0
 8009f32:	f04f 0c0a 	mov.w	ip, #10
 8009f36:	4621      	mov	r1, r4
 8009f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f3c:	3b30      	subs	r3, #48	; 0x30
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d94d      	bls.n	8009fde <_vfiprintf_r+0x1a6>
 8009f42:	b1b0      	cbz	r0, 8009f72 <_vfiprintf_r+0x13a>
 8009f44:	9207      	str	r2, [sp, #28]
 8009f46:	e014      	b.n	8009f72 <_vfiprintf_r+0x13a>
 8009f48:	eba0 0308 	sub.w	r3, r0, r8
 8009f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	46a2      	mov	sl, r4
 8009f56:	e7d2      	b.n	8009efe <_vfiprintf_r+0xc6>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	1d19      	adds	r1, r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	9103      	str	r1, [sp, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfbb      	ittet	lt
 8009f64:	425b      	neglt	r3, r3
 8009f66:	f042 0202 	orrlt.w	r2, r2, #2
 8009f6a:	9307      	strge	r3, [sp, #28]
 8009f6c:	9307      	strlt	r3, [sp, #28]
 8009f6e:	bfb8      	it	lt
 8009f70:	9204      	strlt	r2, [sp, #16]
 8009f72:	7823      	ldrb	r3, [r4, #0]
 8009f74:	2b2e      	cmp	r3, #46	; 0x2e
 8009f76:	d10c      	bne.n	8009f92 <_vfiprintf_r+0x15a>
 8009f78:	7863      	ldrb	r3, [r4, #1]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d134      	bne.n	8009fe8 <_vfiprintf_r+0x1b0>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	1d1a      	adds	r2, r3, #4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	9203      	str	r2, [sp, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f8e:	3402      	adds	r4, #2
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a068 <_vfiprintf_r+0x230>
 8009f96:	7821      	ldrb	r1, [r4, #0]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7f6 f920 	bl	80001e0 <memchr>
 8009fa0:	b138      	cbz	r0, 8009fb2 <_vfiprintf_r+0x17a>
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	eba0 000a 	sub.w	r0, r0, sl
 8009fa8:	2240      	movs	r2, #64	; 0x40
 8009faa:	4082      	lsls	r2, r0
 8009fac:	4313      	orrs	r3, r2
 8009fae:	3401      	adds	r4, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb6:	4829      	ldr	r0, [pc, #164]	; (800a05c <_vfiprintf_r+0x224>)
 8009fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fbc:	2206      	movs	r2, #6
 8009fbe:	f7f6 f90f 	bl	80001e0 <memchr>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d03f      	beq.n	800a046 <_vfiprintf_r+0x20e>
 8009fc6:	4b26      	ldr	r3, [pc, #152]	; (800a060 <_vfiprintf_r+0x228>)
 8009fc8:	bb1b      	cbnz	r3, 800a012 <_vfiprintf_r+0x1da>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	f023 0307 	bic.w	r3, r3, #7
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	9303      	str	r3, [sp, #12]
 8009fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd8:	443b      	add	r3, r7
 8009fda:	9309      	str	r3, [sp, #36]	; 0x24
 8009fdc:	e768      	b.n	8009eb0 <_vfiprintf_r+0x78>
 8009fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e7a6      	b.n	8009f36 <_vfiprintf_r+0xfe>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	3401      	adds	r4, #1
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	f04f 0c0a 	mov.w	ip, #10
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffa:	3a30      	subs	r2, #48	; 0x30
 8009ffc:	2a09      	cmp	r2, #9
 8009ffe:	d903      	bls.n	800a008 <_vfiprintf_r+0x1d0>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0c6      	beq.n	8009f92 <_vfiprintf_r+0x15a>
 800a004:	9105      	str	r1, [sp, #20]
 800a006:	e7c4      	b.n	8009f92 <_vfiprintf_r+0x15a>
 800a008:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00c:	4604      	mov	r4, r0
 800a00e:	2301      	movs	r3, #1
 800a010:	e7f0      	b.n	8009ff4 <_vfiprintf_r+0x1bc>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <_vfiprintf_r+0x22c>)
 800a01a:	a904      	add	r1, sp, #16
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fd fb9d 	bl	800775c <_printf_float>
 800a022:	4607      	mov	r7, r0
 800a024:	1c78      	adds	r0, r7, #1
 800a026:	d1d6      	bne.n	8009fd6 <_vfiprintf_r+0x19e>
 800a028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a02a:	07d9      	lsls	r1, r3, #31
 800a02c:	d405      	bmi.n	800a03a <_vfiprintf_r+0x202>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	059a      	lsls	r2, r3, #22
 800a032:	d402      	bmi.n	800a03a <_vfiprintf_r+0x202>
 800a034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a036:	f7fe f8fc 	bl	8008232 <__retarget_lock_release_recursive>
 800a03a:	89ab      	ldrh	r3, [r5, #12]
 800a03c:	065b      	lsls	r3, r3, #25
 800a03e:	f53f af1d 	bmi.w	8009e7c <_vfiprintf_r+0x44>
 800a042:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a044:	e71c      	b.n	8009e80 <_vfiprintf_r+0x48>
 800a046:	ab03      	add	r3, sp, #12
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	462a      	mov	r2, r5
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <_vfiprintf_r+0x22c>)
 800a04e:	a904      	add	r1, sp, #16
 800a050:	4630      	mov	r0, r6
 800a052:	f7fd fe27 	bl	8007ca4 <_printf_i>
 800a056:	e7e4      	b.n	800a022 <_vfiprintf_r+0x1ea>
 800a058:	0800a59c 	.word	0x0800a59c
 800a05c:	0800a5a6 	.word	0x0800a5a6
 800a060:	0800775d 	.word	0x0800775d
 800a064:	08009e15 	.word	0x08009e15
 800a068:	0800a5a2 	.word	0x0800a5a2

0800a06c <__swbuf_r>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	460e      	mov	r6, r1
 800a070:	4614      	mov	r4, r2
 800a072:	4605      	mov	r5, r0
 800a074:	b118      	cbz	r0, 800a07e <__swbuf_r+0x12>
 800a076:	6a03      	ldr	r3, [r0, #32]
 800a078:	b90b      	cbnz	r3, 800a07e <__swbuf_r+0x12>
 800a07a:	f7fd ffaf 	bl	8007fdc <__sinit>
 800a07e:	69a3      	ldr	r3, [r4, #24]
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	071a      	lsls	r2, r3, #28
 800a086:	d525      	bpl.n	800a0d4 <__swbuf_r+0x68>
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	b31b      	cbz	r3, 800a0d4 <__swbuf_r+0x68>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	6922      	ldr	r2, [r4, #16]
 800a090:	1a98      	subs	r0, r3, r2
 800a092:	6963      	ldr	r3, [r4, #20]
 800a094:	b2f6      	uxtb	r6, r6
 800a096:	4283      	cmp	r3, r0
 800a098:	4637      	mov	r7, r6
 800a09a:	dc04      	bgt.n	800a0a6 <__swbuf_r+0x3a>
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f7ff fd9e 	bl	8009be0 <_fflush_r>
 800a0a4:	b9e0      	cbnz	r0, 800a0e0 <__swbuf_r+0x74>
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	60a3      	str	r3, [r4, #8]
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	6022      	str	r2, [r4, #0]
 800a0b2:	701e      	strb	r6, [r3, #0]
 800a0b4:	6962      	ldr	r2, [r4, #20]
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d004      	beq.n	800a0c6 <__swbuf_r+0x5a>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	07db      	lsls	r3, r3, #31
 800a0c0:	d506      	bpl.n	800a0d0 <__swbuf_r+0x64>
 800a0c2:	2e0a      	cmp	r6, #10
 800a0c4:	d104      	bne.n	800a0d0 <__swbuf_r+0x64>
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f7ff fd89 	bl	8009be0 <_fflush_r>
 800a0ce:	b938      	cbnz	r0, 800a0e0 <__swbuf_r+0x74>
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f806 	bl	800a0e8 <__swsetup_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d0d5      	beq.n	800a08c <__swbuf_r+0x20>
 800a0e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a0e4:	e7f4      	b.n	800a0d0 <__swbuf_r+0x64>
	...

0800a0e8 <__swsetup_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <__swsetup_r+0xac>)
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	b118      	cbz	r0, 800a0fc <__swsetup_r+0x14>
 800a0f4:	6a03      	ldr	r3, [r0, #32]
 800a0f6:	b90b      	cbnz	r3, 800a0fc <__swsetup_r+0x14>
 800a0f8:	f7fd ff70 	bl	8007fdc <__sinit>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a102:	0718      	lsls	r0, r3, #28
 800a104:	d422      	bmi.n	800a14c <__swsetup_r+0x64>
 800a106:	06d9      	lsls	r1, r3, #27
 800a108:	d407      	bmi.n	800a11a <__swsetup_r+0x32>
 800a10a:	2309      	movs	r3, #9
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a112:	81a3      	strh	r3, [r4, #12]
 800a114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a118:	e034      	b.n	800a184 <__swsetup_r+0x9c>
 800a11a:	0758      	lsls	r0, r3, #29
 800a11c:	d512      	bpl.n	800a144 <__swsetup_r+0x5c>
 800a11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a120:	b141      	cbz	r1, 800a134 <__swsetup_r+0x4c>
 800a122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a126:	4299      	cmp	r1, r3
 800a128:	d002      	beq.n	800a130 <__swsetup_r+0x48>
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7fe fefe 	bl	8008f2c <_free_r>
 800a130:	2300      	movs	r3, #0
 800a132:	6363      	str	r3, [r4, #52]	; 0x34
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	2300      	movs	r3, #0
 800a13e:	6063      	str	r3, [r4, #4]
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0308 	orr.w	r3, r3, #8
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	b94b      	cbnz	r3, 800a164 <__swsetup_r+0x7c>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a15a:	d003      	beq.n	800a164 <__swsetup_r+0x7c>
 800a15c:	4621      	mov	r1, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f884 	bl	800a26c <__smakebuf_r>
 800a164:	89a0      	ldrh	r0, [r4, #12]
 800a166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a16a:	f010 0301 	ands.w	r3, r0, #1
 800a16e:	d00a      	beq.n	800a186 <__swsetup_r+0x9e>
 800a170:	2300      	movs	r3, #0
 800a172:	60a3      	str	r3, [r4, #8]
 800a174:	6963      	ldr	r3, [r4, #20]
 800a176:	425b      	negs	r3, r3
 800a178:	61a3      	str	r3, [r4, #24]
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	b943      	cbnz	r3, 800a190 <__swsetup_r+0xa8>
 800a17e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a182:	d1c4      	bne.n	800a10e <__swsetup_r+0x26>
 800a184:	bd38      	pop	{r3, r4, r5, pc}
 800a186:	0781      	lsls	r1, r0, #30
 800a188:	bf58      	it	pl
 800a18a:	6963      	ldrpl	r3, [r4, #20]
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	e7f4      	b.n	800a17a <__swsetup_r+0x92>
 800a190:	2000      	movs	r0, #0
 800a192:	e7f7      	b.n	800a184 <__swsetup_r+0x9c>
 800a194:	20000070 	.word	0x20000070

0800a198 <_raise_r>:
 800a198:	291f      	cmp	r1, #31
 800a19a:	b538      	push	{r3, r4, r5, lr}
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	d904      	bls.n	800a1ac <_raise_r+0x14>
 800a1a2:	2316      	movs	r3, #22
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1ae:	b112      	cbz	r2, 800a1b6 <_raise_r+0x1e>
 800a1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1b4:	b94b      	cbnz	r3, 800a1ca <_raise_r+0x32>
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f000 f830 	bl	800a21c <_getpid_r>
 800a1bc:	462a      	mov	r2, r5
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1c6:	f000 b817 	b.w	800a1f8 <_kill_r>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d00a      	beq.n	800a1e4 <_raise_r+0x4c>
 800a1ce:	1c59      	adds	r1, r3, #1
 800a1d0:	d103      	bne.n	800a1da <_raise_r+0x42>
 800a1d2:	2316      	movs	r3, #22
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	e7e7      	b.n	800a1aa <_raise_r+0x12>
 800a1da:	2400      	movs	r4, #0
 800a1dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	4798      	blx	r3
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7e0      	b.n	800a1aa <_raise_r+0x12>

0800a1e8 <raise>:
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <raise+0xc>)
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	f7ff bfd3 	b.w	800a198 <_raise_r>
 800a1f2:	bf00      	nop
 800a1f4:	20000070 	.word	0x20000070

0800a1f8 <_kill_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	; (800a218 <_kill_r+0x20>)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4604      	mov	r4, r0
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	f7f7 fb19 	bl	800183c <_kill>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	d102      	bne.n	800a214 <_kill_r+0x1c>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	b103      	cbz	r3, 800a214 <_kill_r+0x1c>
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	bd38      	pop	{r3, r4, r5, pc}
 800a216:	bf00      	nop
 800a218:	200004e4 	.word	0x200004e4

0800a21c <_getpid_r>:
 800a21c:	f7f7 bb06 	b.w	800182c <_getpid>

0800a220 <__swhatbuf_r>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	460c      	mov	r4, r1
 800a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a228:	2900      	cmp	r1, #0
 800a22a:	b096      	sub	sp, #88	; 0x58
 800a22c:	4615      	mov	r5, r2
 800a22e:	461e      	mov	r6, r3
 800a230:	da0d      	bge.n	800a24e <__swhatbuf_r+0x2e>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a238:	f04f 0100 	mov.w	r1, #0
 800a23c:	bf0c      	ite	eq
 800a23e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a242:	2340      	movne	r3, #64	; 0x40
 800a244:	2000      	movs	r0, #0
 800a246:	6031      	str	r1, [r6, #0]
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	b016      	add	sp, #88	; 0x58
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	466a      	mov	r2, sp
 800a250:	f000 f848 	bl	800a2e4 <_fstat_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	dbec      	blt.n	800a232 <__swhatbuf_r+0x12>
 800a258:	9901      	ldr	r1, [sp, #4]
 800a25a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a25e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a262:	4259      	negs	r1, r3
 800a264:	4159      	adcs	r1, r3
 800a266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26a:	e7eb      	b.n	800a244 <__swhatbuf_r+0x24>

0800a26c <__smakebuf_r>:
 800a26c:	898b      	ldrh	r3, [r1, #12]
 800a26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a270:	079d      	lsls	r5, r3, #30
 800a272:	4606      	mov	r6, r0
 800a274:	460c      	mov	r4, r1
 800a276:	d507      	bpl.n	800a288 <__smakebuf_r+0x1c>
 800a278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	2301      	movs	r3, #1
 800a282:	6163      	str	r3, [r4, #20]
 800a284:	b002      	add	sp, #8
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	ab01      	add	r3, sp, #4
 800a28a:	466a      	mov	r2, sp
 800a28c:	f7ff ffc8 	bl	800a220 <__swhatbuf_r>
 800a290:	9900      	ldr	r1, [sp, #0]
 800a292:	4605      	mov	r5, r0
 800a294:	4630      	mov	r0, r6
 800a296:	f7fe febd 	bl	8009014 <_malloc_r>
 800a29a:	b948      	cbnz	r0, 800a2b0 <__smakebuf_r+0x44>
 800a29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a0:	059a      	lsls	r2, r3, #22
 800a2a2:	d4ef      	bmi.n	800a284 <__smakebuf_r+0x18>
 800a2a4:	f023 0303 	bic.w	r3, r3, #3
 800a2a8:	f043 0302 	orr.w	r3, r3, #2
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	e7e3      	b.n	800a278 <__smakebuf_r+0xc>
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	6020      	str	r0, [r4, #0]
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	6163      	str	r3, [r4, #20]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	6120      	str	r0, [r4, #16]
 800a2c2:	b15b      	cbz	r3, 800a2dc <__smakebuf_r+0x70>
 800a2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f000 f81d 	bl	800a308 <_isatty_r>
 800a2ce:	b128      	cbz	r0, 800a2dc <__smakebuf_r+0x70>
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	f043 0301 	orr.w	r3, r3, #1
 800a2da:	81a3      	strh	r3, [r4, #12]
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	431d      	orrs	r5, r3
 800a2e0:	81a5      	strh	r5, [r4, #12]
 800a2e2:	e7cf      	b.n	800a284 <__smakebuf_r+0x18>

0800a2e4 <_fstat_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_fstat_r+0x20>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	f7f7 fb02 	bl	80018fa <_fstat>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d102      	bne.n	800a300 <_fstat_r+0x1c>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	b103      	cbz	r3, 800a300 <_fstat_r+0x1c>
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	bf00      	nop
 800a304:	200004e4 	.word	0x200004e4

0800a308 <_isatty_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d06      	ldr	r5, [pc, #24]	; (800a324 <_isatty_r+0x1c>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	602b      	str	r3, [r5, #0]
 800a314:	f7f7 fb01 	bl	800191a <_isatty>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_isatty_r+0x1a>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_isatty_r+0x1a>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	200004e4 	.word	0x200004e4

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
