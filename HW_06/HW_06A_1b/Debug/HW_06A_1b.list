
HW_06A_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08009978  08009978  00019978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d1c  08009d1c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d24  08009d24  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  08009f00  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08009f00  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001008c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e3  00000000  00000000  000302d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  000323b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4b  00000000  00000000  00033340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176b3  00000000  00000000  00033f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bd6  00000000  00000000  0004b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091616  00000000  00000000  0005d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005424  00000000  00000000  000ee82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f3c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009960 	.word	0x08009960

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009960 	.word	0x08009960

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d137      	bne.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		//1 is added to the address in order to start a reading operation (see datasheet)
		uint8_t temp[2];
		HAL_I2C_Master_Receive(&hi2c1, ADDR+1, (uint8_t*) &temp, 2, 100);
 8000f64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	2191      	movs	r1, #145	; 0x91
 8000f70:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f72:	f001 fa45 	bl	8002400 <HAL_I2C_Master_Receive>
		float temp_tot = ((int16_t)(temp[0]<<8 | temp[1]))/256.0;
 8000f76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fad3 	bl	8000534 <__aeabi_i2d>
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f94:	f7ff fc62 	bl	800085c <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fe0a 	bl	8000bb8 <__aeabi_d2f>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
		char buff[50];
		int length = snprintf(buff, sizeof(buff),"Temperature: %.3f C\n\r", temp_tot);
 8000fa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	f107 0008 	add.w	r0, r7, #8
 8000fb6:	e9cd 2300 	strd	r2, r3, [sp]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fbc:	2132      	movs	r1, #50	; 0x32
 8000fbe:	f006 fb61 	bl	8007684 <sniprintf>
 8000fc2:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t*)buff, length, 100);
 8000fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f107 0108 	add.w	r1, r7, #8
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fd0:	f004 fe7b 	bl	8005cca <HAL_UART_Transmit>
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3748      	adds	r7, #72	; 0x48
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000244 	.word	0x20000244
 8000fe0:	200001f0 	.word	0x200001f0
 8000fe4:	40700000 	.word	0x40700000
 8000fe8:	08009978 	.word	0x08009978
 8000fec:	2000028c 	.word	0x2000028c

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fbff 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f819 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f94f 	bl	80012a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 f923 	bl	800124c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001006:	f000 f87f 	bl	8001108 <MX_I2C1_Init>
  MX_TIM2_Init();
 800100a:	f000 f8ab 	bl	8001164 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <main+0x38>)
 8001010:	f003 ffd6 	bl	8004fc0 <HAL_TIM_Base_Start_IT>
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, DATA, sizeof(DATA), 100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2304      	movs	r3, #4
 800101a:	2200      	movs	r2, #0
 800101c:	2190      	movs	r1, #144	; 0x90
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <main+0x3c>)
 8001020:	f001 f8f0 	bl	8002204 <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x34>
 8001026:	bf00      	nop
 8001028:	20000244 	.word	0x20000244
 800102c:	200001f0 	.word	0x200001f0

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fb97 	bl	8007772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <SystemClock_Config+0xd0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <SystemClock_Config+0xd0>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <SystemClock_Config+0xd0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <SystemClock_Config+0xd4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd4>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a4:	2310      	movs	r3, #16
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ae:	2304      	movs	r3, #4
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fa98 	bl	80045f0 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c6:	f000 f959 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fcfa 	bl	8004ae0 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010f2:	f000 f943 	bl	800137c <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f000 ff19 	bl	8001f7c <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f914 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001f0 	.word	0x200001f0
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <MX_TIM2_Init+0xe4>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_TIM2_Init+0xe4>)
 800119e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80011a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80011b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011be:	4822      	ldr	r0, [pc, #136]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011c0:	f003 feae 	bl	8004f20 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f000 f8d7 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d8:	4619      	mov	r1, r3
 80011da:	481b      	ldr	r0, [pc, #108]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011dc:	f004 f910 	bl	8005400 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011e6:	f000 f8c9 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011ea:	4817      	ldr	r0, [pc, #92]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011ec:	f003 ff4a 	bl	8005084 <HAL_TIM_OC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 f8c1 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011fa:	2320      	movs	r3, #32
 80011fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	4619      	mov	r1, r3
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <MX_TIM2_Init+0xe4>)
 800120a:	f004 fc8f 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001214:	f000 f8b2 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_TIM2_Init+0xe4>)
 8001230:	f004 f88a 	bl	8005348 <HAL_TIM_OC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800123a:	f000 f89f 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3738      	adds	r7, #56	; 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000244 	.word	0x20000244

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f004 fcd4 	bl	8005c30 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f875 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000028c 	.word	0x2000028c
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <MX_GPIO_Init+0xd0>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_GPIO_Init+0xd0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <MX_GPIO_Init+0xd0>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	4812      	ldr	r0, [pc, #72]	; (8001374 <MX_GPIO_Init+0xd4>)
 800132c:	f000 fe0c 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001336:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_GPIO_Init+0xd8>)
 8001348:	f000 fc7a 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134c:	2320      	movs	r3, #32
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_GPIO_Init+0xd4>)
 8001364:	f000 fc6c 	bl	8001c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020800 	.word	0x40020800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 fb58 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_I2C_MspInit+0x94>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d134      	bne.n	8001464 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_I2C_MspInit+0x98>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_I2C_MspInit+0x98>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0x98>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <HAL_I2C_MspInit+0x9c>)
 8001434:	f000 fc04 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_I2C_MspInit+0x98>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_I2C_MspInit+0x98>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspInit+0x98>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	201f      	movs	r0, #31
 800145a:	f000 fb1a 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800145e:	201f      	movs	r0, #31
 8001460:	f000 fb33 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005400 	.word	0x40005400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d115      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 faf1 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b0:	201c      	movs	r0, #28
 80014b2:	f000 fb0a 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_UART_MspInit+0x94>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d133      	bne.n	800154e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_UART_MspInit+0x98>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_UART_MspInit+0x98>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_UART_MspInit+0x98>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x98>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_UART_MspInit+0x98>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_UART_MspInit+0x98>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152e:	2307      	movs	r3, #7
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <HAL_UART_MspInit+0x9c>)
 800153a:	f000 fb81 	bl	8001c40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2026      	movs	r0, #38	; 0x26
 8001544:	f000 faa5 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001548:	2026      	movs	r0, #38	; 0x26
 800154a:	f000 fabe 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40004400 	.word	0x40004400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f974 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM2_IRQHandler+0x10>)
 80015be:	f003 fdba 	bl	8005136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000244 	.word	0x20000244

080015cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <I2C1_EV_IRQHandler+0x10>)
 80015d2:	f001 f93b 	bl	800284c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001f0 	.word	0x200001f0

080015e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <USART2_IRQHandler+0x10>)
 80015e6:	f004 fc03 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000028c 	.word	0x2000028c

080015f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_kill>:

int _kill(int pid, int sig)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800160e:	f006 f903 	bl	8007818 <__errno>
 8001612:	4603      	mov	r3, r0
 8001614:	2216      	movs	r2, #22
 8001616:	601a      	str	r2, [r3, #0]
  return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_exit>:

void _exit (int status)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffe7 	bl	8001604 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0x12>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
  }

  return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf1      	blt.n	8001684 <_write+0x12>
  }
  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_close>:

int _close(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	605a      	str	r2, [r3, #4]
  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_isatty>:

int _isatty(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f006 f868 	bl	8007818 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20018000 	.word	0x20018000
 8001774:	00000400 	.word	0x00000400
 8001778:	200002d0 	.word	0x200002d0
 800177c:	20000428 	.word	0x20000428

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f006 f827 	bl	8007824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fc0b 	bl	8000ff0 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e8:	08009d2c 	.word	0x08009d2c
  ldr r2, =_sbss
 80017ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017f0:	20000424 	.word	0x20000424

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f92b 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fdac 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f943 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001878:	f000 f90b 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	200002d4 	.word	0x200002d4

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200002d4 	.word	0x200002d4

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff feda 	bl	80018c4 <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e052      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0216 	bic.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <HAL_DMA_Abort+0x62>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0208 	bic.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b80:	e013      	b.n	8001baa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b82:	f7ff fe9f 	bl	80018c4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d90c      	bls.n	8001baa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e015      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e4      	bne.n	8001b82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00c      	b.n	8001c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c30:	b2db      	uxtb	r3, r3
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e159      	b.n	8001f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8148 	bne.w	8001f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d005      	beq.n	8001c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a2 	beq.w	8001f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x202>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x1fe>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x1fa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x1f6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x1f2>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e86:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f aea2 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12b      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fa18 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f002 ff76 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a81      	ldr	r2, [pc, #516]	; (80021f0 <HAL_I2C_Init+0x274>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d807      	bhi.n	8002000 <HAL_I2C_Init+0x84>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a80      	ldr	r2, [pc, #512]	; (80021f4 <HAL_I2C_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e006      	b.n	800200e <HAL_I2C_Init+0x92>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a7d      	ldr	r2, [pc, #500]	; (80021f8 <HAL_I2C_Init+0x27c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e7      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a78      	ldr	r2, [pc, #480]	; (80021fc <HAL_I2C_Init+0x280>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d802      	bhi.n	8002050 <HAL_I2C_Init+0xd4>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	e009      	b.n	8002064 <HAL_I2C_Init+0xe8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a69      	ldr	r2, [pc, #420]	; (8002200 <HAL_I2C_Init+0x284>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	3301      	adds	r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	495c      	ldr	r1, [pc, #368]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d819      	bhi.n	80020b8 <HAL_I2C_Init+0x13c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002098:	400b      	ands	r3, r1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_I2C_Init+0x138>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e59      	subs	r1, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	e051      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e04f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Init+0x168>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e012      	b.n	800210a <HAL_I2C_Init+0x18e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	0099      	lsls	r1, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x196>
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_I2C_Init+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e58      	subs	r0, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6911      	ldr	r1, [r2, #16]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	000186a0 	.word	0x000186a0
 80021f4:	001e847f 	.word	0x001e847f
 80021f8:	003d08ff 	.word	0x003d08ff
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	461a      	mov	r2, r3
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
 8002214:	4613      	mov	r3, r2
 8002216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff fb54 	bl	80018c4 <HAL_GetTick>
 800221c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	f040 80e0 	bne.w	80023ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2319      	movs	r3, #25
 8002232:	2201      	movs	r2, #1
 8002234:	4970      	ldr	r1, [pc, #448]	; (80023f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f001 ffb0 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	e0d3      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x50>
 8002250:	2302      	movs	r3, #2
 8002252:	e0cc      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d007      	beq.n	800227a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2221      	movs	r2, #33	; 0x21
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2210      	movs	r2, #16
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	893a      	ldrh	r2, [r7, #8]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_I2C_Master_Transmit+0x1f8>)
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f001 fd72 	bl	8003dac <I2C_MasterRequestWrite>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08d      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022e8:	e066      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	6a39      	ldr	r1, [r7, #32]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f002 f82a 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d107      	bne.n	8002312 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06b      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_I2C_Master_Transmit+0x188>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d017      	beq.n	800238c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f002 f81a 	bl	80043ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e01a      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d194      	bne.n	80022ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000

08002400 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	817b      	strh	r3, [r7, #10]
 8002410:	4613      	mov	r3, r2
 8002412:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff fa56 	bl	80018c4 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	f040 820b 	bne.w	800283e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2319      	movs	r3, #25
 800242e:	2201      	movs	r2, #1
 8002430:	497c      	ldr	r1, [pc, #496]	; (8002624 <HAL_I2C_Master_Receive+0x224>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f001 feb2 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	e1fe      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_I2C_Master_Receive+0x50>
 800244c:	2302      	movs	r3, #2
 800244e:	e1f7      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d007      	beq.n	8002476 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2222      	movs	r2, #34	; 0x22
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2210      	movs	r2, #16
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_I2C_Master_Receive+0x228>)
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f001 fcf6 	bl	8003eb0 <I2C_MasterRequestRead>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1b8      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d113      	bne.n	80024fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e18c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	2b01      	cmp	r3, #1
 8002504:	d11b      	bne.n	800253e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e16c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b02      	cmp	r3, #2
 8002544:	d11b      	bne.n	800257e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	e14c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025a4:	e138      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	f200 80f1 	bhi.w	8002792 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d123      	bne.n	8002600 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f001 ff77 	bl	80044b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e139      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fe:	e10b      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b02      	cmp	r3, #2
 8002606:	d14e      	bne.n	80026a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	2200      	movs	r2, #0
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <HAL_I2C_Master_Receive+0x22c>)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f001 fdc2 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e10e      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
 8002622:	bf00      	nop
 8002624:	00100002 	.word	0x00100002
 8002628:	ffff0000 	.word	0xffff0000
 800262c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a4:	e0b8      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2200      	movs	r2, #0
 80026ae:	4966      	ldr	r1, [pc, #408]	; (8002848 <HAL_I2C_Master_Receive+0x448>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f001 fd73 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0bf      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	2200      	movs	r2, #0
 800270a:	494f      	ldr	r1, [pc, #316]	; (8002848 <HAL_I2C_Master_Receive+0x448>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f001 fd45 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e091      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002790:	e042      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f001 fe8a 	bl	80044b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e04c      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d118      	bne.n	8002818 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f47f aec2 	bne.w	80025a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00010004 	.word	0x00010004

0800284c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800286c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b10      	cmp	r3, #16
 800287a:	d003      	beq.n	8002884 <HAL_I2C_EV_IRQHandler+0x38>
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	f040 80b1 	bne.w	80029e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <HAL_I2C_EV_IRQHandler+0x6e>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028a4:	d003      	beq.n	80028ae <HAL_I2C_EV_IRQHandler+0x62>
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_EV_IRQHandler+0x66>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_EV_IRQHandler+0x68>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f000 8114 	beq.w	8002ae2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x90>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f001 fe73 	bl	80045ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fcbf 	bl	8003258 <I2C_Master_SB>
 80028da:	e083      	b.n	80029e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_I2C_EV_IRQHandler+0xac>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fd37 	bl	8003364 <I2C_Master_ADD10>
 80028f6:	e075      	b.n	80029e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0xc8>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fd53 	bl	80033b8 <I2C_Master_ADDR>
 8002912:	e067      	b.n	80029e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292c:	f000 80db 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x10a>
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x10a>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f937 	bl	8002bc2 <I2C_MasterTransmit_TXE>
 8002954:	e046      	b.n	80029e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80c2 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80bc 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800296e:	7bbb      	ldrb	r3, [r7, #14]
 8002970:	2b21      	cmp	r3, #33	; 0x21
 8002972:	d103      	bne.n	800297c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f9c0 	bl	8002cfa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800297a:	e0b4      	b.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	f040 80b1 	bne.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa2e 	bl	8002de6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298a:	e0ac      	b.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299a:	f000 80a4 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <HAL_I2C_EV_IRQHandler+0x178>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_I2C_EV_IRQHandler+0x178>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 faa6 	bl	8002f0e <I2C_MasterReceive_RXNE>
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808b 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8085 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fb51 	bl	8003084 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e2:	e080      	b.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80029e4:	e07f      	b.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e007      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 ff11 	bl	8003856 <I2C_Slave_ADDR>
 8002a34:	e05a      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_I2C_EV_IRQHandler+0x206>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ff4c 	bl	80038e8 <I2C_Slave_STOPF>
 8002a50:	e04c      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a52:	7bbb      	ldrb	r3, [r7, #14]
 8002a54:	2b21      	cmp	r3, #33	; 0x21
 8002a56:	d002      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x212>
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	2b29      	cmp	r3, #41	; 0x29
 8002a5c:	d120      	bne.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x238>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x238>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fe2c 	bl	80036da <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a82:	e032      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02d      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x29e>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d028      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fe5b 	bl	8003754 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a9e:	e024      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fe69 	bl	8003796 <I2C_SlaveReceive_RXNE>
 8002ac4:	e012      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fe99 	bl	8003812 <I2C_SlaveReceive_BTF>
 8002ae0:	e004      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d150      	bne.n	8002c8a <I2C_MasterTransmit_TXE+0xc8>
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b21      	cmp	r3, #33	; 0x21
 8002bec:	d14d      	bne.n	8002c8a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d01d      	beq.n	8002c30 <I2C_MasterTransmit_TXE+0x6e>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d01a      	beq.n	8002c30 <I2C_MasterTransmit_TXE+0x6e>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c00:	d016      	beq.n	8002c30 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c10:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2211      	movs	r2, #17
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff62 	bl	8002af2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c2e:	e060      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d107      	bne.n	8002c7a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ff7d 	bl	8002b72 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c78:	e03b      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff35 	bl	8002af2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c88:	e033      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b21      	cmp	r3, #33	; 0x21
 8002c8e:	d005      	beq.n	8002c9c <I2C_MasterTransmit_TXE+0xda>
 8002c90:	7bbb      	ldrb	r3, [r7, #14]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d12d      	bne.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b22      	cmp	r3, #34	; 0x22
 8002c9a:	d12a      	bne.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cb6:	e01c      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d103      	bne.n	8002ccc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f88e 	bl	8002de6 <I2C_MemoryTransmit_TXE_BTF>
}
 8002cca:	e012      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cf0:	e7ff      	b.n	8002cf2 <I2C_MasterTransmit_TXE+0x130>
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b21      	cmp	r3, #33	; 0x21
 8002d12:	d164      	bne.n	8002dde <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d42:	e04c      	b.n	8002dde <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d01d      	beq.n	8002d86 <I2C_MasterTransmit_BTF+0x8c>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d01a      	beq.n	8002d86 <I2C_MasterTransmit_BTF+0x8c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d56:	d016      	beq.n	8002d86 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d66:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2211      	movs	r2, #17
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff feb7 	bl	8002af2 <HAL_I2C_MasterTxCpltCallback>
}
 8002d84:	e02b      	b.n	8002dde <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d94:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d107      	bne.n	8002dd0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fed2 	bl	8002b72 <HAL_I2C_MemTxCpltCallback>
}
 8002dce:	e006      	b.n	8002dde <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fe8a 	bl	8002af2 <HAL_I2C_MasterTxCpltCallback>
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11d      	bne.n	8002e3a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10b      	bne.n	8002e1e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e16:	1c9a      	adds	r2, r3, #2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e1c:	e073      	b.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	121b      	asrs	r3, r3, #8
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e38:	e065      	b.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10b      	bne.n	8002e5a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e58:	e055      	b.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d151      	bne.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b22      	cmp	r3, #34	; 0x22
 8002e66:	d10d      	bne.n	8002e84 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e76:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e82:	e040      	b.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b21      	cmp	r3, #33	; 0x21
 8002e92:	d112      	bne.n	8002eba <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002eb8:	e025      	b.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d120      	bne.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b21      	cmp	r3, #33	; 0x21
 8002ec8:	d11d      	bne.n	8002f06 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ed8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fe36 	bl	8002b72 <HAL_I2C_MemTxCpltCallback>
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b22      	cmp	r3, #34	; 0x22
 8002f20:	f040 80ac 	bne.w	800307c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d921      	bls.n	8002f76 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	f040 808c 	bne.w	800307c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002f74:	e082      	b.n	800307c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d075      	beq.n	800306a <I2C_MasterReceive_RXNE+0x15c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d002      	beq.n	8002f8a <I2C_MasterReceive_RXNE+0x7c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d16f      	bne.n	800306a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f001 fa5e 	bl	800444c <I2C_WaitOnSTOPRequestThroughIT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d142      	bne.n	800301c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d10a      	bne.n	8003006 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fdc1 	bl	8002b86 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003004:	e03a      	b.n	800307c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2212      	movs	r2, #18
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fd76 	bl	8002b06 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800301a:	e02f      	b.n	800307c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800302a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fd99 	bl	8002b9a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003068:	e008      	b.n	800307c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	605a      	str	r2, [r3, #4]
}
 800307a:	e7ff      	b.n	800307c <I2C_MasterReceive_RXNE+0x16e>
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80030d2:	e0bd      	b.n	8003250 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d129      	bne.n	8003132 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d00a      	beq.n	800310a <I2C_MasterReceive_BTF+0x86>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d007      	beq.n	800310a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003130:	e08e      	b.n	8003250 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d176      	bne.n	800322a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d002      	beq.n	8003148 <I2C_MasterReceive_BTF+0xc4>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d108      	bne.n	800315a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e019      	b.n	800318e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d002      	beq.n	8003166 <I2C_MasterReceive_BTF+0xe2>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d108      	bne.n	8003178 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e00a      	b.n	800318e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b10      	cmp	r3, #16
 800317c:	d007      	beq.n	800318e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d10a      	bne.n	8003214 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fcba 	bl	8002b86 <HAL_I2C_MemRxCpltCallback>
}
 8003212:	e01d      	b.n	8003250 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2212      	movs	r2, #18
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fc6f 	bl	8002b06 <HAL_I2C_MasterRxCpltCallback>
}
 8003228:	e012      	b.n	8003250 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d117      	bne.n	800329c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003284:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003286:	e067      	b.n	8003358 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
}
 800329a:	e05d      	b.n	8003358 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a4:	d133      	bne.n	800330e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b21      	cmp	r3, #33	; 0x21
 80032b0:	d109      	bne.n	80032c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032c2:	611a      	str	r2, [r3, #16]
 80032c4:	e008      	b.n	80032d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <I2C_Master_SB+0x92>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d032      	beq.n	8003358 <I2C_Master_SB+0x100>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02d      	beq.n	8003358 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
}
 800330c:	e024      	b.n	8003358 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10e      	bne.n	8003334 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	b29b      	uxth	r3, r3
 800331c:	11db      	asrs	r3, r3, #7
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f003 0306 	and.w	r3, r3, #6
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f063 030f 	orn	r3, r3, #15
 800332a:	b2da      	uxtb	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	611a      	str	r2, [r3, #16]
}
 8003332:	e011      	b.n	8003358 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10d      	bne.n	8003358 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	b29b      	uxth	r3, r3
 8003342:	11db      	asrs	r3, r3, #7
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f063 030e 	orn	r3, r3, #14
 8003350:	b2da      	uxtb	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	b2da      	uxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <I2C_Master_ADD10+0x26>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <I2C_Master_ADD10+0x48>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033aa:	605a      	str	r2, [r3, #4]
  }
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b091      	sub	sp, #68	; 0x44
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b22      	cmp	r3, #34	; 0x22
 80033e0:	f040 8169 	bne.w	80036b6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10f      	bne.n	800340c <I2C_Master_ADDR+0x54>
 80033ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d10b      	bne.n	800340c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f4:	2300      	movs	r3, #0
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	633b      	str	r3, [r7, #48]	; 0x30
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	e160      	b.n	80036ce <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11d      	bne.n	8003450 <I2C_Master_ADDR+0x98>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800341c:	d118      	bne.n	8003450 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	651a      	str	r2, [r3, #80]	; 0x50
 800344e:	e13e      	b.n	80036ce <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e115      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 808a 	bne.w	80035a2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003494:	d137      	bne.n	8003506 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d113      	bne.n	80034de <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	e0e7      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e0d3      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2b08      	cmp	r3, #8
 800350a:	d02e      	beq.n	800356a <I2C_Master_ADDR+0x1b2>
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	2b20      	cmp	r3, #32
 8003510:	d02b      	beq.n	800356a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	2b12      	cmp	r3, #18
 8003516:	d102      	bne.n	800351e <I2C_Master_ADDR+0x166>
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	2b01      	cmp	r3, #1
 800351c:	d125      	bne.n	800356a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	2b04      	cmp	r3, #4
 8003522:	d00e      	beq.n	8003542 <I2C_Master_ADDR+0x18a>
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	2b02      	cmp	r3, #2
 8003528:	d00b      	beq.n	8003542 <I2C_Master_ADDR+0x18a>
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	2b10      	cmp	r3, #16
 800352e:	d008      	beq.n	8003542 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e007      	b.n	8003552 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	e0a1      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e085      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d14d      	bne.n	8003648 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d016      	beq.n	80035e0 <I2C_Master_ADDR+0x228>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d013      	beq.n	80035e0 <I2C_Master_ADDR+0x228>
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d010      	beq.n	80035e0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ee:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fe:	d117      	bne.n	8003630 <I2C_Master_ADDR+0x278>
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003606:	d00b      	beq.n	8003620 <I2C_Master_ADDR+0x268>
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b01      	cmp	r3, #1
 800360c:	d008      	beq.n	8003620 <I2C_Master_ADDR+0x268>
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	2b08      	cmp	r3, #8
 8003612:	d005      	beq.n	8003620 <I2C_Master_ADDR+0x268>
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2b10      	cmp	r3, #16
 8003618:	d002      	beq.n	8003620 <I2C_Master_ADDR+0x268>
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b20      	cmp	r3, #32
 800361e:	d107      	bne.n	8003630 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800362e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	e032      	b.n	80036ae <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003656:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003666:	d117      	bne.n	8003698 <I2C_Master_ADDR+0x2e0>
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366e:	d00b      	beq.n	8003688 <I2C_Master_ADDR+0x2d0>
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	2b01      	cmp	r3, #1
 8003674:	d008      	beq.n	8003688 <I2C_Master_ADDR+0x2d0>
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	2b08      	cmp	r3, #8
 800367a:	d005      	beq.n	8003688 <I2C_Master_ADDR+0x2d0>
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	2b10      	cmp	r3, #16
 8003680:	d002      	beq.n	8003688 <I2C_Master_ADDR+0x2d0>
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	2b20      	cmp	r3, #32
 8003686:	d107      	bne.n	8003698 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003696:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80036b4:	e00b      	b.n	80036ce <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	e7ff      	b.n	80036ce <I2C_Master_ADDR+0x316>
 80036ce:	bf00      	nop
 80036d0:	3744      	adds	r7, #68	; 0x44
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02b      	beq.n	800374c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d114      	bne.n	800374c <I2C_SlaveTransmit_TXE+0x72>
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b29      	cmp	r3, #41	; 0x29
 8003726:	d111      	bne.n	800374c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2221      	movs	r2, #33	; 0x21
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2228      	movs	r2, #40	; 0x28
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff f9e7 	bl	8002b1a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02c      	beq.n	800380a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d114      	bne.n	800380a <I2C_SlaveReceive_RXNE+0x74>
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b2a      	cmp	r3, #42	; 0x2a
 80037e4:	d111      	bne.n	800380a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2222      	movs	r2, #34	; 0x22
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2228      	movs	r2, #40	; 0x28
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff f992 	bl	8002b2e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003870:	2b28      	cmp	r3, #40	; 0x28
 8003872:	d125      	bne.n	80038c0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	81bb      	strh	r3, [r7, #12]
 80038a2:	e002      	b.n	80038aa <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80038b2:	89ba      	ldrh	r2, [r7, #12]
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f942 	bl	8002b42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038be:	e00e      	b.n	80038de <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003906:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003944:	d172      	bne.n	8003a2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b22      	cmp	r3, #34	; 0x22
 800394a:	d002      	beq.n	8003952 <I2C_Slave_STOPF+0x6a>
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b2a      	cmp	r3, #42	; 0x2a
 8003950:	d135      	bne.n	80039be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003984:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f949 	bl	8001c22 <HAL_DMA_GetState>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d049      	beq.n	8003a2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	4a69      	ldr	r2, [pc, #420]	; (8003b40 <I2C_Slave_STOPF+0x258>)
 800399c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe f91b 	bl	8001bde <HAL_DMA_Abort_IT>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03d      	beq.n	8003a2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b8:	4610      	mov	r0, r2
 80039ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039bc:	e035      	b.n	8003a2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f913 	bl	8001c22 <HAL_DMA_GetState>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d014      	beq.n	8003a2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	4a4e      	ldr	r2, [pc, #312]	; (8003b40 <I2C_Slave_STOPF+0x258>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f8e5 	bl	8001bde <HAL_DMA_Abort_IT>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
 8003a28:	e000      	b.n	8003a2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03e      	beq.n	8003ab4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d112      	bne.n	8003a6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d112      	bne.n	8003a9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f843 	bl	8003b48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ac2:	e039      	b.n	8003b38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac8:	d109      	bne.n	8003ade <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2228      	movs	r2, #40	; 0x28
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff f828 	bl	8002b2e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b28      	cmp	r3, #40	; 0x28
 8003ae8:	d111      	bne.n	8003b0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <I2C_Slave_STOPF+0x25c>)
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff f829 	bl	8002b5e <HAL_I2C_ListenCpltCallback>
}
 8003b0c:	e014      	b.n	8003b38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	d002      	beq.n	8003b1c <I2C_Slave_STOPF+0x234>
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b22      	cmp	r3, #34	; 0x22
 8003b1a:	d10d      	bne.n	8003b38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fe fffb 	bl	8002b2e <HAL_I2C_SlaveRxCpltCallback>
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	0800404d 	.word	0x0800404d
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d002      	beq.n	8003b6c <I2C_ITError+0x24>
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d10a      	bne.n	8003b82 <I2C_ITError+0x3a>
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b22      	cmp	r3, #34	; 0x22
 8003b70:	d107      	bne.n	8003b82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b88:	2b28      	cmp	r3, #40	; 0x28
 8003b8a:	d107      	bne.n	8003b9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2228      	movs	r2, #40	; 0x28
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b9a:	e015      	b.n	8003bc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d00a      	beq.n	8003bc2 <I2C_ITError+0x7a>
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b60      	cmp	r3, #96	; 0x60
 8003bb0:	d007      	beq.n	8003bc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd6:	d162      	bne.n	8003c9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d020      	beq.n	8003c38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	4a6a      	ldr	r2, [pc, #424]	; (8003da4 <I2C_ITError+0x25c>)
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd ffeb 	bl	8001bde <HAL_DMA_Abort_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8089 	beq.w	8003d22 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c32:	4610      	mov	r0, r2
 8003c34:	4798      	blx	r3
 8003c36:	e074      	b.n	8003d22 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4a59      	ldr	r2, [pc, #356]	; (8003da4 <I2C_ITError+0x25c>)
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd ffca 	bl	8001bde <HAL_DMA_Abort_IT>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d068      	beq.n	8003d22 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d10b      	bne.n	8003c76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4798      	blx	r3
 8003c9c:	e041      	b.n	8003d22 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b60      	cmp	r3, #96	; 0x60
 8003ca8:	d125      	bne.n	8003cf6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d10b      	bne.n	8003cde <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fe ff5d 	bl	8002bae <HAL_I2C_AbortCpltCallback>
 8003cf4:	e015      	b.n	8003d22 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d10b      	bne.n	8003d1c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fe ff3c 	bl	8002b9a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d113      	bne.n	8003d9c <I2C_ITError+0x254>
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b28      	cmp	r3, #40	; 0x28
 8003d78:	d110      	bne.n	8003d9c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <I2C_ITError+0x260>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fe fee1 	bl	8002b5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800404d 	.word	0x0800404d
 8003da8:	ffff0000 	.word	0xffff0000

08003dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d006      	beq.n	8003dd6 <I2C_MasterRequestWrite+0x2a>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d003      	beq.n	8003dd6 <I2C_MasterRequestWrite+0x2a>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d108      	bne.n	8003de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e00b      	b.n	8003e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b12      	cmp	r3, #18
 8003dee:	d107      	bne.n	8003e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9c5 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d103      	bne.n	8003e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e035      	b.n	8003ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3c:	d108      	bne.n	8003e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	e01b      	b.n	8003e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e50:	897b      	ldrh	r3, [r7, #10]
 8003e52:	11db      	asrs	r3, r3, #7
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0306 	and.w	r3, r3, #6
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f063 030f 	orn	r3, r3, #15
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <I2C_MasterRequestWrite+0xfc>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f9eb 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e010      	b.n	8003ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e7e:	897b      	ldrh	r3, [r7, #10]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4907      	ldr	r1, [pc, #28]	; (8003eac <I2C_MasterRequestWrite+0x100>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f9db 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	00010008 	.word	0x00010008
 8003eac:	00010002 	.word	0x00010002

08003eb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d006      	beq.n	8003eea <I2C_MasterRequestRead+0x3a>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d003      	beq.n	8003eea <I2C_MasterRequestRead+0x3a>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d108      	bne.n	8003efc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e00b      	b.n	8003f14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	2b11      	cmp	r3, #17
 8003f02:	d107      	bne.n	8003f14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f93b 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d103      	bne.n	8003f44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e079      	b.n	800403c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f50:	d108      	bne.n	8003f64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	e05f      	b.n	8004024 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f64:	897b      	ldrh	r3, [r7, #10]
 8003f66:	11db      	asrs	r3, r3, #7
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0306 	and.w	r3, r3, #6
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f063 030f 	orn	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4930      	ldr	r1, [pc, #192]	; (8004044 <I2C_MasterRequestRead+0x194>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f961 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e054      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4929      	ldr	r1, [pc, #164]	; (8004048 <I2C_MasterRequestRead+0x198>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f951 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e044      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8d9 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d103      	bne.n	8004008 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e017      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030e 	orn	r3, r3, #14
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <I2C_MasterRequestRead+0x198>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f90d 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010008 	.word	0x00010008
 8004048:	00010002 	.word	0x00010002

0800404c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <I2C_DMAAbort+0x148>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <I2C_DMAAbort+0x14c>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0a1a      	lsrs	r2, r3, #8
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00da      	lsls	r2, r3, #3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004092:	e00a      	b.n	80040aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d0ea      	beq.n	8004080 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	2200      	movs	r2, #0
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	2200      	movs	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	2200      	movs	r2, #0
 80040ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	2200      	movs	r2, #0
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d10e      	bne.n	800413a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7fe fd3b 	bl	8002bae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004138:	e027      	b.n	800418a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d117      	bne.n	8004174 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004162:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2228      	movs	r2, #40	; 0x28
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004172:	e007      	b.n	8004184 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f7fe fd08 	bl	8002b9a <HAL_I2C_ErrorCallback>
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000
 8004198:	14f8b589 	.word	0x14f8b589

0800419c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ac:	e025      	b.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b4:	d021      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b6:	f7fd fb85 	bl	80018c4 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d116      	bne.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e023      	b.n	8004242 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10d      	bne.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	e00c      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d0b6      	beq.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004258:	e051      	b.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d123      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004282:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e046      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b8:	d021      	beq.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fd fb03 	bl	80018c4 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e020      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10c      	bne.n	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e00b      	b.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d18d      	bne.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004354:	e02d      	b.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f900 	bl	800455c <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e02d      	b.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800436c:	d021      	beq.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fd faa9 	bl	80018c4 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e007      	b.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d1ca      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d6:	e02d      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f8bf 	bl	800455c <I2C_IsAcknowledgeFailed>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e02d      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ee:	d021      	beq.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fd fa68 	bl	80018c4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d1ca      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	08db      	lsrs	r3, r3, #3
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	0a1a      	lsrs	r2, r3, #8
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b01      	subs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e008      	b.n	800449c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004498:	d0e9      	beq.n	800446e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000000 	.word	0x20000000
 80044ac:	14f8b589 	.word	0x14f8b589

080044b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044bc:	e042      	b.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d119      	bne.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e029      	b.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fd f9e0 	bl	80018c4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d1b5      	bne.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d11b      	bne.n	80045ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0204 	orr.w	r2, r3, #4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045ca:	d103      	bne.n	80045d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045d2:	e007      	b.n	80045e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045dc:	d102      	bne.n	80045e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e267      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b82      	ldr	r3, [pc, #520]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e242      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a75      	ldr	r2, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b70      	ldr	r3, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6f      	ldr	r2, [pc, #444]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6c      	ldr	r2, [pc, #432]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b69      	ldr	r3, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a68      	ldr	r2, [pc, #416]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd f90c 	bl	80018c4 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd f908 	bl	80018c4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e207      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fd f8f8 	bl	80018c4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fd f8f4 	bl	80018c4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1f3      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1c7      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4937      	ldr	r1, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fd f8ad 	bl	80018c4 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fd f8a9 	bl	80018c4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a8      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4925      	ldr	r1, [pc, #148]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd f88c 	bl	80018c4 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fd f888 	bl	80018c4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e187      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d036      	beq.n	8004848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fd f86c 	bl	80018c4 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fd f868 	bl	80018c4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e167      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e01b      	b.n	8004848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fd f855 	bl	80018c4 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e00e      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fd f851 	bl	80018c4 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d907      	bls.n	800483c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e150      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004830:	40023800 	.word	0x40023800
 8004834:	42470000 	.word	0x42470000
 8004838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ea      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8097 	beq.w	8004984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485a:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	4b7d      	ldr	r3, [pc, #500]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b77      	ldr	r3, [pc, #476]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d118      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b74      	ldr	r3, [pc, #464]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489e:	f7fd f811 	bl	80018c4 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a6:	f7fd f80d 	bl	80018c4 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e10c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x2ea>
 80048cc:	4b64      	ldr	r3, [pc, #400]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a63      	ldr	r2, [pc, #396]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x30c>
 80048e2:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a5e      	ldr	r2, [pc, #376]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b5c      	ldr	r3, [pc, #368]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048fc:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a57      	ldr	r2, [pc, #348]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fc ffd2 	bl	80018c4 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fc ffce 	bl	80018c4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0cb      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ee      	beq.n	8004924 <HAL_RCC_OscConfig+0x334>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fc ffbc 	bl	80018c4 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fc ffb8 	bl	80018c4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0b5      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ee      	bne.n	8004950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a1 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d05c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d141      	bne.n	8004a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fc ff8c 	bl	80018c4 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fc ff88 	bl	80018c4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e087      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	491b      	ldr	r1, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fc ff61 	bl	80018c4 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fc ff5d 	bl	80018c4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e05c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x416>
 8004a24:	e054      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fc ff4a 	bl	80018c4 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fc ff46 	bl	80018c4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e045      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
 8004a52:	e03d      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e038      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d028      	beq.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d121      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d11a      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0cc      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90c      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d044      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e067      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fc fe78 	bl	80018c4 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fc fe74 	bl	80018c4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20c      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fdd8 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	08009990 	.word	0x08009990
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	20000004 	.word	0x20000004

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b094      	sub	sp, #80	; 0x50
 8004cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb8:	2300      	movs	r3, #0
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc4:	4b79      	ldr	r3, [pc, #484]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d00d      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x40>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	f200 80e1 	bhi.w	8004e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cde:	e0db      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ce4:	e0db      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4b73      	ldr	r3, [pc, #460]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cea:	e0d8      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d063      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d1e:	4622      	mov	r2, r4
 8004d20:	462b      	mov	r3, r5
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	0159      	lsls	r1, r3, #5
 8004d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d30:	0150      	lsls	r0, r2, #5
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4621      	mov	r1, r4
 8004d38:	1a51      	subs	r1, r2, r1
 8004d3a:	6139      	str	r1, [r7, #16]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d50:	4659      	mov	r1, fp
 8004d52:	018b      	lsls	r3, r1, #6
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	018a      	lsls	r2, r1, #6
 8004d5e:	4651      	mov	r1, sl
 8004d60:	ebb2 0801 	subs.w	r8, r2, r1
 8004d64:	4659      	mov	r1, fp
 8004d66:	eb63 0901 	sbc.w	r9, r3, r1
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d7e:	4690      	mov	r8, r2
 8004d80:	4699      	mov	r9, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	eb18 0303 	adds.w	r3, r8, r3
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	eb49 0303 	adc.w	r3, r9, r3
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d9e:	4629      	mov	r1, r5
 8004da0:	024b      	lsls	r3, r1, #9
 8004da2:	4621      	mov	r1, r4
 8004da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004da8:	4621      	mov	r1, r4
 8004daa:	024a      	lsls	r2, r1, #9
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db2:	2200      	movs	r2, #0
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dbc:	f7fb ff4c 	bl	8000c58 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc8:	e058      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	f04f 0000 	mov.w	r0, #0
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	0159      	lsls	r1, r3, #5
 8004df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df6:	0150      	lsls	r0, r2, #5
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e20:	eb63 050b 	sbc.w	r5, r3, fp
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	00eb      	lsls	r3, r5, #3
 8004e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e32:	00e2      	lsls	r2, r4, #3
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	18e3      	adds	r3, r4, r3
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	464b      	mov	r3, r9
 8004e40:	eb45 0303 	adc.w	r3, r5, r3
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e52:	4629      	mov	r1, r5
 8004e54:	028b      	lsls	r3, r1, #10
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	028a      	lsls	r2, r1, #10
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	61fa      	str	r2, [r7, #28]
 8004e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e70:	f7fb fef2 	bl	8000c58 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	3301      	adds	r3, #1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3750      	adds	r7, #80	; 0x50
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	007a1200 	.word	0x007a1200

08004eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000000 	.word	0x20000000

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed4:	f7ff fff0 	bl	8004eb8 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0a9b      	lsrs	r3, r3, #10
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4903      	ldr	r1, [pc, #12]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	080099a0 	.word	0x080099a0

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004efc:	f7ff ffdc 	bl	8004eb8 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0b5b      	lsrs	r3, r3, #13
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	080099a0 	.word	0x080099a0

08004f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e041      	b.n	8004fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fc fa96 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fb3e 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d001      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e044      	b.n	8005062 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x6c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d013      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x6c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <HAL_TIM_Base_Start_IT+0xb4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x6c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a19      	ldr	r2, [pc, #100]	; (8005078 <HAL_TIM_Base_Start_IT+0xb8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x6c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_TIM_Base_Start_IT+0xbc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x6c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a16      	ldr	r2, [pc, #88]	; (8005080 <HAL_TIM_Base_Start_IT+0xc0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d010      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e007      	b.n	8005060 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40014000 	.word	0x40014000

08005084 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f839 	bl	8005122 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fa8c 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d122      	bne.n	8005192 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11b      	bne.n	8005192 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0202 	mvn.w	r2, #2
 8005162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa12 	bl	80055a2 <HAL_TIM_IC_CaptureCallback>
 800517e:	e005      	b.n	800518c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa04 	bl	800558e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa15 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b04      	cmp	r3, #4
 800519e:	d122      	bne.n	80051e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d11b      	bne.n	80051e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0204 	mvn.w	r2, #4
 80051b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9e8 	bl	80055a2 <HAL_TIM_IC_CaptureCallback>
 80051d2:	e005      	b.n	80051e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9da 	bl	800558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9eb 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d122      	bne.n	800523a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0208 	mvn.w	r2, #8
 800520a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9be 	bl	80055a2 <HAL_TIM_IC_CaptureCallback>
 8005226:	e005      	b.n	8005234 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9b0 	bl	800558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9c1 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d122      	bne.n	800528e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b10      	cmp	r3, #16
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0210 	mvn.w	r2, #16
 800525e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2208      	movs	r2, #8
 8005264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f994 	bl	80055a2 <HAL_TIM_IC_CaptureCallback>
 800527a:	e005      	b.n	8005288 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f986 	bl	800558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f997 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10e      	bne.n	80052ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0201 	mvn.w	r2, #1
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fb fe4d 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fc9b 	bl	8005c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f95c 	bl	80055ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b20      	cmp	r3, #32
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0220 	mvn.w	r2, #32
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fc65 	bl	8005c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005362:	2302      	movs	r3, #2
 8005364:	e048      	b.n	80053f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b0c      	cmp	r3, #12
 8005372:	d839      	bhi.n	80053e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053e9 	.word	0x080053e9
 8005384:	080053e9 	.word	0x080053e9
 8005388:	080053e9 	.word	0x080053e9
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053e9 	.word	0x080053e9
 8005394:	080053e9 	.word	0x080053e9
 8005398:	080053e9 	.word	0x080053e9
 800539c:	080053cd 	.word	0x080053cd
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053db 	.word	0x080053db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f992 	bl	80056e0 <TIM_OC1_SetConfig>
      break;
 80053bc:	e017      	b.n	80053ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f9f1 	bl	80057ac <TIM_OC2_SetConfig>
      break;
 80053ca:	e010      	b.n	80053ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fa56 	bl	8005884 <TIM_OC3_SetConfig>
      break;
 80053d8:	e009      	b.n	80053ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fab9 	bl	8005958 <TIM_OC4_SetConfig>
      break;
 80053e6:	e002      	b.n	80053ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	75fb      	strb	r3, [r7, #23]
      break;
 80053ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIM_ConfigClockSource+0x1c>
 8005418:	2302      	movs	r3, #2
 800541a:	e0b4      	b.n	8005586 <HAL_TIM_ConfigClockSource+0x186>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800543a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005454:	d03e      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	f200 8087 	bhi.w	800556c <HAL_TIM_ConfigClockSource+0x16c>
 800545e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005462:	f000 8086 	beq.w	8005572 <HAL_TIM_ConfigClockSource+0x172>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d87f      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b70      	cmp	r3, #112	; 0x70
 800546e:	d01a      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005470:	2b70      	cmp	r3, #112	; 0x70
 8005472:	d87b      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b60      	cmp	r3, #96	; 0x60
 8005476:	d050      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x11a>
 8005478:	2b60      	cmp	r3, #96	; 0x60
 800547a:	d877      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b50      	cmp	r3, #80	; 0x50
 800547e:	d03c      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0xfa>
 8005480:	2b50      	cmp	r3, #80	; 0x50
 8005482:	d873      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d058      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x13a>
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d86f      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d064      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	d86b      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b20      	cmp	r3, #32
 8005496:	d060      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x15a>
 8005498:	2b20      	cmp	r3, #32
 800549a:	d867      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d05c      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x15a>
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d05a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x15a>
 80054a4:	e062      	b.n	800556c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6899      	ldr	r1, [r3, #8]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f000 fb19 	bl	8005aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	609a      	str	r2, [r3, #8]
      break;
 80054d2:	e04f      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6899      	ldr	r1, [r3, #8]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f000 fb02 	bl	8005aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f6:	609a      	str	r2, [r3, #8]
      break;
 80054f8:	e03c      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	461a      	mov	r2, r3
 8005508:	f000 fa76 	bl	80059f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2150      	movs	r1, #80	; 0x50
 8005512:	4618      	mov	r0, r3
 8005514:	f000 facf 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005518:	e02c      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	461a      	mov	r2, r3
 8005528:	f000 fa95 	bl	8005a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2160      	movs	r1, #96	; 0x60
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fabf 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005538:	e01c      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	f000 fa56 	bl	80059f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	4618      	mov	r0, r3
 8005554:	f000 faaf 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005558:	e00c      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f000 faa6 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 800556a:	e003      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e000      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
	...

080055e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a34      	ldr	r2, [pc, #208]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <TIM_Base_SetConfig+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a30      	ldr	r2, [pc, #192]	; (80056cc <TIM_Base_SetConfig+0xec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <TIM_Base_SetConfig+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <TIM_Base_SetConfig+0xe8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <TIM_Base_SetConfig+0xec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <TIM_Base_SetConfig+0xf0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <TIM_Base_SetConfig+0xf4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <TIM_Base_SetConfig+0xf8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <TIM_Base_SetConfig+0xfc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d103      	bne.n	80056b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	615a      	str	r2, [r3, #20]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800

080056e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0302 	bic.w	r3, r3, #2
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <TIM_OC1_SetConfig+0xc8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10c      	bne.n	8005756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0308 	bic.w	r3, r3, #8
 8005742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 0304 	bic.w	r3, r3, #4
 8005754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <TIM_OC1_SetConfig+0xc8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000

080057ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <TIM_OC2_SetConfig+0xd4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10d      	bne.n	8005828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <TIM_OC2_SetConfig+0xd4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d113      	bne.n	8005858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <TIM_OC3_SetConfig+0xd0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10d      	bne.n	80058fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a14      	ldr	r2, [pc, #80]	; (8005954 <TIM_OC3_SetConfig+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d113      	bne.n	800592e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40010000 	.word	0x40010000

08005958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <TIM_OC4_SetConfig+0x9c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d109      	bne.n	80059cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000

080059f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 030a 	bic.w	r3, r3, #10
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0210 	bic.w	r2, r3, #16
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f043 0307 	orr.w	r3, r3, #7
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	021a      	lsls	r2, r3, #8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	609a      	str	r2, [r3, #8]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e050      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b90:	d013      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000

08005c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e03f      	b.n	8005cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fc34 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2224      	movs	r2, #36	; 0x24
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fd7b 	bl	8006770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b08a      	sub	sp, #40	; 0x28
 8005cce:	af02      	add	r7, sp, #8
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d17c      	bne.n	8005de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_UART_Transmit+0x2c>
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e075      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Transmit+0x3e>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e06e      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2221      	movs	r2, #33	; 0x21
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fdd1 	bl	80018c4 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d38:	d108      	bne.n	8005d4c <HAL_UART_Transmit+0x82>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e003      	b.n	8005d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d5c:	e02a      	b.n	8005db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 faf9 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e036      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3302      	adds	r3, #2
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e007      	b.n	8005da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	781a      	ldrb	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1cf      	bne.n	8005d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2140      	movs	r1, #64	; 0x40
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fac9 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b0ba      	sub	sp, #232	; 0xe8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fbd3 	bl	80065fa <UART_Receive_IT>
      return;
 8005e54:	e256      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80de 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80d1 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d011      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0208 	orr.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 81ed 	beq.w	80062fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb5e 	bl	80065fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <HAL_UART_IRQHandler+0x17a>
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa66 	bl	800643c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d141      	bne.n	8006002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	4a7d      	ldr	r2, [pc, #500]	; (80061cc <HAL_UART_IRQHandler+0x3dc>)
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fb fdfd 	bl	8001bde <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00e      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f99a 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00a      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f996 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e006      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f992 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006016:	e170      	b.n	80062fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	bf00      	nop
    return;
 800601a:	e16e      	b.n	80062fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 814a 	bne.w	80062ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8143 	beq.w	80062ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 813c 	beq.w	80062ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	f040 80b4 	bne.w	80061d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8140 	beq.w	80062fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006086:	429a      	cmp	r2, r3
 8006088:	f080 8139 	bcs.w	80062fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006092:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	f000 8088 	beq.w	80061b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d9      	bne.n	80060a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800611a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e1      	bne.n	80060ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800613a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800614e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006194:	65ba      	str	r2, [r7, #88]	; 0x58
 8006196:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800619a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fb fca6 	bl	8001afe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8c0 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c8:	e099      	b.n	80062fe <HAL_UART_IRQHandler+0x50e>
 80061ca:	bf00      	nop
 80061cc:	08006503 	.word	0x08006503
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 808b 	beq.w	8006302 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8086 	beq.w	8006302 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800621a:	647a      	str	r2, [r7, #68]	; 0x44
 800621c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	623b      	str	r3, [r7, #32]
   return(result);
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006252:	633a      	str	r2, [r7, #48]	; 0x30
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e3      	bne.n	800622e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60fb      	str	r3, [r7, #12]
   return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006298:	61fa      	str	r2, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	617b      	str	r3, [r7, #20]
   return(result);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e3      	bne.n	8006274 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f848 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b8:	e023      	b.n	8006302 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_UART_IRQHandler+0x4ea>
 80062c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f929 	bl	800652a <UART_Transmit_IT>
    return;
 80062d8:	e014      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <HAL_UART_IRQHandler+0x514>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f969 	bl	80065ca <UART_EndTransmit_IT>
    return;
 80062f8:	e004      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
    return;
 80062fa:	bf00      	nop
 80062fc:	e002      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
      return;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
      return;
 8006302:	bf00      	nop
  }
}
 8006304:	37e8      	adds	r7, #232	; 0xe8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b090      	sub	sp, #64	; 0x40
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006370:	e050      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006378:	d04c      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <UART_WaitOnFlagUntilTimeout+0x30>
 8006380:	f7fb faa0 	bl	80018c4 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638c:	429a      	cmp	r2, r3
 800638e:	d241      	bcs.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063b0:	637a      	str	r2, [r7, #52]	; 0x34
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e4:	623a      	str	r2, [r7, #32]
 80063e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	69f9      	ldr	r1, [r7, #28]
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e00f      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	d09f      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3740      	adds	r7, #64	; 0x40
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b095      	sub	sp, #84	; 0x54
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800645a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006464:	643a      	str	r2, [r7, #64]	; 0x40
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800646a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	61fb      	str	r3, [r7, #28]
   return(result);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3314      	adds	r3, #20
 8006496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e5      	bne.n	8006478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d119      	bne.n	80064e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f023 0310 	bic.w	r3, r3, #16
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d4:	61ba      	str	r2, [r7, #24]
 80064d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	613b      	str	r3, [r7, #16]
   return(result);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064f6:	bf00      	nop
 80064f8:	3754      	adds	r7, #84	; 0x54
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff ff09 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b21      	cmp	r3, #33	; 0x21
 800653c:	d13e      	bne.n	80065bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	d114      	bne.n	8006572 <UART_Transmit_IT+0x48>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d110      	bne.n	8006572 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	e008      	b.n	8006584 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6211      	str	r1, [r2, #32]
 800657c:	781a      	ldrb	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29b      	uxth	r3, r3
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4619      	mov	r1, r3
 8006592:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10f      	bne.n	80065b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe8e 	bl	800630c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b08c      	sub	sp, #48	; 0x30
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b22      	cmp	r3, #34	; 0x22
 800660c:	f040 80ab 	bne.w	8006766 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006618:	d117      	bne.n	800664a <UART_Receive_IT+0x50>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	b29a      	uxth	r2, r3
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	1c9a      	adds	r2, r3, #2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28
 8006648:	e026      	b.n	8006698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d007      	beq.n	800666e <UART_Receive_IT+0x74>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <UART_Receive_IT+0x82>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e008      	b.n	800668e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d15a      	bne.n	8006762 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0220 	bic.w	r2, r2, #32
 80066ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d135      	bne.n	8006758 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	623a      	str	r2, [r7, #32]
 8006714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	69f9      	ldr	r1, [r7, #28]
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d10a      	bne.n	800674a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fdf9 	bl	8006348 <HAL_UARTEx_RxEventCallback>
 8006756:	e002      	b.n	800675e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fde1 	bl	8006320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e002      	b.n	8006768 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3730      	adds	r7, #48	; 0x30
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006774:	b0c0      	sub	sp, #256	; 0x100
 8006776:	af00      	add	r7, sp, #0
 8006778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	ea40 0301 	orr.w	r3, r0, r1
 8006798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067c8:	f021 010c 	bic.w	r1, r1, #12
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067d6:	430b      	orrs	r3, r1
 80067d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ea:	6999      	ldr	r1, [r3, #24]
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	ea40 0301 	orr.w	r3, r0, r1
 80067f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b8f      	ldr	r3, [pc, #572]	; (8006a3c <UART_SetConfig+0x2cc>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d005      	beq.n	8006810 <UART_SetConfig+0xa0>
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b8d      	ldr	r3, [pc, #564]	; (8006a40 <UART_SetConfig+0x2d0>)
 800680c:	429a      	cmp	r2, r3
 800680e:	d104      	bne.n	800681a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fe fb72 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 8006814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006818:	e003      	b.n	8006822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800681a:	f7fe fb59 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 800681e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682c:	f040 810c 	bne.w	8006a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800683a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800683e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	1891      	adds	r1, r2, r2
 8006848:	65b9      	str	r1, [r7, #88]	; 0x58
 800684a:	415b      	adcs	r3, r3
 800684c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800684e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006852:	4621      	mov	r1, r4
 8006854:	eb12 0801 	adds.w	r8, r2, r1
 8006858:	4629      	mov	r1, r5
 800685a:	eb43 0901 	adc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006880:	462b      	mov	r3, r5
 8006882:	eb49 0303 	adc.w	r3, r9, r3
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800689a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800689e:	460b      	mov	r3, r1
 80068a0:	18db      	adds	r3, r3, r3
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
 80068a4:	4613      	mov	r3, r2
 80068a6:	eb42 0303 	adc.w	r3, r2, r3
 80068aa:	657b      	str	r3, [r7, #84]	; 0x54
 80068ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068b4:	f7fa f9d0 	bl	8000c58 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <UART_SetConfig+0x2d4>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011c      	lsls	r4, r3, #4
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	1891      	adds	r1, r2, r2
 80068de:	64b9      	str	r1, [r7, #72]	; 0x48
 80068e0:	415b      	adcs	r3, r3
 80068e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068e8:	4641      	mov	r1, r8
 80068ea:	eb12 0a01 	adds.w	sl, r2, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	eb43 0b01 	adc.w	fp, r3, r1
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006908:	4692      	mov	sl, r2
 800690a:	469b      	mov	fp, r3
 800690c:	4643      	mov	r3, r8
 800690e:	eb1a 0303 	adds.w	r3, sl, r3
 8006912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006916:	464b      	mov	r3, r9
 8006918:	eb4b 0303 	adc.w	r3, fp, r3
 800691c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006934:	460b      	mov	r3, r1
 8006936:	18db      	adds	r3, r3, r3
 8006938:	643b      	str	r3, [r7, #64]	; 0x40
 800693a:	4613      	mov	r3, r2
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
 8006942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800694a:	f7fa f985 	bl	8000c58 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4611      	mov	r1, r2
 8006954:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006956:	fba3 2301 	umull	r2, r3, r3, r1
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2264      	movs	r2, #100	; 0x64
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	1acb      	subs	r3, r1, r3
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <UART_SetConfig+0x2d4>)
 800696c:	fba3 2302 	umull	r2, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006978:	441c      	add	r4, r3
 800697a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697e:	2200      	movs	r2, #0
 8006980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	1891      	adds	r1, r2, r2
 8006992:	63b9      	str	r1, [r7, #56]	; 0x38
 8006994:	415b      	adcs	r3, r3
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800699c:	4641      	mov	r1, r8
 800699e:	1851      	adds	r1, r2, r1
 80069a0:	6339      	str	r1, [r7, #48]	; 0x30
 80069a2:	4649      	mov	r1, r9
 80069a4:	414b      	adcs	r3, r1
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069b4:	4659      	mov	r1, fp
 80069b6:	00cb      	lsls	r3, r1, #3
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069be:	4651      	mov	r1, sl
 80069c0:	00ca      	lsls	r2, r1, #3
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	4642      	mov	r2, r8
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069d0:	464b      	mov	r3, r9
 80069d2:	460a      	mov	r2, r1
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069f0:	460b      	mov	r3, r1
 80069f2:	18db      	adds	r3, r3, r3
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f6:	4613      	mov	r3, r2
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a06:	f7fa f927 	bl	8000c58 <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	; 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	3332      	adds	r3, #50	; 0x32
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f003 0207 	and.w	r2, r3, #7
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4422      	add	r2, r4
 8006a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a38:	e106      	b.n	8006c48 <UART_SetConfig+0x4d8>
 8006a3a:	bf00      	nop
 8006a3c:	40011000 	.word	0x40011000
 8006a40:	40011400 	.word	0x40011400
 8006a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	6239      	str	r1, [r7, #32]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
 8006a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0501 	adc.w	r5, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	00eb      	lsls	r3, r5, #3
 8006a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a82:	00e2      	lsls	r2, r4, #3
 8006a84:	4614      	mov	r4, r2
 8006a86:	461d      	mov	r5, r3
 8006a88:	4643      	mov	r3, r8
 8006a8a:	18e3      	adds	r3, r4, r3
 8006a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a90:	464b      	mov	r3, r9
 8006a92:	eb45 0303 	adc.w	r3, r5, r3
 8006a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	008b      	lsls	r3, r1, #2
 8006aba:	4621      	mov	r1, r4
 8006abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	008a      	lsls	r2, r1, #2
 8006ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ac8:	f7fa f8c6 	bl	8000c58 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4b60      	ldr	r3, [pc, #384]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	011c      	lsls	r4, r3, #4
 8006ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	61b9      	str	r1, [r7, #24]
 8006af4:	415b      	adcs	r3, r3
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006afc:	4641      	mov	r1, r8
 8006afe:	1851      	adds	r1, r2, r1
 8006b00:	6139      	str	r1, [r7, #16]
 8006b02:	4649      	mov	r1, r9
 8006b04:	414b      	adcs	r3, r1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b14:	4659      	mov	r1, fp
 8006b16:	00cb      	lsls	r3, r1, #3
 8006b18:	4651      	mov	r1, sl
 8006b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1e:	4651      	mov	r1, sl
 8006b20:	00ca      	lsls	r2, r1, #3
 8006b22:	4610      	mov	r0, r2
 8006b24:	4619      	mov	r1, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	189b      	adds	r3, r3, r2
 8006b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b30:	464b      	mov	r3, r9
 8006b32:	460a      	mov	r2, r1
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b54:	4649      	mov	r1, r9
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	4641      	mov	r1, r8
 8006b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b5e:	4641      	mov	r1, r8
 8006b60:	008a      	lsls	r2, r1, #2
 8006b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b66:	f7fa f877 	bl	8000c58 <__aeabi_uldivmod>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006b72:	fba3 2301 	umull	r2, r3, r3, r1
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2264      	movs	r2, #100	; 0x64
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	3332      	adds	r3, #50	; 0x32
 8006b84:	4a33      	ldr	r2, [pc, #204]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b90:	441c      	add	r4, r3
 8006b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b96:	2200      	movs	r2, #0
 8006b98:	673b      	str	r3, [r7, #112]	; 0x70
 8006b9a:	677a      	str	r2, [r7, #116]	; 0x74
 8006b9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	1891      	adds	r1, r2, r2
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	415b      	adcs	r3, r3
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	1851      	adds	r1, r2, r1
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	414b      	adcs	r3, r1
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bc8:	4659      	mov	r1, fp
 8006bca:	00cb      	lsls	r3, r1, #3
 8006bcc:	4651      	mov	r1, sl
 8006bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd2:	4651      	mov	r1, sl
 8006bd4:	00ca      	lsls	r2, r1, #3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4642      	mov	r2, r8
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be2:	464b      	mov	r3, r9
 8006be4:	460a      	mov	r2, r1
 8006be6:	eb42 0303 	adc.w	r3, r2, r3
 8006bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bf6:	667a      	str	r2, [r7, #100]	; 0x64
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c04:	4649      	mov	r1, r9
 8006c06:	008b      	lsls	r3, r1, #2
 8006c08:	4641      	mov	r1, r8
 8006c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0e:	4641      	mov	r1, r8
 8006c10:	008a      	lsls	r2, r1, #2
 8006c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c16:	f7fa f81f 	bl	8000c58 <__aeabi_uldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006c20:	fba3 1302 	umull	r1, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	2164      	movs	r1, #100	; 0x64
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	3332      	adds	r3, #50	; 0x32
 8006c32:	4a08      	ldr	r2, [pc, #32]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	f003 020f 	and.w	r2, r3, #15
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4422      	add	r2, r4
 8006c46:	609a      	str	r2, [r3, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c54:	51eb851f 	.word	0x51eb851f

08006c58 <__cvt>:
 8006c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	ec55 4b10 	vmov	r4, r5, d0
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	460e      	mov	r6, r1
 8006c64:	4619      	mov	r1, r3
 8006c66:	462b      	mov	r3, r5
 8006c68:	bfbb      	ittet	lt
 8006c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c6e:	461d      	movlt	r5, r3
 8006c70:	2300      	movge	r3, #0
 8006c72:	232d      	movlt	r3, #45	; 0x2d
 8006c74:	700b      	strb	r3, [r1, #0]
 8006c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c7c:	4691      	mov	r9, r2
 8006c7e:	f023 0820 	bic.w	r8, r3, #32
 8006c82:	bfbc      	itt	lt
 8006c84:	4622      	movlt	r2, r4
 8006c86:	4614      	movlt	r4, r2
 8006c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c8c:	d005      	beq.n	8006c9a <__cvt+0x42>
 8006c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c92:	d100      	bne.n	8006c96 <__cvt+0x3e>
 8006c94:	3601      	adds	r6, #1
 8006c96:	2102      	movs	r1, #2
 8006c98:	e000      	b.n	8006c9c <__cvt+0x44>
 8006c9a:	2103      	movs	r1, #3
 8006c9c:	ab03      	add	r3, sp, #12
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	ab02      	add	r3, sp, #8
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	ec45 4b10 	vmov	d0, r4, r5
 8006ca8:	4653      	mov	r3, sl
 8006caa:	4632      	mov	r2, r6
 8006cac:	f000 fe68 	bl	8007980 <_dtoa_r>
 8006cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	d102      	bne.n	8006cbe <__cvt+0x66>
 8006cb8:	f019 0f01 	tst.w	r9, #1
 8006cbc:	d022      	beq.n	8006d04 <__cvt+0xac>
 8006cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cc2:	eb07 0906 	add.w	r9, r7, r6
 8006cc6:	d110      	bne.n	8006cea <__cvt+0x92>
 8006cc8:	783b      	ldrb	r3, [r7, #0]
 8006cca:	2b30      	cmp	r3, #48	; 0x30
 8006ccc:	d10a      	bne.n	8006ce4 <__cvt+0x8c>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	f7f9 feff 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cda:	b918      	cbnz	r0, 8006ce4 <__cvt+0x8c>
 8006cdc:	f1c6 0601 	rsb	r6, r6, #1
 8006ce0:	f8ca 6000 	str.w	r6, [sl]
 8006ce4:	f8da 3000 	ldr.w	r3, [sl]
 8006ce8:	4499      	add	r9, r3
 8006cea:	2200      	movs	r2, #0
 8006cec:	2300      	movs	r3, #0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cf6:	b108      	cbz	r0, 8006cfc <__cvt+0xa4>
 8006cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cfc:	2230      	movs	r2, #48	; 0x30
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	454b      	cmp	r3, r9
 8006d02:	d307      	bcc.n	8006d14 <__cvt+0xbc>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d08:	1bdb      	subs	r3, r3, r7
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	b004      	add	sp, #16
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	9103      	str	r1, [sp, #12]
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e7f0      	b.n	8006cfe <__cvt+0xa6>

08006d1c <__exponent>:
 8006d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2900      	cmp	r1, #0
 8006d22:	bfb8      	it	lt
 8006d24:	4249      	neglt	r1, r1
 8006d26:	f803 2b02 	strb.w	r2, [r3], #2
 8006d2a:	bfb4      	ite	lt
 8006d2c:	222d      	movlt	r2, #45	; 0x2d
 8006d2e:	222b      	movge	r2, #43	; 0x2b
 8006d30:	2909      	cmp	r1, #9
 8006d32:	7042      	strb	r2, [r0, #1]
 8006d34:	dd2a      	ble.n	8006d8c <__exponent+0x70>
 8006d36:	f10d 0207 	add.w	r2, sp, #7
 8006d3a:	4617      	mov	r7, r2
 8006d3c:	260a      	movs	r6, #10
 8006d3e:	4694      	mov	ip, r2
 8006d40:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d44:	fb06 1415 	mls	r4, r6, r5, r1
 8006d48:	3430      	adds	r4, #48	; 0x30
 8006d4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d4e:	460c      	mov	r4, r1
 8006d50:	2c63      	cmp	r4, #99	; 0x63
 8006d52:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006d56:	4629      	mov	r1, r5
 8006d58:	dcf1      	bgt.n	8006d3e <__exponent+0x22>
 8006d5a:	3130      	adds	r1, #48	; 0x30
 8006d5c:	f1ac 0402 	sub.w	r4, ip, #2
 8006d60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d64:	1c41      	adds	r1, r0, #1
 8006d66:	4622      	mov	r2, r4
 8006d68:	42ba      	cmp	r2, r7
 8006d6a:	d30a      	bcc.n	8006d82 <__exponent+0x66>
 8006d6c:	f10d 0209 	add.w	r2, sp, #9
 8006d70:	eba2 020c 	sub.w	r2, r2, ip
 8006d74:	42bc      	cmp	r4, r7
 8006d76:	bf88      	it	hi
 8006d78:	2200      	movhi	r2, #0
 8006d7a:	4413      	add	r3, r2
 8006d7c:	1a18      	subs	r0, r3, r0
 8006d7e:	b003      	add	sp, #12
 8006d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006d8a:	e7ed      	b.n	8006d68 <__exponent+0x4c>
 8006d8c:	2330      	movs	r3, #48	; 0x30
 8006d8e:	3130      	adds	r1, #48	; 0x30
 8006d90:	7083      	strb	r3, [r0, #2]
 8006d92:	70c1      	strb	r1, [r0, #3]
 8006d94:	1d03      	adds	r3, r0, #4
 8006d96:	e7f1      	b.n	8006d7c <__exponent+0x60>

08006d98 <_printf_float>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	ed2d 8b02 	vpush	{d8}
 8006da0:	b08d      	sub	sp, #52	; 0x34
 8006da2:	460c      	mov	r4, r1
 8006da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006da8:	4616      	mov	r6, r2
 8006daa:	461f      	mov	r7, r3
 8006dac:	4605      	mov	r5, r0
 8006dae:	f000 fce9 	bl	8007784 <_localeconv_r>
 8006db2:	f8d0 a000 	ldr.w	sl, [r0]
 8006db6:	4650      	mov	r0, sl
 8006db8:	f7f9 fa62 	bl	8000280 <strlen>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006dcc:	3307      	adds	r3, #7
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	f103 0208 	add.w	r2, r3, #8
 8006dd6:	f8c8 2000 	str.w	r2, [r8]
 8006dda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006de8:	ee08 0a10 	vmov	s16, r0
 8006dec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006df4:	4b9e      	ldr	r3, [pc, #632]	; (8007070 <_printf_float+0x2d8>)
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dfa:	f7f9 fe9f 	bl	8000b3c <__aeabi_dcmpun>
 8006dfe:	bb88      	cbnz	r0, 8006e64 <_printf_float+0xcc>
 8006e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e04:	4b9a      	ldr	r3, [pc, #616]	; (8007070 <_printf_float+0x2d8>)
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e0a:	f7f9 fe79 	bl	8000b00 <__aeabi_dcmple>
 8006e0e:	bb48      	cbnz	r0, 8006e64 <_printf_float+0xcc>
 8006e10:	2200      	movs	r2, #0
 8006e12:	2300      	movs	r3, #0
 8006e14:	4640      	mov	r0, r8
 8006e16:	4649      	mov	r1, r9
 8006e18:	f7f9 fe68 	bl	8000aec <__aeabi_dcmplt>
 8006e1c:	b110      	cbz	r0, 8006e24 <_printf_float+0x8c>
 8006e1e:	232d      	movs	r3, #45	; 0x2d
 8006e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e24:	4a93      	ldr	r2, [pc, #588]	; (8007074 <_printf_float+0x2dc>)
 8006e26:	4b94      	ldr	r3, [pc, #592]	; (8007078 <_printf_float+0x2e0>)
 8006e28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e2c:	bf94      	ite	ls
 8006e2e:	4690      	movls	r8, r2
 8006e30:	4698      	movhi	r8, r3
 8006e32:	2303      	movs	r3, #3
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	f04f 0900 	mov.w	r9, #0
 8006e42:	9700      	str	r7, [sp, #0]
 8006e44:	4633      	mov	r3, r6
 8006e46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f9da 	bl	8007204 <_printf_common>
 8006e50:	3001      	adds	r0, #1
 8006e52:	f040 8090 	bne.w	8006f76 <_printf_float+0x1de>
 8006e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e5a:	b00d      	add	sp, #52	; 0x34
 8006e5c:	ecbd 8b02 	vpop	{d8}
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fe66 	bl	8000b3c <__aeabi_dcmpun>
 8006e70:	b140      	cbz	r0, 8006e84 <_printf_float+0xec>
 8006e72:	464b      	mov	r3, r9
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfbc      	itt	lt
 8006e78:	232d      	movlt	r3, #45	; 0x2d
 8006e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e7e:	4a7f      	ldr	r2, [pc, #508]	; (800707c <_printf_float+0x2e4>)
 8006e80:	4b7f      	ldr	r3, [pc, #508]	; (8007080 <_printf_float+0x2e8>)
 8006e82:	e7d1      	b.n	8006e28 <_printf_float+0x90>
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e8a:	9206      	str	r2, [sp, #24]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	d13f      	bne.n	8006f10 <_printf_float+0x178>
 8006e90:	2306      	movs	r3, #6
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	9b05      	ldr	r3, [sp, #20]
 8006e96:	6861      	ldr	r1, [r4, #4]
 8006e98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ea2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ea6:	ab09      	add	r3, sp, #36	; 0x24
 8006ea8:	ec49 8b10 	vmov	d0, r8, r9
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fecf 	bl	8006c58 <__cvt>
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ebe:	2b47      	cmp	r3, #71	; 0x47
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	d108      	bne.n	8006ed6 <_printf_float+0x13e>
 8006ec4:	1cc8      	adds	r0, r1, #3
 8006ec6:	db02      	blt.n	8006ece <_printf_float+0x136>
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	4299      	cmp	r1, r3
 8006ecc:	dd41      	ble.n	8006f52 <_printf_float+0x1ba>
 8006ece:	f1ab 0302 	sub.w	r3, fp, #2
 8006ed2:	fa5f fb83 	uxtb.w	fp, r3
 8006ed6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006eda:	d820      	bhi.n	8006f1e <_printf_float+0x186>
 8006edc:	3901      	subs	r1, #1
 8006ede:	465a      	mov	r2, fp
 8006ee0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8006ee6:	f7ff ff19 	bl	8006d1c <__exponent>
 8006eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eec:	1813      	adds	r3, r2, r0
 8006eee:	2a01      	cmp	r2, #1
 8006ef0:	4681      	mov	r9, r0
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	dc02      	bgt.n	8006efc <_printf_float+0x164>
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	07d2      	lsls	r2, r2, #31
 8006efa:	d501      	bpl.n	8006f00 <_printf_float+0x168>
 8006efc:	3301      	adds	r3, #1
 8006efe:	6123      	str	r3, [r4, #16]
 8006f00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d09c      	beq.n	8006e42 <_printf_float+0xaa>
 8006f08:	232d      	movs	r3, #45	; 0x2d
 8006f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0e:	e798      	b.n	8006e42 <_printf_float+0xaa>
 8006f10:	9a06      	ldr	r2, [sp, #24]
 8006f12:	2a47      	cmp	r2, #71	; 0x47
 8006f14:	d1be      	bne.n	8006e94 <_printf_float+0xfc>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1bc      	bne.n	8006e94 <_printf_float+0xfc>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e7b9      	b.n	8006e92 <_printf_float+0xfa>
 8006f1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f22:	d118      	bne.n	8006f56 <_printf_float+0x1be>
 8006f24:	2900      	cmp	r1, #0
 8006f26:	6863      	ldr	r3, [r4, #4]
 8006f28:	dd0b      	ble.n	8006f42 <_printf_float+0x1aa>
 8006f2a:	6121      	str	r1, [r4, #16]
 8006f2c:	b913      	cbnz	r3, 8006f34 <_printf_float+0x19c>
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	07d0      	lsls	r0, r2, #31
 8006f32:	d502      	bpl.n	8006f3a <_printf_float+0x1a2>
 8006f34:	3301      	adds	r3, #1
 8006f36:	440b      	add	r3, r1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f3c:	f04f 0900 	mov.w	r9, #0
 8006f40:	e7de      	b.n	8006f00 <_printf_float+0x168>
 8006f42:	b913      	cbnz	r3, 8006f4a <_printf_float+0x1b2>
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	07d2      	lsls	r2, r2, #31
 8006f48:	d501      	bpl.n	8006f4e <_printf_float+0x1b6>
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	e7f4      	b.n	8006f38 <_printf_float+0x1a0>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e7f2      	b.n	8006f38 <_printf_float+0x1a0>
 8006f52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	db05      	blt.n	8006f68 <_printf_float+0x1d0>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	6121      	str	r1, [r4, #16]
 8006f60:	07d8      	lsls	r0, r3, #31
 8006f62:	d5ea      	bpl.n	8006f3a <_printf_float+0x1a2>
 8006f64:	1c4b      	adds	r3, r1, #1
 8006f66:	e7e7      	b.n	8006f38 <_printf_float+0x1a0>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	bfd4      	ite	le
 8006f6c:	f1c1 0202 	rsble	r2, r1, #2
 8006f70:	2201      	movgt	r2, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	e7e0      	b.n	8006f38 <_printf_float+0x1a0>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	055a      	lsls	r2, r3, #21
 8006f7a:	d407      	bmi.n	8006f8c <_printf_float+0x1f4>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	4642      	mov	r2, r8
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	d12c      	bne.n	8006fe4 <_printf_float+0x24c>
 8006f8a:	e764      	b.n	8006e56 <_printf_float+0xbe>
 8006f8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f90:	f240 80e0 	bls.w	8007154 <_printf_float+0x3bc>
 8006f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f7f9 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d034      	beq.n	800700e <_printf_float+0x276>
 8006fa4:	4a37      	ldr	r2, [pc, #220]	; (8007084 <_printf_float+0x2ec>)
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	f43f af51 	beq.w	8006e56 <_printf_float+0xbe>
 8006fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	db02      	blt.n	8006fc2 <_printf_float+0x22a>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	07d8      	lsls	r0, r3, #31
 8006fc0:	d510      	bpl.n	8006fe4 <_printf_float+0x24c>
 8006fc2:	ee18 3a10 	vmov	r3, s16
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f af41 	beq.w	8006e56 <_printf_float+0xbe>
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	f104 091a 	add.w	r9, r4, #26
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	dc09      	bgt.n	8006ff8 <_printf_float+0x260>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	079b      	lsls	r3, r3, #30
 8006fe8:	f100 8107 	bmi.w	80071fa <_printf_float+0x462>
 8006fec:	68e0      	ldr	r0, [r4, #12]
 8006fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff0:	4298      	cmp	r0, r3
 8006ff2:	bfb8      	it	lt
 8006ff4:	4618      	movlt	r0, r3
 8006ff6:	e730      	b.n	8006e5a <_printf_float+0xc2>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	464a      	mov	r2, r9
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af27 	beq.w	8006e56 <_printf_float+0xbe>
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	e7e6      	b.n	8006fdc <_printf_float+0x244>
 800700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	dc39      	bgt.n	8007088 <_printf_float+0x2f0>
 8007014:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <_printf_float+0x2ec>)
 8007016:	2301      	movs	r3, #1
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af19 	beq.w	8006e56 <_printf_float+0xbe>
 8007024:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007028:	4313      	orrs	r3, r2
 800702a:	d102      	bne.n	8007032 <_printf_float+0x29a>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	07d9      	lsls	r1, r3, #31
 8007030:	d5d8      	bpl.n	8006fe4 <_printf_float+0x24c>
 8007032:	ee18 3a10 	vmov	r3, s16
 8007036:	4652      	mov	r2, sl
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f af09 	beq.w	8006e56 <_printf_float+0xbe>
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	f104 0a1a 	add.w	sl, r4, #26
 800704c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704e:	425b      	negs	r3, r3
 8007050:	454b      	cmp	r3, r9
 8007052:	dc01      	bgt.n	8007058 <_printf_float+0x2c0>
 8007054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007056:	e792      	b.n	8006f7e <_printf_float+0x1e6>
 8007058:	2301      	movs	r3, #1
 800705a:	4652      	mov	r2, sl
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f aef7 	beq.w	8006e56 <_printf_float+0xbe>
 8007068:	f109 0901 	add.w	r9, r9, #1
 800706c:	e7ee      	b.n	800704c <_printf_float+0x2b4>
 800706e:	bf00      	nop
 8007070:	7fefffff 	.word	0x7fefffff
 8007074:	080099a8 	.word	0x080099a8
 8007078:	080099ac 	.word	0x080099ac
 800707c:	080099b0 	.word	0x080099b0
 8007080:	080099b4 	.word	0x080099b4
 8007084:	080099b8 	.word	0x080099b8
 8007088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800708c:	429a      	cmp	r2, r3
 800708e:	bfa8      	it	ge
 8007090:	461a      	movge	r2, r3
 8007092:	2a00      	cmp	r2, #0
 8007094:	4691      	mov	r9, r2
 8007096:	dc37      	bgt.n	8007108 <_printf_float+0x370>
 8007098:	f04f 0b00 	mov.w	fp, #0
 800709c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070a0:	f104 021a 	add.w	r2, r4, #26
 80070a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070a6:	9305      	str	r3, [sp, #20]
 80070a8:	eba3 0309 	sub.w	r3, r3, r9
 80070ac:	455b      	cmp	r3, fp
 80070ae:	dc33      	bgt.n	8007118 <_printf_float+0x380>
 80070b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b4:	429a      	cmp	r2, r3
 80070b6:	db3b      	blt.n	8007130 <_printf_float+0x398>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d438      	bmi.n	8007130 <_printf_float+0x398>
 80070be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070c2:	eba2 0903 	sub.w	r9, r2, r3
 80070c6:	9b05      	ldr	r3, [sp, #20]
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	4591      	cmp	r9, r2
 80070cc:	bfa8      	it	ge
 80070ce:	4691      	movge	r9, r2
 80070d0:	f1b9 0f00 	cmp.w	r9, #0
 80070d4:	dc35      	bgt.n	8007142 <_printf_float+0x3aa>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070de:	f104 0a1a 	add.w	sl, r4, #26
 80070e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	eba3 0309 	sub.w	r3, r3, r9
 80070ec:	4543      	cmp	r3, r8
 80070ee:	f77f af79 	ble.w	8006fe4 <_printf_float+0x24c>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f aeaa 	beq.w	8006e56 <_printf_float+0xbe>
 8007102:	f108 0801 	add.w	r8, r8, #1
 8007106:	e7ec      	b.n	80070e2 <_printf_float+0x34a>
 8007108:	4613      	mov	r3, r2
 800710a:	4631      	mov	r1, r6
 800710c:	4642      	mov	r2, r8
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	d1c0      	bne.n	8007098 <_printf_float+0x300>
 8007116:	e69e      	b.n	8006e56 <_printf_float+0xbe>
 8007118:	2301      	movs	r3, #1
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	9205      	str	r2, [sp, #20]
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	f43f ae97 	beq.w	8006e56 <_printf_float+0xbe>
 8007128:	9a05      	ldr	r2, [sp, #20]
 800712a:	f10b 0b01 	add.w	fp, fp, #1
 800712e:	e7b9      	b.n	80070a4 <_printf_float+0x30c>
 8007130:	ee18 3a10 	vmov	r3, s16
 8007134:	4652      	mov	r2, sl
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	d1be      	bne.n	80070be <_printf_float+0x326>
 8007140:	e689      	b.n	8006e56 <_printf_float+0xbe>
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	464b      	mov	r3, r9
 8007146:	4442      	add	r2, r8
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	d1c1      	bne.n	80070d6 <_printf_float+0x33e>
 8007152:	e680      	b.n	8006e56 <_printf_float+0xbe>
 8007154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007156:	2a01      	cmp	r2, #1
 8007158:	dc01      	bgt.n	800715e <_printf_float+0x3c6>
 800715a:	07db      	lsls	r3, r3, #31
 800715c:	d53a      	bpl.n	80071d4 <_printf_float+0x43c>
 800715e:	2301      	movs	r3, #1
 8007160:	4642      	mov	r2, r8
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f ae74 	beq.w	8006e56 <_printf_float+0xbe>
 800716e:	ee18 3a10 	vmov	r3, s16
 8007172:	4652      	mov	r2, sl
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f ae6b 	beq.w	8006e56 <_printf_float+0xbe>
 8007180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007184:	2200      	movs	r2, #0
 8007186:	2300      	movs	r3, #0
 8007188:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800718c:	f7f9 fca4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007190:	b9d8      	cbnz	r0, 80071ca <_printf_float+0x432>
 8007192:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007196:	f108 0201 	add.w	r2, r8, #1
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	d10e      	bne.n	80071c2 <_printf_float+0x42a>
 80071a4:	e657      	b.n	8006e56 <_printf_float+0xbe>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f ae50 	beq.w	8006e56 <_printf_float+0xbe>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071bc:	3b01      	subs	r3, #1
 80071be:	4543      	cmp	r3, r8
 80071c0:	dcf1      	bgt.n	80071a6 <_printf_float+0x40e>
 80071c2:	464b      	mov	r3, r9
 80071c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071c8:	e6da      	b.n	8006f80 <_printf_float+0x1e8>
 80071ca:	f04f 0800 	mov.w	r8, #0
 80071ce:	f104 0a1a 	add.w	sl, r4, #26
 80071d2:	e7f2      	b.n	80071ba <_printf_float+0x422>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4642      	mov	r2, r8
 80071d8:	e7df      	b.n	800719a <_printf_float+0x402>
 80071da:	2301      	movs	r3, #1
 80071dc:	464a      	mov	r2, r9
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	f43f ae36 	beq.w	8006e56 <_printf_float+0xbe>
 80071ea:	f108 0801 	add.w	r8, r8, #1
 80071ee:	68e3      	ldr	r3, [r4, #12]
 80071f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f2:	1a5b      	subs	r3, r3, r1
 80071f4:	4543      	cmp	r3, r8
 80071f6:	dcf0      	bgt.n	80071da <_printf_float+0x442>
 80071f8:	e6f8      	b.n	8006fec <_printf_float+0x254>
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	f104 0919 	add.w	r9, r4, #25
 8007202:	e7f4      	b.n	80071ee <_printf_float+0x456>

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007214:	4293      	cmp	r3, r2
 8007216:	bfb8      	it	lt
 8007218:	4613      	movlt	r3, r2
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007220:	4607      	mov	r7, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc26      	bgt.n	800729a <_printf_common+0x96>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42b      	bmi.n	80072b4 <_printf_common+0xb0>
 800725c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d01e      	beq.n	80072a8 <_printf_common+0xa4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf02      	ittt	eq
 8007276:	68e5      	ldreq	r5, [r4, #12]
 8007278:	6833      	ldreq	r3, [r6, #0]
 800727a:	1aed      	subeq	r5, r5, r3
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	bf0c      	ite	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	2500      	movne	r5, #0
 8007286:	4293      	cmp	r3, r2
 8007288:	bfc4      	itt	gt
 800728a:	1a9b      	subgt	r3, r3, r2
 800728c:	18ed      	addgt	r5, r5, r3
 800728e:	2600      	movs	r6, #0
 8007290:	341a      	adds	r4, #26
 8007292:	42b5      	cmp	r5, r6
 8007294:	d11a      	bne.n	80072cc <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e008      	b.n	80072ac <_printf_common+0xa8>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4649      	mov	r1, r9
 80072a0:	4638      	mov	r0, r7
 80072a2:	47c0      	blx	r8
 80072a4:	3001      	adds	r0, #1
 80072a6:	d103      	bne.n	80072b0 <_printf_common+0xac>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	3501      	adds	r5, #1
 80072b2:	e7c6      	b.n	8007242 <_printf_common+0x3e>
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072be:	4422      	add	r2, r4
 80072c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7c7      	b.n	800725c <_printf_common+0x58>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4622      	mov	r2, r4
 80072d0:	4649      	mov	r1, r9
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0e6      	beq.n	80072a8 <_printf_common+0xa4>
 80072da:	3601      	adds	r6, #1
 80072dc:	e7d9      	b.n	8007292 <_printf_common+0x8e>
	...

080072e0 <_printf_i>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	7e0f      	ldrb	r7, [r1, #24]
 80072e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072e8:	2f78      	cmp	r7, #120	; 0x78
 80072ea:	4691      	mov	r9, r2
 80072ec:	4680      	mov	r8, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	469a      	mov	sl, r3
 80072f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072f6:	d807      	bhi.n	8007308 <_printf_i+0x28>
 80072f8:	2f62      	cmp	r7, #98	; 0x62
 80072fa:	d80a      	bhi.n	8007312 <_printf_i+0x32>
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	f000 80d4 	beq.w	80074aa <_printf_i+0x1ca>
 8007302:	2f58      	cmp	r7, #88	; 0x58
 8007304:	f000 80c0 	beq.w	8007488 <_printf_i+0x1a8>
 8007308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800730c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007310:	e03a      	b.n	8007388 <_printf_i+0xa8>
 8007312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007316:	2b15      	cmp	r3, #21
 8007318:	d8f6      	bhi.n	8007308 <_printf_i+0x28>
 800731a:	a101      	add	r1, pc, #4	; (adr r1, 8007320 <_printf_i+0x40>)
 800731c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007320:	08007379 	.word	0x08007379
 8007324:	0800738d 	.word	0x0800738d
 8007328:	08007309 	.word	0x08007309
 800732c:	08007309 	.word	0x08007309
 8007330:	08007309 	.word	0x08007309
 8007334:	08007309 	.word	0x08007309
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007309 	.word	0x08007309
 8007340:	08007309 	.word	0x08007309
 8007344:	08007309 	.word	0x08007309
 8007348:	08007309 	.word	0x08007309
 800734c:	08007491 	.word	0x08007491
 8007350:	080073b9 	.word	0x080073b9
 8007354:	0800744b 	.word	0x0800744b
 8007358:	08007309 	.word	0x08007309
 800735c:	08007309 	.word	0x08007309
 8007360:	080074b3 	.word	0x080074b3
 8007364:	08007309 	.word	0x08007309
 8007368:	080073b9 	.word	0x080073b9
 800736c:	08007309 	.word	0x08007309
 8007370:	08007309 	.word	0x08007309
 8007374:	08007453 	.word	0x08007453
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	602a      	str	r2, [r5, #0]
 8007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e09f      	b.n	80074cc <_printf_i+0x1ec>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	0607      	lsls	r7, r0, #24
 8007392:	f103 0104 	add.w	r1, r3, #4
 8007396:	6029      	str	r1, [r5, #0]
 8007398:	d501      	bpl.n	800739e <_printf_i+0xbe>
 800739a:	681e      	ldr	r6, [r3, #0]
 800739c:	e003      	b.n	80073a6 <_printf_i+0xc6>
 800739e:	0646      	lsls	r6, r0, #25
 80073a0:	d5fb      	bpl.n	800739a <_printf_i+0xba>
 80073a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	da03      	bge.n	80073b2 <_printf_i+0xd2>
 80073aa:	232d      	movs	r3, #45	; 0x2d
 80073ac:	4276      	negs	r6, r6
 80073ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b2:	485a      	ldr	r0, [pc, #360]	; (800751c <_printf_i+0x23c>)
 80073b4:	230a      	movs	r3, #10
 80073b6:	e012      	b.n	80073de <_printf_i+0xfe>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	1d19      	adds	r1, r3, #4
 80073be:	6029      	str	r1, [r5, #0]
 80073c0:	0605      	lsls	r5, r0, #24
 80073c2:	d501      	bpl.n	80073c8 <_printf_i+0xe8>
 80073c4:	681e      	ldr	r6, [r3, #0]
 80073c6:	e002      	b.n	80073ce <_printf_i+0xee>
 80073c8:	0641      	lsls	r1, r0, #25
 80073ca:	d5fb      	bpl.n	80073c4 <_printf_i+0xe4>
 80073cc:	881e      	ldrh	r6, [r3, #0]
 80073ce:	4853      	ldr	r0, [pc, #332]	; (800751c <_printf_i+0x23c>)
 80073d0:	2f6f      	cmp	r7, #111	; 0x6f
 80073d2:	bf0c      	ite	eq
 80073d4:	2308      	moveq	r3, #8
 80073d6:	230a      	movne	r3, #10
 80073d8:	2100      	movs	r1, #0
 80073da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073de:	6865      	ldr	r5, [r4, #4]
 80073e0:	60a5      	str	r5, [r4, #8]
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	bfa2      	ittt	ge
 80073e6:	6821      	ldrge	r1, [r4, #0]
 80073e8:	f021 0104 	bicge.w	r1, r1, #4
 80073ec:	6021      	strge	r1, [r4, #0]
 80073ee:	b90e      	cbnz	r6, 80073f4 <_printf_i+0x114>
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d04b      	beq.n	800748c <_printf_i+0x1ac>
 80073f4:	4615      	mov	r5, r2
 80073f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073fa:	fb03 6711 	mls	r7, r3, r1, r6
 80073fe:	5dc7      	ldrb	r7, [r0, r7]
 8007400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007404:	4637      	mov	r7, r6
 8007406:	42bb      	cmp	r3, r7
 8007408:	460e      	mov	r6, r1
 800740a:	d9f4      	bls.n	80073f6 <_printf_i+0x116>
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10b      	bne.n	8007428 <_printf_i+0x148>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07de      	lsls	r6, r3, #31
 8007414:	d508      	bpl.n	8007428 <_printf_i+0x148>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4299      	cmp	r1, r3
 800741c:	bfde      	ittt	le
 800741e:	2330      	movle	r3, #48	; 0x30
 8007420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007424:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007428:	1b52      	subs	r2, r2, r5
 800742a:	6122      	str	r2, [r4, #16]
 800742c:	f8cd a000 	str.w	sl, [sp]
 8007430:	464b      	mov	r3, r9
 8007432:	aa03      	add	r2, sp, #12
 8007434:	4621      	mov	r1, r4
 8007436:	4640      	mov	r0, r8
 8007438:	f7ff fee4 	bl	8007204 <_printf_common>
 800743c:	3001      	adds	r0, #1
 800743e:	d14a      	bne.n	80074d6 <_printf_i+0x1f6>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007444:	b004      	add	sp, #16
 8007446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	4833      	ldr	r0, [pc, #204]	; (8007520 <_printf_i+0x240>)
 8007454:	2778      	movs	r7, #120	; 0x78
 8007456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	6829      	ldr	r1, [r5, #0]
 800745e:	061f      	lsls	r7, r3, #24
 8007460:	f851 6b04 	ldr.w	r6, [r1], #4
 8007464:	d402      	bmi.n	800746c <_printf_i+0x18c>
 8007466:	065f      	lsls	r7, r3, #25
 8007468:	bf48      	it	mi
 800746a:	b2b6      	uxthmi	r6, r6
 800746c:	07df      	lsls	r7, r3, #31
 800746e:	bf48      	it	mi
 8007470:	f043 0320 	orrmi.w	r3, r3, #32
 8007474:	6029      	str	r1, [r5, #0]
 8007476:	bf48      	it	mi
 8007478:	6023      	strmi	r3, [r4, #0]
 800747a:	b91e      	cbnz	r6, 8007484 <_printf_i+0x1a4>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	f023 0320 	bic.w	r3, r3, #32
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	2310      	movs	r3, #16
 8007486:	e7a7      	b.n	80073d8 <_printf_i+0xf8>
 8007488:	4824      	ldr	r0, [pc, #144]	; (800751c <_printf_i+0x23c>)
 800748a:	e7e4      	b.n	8007456 <_printf_i+0x176>
 800748c:	4615      	mov	r5, r2
 800748e:	e7bd      	b.n	800740c <_printf_i+0x12c>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6826      	ldr	r6, [r4, #0]
 8007494:	6961      	ldr	r1, [r4, #20]
 8007496:	1d18      	adds	r0, r3, #4
 8007498:	6028      	str	r0, [r5, #0]
 800749a:	0635      	lsls	r5, r6, #24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0x1c4>
 80074a0:	6019      	str	r1, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0x1ca>
 80074a4:	0670      	lsls	r0, r6, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0x1c0>
 80074a8:	8019      	strh	r1, [r3, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	4615      	mov	r5, r2
 80074b0:	e7bc      	b.n	800742c <_printf_i+0x14c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	602a      	str	r2, [r5, #0]
 80074b8:	681d      	ldr	r5, [r3, #0]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	2100      	movs	r1, #0
 80074be:	4628      	mov	r0, r5
 80074c0:	f7f8 fe8e 	bl	80001e0 <memchr>
 80074c4:	b108      	cbz	r0, 80074ca <_printf_i+0x1ea>
 80074c6:	1b40      	subs	r0, r0, r5
 80074c8:	6060      	str	r0, [r4, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d4:	e7aa      	b.n	800742c <_printf_i+0x14c>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	462a      	mov	r2, r5
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d0ad      	beq.n	8007440 <_printf_i+0x160>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d413      	bmi.n	8007512 <_printf_i+0x232>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	4298      	cmp	r0, r3
 80074f0:	bfb8      	it	lt
 80074f2:	4618      	movlt	r0, r3
 80074f4:	e7a6      	b.n	8007444 <_printf_i+0x164>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d09d      	beq.n	8007440 <_printf_i+0x160>
 8007504:	3501      	adds	r5, #1
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	1a5b      	subs	r3, r3, r1
 800750c:	42ab      	cmp	r3, r5
 800750e:	dcf2      	bgt.n	80074f6 <_printf_i+0x216>
 8007510:	e7eb      	b.n	80074ea <_printf_i+0x20a>
 8007512:	2500      	movs	r5, #0
 8007514:	f104 0619 	add.w	r6, r4, #25
 8007518:	e7f5      	b.n	8007506 <_printf_i+0x226>
 800751a:	bf00      	nop
 800751c:	080099ba 	.word	0x080099ba
 8007520:	080099cb 	.word	0x080099cb

08007524 <std>:
 8007524:	2300      	movs	r3, #0
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	e9c0 3300 	strd	r3, r3, [r0]
 800752e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007532:	6083      	str	r3, [r0, #8]
 8007534:	8181      	strh	r1, [r0, #12]
 8007536:	6643      	str	r3, [r0, #100]	; 0x64
 8007538:	81c2      	strh	r2, [r0, #14]
 800753a:	6183      	str	r3, [r0, #24]
 800753c:	4619      	mov	r1, r3
 800753e:	2208      	movs	r2, #8
 8007540:	305c      	adds	r0, #92	; 0x5c
 8007542:	f000 f916 	bl	8007772 <memset>
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <std+0x38>)
 8007548:	6263      	str	r3, [r4, #36]	; 0x24
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <std+0x3c>)
 800754c:	62a3      	str	r3, [r4, #40]	; 0x28
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <std+0x40>)
 8007550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <std+0x44>)
 8007554:	6224      	str	r4, [r4, #32]
 8007556:	6323      	str	r3, [r4, #48]	; 0x30
 8007558:	bd10      	pop	{r4, pc}
 800755a:	bf00      	nop
 800755c:	080076ed 	.word	0x080076ed
 8007560:	0800770f 	.word	0x0800770f
 8007564:	08007747 	.word	0x08007747
 8007568:	0800776b 	.word	0x0800776b

0800756c <stdio_exit_handler>:
 800756c:	4a02      	ldr	r2, [pc, #8]	; (8007578 <stdio_exit_handler+0xc>)
 800756e:	4903      	ldr	r1, [pc, #12]	; (800757c <stdio_exit_handler+0x10>)
 8007570:	4803      	ldr	r0, [pc, #12]	; (8007580 <stdio_exit_handler+0x14>)
 8007572:	f000 b869 	b.w	8007648 <_fwalk_sglue>
 8007576:	bf00      	nop
 8007578:	2000000c 	.word	0x2000000c
 800757c:	08009219 	.word	0x08009219
 8007580:	20000018 	.word	0x20000018

08007584 <cleanup_stdio>:
 8007584:	6841      	ldr	r1, [r0, #4]
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <cleanup_stdio+0x34>)
 8007588:	4299      	cmp	r1, r3
 800758a:	b510      	push	{r4, lr}
 800758c:	4604      	mov	r4, r0
 800758e:	d001      	beq.n	8007594 <cleanup_stdio+0x10>
 8007590:	f001 fe42 	bl	8009218 <_fflush_r>
 8007594:	68a1      	ldr	r1, [r4, #8]
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <cleanup_stdio+0x38>)
 8007598:	4299      	cmp	r1, r3
 800759a:	d002      	beq.n	80075a2 <cleanup_stdio+0x1e>
 800759c:	4620      	mov	r0, r4
 800759e:	f001 fe3b 	bl	8009218 <_fflush_r>
 80075a2:	68e1      	ldr	r1, [r4, #12]
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <cleanup_stdio+0x3c>)
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d004      	beq.n	80075b4 <cleanup_stdio+0x30>
 80075aa:	4620      	mov	r0, r4
 80075ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b0:	f001 be32 	b.w	8009218 <_fflush_r>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	bf00      	nop
 80075b8:	200002d8 	.word	0x200002d8
 80075bc:	20000340 	.word	0x20000340
 80075c0:	200003a8 	.word	0x200003a8

080075c4 <global_stdio_init.part.0>:
 80075c4:	b510      	push	{r4, lr}
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <global_stdio_init.part.0+0x30>)
 80075c8:	4c0b      	ldr	r4, [pc, #44]	; (80075f8 <global_stdio_init.part.0+0x34>)
 80075ca:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <global_stdio_init.part.0+0x38>)
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	4620      	mov	r0, r4
 80075d0:	2200      	movs	r2, #0
 80075d2:	2104      	movs	r1, #4
 80075d4:	f7ff ffa6 	bl	8007524 <std>
 80075d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075dc:	2201      	movs	r2, #1
 80075de:	2109      	movs	r1, #9
 80075e0:	f7ff ffa0 	bl	8007524 <std>
 80075e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80075e8:	2202      	movs	r2, #2
 80075ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ee:	2112      	movs	r1, #18
 80075f0:	f7ff bf98 	b.w	8007524 <std>
 80075f4:	20000410 	.word	0x20000410
 80075f8:	200002d8 	.word	0x200002d8
 80075fc:	0800756d 	.word	0x0800756d

08007600 <__sfp_lock_acquire>:
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <__sfp_lock_acquire+0x8>)
 8007602:	f000 b933 	b.w	800786c <__retarget_lock_acquire_recursive>
 8007606:	bf00      	nop
 8007608:	20000419 	.word	0x20000419

0800760c <__sfp_lock_release>:
 800760c:	4801      	ldr	r0, [pc, #4]	; (8007614 <__sfp_lock_release+0x8>)
 800760e:	f000 b92e 	b.w	800786e <__retarget_lock_release_recursive>
 8007612:	bf00      	nop
 8007614:	20000419 	.word	0x20000419

08007618 <__sinit>:
 8007618:	b510      	push	{r4, lr}
 800761a:	4604      	mov	r4, r0
 800761c:	f7ff fff0 	bl	8007600 <__sfp_lock_acquire>
 8007620:	6a23      	ldr	r3, [r4, #32]
 8007622:	b11b      	cbz	r3, 800762c <__sinit+0x14>
 8007624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007628:	f7ff bff0 	b.w	800760c <__sfp_lock_release>
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <__sinit+0x28>)
 800762e:	6223      	str	r3, [r4, #32]
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <__sinit+0x2c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f5      	bne.n	8007624 <__sinit+0xc>
 8007638:	f7ff ffc4 	bl	80075c4 <global_stdio_init.part.0>
 800763c:	e7f2      	b.n	8007624 <__sinit+0xc>
 800763e:	bf00      	nop
 8007640:	08007585 	.word	0x08007585
 8007644:	20000410 	.word	0x20000410

08007648 <_fwalk_sglue>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	4607      	mov	r7, r0
 800764e:	4688      	mov	r8, r1
 8007650:	4614      	mov	r4, r2
 8007652:	2600      	movs	r6, #0
 8007654:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007658:	f1b9 0901 	subs.w	r9, r9, #1
 800765c:	d505      	bpl.n	800766a <_fwalk_sglue+0x22>
 800765e:	6824      	ldr	r4, [r4, #0]
 8007660:	2c00      	cmp	r4, #0
 8007662:	d1f7      	bne.n	8007654 <_fwalk_sglue+0xc>
 8007664:	4630      	mov	r0, r6
 8007666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d907      	bls.n	8007680 <_fwalk_sglue+0x38>
 8007670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007674:	3301      	adds	r3, #1
 8007676:	d003      	beq.n	8007680 <_fwalk_sglue+0x38>
 8007678:	4629      	mov	r1, r5
 800767a:	4638      	mov	r0, r7
 800767c:	47c0      	blx	r8
 800767e:	4306      	orrs	r6, r0
 8007680:	3568      	adds	r5, #104	; 0x68
 8007682:	e7e9      	b.n	8007658 <_fwalk_sglue+0x10>

08007684 <sniprintf>:
 8007684:	b40c      	push	{r2, r3}
 8007686:	b530      	push	{r4, r5, lr}
 8007688:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <sniprintf+0x64>)
 800768a:	1e0c      	subs	r4, r1, #0
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	b09d      	sub	sp, #116	; 0x74
 8007690:	da08      	bge.n	80076a4 <sniprintf+0x20>
 8007692:	238b      	movs	r3, #139	; 0x8b
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800769a:	b01d      	add	sp, #116	; 0x74
 800769c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076a0:	b002      	add	sp, #8
 80076a2:	4770      	bx	lr
 80076a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076ac:	bf14      	ite	ne
 80076ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80076b2:	4623      	moveq	r3, r4
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9006      	str	r0, [sp, #24]
 80076c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076c6:	ab21      	add	r3, sp, #132	; 0x84
 80076c8:	a902      	add	r1, sp, #8
 80076ca:	4628      	mov	r0, r5
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	f001 fc1f 	bl	8008f10 <_svfiprintf_r>
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	bfbc      	itt	lt
 80076d6:	238b      	movlt	r3, #139	; 0x8b
 80076d8:	602b      	strlt	r3, [r5, #0]
 80076da:	2c00      	cmp	r4, #0
 80076dc:	d0dd      	beq.n	800769a <sniprintf+0x16>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e7d9      	b.n	800769a <sniprintf+0x16>
 80076e6:	bf00      	nop
 80076e8:	20000064 	.word	0x20000064

080076ec <__sread>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	460c      	mov	r4, r1
 80076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f4:	f000 f86c 	bl	80077d0 <_read_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	bfab      	itete	ge
 80076fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007700:	181b      	addge	r3, r3, r0
 8007702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007706:	bfac      	ite	ge
 8007708:	6563      	strge	r3, [r4, #84]	; 0x54
 800770a:	81a3      	strhlt	r3, [r4, #12]
 800770c:	bd10      	pop	{r4, pc}

0800770e <__swrite>:
 800770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	461f      	mov	r7, r3
 8007714:	898b      	ldrh	r3, [r1, #12]
 8007716:	05db      	lsls	r3, r3, #23
 8007718:	4605      	mov	r5, r0
 800771a:	460c      	mov	r4, r1
 800771c:	4616      	mov	r6, r2
 800771e:	d505      	bpl.n	800772c <__swrite+0x1e>
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	2302      	movs	r3, #2
 8007726:	2200      	movs	r2, #0
 8007728:	f000 f840 	bl	80077ac <_lseek_r>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	4632      	mov	r2, r6
 800773a:	463b      	mov	r3, r7
 800773c:	4628      	mov	r0, r5
 800773e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007742:	f000 b857 	b.w	80077f4 <_write_r>

08007746 <__sseek>:
 8007746:	b510      	push	{r4, lr}
 8007748:	460c      	mov	r4, r1
 800774a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774e:	f000 f82d 	bl	80077ac <_lseek_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	bf15      	itete	ne
 8007758:	6560      	strne	r0, [r4, #84]	; 0x54
 800775a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800775e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007762:	81a3      	strheq	r3, [r4, #12]
 8007764:	bf18      	it	ne
 8007766:	81a3      	strhne	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__sclose>:
 800776a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776e:	f000 b80d 	b.w	800778c <_close_r>

08007772 <memset>:
 8007772:	4402      	add	r2, r0
 8007774:	4603      	mov	r3, r0
 8007776:	4293      	cmp	r3, r2
 8007778:	d100      	bne.n	800777c <memset+0xa>
 800777a:	4770      	bx	lr
 800777c:	f803 1b01 	strb.w	r1, [r3], #1
 8007780:	e7f9      	b.n	8007776 <memset+0x4>
	...

08007784 <_localeconv_r>:
 8007784:	4800      	ldr	r0, [pc, #0]	; (8007788 <_localeconv_r+0x4>)
 8007786:	4770      	bx	lr
 8007788:	20000158 	.word	0x20000158

0800778c <_close_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d06      	ldr	r5, [pc, #24]	; (80077a8 <_close_r+0x1c>)
 8007790:	2300      	movs	r3, #0
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	f7f9 ff87 	bl	80016aa <_close>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d102      	bne.n	80077a6 <_close_r+0x1a>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	b103      	cbz	r3, 80077a6 <_close_r+0x1a>
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	20000414 	.word	0x20000414

080077ac <_lseek_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_lseek_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7f9 ff9c 	bl	80016f8 <_lseek>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_lseek_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_lseek_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20000414 	.word	0x20000414

080077d0 <_read_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <_read_r+0x20>)
 80077d4:	4604      	mov	r4, r0
 80077d6:	4608      	mov	r0, r1
 80077d8:	4611      	mov	r1, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	602a      	str	r2, [r5, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f7f9 ff2a 	bl	8001638 <_read>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_read_r+0x1e>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_read_r+0x1e>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	20000414 	.word	0x20000414

080077f4 <_write_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d07      	ldr	r5, [pc, #28]	; (8007814 <_write_r+0x20>)
 80077f8:	4604      	mov	r4, r0
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7f9 ff35 	bl	8001672 <_write>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_write_r+0x1e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_write_r+0x1e>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20000414 	.word	0x20000414

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	; (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	20000064 	.word	0x20000064

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4d0d      	ldr	r5, [pc, #52]	; (800785c <__libc_init_array+0x38>)
 8007828:	4c0d      	ldr	r4, [pc, #52]	; (8007860 <__libc_init_array+0x3c>)
 800782a:	1b64      	subs	r4, r4, r5
 800782c:	10a4      	asrs	r4, r4, #2
 800782e:	2600      	movs	r6, #0
 8007830:	42a6      	cmp	r6, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	4d0b      	ldr	r5, [pc, #44]	; (8007864 <__libc_init_array+0x40>)
 8007836:	4c0c      	ldr	r4, [pc, #48]	; (8007868 <__libc_init_array+0x44>)
 8007838:	f002 f892 	bl	8009960 <_init>
 800783c:	1b64      	subs	r4, r4, r5
 800783e:	10a4      	asrs	r4, r4, #2
 8007840:	2600      	movs	r6, #0
 8007842:	42a6      	cmp	r6, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	f855 3b04 	ldr.w	r3, [r5], #4
 800784c:	4798      	blx	r3
 800784e:	3601      	adds	r6, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	f855 3b04 	ldr.w	r3, [r5], #4
 8007856:	4798      	blx	r3
 8007858:	3601      	adds	r6, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	08009d24 	.word	0x08009d24
 8007860:	08009d24 	.word	0x08009d24
 8007864:	08009d24 	.word	0x08009d24
 8007868:	08009d28 	.word	0x08009d28

0800786c <__retarget_lock_acquire_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_release_recursive>:
 800786e:	4770      	bx	lr

08007870 <quorem>:
 8007870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	6903      	ldr	r3, [r0, #16]
 8007876:	690c      	ldr	r4, [r1, #16]
 8007878:	42a3      	cmp	r3, r4
 800787a:	4607      	mov	r7, r0
 800787c:	db7e      	blt.n	800797c <quorem+0x10c>
 800787e:	3c01      	subs	r4, #1
 8007880:	f101 0814 	add.w	r8, r1, #20
 8007884:	f100 0514 	add.w	r5, r0, #20
 8007888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007896:	3301      	adds	r3, #1
 8007898:	429a      	cmp	r2, r3
 800789a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800789e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a6:	d331      	bcc.n	800790c <quorem+0x9c>
 80078a8:	f04f 0e00 	mov.w	lr, #0
 80078ac:	4640      	mov	r0, r8
 80078ae:	46ac      	mov	ip, r5
 80078b0:	46f2      	mov	sl, lr
 80078b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80078b6:	b293      	uxth	r3, r2
 80078b8:	fb06 e303 	mla	r3, r6, r3, lr
 80078bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078c0:	0c1a      	lsrs	r2, r3, #16
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ebaa 0303 	sub.w	r3, sl, r3
 80078c8:	f8dc a000 	ldr.w	sl, [ip]
 80078cc:	fa13 f38a 	uxtah	r3, r3, sl
 80078d0:	fb06 220e 	mla	r2, r6, lr, r2
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	9b00      	ldr	r3, [sp, #0]
 80078d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078dc:	b292      	uxth	r2, r2
 80078de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80078ea:	4581      	cmp	r9, r0
 80078ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f0:	f84c 3b04 	str.w	r3, [ip], #4
 80078f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078f8:	d2db      	bcs.n	80078b2 <quorem+0x42>
 80078fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80078fe:	b92b      	cbnz	r3, 800790c <quorem+0x9c>
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	3b04      	subs	r3, #4
 8007904:	429d      	cmp	r5, r3
 8007906:	461a      	mov	r2, r3
 8007908:	d32c      	bcc.n	8007964 <quorem+0xf4>
 800790a:	613c      	str	r4, [r7, #16]
 800790c:	4638      	mov	r0, r7
 800790e:	f001 f9a5 	bl	8008c5c <__mcmp>
 8007912:	2800      	cmp	r0, #0
 8007914:	db22      	blt.n	800795c <quorem+0xec>
 8007916:	3601      	adds	r6, #1
 8007918:	4629      	mov	r1, r5
 800791a:	2000      	movs	r0, #0
 800791c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007920:	f8d1 c000 	ldr.w	ip, [r1]
 8007924:	b293      	uxth	r3, r2
 8007926:	1ac3      	subs	r3, r0, r3
 8007928:	0c12      	lsrs	r2, r2, #16
 800792a:	fa13 f38c 	uxtah	r3, r3, ip
 800792e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007936:	b29b      	uxth	r3, r3
 8007938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800793c:	45c1      	cmp	r9, r8
 800793e:	f841 3b04 	str.w	r3, [r1], #4
 8007942:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007946:	d2e9      	bcs.n	800791c <quorem+0xac>
 8007948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800794c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007950:	b922      	cbnz	r2, 800795c <quorem+0xec>
 8007952:	3b04      	subs	r3, #4
 8007954:	429d      	cmp	r5, r3
 8007956:	461a      	mov	r2, r3
 8007958:	d30a      	bcc.n	8007970 <quorem+0x100>
 800795a:	613c      	str	r4, [r7, #16]
 800795c:	4630      	mov	r0, r6
 800795e:	b003      	add	sp, #12
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	3b04      	subs	r3, #4
 8007968:	2a00      	cmp	r2, #0
 800796a:	d1ce      	bne.n	800790a <quorem+0x9a>
 800796c:	3c01      	subs	r4, #1
 800796e:	e7c9      	b.n	8007904 <quorem+0x94>
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	3b04      	subs	r3, #4
 8007974:	2a00      	cmp	r2, #0
 8007976:	d1f0      	bne.n	800795a <quorem+0xea>
 8007978:	3c01      	subs	r4, #1
 800797a:	e7eb      	b.n	8007954 <quorem+0xe4>
 800797c:	2000      	movs	r0, #0
 800797e:	e7ee      	b.n	800795e <quorem+0xee>

08007980 <_dtoa_r>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	ed2d 8b04 	vpush	{d8-d9}
 8007988:	69c5      	ldr	r5, [r0, #28]
 800798a:	b093      	sub	sp, #76	; 0x4c
 800798c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007990:	ec57 6b10 	vmov	r6, r7, d0
 8007994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007998:	9107      	str	r1, [sp, #28]
 800799a:	4604      	mov	r4, r0
 800799c:	920a      	str	r2, [sp, #40]	; 0x28
 800799e:	930d      	str	r3, [sp, #52]	; 0x34
 80079a0:	b975      	cbnz	r5, 80079c0 <_dtoa_r+0x40>
 80079a2:	2010      	movs	r0, #16
 80079a4:	f000 fe2a 	bl	80085fc <malloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	61e0      	str	r0, [r4, #28]
 80079ac:	b920      	cbnz	r0, 80079b8 <_dtoa_r+0x38>
 80079ae:	4bae      	ldr	r3, [pc, #696]	; (8007c68 <_dtoa_r+0x2e8>)
 80079b0:	21ef      	movs	r1, #239	; 0xef
 80079b2:	48ae      	ldr	r0, [pc, #696]	; (8007c6c <_dtoa_r+0x2ec>)
 80079b4:	f001 fc90 	bl	80092d8 <__assert_func>
 80079b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079bc:	6005      	str	r5, [r0, #0]
 80079be:	60c5      	str	r5, [r0, #12]
 80079c0:	69e3      	ldr	r3, [r4, #28]
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	b151      	cbz	r1, 80079dc <_dtoa_r+0x5c>
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	604a      	str	r2, [r1, #4]
 80079ca:	2301      	movs	r3, #1
 80079cc:	4093      	lsls	r3, r2
 80079ce:	608b      	str	r3, [r1, #8]
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 ff07 	bl	80087e4 <_Bfree>
 80079d6:	69e3      	ldr	r3, [r4, #28]
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	1e3b      	subs	r3, r7, #0
 80079de:	bfbb      	ittet	lt
 80079e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079e4:	9303      	strlt	r3, [sp, #12]
 80079e6:	2300      	movge	r3, #0
 80079e8:	2201      	movlt	r2, #1
 80079ea:	bfac      	ite	ge
 80079ec:	f8c8 3000 	strge.w	r3, [r8]
 80079f0:	f8c8 2000 	strlt.w	r2, [r8]
 80079f4:	4b9e      	ldr	r3, [pc, #632]	; (8007c70 <_dtoa_r+0x2f0>)
 80079f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079fa:	ea33 0308 	bics.w	r3, r3, r8
 80079fe:	d11b      	bne.n	8007a38 <_dtoa_r+0xb8>
 8007a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a0c:	4333      	orrs	r3, r6
 8007a0e:	f000 8593 	beq.w	8008538 <_dtoa_r+0xbb8>
 8007a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a14:	b963      	cbnz	r3, 8007a30 <_dtoa_r+0xb0>
 8007a16:	4b97      	ldr	r3, [pc, #604]	; (8007c74 <_dtoa_r+0x2f4>)
 8007a18:	e027      	b.n	8007a6a <_dtoa_r+0xea>
 8007a1a:	4b97      	ldr	r3, [pc, #604]	; (8007c78 <_dtoa_r+0x2f8>)
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	9800      	ldr	r0, [sp, #0]
 8007a26:	b013      	add	sp, #76	; 0x4c
 8007a28:	ecbd 8b04 	vpop	{d8-d9}
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	4b90      	ldr	r3, [pc, #576]	; (8007c74 <_dtoa_r+0x2f4>)
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	3303      	adds	r3, #3
 8007a36:	e7f3      	b.n	8007a20 <_dtoa_r+0xa0>
 8007a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	ec51 0b17 	vmov	r0, r1, d7
 8007a42:	eeb0 8a47 	vmov.f32	s16, s14
 8007a46:	eef0 8a67 	vmov.f32	s17, s15
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f7f9 f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a50:	4681      	mov	r9, r0
 8007a52:	b160      	cbz	r0, 8007a6e <_dtoa_r+0xee>
 8007a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a56:	2301      	movs	r3, #1
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8568 	beq.w	8008532 <_dtoa_r+0xbb2>
 8007a62:	4b86      	ldr	r3, [pc, #536]	; (8007c7c <_dtoa_r+0x2fc>)
 8007a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	e7da      	b.n	8007a24 <_dtoa_r+0xa4>
 8007a6e:	aa10      	add	r2, sp, #64	; 0x40
 8007a70:	a911      	add	r1, sp, #68	; 0x44
 8007a72:	4620      	mov	r0, r4
 8007a74:	eeb0 0a48 	vmov.f32	s0, s16
 8007a78:	eef0 0a68 	vmov.f32	s1, s17
 8007a7c:	f001 f994 	bl	8008da8 <__d2b>
 8007a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a84:	4682      	mov	sl, r0
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	d07f      	beq.n	8007b8a <_dtoa_r+0x20a>
 8007a8a:	ee18 3a90 	vmov	r3, s17
 8007a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007a96:	ec51 0b18 	vmov	r0, r1, d8
 8007a9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007aa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4b75      	ldr	r3, [pc, #468]	; (8007c80 <_dtoa_r+0x300>)
 8007aac:	f7f8 fbf4 	bl	8000298 <__aeabi_dsub>
 8007ab0:	a367      	add	r3, pc, #412	; (adr r3, 8007c50 <_dtoa_r+0x2d0>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f7f8 fda7 	bl	8000608 <__aeabi_dmul>
 8007aba:	a367      	add	r3, pc, #412	; (adr r3, 8007c58 <_dtoa_r+0x2d8>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fbec 	bl	800029c <__adddf3>
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	460f      	mov	r7, r1
 8007aca:	f7f8 fd33 	bl	8000534 <__aeabi_i2d>
 8007ace:	a364      	add	r3, pc, #400	; (adr r3, 8007c60 <_dtoa_r+0x2e0>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f8 fd98 	bl	8000608 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fbdc 	bl	800029c <__adddf3>
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	f7f9 f83e 	bl	8000b68 <__aeabi_d2iz>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4683      	mov	fp, r0
 8007af0:	2300      	movs	r3, #0
 8007af2:	4630      	mov	r0, r6
 8007af4:	4639      	mov	r1, r7
 8007af6:	f7f8 fff9 	bl	8000aec <__aeabi_dcmplt>
 8007afa:	b148      	cbz	r0, 8007b10 <_dtoa_r+0x190>
 8007afc:	4658      	mov	r0, fp
 8007afe:	f7f8 fd19 	bl	8000534 <__aeabi_i2d>
 8007b02:	4632      	mov	r2, r6
 8007b04:	463b      	mov	r3, r7
 8007b06:	f7f8 ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b0a:	b908      	cbnz	r0, 8007b10 <_dtoa_r+0x190>
 8007b0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b10:	f1bb 0f16 	cmp.w	fp, #22
 8007b14:	d857      	bhi.n	8007bc6 <_dtoa_r+0x246>
 8007b16:	4b5b      	ldr	r3, [pc, #364]	; (8007c84 <_dtoa_r+0x304>)
 8007b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	ec51 0b18 	vmov	r0, r1, d8
 8007b24:	f7f8 ffe2 	bl	8000aec <__aeabi_dcmplt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d04e      	beq.n	8007bca <_dtoa_r+0x24a>
 8007b2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b30:	2300      	movs	r3, #0
 8007b32:	930c      	str	r3, [sp, #48]	; 0x30
 8007b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b36:	1b5b      	subs	r3, r3, r5
 8007b38:	1e5a      	subs	r2, r3, #1
 8007b3a:	bf45      	ittet	mi
 8007b3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b40:	9305      	strmi	r3, [sp, #20]
 8007b42:	2300      	movpl	r3, #0
 8007b44:	2300      	movmi	r3, #0
 8007b46:	9206      	str	r2, [sp, #24]
 8007b48:	bf54      	ite	pl
 8007b4a:	9305      	strpl	r3, [sp, #20]
 8007b4c:	9306      	strmi	r3, [sp, #24]
 8007b4e:	f1bb 0f00 	cmp.w	fp, #0
 8007b52:	db3c      	blt.n	8007bce <_dtoa_r+0x24e>
 8007b54:	9b06      	ldr	r3, [sp, #24]
 8007b56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007b5a:	445b      	add	r3, fp
 8007b5c:	9306      	str	r3, [sp, #24]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9b07      	ldr	r3, [sp, #28]
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d868      	bhi.n	8007c3a <_dtoa_r+0x2ba>
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	bfc4      	itt	gt
 8007b6c:	3b04      	subgt	r3, #4
 8007b6e:	9307      	strgt	r3, [sp, #28]
 8007b70:	9b07      	ldr	r3, [sp, #28]
 8007b72:	f1a3 0302 	sub.w	r3, r3, #2
 8007b76:	bfcc      	ite	gt
 8007b78:	2500      	movgt	r5, #0
 8007b7a:	2501      	movle	r5, #1
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	f200 8085 	bhi.w	8007c8c <_dtoa_r+0x30c>
 8007b82:	e8df f003 	tbb	[pc, r3]
 8007b86:	3b2e      	.short	0x3b2e
 8007b88:	5839      	.short	0x5839
 8007b8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b8e:	441d      	add	r5, r3
 8007b90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	bfc1      	itttt	gt
 8007b98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ba0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ba4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ba8:	bfd6      	itet	le
 8007baa:	f1c3 0320 	rsble	r3, r3, #32
 8007bae:	ea48 0003 	orrgt.w	r0, r8, r3
 8007bb2:	fa06 f003 	lslle.w	r0, r6, r3
 8007bb6:	f7f8 fcad 	bl	8000514 <__aeabi_ui2d>
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007bc0:	3d01      	subs	r5, #1
 8007bc2:	920e      	str	r2, [sp, #56]	; 0x38
 8007bc4:	e76f      	b.n	8007aa6 <_dtoa_r+0x126>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e7b3      	b.n	8007b32 <_dtoa_r+0x1b2>
 8007bca:	900c      	str	r0, [sp, #48]	; 0x30
 8007bcc:	e7b2      	b.n	8007b34 <_dtoa_r+0x1b4>
 8007bce:	9b05      	ldr	r3, [sp, #20]
 8007bd0:	eba3 030b 	sub.w	r3, r3, fp
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	f1cb 0300 	rsb	r3, fp, #0
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8007be0:	e7bf      	b.n	8007b62 <_dtoa_r+0x1e2>
 8007be2:	2300      	movs	r3, #0
 8007be4:	9309      	str	r3, [sp, #36]	; 0x24
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dc52      	bgt.n	8007c92 <_dtoa_r+0x312>
 8007bec:	2301      	movs	r3, #1
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	920a      	str	r2, [sp, #40]	; 0x28
 8007bf6:	e00b      	b.n	8007c10 <_dtoa_r+0x290>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7f3      	b.n	8007be4 <_dtoa_r+0x264>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c02:	445b      	add	r3, fp
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	3301      	adds	r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	bfb8      	it	lt
 8007c0e:	2301      	movlt	r3, #1
 8007c10:	69e0      	ldr	r0, [r4, #28]
 8007c12:	2100      	movs	r1, #0
 8007c14:	2204      	movs	r2, #4
 8007c16:	f102 0614 	add.w	r6, r2, #20
 8007c1a:	429e      	cmp	r6, r3
 8007c1c:	d93d      	bls.n	8007c9a <_dtoa_r+0x31a>
 8007c1e:	6041      	str	r1, [r0, #4]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fd9f 	bl	8008764 <_Balloc>
 8007c26:	9000      	str	r0, [sp, #0]
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d139      	bne.n	8007ca0 <_dtoa_r+0x320>
 8007c2c:	4b16      	ldr	r3, [pc, #88]	; (8007c88 <_dtoa_r+0x308>)
 8007c2e:	4602      	mov	r2, r0
 8007c30:	f240 11af 	movw	r1, #431	; 0x1af
 8007c34:	e6bd      	b.n	80079b2 <_dtoa_r+0x32>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7e1      	b.n	8007bfe <_dtoa_r+0x27e>
 8007c3a:	2501      	movs	r5, #1
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	9509      	str	r5, [sp, #36]	; 0x24
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2312      	movs	r3, #18
 8007c4e:	e7d1      	b.n	8007bf4 <_dtoa_r+0x274>
 8007c50:	636f4361 	.word	0x636f4361
 8007c54:	3fd287a7 	.word	0x3fd287a7
 8007c58:	8b60c8b3 	.word	0x8b60c8b3
 8007c5c:	3fc68a28 	.word	0x3fc68a28
 8007c60:	509f79fb 	.word	0x509f79fb
 8007c64:	3fd34413 	.word	0x3fd34413
 8007c68:	080099e9 	.word	0x080099e9
 8007c6c:	08009a00 	.word	0x08009a00
 8007c70:	7ff00000 	.word	0x7ff00000
 8007c74:	080099e5 	.word	0x080099e5
 8007c78:	080099dc 	.word	0x080099dc
 8007c7c:	080099b9 	.word	0x080099b9
 8007c80:	3ff80000 	.word	0x3ff80000
 8007c84:	08009af0 	.word	0x08009af0
 8007c88:	08009a58 	.word	0x08009a58
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	e7d7      	b.n	8007c42 <_dtoa_r+0x2c2>
 8007c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	e7ba      	b.n	8007c10 <_dtoa_r+0x290>
 8007c9a:	3101      	adds	r1, #1
 8007c9c:	0052      	lsls	r2, r2, #1
 8007c9e:	e7ba      	b.n	8007c16 <_dtoa_r+0x296>
 8007ca0:	69e3      	ldr	r3, [r4, #28]
 8007ca2:	9a00      	ldr	r2, [sp, #0]
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	2b0e      	cmp	r3, #14
 8007caa:	f200 80a8 	bhi.w	8007dfe <_dtoa_r+0x47e>
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	f000 80a5 	beq.w	8007dfe <_dtoa_r+0x47e>
 8007cb4:	f1bb 0f00 	cmp.w	fp, #0
 8007cb8:	dd38      	ble.n	8007d2c <_dtoa_r+0x3ac>
 8007cba:	4bc0      	ldr	r3, [pc, #768]	; (8007fbc <_dtoa_r+0x63c>)
 8007cbc:	f00b 020f 	and.w	r2, fp, #15
 8007cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007cc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ccc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007cd0:	d019      	beq.n	8007d06 <_dtoa_r+0x386>
 8007cd2:	4bbb      	ldr	r3, [pc, #748]	; (8007fc0 <_dtoa_r+0x640>)
 8007cd4:	ec51 0b18 	vmov	r0, r1, d8
 8007cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cdc:	f7f8 fdbe 	bl	800085c <__aeabi_ddiv>
 8007ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce4:	f008 080f 	and.w	r8, r8, #15
 8007ce8:	2503      	movs	r5, #3
 8007cea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007fc0 <_dtoa_r+0x640>
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	d10a      	bne.n	8007d0a <_dtoa_r+0x38a>
 8007cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	f7f8 fdae 	bl	800085c <__aeabi_ddiv>
 8007d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d04:	e02b      	b.n	8007d5e <_dtoa_r+0x3de>
 8007d06:	2502      	movs	r5, #2
 8007d08:	e7ef      	b.n	8007cea <_dtoa_r+0x36a>
 8007d0a:	f018 0f01 	tst.w	r8, #1
 8007d0e:	d008      	beq.n	8007d22 <_dtoa_r+0x3a2>
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d26:	f109 0908 	add.w	r9, r9, #8
 8007d2a:	e7e0      	b.n	8007cee <_dtoa_r+0x36e>
 8007d2c:	f000 809f 	beq.w	8007e6e <_dtoa_r+0x4ee>
 8007d30:	f1cb 0600 	rsb	r6, fp, #0
 8007d34:	4ba1      	ldr	r3, [pc, #644]	; (8007fbc <_dtoa_r+0x63c>)
 8007d36:	4fa2      	ldr	r7, [pc, #648]	; (8007fc0 <_dtoa_r+0x640>)
 8007d38:	f006 020f 	and.w	r2, r6, #15
 8007d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	ec51 0b18 	vmov	r0, r1, d8
 8007d48:	f7f8 fc5e 	bl	8000608 <__aeabi_dmul>
 8007d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d50:	1136      	asrs	r6, r6, #4
 8007d52:	2300      	movs	r3, #0
 8007d54:	2502      	movs	r5, #2
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	d17e      	bne.n	8007e58 <_dtoa_r+0x4d8>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1d0      	bne.n	8007d00 <_dtoa_r+0x380>
 8007d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8084 	beq.w	8007e72 <_dtoa_r+0x4f2>
 8007d6a:	4b96      	ldr	r3, [pc, #600]	; (8007fc4 <_dtoa_r+0x644>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 febb 	bl	8000aec <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d07b      	beq.n	8007e72 <_dtoa_r+0x4f2>
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d078      	beq.n	8007e72 <_dtoa_r+0x4f2>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dd39      	ble.n	8007dfa <_dtoa_r+0x47a>
 8007d86:	4b90      	ldr	r3, [pc, #576]	; (8007fc8 <_dtoa_r+0x648>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fc3b 	bl	8000608 <__aeabi_dmul>
 8007d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d96:	9e01      	ldr	r6, [sp, #4]
 8007d98:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7f8 fbc6 	bl	8000534 <__aeabi_i2d>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	f7f8 fc2c 	bl	8000608 <__aeabi_dmul>
 8007db0:	4b86      	ldr	r3, [pc, #536]	; (8007fcc <_dtoa_r+0x64c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	f7f8 fa72 	bl	800029c <__adddf3>
 8007db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d158      	bne.n	8007e78 <_dtoa_r+0x4f8>
 8007dc6:	4b82      	ldr	r3, [pc, #520]	; (8007fd0 <_dtoa_r+0x650>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 fa63 	bl	8000298 <__aeabi_dsub>
 8007dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	f7f8 fea5 	bl	8000b28 <__aeabi_dcmpgt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f040 8296 	bne.w	8008310 <_dtoa_r+0x990>
 8007de4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007de8:	4640      	mov	r0, r8
 8007dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe7c 	bl	8000aec <__aeabi_dcmplt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f040 8289 	bne.w	800830c <_dtoa_r+0x98c>
 8007dfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f2c0 814e 	blt.w	80080a2 <_dtoa_r+0x722>
 8007e06:	f1bb 0f0e 	cmp.w	fp, #14
 8007e0a:	f300 814a 	bgt.w	80080a2 <_dtoa_r+0x722>
 8007e0e:	4b6b      	ldr	r3, [pc, #428]	; (8007fbc <_dtoa_r+0x63c>)
 8007e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f280 80dc 	bge.w	8007fd8 <_dtoa_r+0x658>
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f300 80d8 	bgt.w	8007fd8 <_dtoa_r+0x658>
 8007e28:	f040 826f 	bne.w	800830a <_dtoa_r+0x98a>
 8007e2c:	4b68      	ldr	r3, [pc, #416]	; (8007fd0 <_dtoa_r+0x650>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4640      	mov	r0, r8
 8007e32:	4649      	mov	r1, r9
 8007e34:	f7f8 fbe8 	bl	8000608 <__aeabi_dmul>
 8007e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e3c:	f7f8 fe6a 	bl	8000b14 <__aeabi_dcmpge>
 8007e40:	9e04      	ldr	r6, [sp, #16]
 8007e42:	4637      	mov	r7, r6
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f040 8245 	bne.w	80082d4 <_dtoa_r+0x954>
 8007e4a:	9d00      	ldr	r5, [sp, #0]
 8007e4c:	2331      	movs	r3, #49	; 0x31
 8007e4e:	f805 3b01 	strb.w	r3, [r5], #1
 8007e52:	f10b 0b01 	add.w	fp, fp, #1
 8007e56:	e241      	b.n	80082dc <_dtoa_r+0x95c>
 8007e58:	07f2      	lsls	r2, r6, #31
 8007e5a:	d505      	bpl.n	8007e68 <_dtoa_r+0x4e8>
 8007e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e60:	f7f8 fbd2 	bl	8000608 <__aeabi_dmul>
 8007e64:	3501      	adds	r5, #1
 8007e66:	2301      	movs	r3, #1
 8007e68:	1076      	asrs	r6, r6, #1
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	e773      	b.n	8007d56 <_dtoa_r+0x3d6>
 8007e6e:	2502      	movs	r5, #2
 8007e70:	e775      	b.n	8007d5e <_dtoa_r+0x3de>
 8007e72:	9e04      	ldr	r6, [sp, #16]
 8007e74:	465f      	mov	r7, fp
 8007e76:	e792      	b.n	8007d9e <_dtoa_r+0x41e>
 8007e78:	9900      	ldr	r1, [sp, #0]
 8007e7a:	4b50      	ldr	r3, [pc, #320]	; (8007fbc <_dtoa_r+0x63c>)
 8007e7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e80:	4431      	add	r1, r6
 8007e82:	9102      	str	r1, [sp, #8]
 8007e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e86:	eeb0 9a47 	vmov.f32	s18, s14
 8007e8a:	eef0 9a67 	vmov.f32	s19, s15
 8007e8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e96:	2900      	cmp	r1, #0
 8007e98:	d044      	beq.n	8007f24 <_dtoa_r+0x5a4>
 8007e9a:	494e      	ldr	r1, [pc, #312]	; (8007fd4 <_dtoa_r+0x654>)
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f7f8 fcdd 	bl	800085c <__aeabi_ddiv>
 8007ea2:	ec53 2b19 	vmov	r2, r3, d9
 8007ea6:	f7f8 f9f7 	bl	8000298 <__aeabi_dsub>
 8007eaa:	9d00      	ldr	r5, [sp, #0]
 8007eac:	ec41 0b19 	vmov	d9, r0, r1
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f7f8 fe58 	bl	8000b68 <__aeabi_d2iz>
 8007eb8:	4606      	mov	r6, r0
 8007eba:	f7f8 fb3b 	bl	8000534 <__aeabi_i2d>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 f9e7 	bl	8000298 <__aeabi_dsub>
 8007eca:	3630      	adds	r6, #48	; 0x30
 8007ecc:	f805 6b01 	strb.w	r6, [r5], #1
 8007ed0:	ec53 2b19 	vmov	r2, r3, d9
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	f7f8 fe08 	bl	8000aec <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d164      	bne.n	8007faa <_dtoa_r+0x62a>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	4937      	ldr	r1, [pc, #220]	; (8007fc4 <_dtoa_r+0x644>)
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f7f8 f9d6 	bl	8000298 <__aeabi_dsub>
 8007eec:	ec53 2b19 	vmov	r2, r3, d9
 8007ef0:	f7f8 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f040 80b6 	bne.w	8008066 <_dtoa_r+0x6e6>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	429d      	cmp	r5, r3
 8007efe:	f43f af7c 	beq.w	8007dfa <_dtoa_r+0x47a>
 8007f02:	4b31      	ldr	r3, [pc, #196]	; (8007fc8 <_dtoa_r+0x648>)
 8007f04:	ec51 0b19 	vmov	r0, r1, d9
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f7f8 fb7d 	bl	8000608 <__aeabi_dmul>
 8007f0e:	4b2e      	ldr	r3, [pc, #184]	; (8007fc8 <_dtoa_r+0x648>)
 8007f10:	ec41 0b19 	vmov	d9, r0, r1
 8007f14:	2200      	movs	r2, #0
 8007f16:	4640      	mov	r0, r8
 8007f18:	4649      	mov	r1, r9
 8007f1a:	f7f8 fb75 	bl	8000608 <__aeabi_dmul>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4689      	mov	r9, r1
 8007f22:	e7c5      	b.n	8007eb0 <_dtoa_r+0x530>
 8007f24:	ec51 0b17 	vmov	r0, r1, d7
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	9d00      	ldr	r5, [sp, #0]
 8007f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f32:	ec41 0b19 	vmov	d9, r0, r1
 8007f36:	4649      	mov	r1, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	f7f8 fe15 	bl	8000b68 <__aeabi_d2iz>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	f7f8 faf8 	bl	8000534 <__aeabi_i2d>
 8007f44:	3630      	adds	r6, #48	; 0x30
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 f9a3 	bl	8000298 <__aeabi_dsub>
 8007f52:	f805 6b01 	strb.w	r6, [r5], #1
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	d124      	bne.n	8007fae <_dtoa_r+0x62e>
 8007f64:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <_dtoa_r+0x654>)
 8007f66:	ec51 0b19 	vmov	r0, r1, d9
 8007f6a:	f7f8 f997 	bl	800029c <__adddf3>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fdd7 	bl	8000b28 <__aeabi_dcmpgt>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d173      	bne.n	8008066 <_dtoa_r+0x6e6>
 8007f7e:	ec53 2b19 	vmov	r2, r3, d9
 8007f82:	4914      	ldr	r1, [pc, #80]	; (8007fd4 <_dtoa_r+0x654>)
 8007f84:	2000      	movs	r0, #0
 8007f86:	f7f8 f987 	bl	8000298 <__aeabi_dsub>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fdab 	bl	8000aec <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f af2f 	beq.w	8007dfa <_dtoa_r+0x47a>
 8007f9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f9e:	1e6b      	subs	r3, r5, #1
 8007fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fa6:	2b30      	cmp	r3, #48	; 0x30
 8007fa8:	d0f8      	beq.n	8007f9c <_dtoa_r+0x61c>
 8007faa:	46bb      	mov	fp, r7
 8007fac:	e04a      	b.n	8008044 <_dtoa_r+0x6c4>
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <_dtoa_r+0x648>)
 8007fb0:	f7f8 fb2a 	bl	8000608 <__aeabi_dmul>
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	e7bd      	b.n	8007f36 <_dtoa_r+0x5b6>
 8007fba:	bf00      	nop
 8007fbc:	08009af0 	.word	0x08009af0
 8007fc0:	08009ac8 	.word	0x08009ac8
 8007fc4:	3ff00000 	.word	0x3ff00000
 8007fc8:	40240000 	.word	0x40240000
 8007fcc:	401c0000 	.word	0x401c0000
 8007fd0:	40140000 	.word	0x40140000
 8007fd4:	3fe00000 	.word	0x3fe00000
 8007fd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fdc:	9d00      	ldr	r5, [sp, #0]
 8007fde:	4642      	mov	r2, r8
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 fc39 	bl	800085c <__aeabi_ddiv>
 8007fea:	f7f8 fdbd 	bl	8000b68 <__aeabi_d2iz>
 8007fee:	9001      	str	r0, [sp, #4]
 8007ff0:	f7f8 faa0 	bl	8000534 <__aeabi_i2d>
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	f7f8 fb06 	bl	8000608 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 f948 	bl	8000298 <__aeabi_dsub>
 8008008:	9e01      	ldr	r6, [sp, #4]
 800800a:	9f04      	ldr	r7, [sp, #16]
 800800c:	3630      	adds	r6, #48	; 0x30
 800800e:	f805 6b01 	strb.w	r6, [r5], #1
 8008012:	9e00      	ldr	r6, [sp, #0]
 8008014:	1bae      	subs	r6, r5, r6
 8008016:	42b7      	cmp	r7, r6
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	d134      	bne.n	8008088 <_dtoa_r+0x708>
 800801e:	f7f8 f93d 	bl	800029c <__adddf3>
 8008022:	4642      	mov	r2, r8
 8008024:	464b      	mov	r3, r9
 8008026:	4606      	mov	r6, r0
 8008028:	460f      	mov	r7, r1
 800802a:	f7f8 fd7d 	bl	8000b28 <__aeabi_dcmpgt>
 800802e:	b9c8      	cbnz	r0, 8008064 <_dtoa_r+0x6e4>
 8008030:	4642      	mov	r2, r8
 8008032:	464b      	mov	r3, r9
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800803c:	b110      	cbz	r0, 8008044 <_dtoa_r+0x6c4>
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d40f      	bmi.n	8008064 <_dtoa_r+0x6e4>
 8008044:	4651      	mov	r1, sl
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fbcc 	bl	80087e4 <_Bfree>
 800804c:	2300      	movs	r3, #0
 800804e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008050:	702b      	strb	r3, [r5, #0]
 8008052:	f10b 0301 	add.w	r3, fp, #1
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800805a:	2b00      	cmp	r3, #0
 800805c:	f43f ace2 	beq.w	8007a24 <_dtoa_r+0xa4>
 8008060:	601d      	str	r5, [r3, #0]
 8008062:	e4df      	b.n	8007a24 <_dtoa_r+0xa4>
 8008064:	465f      	mov	r7, fp
 8008066:	462b      	mov	r3, r5
 8008068:	461d      	mov	r5, r3
 800806a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800806e:	2a39      	cmp	r2, #57	; 0x39
 8008070:	d106      	bne.n	8008080 <_dtoa_r+0x700>
 8008072:	9a00      	ldr	r2, [sp, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d1f7      	bne.n	8008068 <_dtoa_r+0x6e8>
 8008078:	9900      	ldr	r1, [sp, #0]
 800807a:	2230      	movs	r2, #48	; 0x30
 800807c:	3701      	adds	r7, #1
 800807e:	700a      	strb	r2, [r1, #0]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	3201      	adds	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e790      	b.n	8007faa <_dtoa_r+0x62a>
 8008088:	4ba3      	ldr	r3, [pc, #652]	; (8008318 <_dtoa_r+0x998>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 fabc 	bl	8000608 <__aeabi_dmul>
 8008090:	2200      	movs	r2, #0
 8008092:	2300      	movs	r3, #0
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	f7f8 fd1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800809c:	2800      	cmp	r0, #0
 800809e:	d09e      	beq.n	8007fde <_dtoa_r+0x65e>
 80080a0:	e7d0      	b.n	8008044 <_dtoa_r+0x6c4>
 80080a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	f000 80ca 	beq.w	800823e <_dtoa_r+0x8be>
 80080aa:	9a07      	ldr	r2, [sp, #28]
 80080ac:	2a01      	cmp	r2, #1
 80080ae:	f300 80ad 	bgt.w	800820c <_dtoa_r+0x88c>
 80080b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	f000 80a5 	beq.w	8008204 <_dtoa_r+0x884>
 80080ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080be:	9e08      	ldr	r6, [sp, #32]
 80080c0:	9d05      	ldr	r5, [sp, #20]
 80080c2:	9a05      	ldr	r2, [sp, #20]
 80080c4:	441a      	add	r2, r3
 80080c6:	9205      	str	r2, [sp, #20]
 80080c8:	9a06      	ldr	r2, [sp, #24]
 80080ca:	2101      	movs	r1, #1
 80080cc:	441a      	add	r2, r3
 80080ce:	4620      	mov	r0, r4
 80080d0:	9206      	str	r2, [sp, #24]
 80080d2:	f000 fc3d 	bl	8008950 <__i2b>
 80080d6:	4607      	mov	r7, r0
 80080d8:	b165      	cbz	r5, 80080f4 <_dtoa_r+0x774>
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd09      	ble.n	80080f4 <_dtoa_r+0x774>
 80080e0:	42ab      	cmp	r3, r5
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	bfa8      	it	ge
 80080e6:	462b      	movge	r3, r5
 80080e8:	1ad2      	subs	r2, r2, r3
 80080ea:	9205      	str	r2, [sp, #20]
 80080ec:	9a06      	ldr	r2, [sp, #24]
 80080ee:	1aed      	subs	r5, r5, r3
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	9306      	str	r3, [sp, #24]
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	b1f3      	cbz	r3, 8008136 <_dtoa_r+0x7b6>
 80080f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80a3 	beq.w	8008246 <_dtoa_r+0x8c6>
 8008100:	2e00      	cmp	r6, #0
 8008102:	dd10      	ble.n	8008126 <_dtoa_r+0x7a6>
 8008104:	4639      	mov	r1, r7
 8008106:	4632      	mov	r2, r6
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fce1 	bl	8008ad0 <__pow5mult>
 800810e:	4652      	mov	r2, sl
 8008110:	4601      	mov	r1, r0
 8008112:	4607      	mov	r7, r0
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fc31 	bl	800897c <__multiply>
 800811a:	4651      	mov	r1, sl
 800811c:	4680      	mov	r8, r0
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fb60 	bl	80087e4 <_Bfree>
 8008124:	46c2      	mov	sl, r8
 8008126:	9b08      	ldr	r3, [sp, #32]
 8008128:	1b9a      	subs	r2, r3, r6
 800812a:	d004      	beq.n	8008136 <_dtoa_r+0x7b6>
 800812c:	4651      	mov	r1, sl
 800812e:	4620      	mov	r0, r4
 8008130:	f000 fcce 	bl	8008ad0 <__pow5mult>
 8008134:	4682      	mov	sl, r0
 8008136:	2101      	movs	r1, #1
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fc09 	bl	8008950 <__i2b>
 800813e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008140:	2b00      	cmp	r3, #0
 8008142:	4606      	mov	r6, r0
 8008144:	f340 8081 	ble.w	800824a <_dtoa_r+0x8ca>
 8008148:	461a      	mov	r2, r3
 800814a:	4601      	mov	r1, r0
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fcbf 	bl	8008ad0 <__pow5mult>
 8008152:	9b07      	ldr	r3, [sp, #28]
 8008154:	2b01      	cmp	r3, #1
 8008156:	4606      	mov	r6, r0
 8008158:	dd7a      	ble.n	8008250 <_dtoa_r+0x8d0>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	6933      	ldr	r3, [r6, #16]
 8008160:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008164:	6918      	ldr	r0, [r3, #16]
 8008166:	f000 fba5 	bl	80088b4 <__hi0bits>
 800816a:	f1c0 0020 	rsb	r0, r0, #32
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	4418      	add	r0, r3
 8008172:	f010 001f 	ands.w	r0, r0, #31
 8008176:	f000 8094 	beq.w	80082a2 <_dtoa_r+0x922>
 800817a:	f1c0 0320 	rsb	r3, r0, #32
 800817e:	2b04      	cmp	r3, #4
 8008180:	f340 8085 	ble.w	800828e <_dtoa_r+0x90e>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	f1c0 001c 	rsb	r0, r0, #28
 800818a:	4403      	add	r3, r0
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	4403      	add	r3, r0
 8008192:	4405      	add	r5, r0
 8008194:	9306      	str	r3, [sp, #24]
 8008196:	9b05      	ldr	r3, [sp, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dd05      	ble.n	80081a8 <_dtoa_r+0x828>
 800819c:	4651      	mov	r1, sl
 800819e:	461a      	mov	r2, r3
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fcef 	bl	8008b84 <__lshift>
 80081a6:	4682      	mov	sl, r0
 80081a8:	9b06      	ldr	r3, [sp, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd05      	ble.n	80081ba <_dtoa_r+0x83a>
 80081ae:	4631      	mov	r1, r6
 80081b0:	461a      	mov	r2, r3
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 fce6 	bl	8008b84 <__lshift>
 80081b8:	4606      	mov	r6, r0
 80081ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d072      	beq.n	80082a6 <_dtoa_r+0x926>
 80081c0:	4631      	mov	r1, r6
 80081c2:	4650      	mov	r0, sl
 80081c4:	f000 fd4a 	bl	8008c5c <__mcmp>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	da6c      	bge.n	80082a6 <_dtoa_r+0x926>
 80081cc:	2300      	movs	r3, #0
 80081ce:	4651      	mov	r1, sl
 80081d0:	220a      	movs	r2, #10
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fb28 	bl	8008828 <__multadd>
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80081de:	4682      	mov	sl, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 81b0 	beq.w	8008546 <_dtoa_r+0xbc6>
 80081e6:	2300      	movs	r3, #0
 80081e8:	4639      	mov	r1, r7
 80081ea:	220a      	movs	r2, #10
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fb1b 	bl	8008828 <__multadd>
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	4607      	mov	r7, r0
 80081f8:	f300 8096 	bgt.w	8008328 <_dtoa_r+0x9a8>
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	dc59      	bgt.n	80082b6 <_dtoa_r+0x936>
 8008202:	e091      	b.n	8008328 <_dtoa_r+0x9a8>
 8008204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800820a:	e758      	b.n	80080be <_dtoa_r+0x73e>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	1e5e      	subs	r6, r3, #1
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	42b3      	cmp	r3, r6
 8008214:	bfbf      	itttt	lt
 8008216:	9b08      	ldrlt	r3, [sp, #32]
 8008218:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800821a:	9608      	strlt	r6, [sp, #32]
 800821c:	1af3      	sublt	r3, r6, r3
 800821e:	bfb4      	ite	lt
 8008220:	18d2      	addlt	r2, r2, r3
 8008222:	1b9e      	subge	r6, r3, r6
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	bfbc      	itt	lt
 8008228:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800822a:	2600      	movlt	r6, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfb7      	itett	lt
 8008230:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008234:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008238:	1a9d      	sublt	r5, r3, r2
 800823a:	2300      	movlt	r3, #0
 800823c:	e741      	b.n	80080c2 <_dtoa_r+0x742>
 800823e:	9e08      	ldr	r6, [sp, #32]
 8008240:	9d05      	ldr	r5, [sp, #20]
 8008242:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008244:	e748      	b.n	80080d8 <_dtoa_r+0x758>
 8008246:	9a08      	ldr	r2, [sp, #32]
 8008248:	e770      	b.n	800812c <_dtoa_r+0x7ac>
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	2b01      	cmp	r3, #1
 800824e:	dc19      	bgt.n	8008284 <_dtoa_r+0x904>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	b9bb      	cbnz	r3, 8008284 <_dtoa_r+0x904>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800825a:	b99b      	cbnz	r3, 8008284 <_dtoa_r+0x904>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008262:	0d1b      	lsrs	r3, r3, #20
 8008264:	051b      	lsls	r3, r3, #20
 8008266:	b183      	cbz	r3, 800828a <_dtoa_r+0x90a>
 8008268:	9b05      	ldr	r3, [sp, #20]
 800826a:	3301      	adds	r3, #1
 800826c:	9305      	str	r3, [sp, #20]
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	3301      	adds	r3, #1
 8008272:	9306      	str	r3, [sp, #24]
 8008274:	f04f 0801 	mov.w	r8, #1
 8008278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827a:	2b00      	cmp	r3, #0
 800827c:	f47f af6f 	bne.w	800815e <_dtoa_r+0x7de>
 8008280:	2001      	movs	r0, #1
 8008282:	e774      	b.n	800816e <_dtoa_r+0x7ee>
 8008284:	f04f 0800 	mov.w	r8, #0
 8008288:	e7f6      	b.n	8008278 <_dtoa_r+0x8f8>
 800828a:	4698      	mov	r8, r3
 800828c:	e7f4      	b.n	8008278 <_dtoa_r+0x8f8>
 800828e:	d082      	beq.n	8008196 <_dtoa_r+0x816>
 8008290:	9a05      	ldr	r2, [sp, #20]
 8008292:	331c      	adds	r3, #28
 8008294:	441a      	add	r2, r3
 8008296:	9205      	str	r2, [sp, #20]
 8008298:	9a06      	ldr	r2, [sp, #24]
 800829a:	441a      	add	r2, r3
 800829c:	441d      	add	r5, r3
 800829e:	9206      	str	r2, [sp, #24]
 80082a0:	e779      	b.n	8008196 <_dtoa_r+0x816>
 80082a2:	4603      	mov	r3, r0
 80082a4:	e7f4      	b.n	8008290 <_dtoa_r+0x910>
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dc37      	bgt.n	800831c <_dtoa_r+0x99c>
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	dd34      	ble.n	800831c <_dtoa_r+0x99c>
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	b963      	cbnz	r3, 80082d4 <_dtoa_r+0x954>
 80082ba:	4631      	mov	r1, r6
 80082bc:	2205      	movs	r2, #5
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 fab2 	bl	8008828 <__multadd>
 80082c4:	4601      	mov	r1, r0
 80082c6:	4606      	mov	r6, r0
 80082c8:	4650      	mov	r0, sl
 80082ca:	f000 fcc7 	bl	8008c5c <__mcmp>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f73f adbb 	bgt.w	8007e4a <_dtoa_r+0x4ca>
 80082d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d6:	9d00      	ldr	r5, [sp, #0]
 80082d8:	ea6f 0b03 	mvn.w	fp, r3
 80082dc:	f04f 0800 	mov.w	r8, #0
 80082e0:	4631      	mov	r1, r6
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fa7e 	bl	80087e4 <_Bfree>
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	f43f aeab 	beq.w	8008044 <_dtoa_r+0x6c4>
 80082ee:	f1b8 0f00 	cmp.w	r8, #0
 80082f2:	d005      	beq.n	8008300 <_dtoa_r+0x980>
 80082f4:	45b8      	cmp	r8, r7
 80082f6:	d003      	beq.n	8008300 <_dtoa_r+0x980>
 80082f8:	4641      	mov	r1, r8
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fa72 	bl	80087e4 <_Bfree>
 8008300:	4639      	mov	r1, r7
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fa6e 	bl	80087e4 <_Bfree>
 8008308:	e69c      	b.n	8008044 <_dtoa_r+0x6c4>
 800830a:	2600      	movs	r6, #0
 800830c:	4637      	mov	r7, r6
 800830e:	e7e1      	b.n	80082d4 <_dtoa_r+0x954>
 8008310:	46bb      	mov	fp, r7
 8008312:	4637      	mov	r7, r6
 8008314:	e599      	b.n	8007e4a <_dtoa_r+0x4ca>
 8008316:	bf00      	nop
 8008318:	40240000 	.word	0x40240000
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80c8 	beq.w	80084b4 <_dtoa_r+0xb34>
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2d00      	cmp	r5, #0
 800832a:	dd05      	ble.n	8008338 <_dtoa_r+0x9b8>
 800832c:	4639      	mov	r1, r7
 800832e:	462a      	mov	r2, r5
 8008330:	4620      	mov	r0, r4
 8008332:	f000 fc27 	bl	8008b84 <__lshift>
 8008336:	4607      	mov	r7, r0
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	d05b      	beq.n	80083f6 <_dtoa_r+0xa76>
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fa0f 	bl	8008764 <_Balloc>
 8008346:	4605      	mov	r5, r0
 8008348:	b928      	cbnz	r0, 8008356 <_dtoa_r+0x9d6>
 800834a:	4b83      	ldr	r3, [pc, #524]	; (8008558 <_dtoa_r+0xbd8>)
 800834c:	4602      	mov	r2, r0
 800834e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008352:	f7ff bb2e 	b.w	80079b2 <_dtoa_r+0x32>
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	3202      	adds	r2, #2
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	f107 010c 	add.w	r1, r7, #12
 8008360:	300c      	adds	r0, #12
 8008362:	f000 ffab 	bl	80092bc <memcpy>
 8008366:	2201      	movs	r2, #1
 8008368:	4629      	mov	r1, r5
 800836a:	4620      	mov	r0, r4
 800836c:	f000 fc0a 	bl	8008b84 <__lshift>
 8008370:	9b00      	ldr	r3, [sp, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800837a:	4413      	add	r3, r2
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	46b8      	mov	r8, r7
 8008386:	9306      	str	r3, [sp, #24]
 8008388:	4607      	mov	r7, r0
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	4631      	mov	r1, r6
 800838e:	3b01      	subs	r3, #1
 8008390:	4650      	mov	r0, sl
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	f7ff fa6c 	bl	8007870 <quorem>
 8008398:	4641      	mov	r1, r8
 800839a:	9002      	str	r0, [sp, #8]
 800839c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083a0:	4650      	mov	r0, sl
 80083a2:	f000 fc5b 	bl	8008c5c <__mcmp>
 80083a6:	463a      	mov	r2, r7
 80083a8:	9005      	str	r0, [sp, #20]
 80083aa:	4631      	mov	r1, r6
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 fc71 	bl	8008c94 <__mdiff>
 80083b2:	68c2      	ldr	r2, [r0, #12]
 80083b4:	4605      	mov	r5, r0
 80083b6:	bb02      	cbnz	r2, 80083fa <_dtoa_r+0xa7a>
 80083b8:	4601      	mov	r1, r0
 80083ba:	4650      	mov	r0, sl
 80083bc:	f000 fc4e 	bl	8008c5c <__mcmp>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4629      	mov	r1, r5
 80083c4:	4620      	mov	r0, r4
 80083c6:	9209      	str	r2, [sp, #36]	; 0x24
 80083c8:	f000 fa0c 	bl	80087e4 <_Bfree>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d0:	9d04      	ldr	r5, [sp, #16]
 80083d2:	ea43 0102 	orr.w	r1, r3, r2
 80083d6:	9b06      	ldr	r3, [sp, #24]
 80083d8:	4319      	orrs	r1, r3
 80083da:	d110      	bne.n	80083fe <_dtoa_r+0xa7e>
 80083dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083e0:	d029      	beq.n	8008436 <_dtoa_r+0xab6>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd02      	ble.n	80083ee <_dtoa_r+0xa6e>
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	f883 9000 	strb.w	r9, [r3]
 80083f4:	e774      	b.n	80082e0 <_dtoa_r+0x960>
 80083f6:	4638      	mov	r0, r7
 80083f8:	e7ba      	b.n	8008370 <_dtoa_r+0x9f0>
 80083fa:	2201      	movs	r2, #1
 80083fc:	e7e1      	b.n	80083c2 <_dtoa_r+0xa42>
 80083fe:	9b05      	ldr	r3, [sp, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	db04      	blt.n	800840e <_dtoa_r+0xa8e>
 8008404:	9907      	ldr	r1, [sp, #28]
 8008406:	430b      	orrs	r3, r1
 8008408:	9906      	ldr	r1, [sp, #24]
 800840a:	430b      	orrs	r3, r1
 800840c:	d120      	bne.n	8008450 <_dtoa_r+0xad0>
 800840e:	2a00      	cmp	r2, #0
 8008410:	dded      	ble.n	80083ee <_dtoa_r+0xa6e>
 8008412:	4651      	mov	r1, sl
 8008414:	2201      	movs	r2, #1
 8008416:	4620      	mov	r0, r4
 8008418:	f000 fbb4 	bl	8008b84 <__lshift>
 800841c:	4631      	mov	r1, r6
 800841e:	4682      	mov	sl, r0
 8008420:	f000 fc1c 	bl	8008c5c <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	dc03      	bgt.n	8008430 <_dtoa_r+0xab0>
 8008428:	d1e1      	bne.n	80083ee <_dtoa_r+0xa6e>
 800842a:	f019 0f01 	tst.w	r9, #1
 800842e:	d0de      	beq.n	80083ee <_dtoa_r+0xa6e>
 8008430:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008434:	d1d8      	bne.n	80083e8 <_dtoa_r+0xa68>
 8008436:	9a01      	ldr	r2, [sp, #4]
 8008438:	2339      	movs	r3, #57	; 0x39
 800843a:	7013      	strb	r3, [r2, #0]
 800843c:	462b      	mov	r3, r5
 800843e:	461d      	mov	r5, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008446:	2a39      	cmp	r2, #57	; 0x39
 8008448:	d06c      	beq.n	8008524 <_dtoa_r+0xba4>
 800844a:	3201      	adds	r2, #1
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e747      	b.n	80082e0 <_dtoa_r+0x960>
 8008450:	2a00      	cmp	r2, #0
 8008452:	dd07      	ble.n	8008464 <_dtoa_r+0xae4>
 8008454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008458:	d0ed      	beq.n	8008436 <_dtoa_r+0xab6>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	f109 0301 	add.w	r3, r9, #1
 8008460:	7013      	strb	r3, [r2, #0]
 8008462:	e73d      	b.n	80082e0 <_dtoa_r+0x960>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	f803 9c01 	strb.w	r9, [r3, #-1]
 800846c:	4293      	cmp	r3, r2
 800846e:	d043      	beq.n	80084f8 <_dtoa_r+0xb78>
 8008470:	4651      	mov	r1, sl
 8008472:	2300      	movs	r3, #0
 8008474:	220a      	movs	r2, #10
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f9d6 	bl	8008828 <__multadd>
 800847c:	45b8      	cmp	r8, r7
 800847e:	4682      	mov	sl, r0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	f04f 020a 	mov.w	r2, #10
 8008488:	4641      	mov	r1, r8
 800848a:	4620      	mov	r0, r4
 800848c:	d107      	bne.n	800849e <_dtoa_r+0xb1e>
 800848e:	f000 f9cb 	bl	8008828 <__multadd>
 8008492:	4680      	mov	r8, r0
 8008494:	4607      	mov	r7, r0
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	3301      	adds	r3, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	e775      	b.n	800838a <_dtoa_r+0xa0a>
 800849e:	f000 f9c3 	bl	8008828 <__multadd>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4680      	mov	r8, r0
 80084a6:	2300      	movs	r3, #0
 80084a8:	220a      	movs	r2, #10
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 f9bc 	bl	8008828 <__multadd>
 80084b0:	4607      	mov	r7, r0
 80084b2:	e7f0      	b.n	8008496 <_dtoa_r+0xb16>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	9d00      	ldr	r5, [sp, #0]
 80084ba:	4631      	mov	r1, r6
 80084bc:	4650      	mov	r0, sl
 80084be:	f7ff f9d7 	bl	8007870 <quorem>
 80084c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084c6:	9b00      	ldr	r3, [sp, #0]
 80084c8:	f805 9b01 	strb.w	r9, [r5], #1
 80084cc:	1aea      	subs	r2, r5, r3
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	dd07      	ble.n	80084e4 <_dtoa_r+0xb64>
 80084d4:	4651      	mov	r1, sl
 80084d6:	2300      	movs	r3, #0
 80084d8:	220a      	movs	r2, #10
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 f9a4 	bl	8008828 <__multadd>
 80084e0:	4682      	mov	sl, r0
 80084e2:	e7ea      	b.n	80084ba <_dtoa_r+0xb3a>
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfc8      	it	gt
 80084ea:	461d      	movgt	r5, r3
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	bfd8      	it	le
 80084f0:	2501      	movle	r5, #1
 80084f2:	441d      	add	r5, r3
 80084f4:	f04f 0800 	mov.w	r8, #0
 80084f8:	4651      	mov	r1, sl
 80084fa:	2201      	movs	r2, #1
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fb41 	bl	8008b84 <__lshift>
 8008502:	4631      	mov	r1, r6
 8008504:	4682      	mov	sl, r0
 8008506:	f000 fba9 	bl	8008c5c <__mcmp>
 800850a:	2800      	cmp	r0, #0
 800850c:	dc96      	bgt.n	800843c <_dtoa_r+0xabc>
 800850e:	d102      	bne.n	8008516 <_dtoa_r+0xb96>
 8008510:	f019 0f01 	tst.w	r9, #1
 8008514:	d192      	bne.n	800843c <_dtoa_r+0xabc>
 8008516:	462b      	mov	r3, r5
 8008518:	461d      	mov	r5, r3
 800851a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800851e:	2a30      	cmp	r2, #48	; 0x30
 8008520:	d0fa      	beq.n	8008518 <_dtoa_r+0xb98>
 8008522:	e6dd      	b.n	80082e0 <_dtoa_r+0x960>
 8008524:	9a00      	ldr	r2, [sp, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d189      	bne.n	800843e <_dtoa_r+0xabe>
 800852a:	f10b 0b01 	add.w	fp, fp, #1
 800852e:	2331      	movs	r3, #49	; 0x31
 8008530:	e796      	b.n	8008460 <_dtoa_r+0xae0>
 8008532:	4b0a      	ldr	r3, [pc, #40]	; (800855c <_dtoa_r+0xbdc>)
 8008534:	f7ff ba99 	b.w	8007a6a <_dtoa_r+0xea>
 8008538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800853a:	2b00      	cmp	r3, #0
 800853c:	f47f aa6d 	bne.w	8007a1a <_dtoa_r+0x9a>
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <_dtoa_r+0xbe0>)
 8008542:	f7ff ba92 	b.w	8007a6a <_dtoa_r+0xea>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	dcb5      	bgt.n	80084b8 <_dtoa_r+0xb38>
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	2b02      	cmp	r3, #2
 8008550:	f73f aeb1 	bgt.w	80082b6 <_dtoa_r+0x936>
 8008554:	e7b0      	b.n	80084b8 <_dtoa_r+0xb38>
 8008556:	bf00      	nop
 8008558:	08009a58 	.word	0x08009a58
 800855c:	080099b8 	.word	0x080099b8
 8008560:	080099dc 	.word	0x080099dc

08008564 <_free_r>:
 8008564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008566:	2900      	cmp	r1, #0
 8008568:	d044      	beq.n	80085f4 <_free_r+0x90>
 800856a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856e:	9001      	str	r0, [sp, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f1a1 0404 	sub.w	r4, r1, #4
 8008576:	bfb8      	it	lt
 8008578:	18e4      	addlt	r4, r4, r3
 800857a:	f000 f8e7 	bl	800874c <__malloc_lock>
 800857e:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <_free_r+0x94>)
 8008580:	9801      	ldr	r0, [sp, #4]
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	b933      	cbnz	r3, 8008594 <_free_r+0x30>
 8008586:	6063      	str	r3, [r4, #4]
 8008588:	6014      	str	r4, [r2, #0]
 800858a:	b003      	add	sp, #12
 800858c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008590:	f000 b8e2 	b.w	8008758 <__malloc_unlock>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d908      	bls.n	80085aa <_free_r+0x46>
 8008598:	6825      	ldr	r5, [r4, #0]
 800859a:	1961      	adds	r1, r4, r5
 800859c:	428b      	cmp	r3, r1
 800859e:	bf01      	itttt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	1949      	addeq	r1, r1, r5
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	e7ed      	b.n	8008586 <_free_r+0x22>
 80085aa:	461a      	mov	r2, r3
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b10b      	cbz	r3, 80085b4 <_free_r+0x50>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d9fa      	bls.n	80085aa <_free_r+0x46>
 80085b4:	6811      	ldr	r1, [r2, #0]
 80085b6:	1855      	adds	r5, r2, r1
 80085b8:	42a5      	cmp	r5, r4
 80085ba:	d10b      	bne.n	80085d4 <_free_r+0x70>
 80085bc:	6824      	ldr	r4, [r4, #0]
 80085be:	4421      	add	r1, r4
 80085c0:	1854      	adds	r4, r2, r1
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	d1e0      	bne.n	800858a <_free_r+0x26>
 80085c8:	681c      	ldr	r4, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	6053      	str	r3, [r2, #4]
 80085ce:	440c      	add	r4, r1
 80085d0:	6014      	str	r4, [r2, #0]
 80085d2:	e7da      	b.n	800858a <_free_r+0x26>
 80085d4:	d902      	bls.n	80085dc <_free_r+0x78>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6003      	str	r3, [r0, #0]
 80085da:	e7d6      	b.n	800858a <_free_r+0x26>
 80085dc:	6825      	ldr	r5, [r4, #0]
 80085de:	1961      	adds	r1, r4, r5
 80085e0:	428b      	cmp	r3, r1
 80085e2:	bf04      	itt	eq
 80085e4:	6819      	ldreq	r1, [r3, #0]
 80085e6:	685b      	ldreq	r3, [r3, #4]
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	bf04      	itt	eq
 80085ec:	1949      	addeq	r1, r1, r5
 80085ee:	6021      	streq	r1, [r4, #0]
 80085f0:	6054      	str	r4, [r2, #4]
 80085f2:	e7ca      	b.n	800858a <_free_r+0x26>
 80085f4:	b003      	add	sp, #12
 80085f6:	bd30      	pop	{r4, r5, pc}
 80085f8:	2000041c 	.word	0x2000041c

080085fc <malloc>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <malloc+0xc>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	f000 b823 	b.w	800864c <_malloc_r>
 8008606:	bf00      	nop
 8008608:	20000064 	.word	0x20000064

0800860c <sbrk_aligned>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	4e0e      	ldr	r6, [pc, #56]	; (8008648 <sbrk_aligned+0x3c>)
 8008610:	460c      	mov	r4, r1
 8008612:	6831      	ldr	r1, [r6, #0]
 8008614:	4605      	mov	r5, r0
 8008616:	b911      	cbnz	r1, 800861e <sbrk_aligned+0x12>
 8008618:	f000 fe40 	bl	800929c <_sbrk_r>
 800861c:	6030      	str	r0, [r6, #0]
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f000 fe3b 	bl	800929c <_sbrk_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d00a      	beq.n	8008640 <sbrk_aligned+0x34>
 800862a:	1cc4      	adds	r4, r0, #3
 800862c:	f024 0403 	bic.w	r4, r4, #3
 8008630:	42a0      	cmp	r0, r4
 8008632:	d007      	beq.n	8008644 <sbrk_aligned+0x38>
 8008634:	1a21      	subs	r1, r4, r0
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fe30 	bl	800929c <_sbrk_r>
 800863c:	3001      	adds	r0, #1
 800863e:	d101      	bne.n	8008644 <sbrk_aligned+0x38>
 8008640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008644:	4620      	mov	r0, r4
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	20000420 	.word	0x20000420

0800864c <_malloc_r>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	1ccd      	adds	r5, r1, #3
 8008652:	f025 0503 	bic.w	r5, r5, #3
 8008656:	3508      	adds	r5, #8
 8008658:	2d0c      	cmp	r5, #12
 800865a:	bf38      	it	cc
 800865c:	250c      	movcc	r5, #12
 800865e:	2d00      	cmp	r5, #0
 8008660:	4607      	mov	r7, r0
 8008662:	db01      	blt.n	8008668 <_malloc_r+0x1c>
 8008664:	42a9      	cmp	r1, r5
 8008666:	d905      	bls.n	8008674 <_malloc_r+0x28>
 8008668:	230c      	movs	r3, #12
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	2600      	movs	r6, #0
 800866e:	4630      	mov	r0, r6
 8008670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008674:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008748 <_malloc_r+0xfc>
 8008678:	f000 f868 	bl	800874c <__malloc_lock>
 800867c:	f8d8 3000 	ldr.w	r3, [r8]
 8008680:	461c      	mov	r4, r3
 8008682:	bb5c      	cbnz	r4, 80086dc <_malloc_r+0x90>
 8008684:	4629      	mov	r1, r5
 8008686:	4638      	mov	r0, r7
 8008688:	f7ff ffc0 	bl	800860c <sbrk_aligned>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	4604      	mov	r4, r0
 8008690:	d155      	bne.n	800873e <_malloc_r+0xf2>
 8008692:	f8d8 4000 	ldr.w	r4, [r8]
 8008696:	4626      	mov	r6, r4
 8008698:	2e00      	cmp	r6, #0
 800869a:	d145      	bne.n	8008728 <_malloc_r+0xdc>
 800869c:	2c00      	cmp	r4, #0
 800869e:	d048      	beq.n	8008732 <_malloc_r+0xe6>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	4631      	mov	r1, r6
 80086a4:	4638      	mov	r0, r7
 80086a6:	eb04 0903 	add.w	r9, r4, r3
 80086aa:	f000 fdf7 	bl	800929c <_sbrk_r>
 80086ae:	4581      	cmp	r9, r0
 80086b0:	d13f      	bne.n	8008732 <_malloc_r+0xe6>
 80086b2:	6821      	ldr	r1, [r4, #0]
 80086b4:	1a6d      	subs	r5, r5, r1
 80086b6:	4629      	mov	r1, r5
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7ff ffa7 	bl	800860c <sbrk_aligned>
 80086be:	3001      	adds	r0, #1
 80086c0:	d037      	beq.n	8008732 <_malloc_r+0xe6>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	442b      	add	r3, r5
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	f8d8 3000 	ldr.w	r3, [r8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d038      	beq.n	8008742 <_malloc_r+0xf6>
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	42a2      	cmp	r2, r4
 80086d4:	d12b      	bne.n	800872e <_malloc_r+0xe2>
 80086d6:	2200      	movs	r2, #0
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	e00f      	b.n	80086fc <_malloc_r+0xb0>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	1b52      	subs	r2, r2, r5
 80086e0:	d41f      	bmi.n	8008722 <_malloc_r+0xd6>
 80086e2:	2a0b      	cmp	r2, #11
 80086e4:	d917      	bls.n	8008716 <_malloc_r+0xca>
 80086e6:	1961      	adds	r1, r4, r5
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	6025      	str	r5, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	6059      	strne	r1, [r3, #4]
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	bf08      	it	eq
 80086f4:	f8c8 1000 	streq.w	r1, [r8]
 80086f8:	5162      	str	r2, [r4, r5]
 80086fa:	604b      	str	r3, [r1, #4]
 80086fc:	4638      	mov	r0, r7
 80086fe:	f104 060b 	add.w	r6, r4, #11
 8008702:	f000 f829 	bl	8008758 <__malloc_unlock>
 8008706:	f026 0607 	bic.w	r6, r6, #7
 800870a:	1d23      	adds	r3, r4, #4
 800870c:	1af2      	subs	r2, r6, r3
 800870e:	d0ae      	beq.n	800866e <_malloc_r+0x22>
 8008710:	1b9b      	subs	r3, r3, r6
 8008712:	50a3      	str	r3, [r4, r2]
 8008714:	e7ab      	b.n	800866e <_malloc_r+0x22>
 8008716:	42a3      	cmp	r3, r4
 8008718:	6862      	ldr	r2, [r4, #4]
 800871a:	d1dd      	bne.n	80086d8 <_malloc_r+0x8c>
 800871c:	f8c8 2000 	str.w	r2, [r8]
 8008720:	e7ec      	b.n	80086fc <_malloc_r+0xb0>
 8008722:	4623      	mov	r3, r4
 8008724:	6864      	ldr	r4, [r4, #4]
 8008726:	e7ac      	b.n	8008682 <_malloc_r+0x36>
 8008728:	4634      	mov	r4, r6
 800872a:	6876      	ldr	r6, [r6, #4]
 800872c:	e7b4      	b.n	8008698 <_malloc_r+0x4c>
 800872e:	4613      	mov	r3, r2
 8008730:	e7cc      	b.n	80086cc <_malloc_r+0x80>
 8008732:	230c      	movs	r3, #12
 8008734:	603b      	str	r3, [r7, #0]
 8008736:	4638      	mov	r0, r7
 8008738:	f000 f80e 	bl	8008758 <__malloc_unlock>
 800873c:	e797      	b.n	800866e <_malloc_r+0x22>
 800873e:	6025      	str	r5, [r4, #0]
 8008740:	e7dc      	b.n	80086fc <_malloc_r+0xb0>
 8008742:	605b      	str	r3, [r3, #4]
 8008744:	deff      	udf	#255	; 0xff
 8008746:	bf00      	nop
 8008748:	2000041c 	.word	0x2000041c

0800874c <__malloc_lock>:
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <__malloc_lock+0x8>)
 800874e:	f7ff b88d 	b.w	800786c <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000418 	.word	0x20000418

08008758 <__malloc_unlock>:
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <__malloc_unlock+0x8>)
 800875a:	f7ff b888 	b.w	800786e <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000418 	.word	0x20000418

08008764 <_Balloc>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	69c6      	ldr	r6, [r0, #28]
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	b976      	cbnz	r6, 800878c <_Balloc+0x28>
 800876e:	2010      	movs	r0, #16
 8008770:	f7ff ff44 	bl	80085fc <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	61e0      	str	r0, [r4, #28]
 8008778:	b920      	cbnz	r0, 8008784 <_Balloc+0x20>
 800877a:	4b18      	ldr	r3, [pc, #96]	; (80087dc <_Balloc+0x78>)
 800877c:	4818      	ldr	r0, [pc, #96]	; (80087e0 <_Balloc+0x7c>)
 800877e:	216b      	movs	r1, #107	; 0x6b
 8008780:	f000 fdaa 	bl	80092d8 <__assert_func>
 8008784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008788:	6006      	str	r6, [r0, #0]
 800878a:	60c6      	str	r6, [r0, #12]
 800878c:	69e6      	ldr	r6, [r4, #28]
 800878e:	68f3      	ldr	r3, [r6, #12]
 8008790:	b183      	cbz	r3, 80087b4 <_Balloc+0x50>
 8008792:	69e3      	ldr	r3, [r4, #28]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800879a:	b9b8      	cbnz	r0, 80087cc <_Balloc+0x68>
 800879c:	2101      	movs	r1, #1
 800879e:	fa01 f605 	lsl.w	r6, r1, r5
 80087a2:	1d72      	adds	r2, r6, #5
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fdb4 	bl	8009314 <_calloc_r>
 80087ac:	b160      	cbz	r0, 80087c8 <_Balloc+0x64>
 80087ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087b2:	e00e      	b.n	80087d2 <_Balloc+0x6e>
 80087b4:	2221      	movs	r2, #33	; 0x21
 80087b6:	2104      	movs	r1, #4
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fdab 	bl	8009314 <_calloc_r>
 80087be:	69e3      	ldr	r3, [r4, #28]
 80087c0:	60f0      	str	r0, [r6, #12]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e4      	bne.n	8008792 <_Balloc+0x2e>
 80087c8:	2000      	movs	r0, #0
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	6802      	ldr	r2, [r0, #0]
 80087ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087d2:	2300      	movs	r3, #0
 80087d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087d8:	e7f7      	b.n	80087ca <_Balloc+0x66>
 80087da:	bf00      	nop
 80087dc:	080099e9 	.word	0x080099e9
 80087e0:	08009a69 	.word	0x08009a69

080087e4 <_Bfree>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	69c6      	ldr	r6, [r0, #28]
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b976      	cbnz	r6, 800880c <_Bfree+0x28>
 80087ee:	2010      	movs	r0, #16
 80087f0:	f7ff ff04 	bl	80085fc <malloc>
 80087f4:	4602      	mov	r2, r0
 80087f6:	61e8      	str	r0, [r5, #28]
 80087f8:	b920      	cbnz	r0, 8008804 <_Bfree+0x20>
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <_Bfree+0x3c>)
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <_Bfree+0x40>)
 80087fe:	218f      	movs	r1, #143	; 0x8f
 8008800:	f000 fd6a 	bl	80092d8 <__assert_func>
 8008804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008808:	6006      	str	r6, [r0, #0]
 800880a:	60c6      	str	r6, [r0, #12]
 800880c:	b13c      	cbz	r4, 800881e <_Bfree+0x3a>
 800880e:	69eb      	ldr	r3, [r5, #28]
 8008810:	6862      	ldr	r2, [r4, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008818:	6021      	str	r1, [r4, #0]
 800881a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	080099e9 	.word	0x080099e9
 8008824:	08009a69 	.word	0x08009a69

08008828 <__multadd>:
 8008828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882c:	690d      	ldr	r5, [r1, #16]
 800882e:	4607      	mov	r7, r0
 8008830:	460c      	mov	r4, r1
 8008832:	461e      	mov	r6, r3
 8008834:	f101 0c14 	add.w	ip, r1, #20
 8008838:	2000      	movs	r0, #0
 800883a:	f8dc 3000 	ldr.w	r3, [ip]
 800883e:	b299      	uxth	r1, r3
 8008840:	fb02 6101 	mla	r1, r2, r1, r6
 8008844:	0c1e      	lsrs	r6, r3, #16
 8008846:	0c0b      	lsrs	r3, r1, #16
 8008848:	fb02 3306 	mla	r3, r2, r6, r3
 800884c:	b289      	uxth	r1, r1
 800884e:	3001      	adds	r0, #1
 8008850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008854:	4285      	cmp	r5, r0
 8008856:	f84c 1b04 	str.w	r1, [ip], #4
 800885a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800885e:	dcec      	bgt.n	800883a <__multadd+0x12>
 8008860:	b30e      	cbz	r6, 80088a6 <__multadd+0x7e>
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	42ab      	cmp	r3, r5
 8008866:	dc19      	bgt.n	800889c <__multadd+0x74>
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	4638      	mov	r0, r7
 800886c:	3101      	adds	r1, #1
 800886e:	f7ff ff79 	bl	8008764 <_Balloc>
 8008872:	4680      	mov	r8, r0
 8008874:	b928      	cbnz	r0, 8008882 <__multadd+0x5a>
 8008876:	4602      	mov	r2, r0
 8008878:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <__multadd+0x84>)
 800887a:	480d      	ldr	r0, [pc, #52]	; (80088b0 <__multadd+0x88>)
 800887c:	21ba      	movs	r1, #186	; 0xba
 800887e:	f000 fd2b 	bl	80092d8 <__assert_func>
 8008882:	6922      	ldr	r2, [r4, #16]
 8008884:	3202      	adds	r2, #2
 8008886:	f104 010c 	add.w	r1, r4, #12
 800888a:	0092      	lsls	r2, r2, #2
 800888c:	300c      	adds	r0, #12
 800888e:	f000 fd15 	bl	80092bc <memcpy>
 8008892:	4621      	mov	r1, r4
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff ffa5 	bl	80087e4 <_Bfree>
 800889a:	4644      	mov	r4, r8
 800889c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088a0:	3501      	adds	r5, #1
 80088a2:	615e      	str	r6, [r3, #20]
 80088a4:	6125      	str	r5, [r4, #16]
 80088a6:	4620      	mov	r0, r4
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ac:	08009a58 	.word	0x08009a58
 80088b0:	08009a69 	.word	0x08009a69

080088b4 <__hi0bits>:
 80088b4:	0c03      	lsrs	r3, r0, #16
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	b9d3      	cbnz	r3, 80088f0 <__hi0bits+0x3c>
 80088ba:	0400      	lsls	r0, r0, #16
 80088bc:	2310      	movs	r3, #16
 80088be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088c2:	bf04      	itt	eq
 80088c4:	0200      	lsleq	r0, r0, #8
 80088c6:	3308      	addeq	r3, #8
 80088c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088cc:	bf04      	itt	eq
 80088ce:	0100      	lsleq	r0, r0, #4
 80088d0:	3304      	addeq	r3, #4
 80088d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088d6:	bf04      	itt	eq
 80088d8:	0080      	lsleq	r0, r0, #2
 80088da:	3302      	addeq	r3, #2
 80088dc:	2800      	cmp	r0, #0
 80088de:	db05      	blt.n	80088ec <__hi0bits+0x38>
 80088e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088e4:	f103 0301 	add.w	r3, r3, #1
 80088e8:	bf08      	it	eq
 80088ea:	2320      	moveq	r3, #32
 80088ec:	4618      	mov	r0, r3
 80088ee:	4770      	bx	lr
 80088f0:	2300      	movs	r3, #0
 80088f2:	e7e4      	b.n	80088be <__hi0bits+0xa>

080088f4 <__lo0bits>:
 80088f4:	6803      	ldr	r3, [r0, #0]
 80088f6:	f013 0207 	ands.w	r2, r3, #7
 80088fa:	d00c      	beq.n	8008916 <__lo0bits+0x22>
 80088fc:	07d9      	lsls	r1, r3, #31
 80088fe:	d422      	bmi.n	8008946 <__lo0bits+0x52>
 8008900:	079a      	lsls	r2, r3, #30
 8008902:	bf49      	itett	mi
 8008904:	085b      	lsrmi	r3, r3, #1
 8008906:	089b      	lsrpl	r3, r3, #2
 8008908:	6003      	strmi	r3, [r0, #0]
 800890a:	2201      	movmi	r2, #1
 800890c:	bf5c      	itt	pl
 800890e:	6003      	strpl	r3, [r0, #0]
 8008910:	2202      	movpl	r2, #2
 8008912:	4610      	mov	r0, r2
 8008914:	4770      	bx	lr
 8008916:	b299      	uxth	r1, r3
 8008918:	b909      	cbnz	r1, 800891e <__lo0bits+0x2a>
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	2210      	movs	r2, #16
 800891e:	b2d9      	uxtb	r1, r3
 8008920:	b909      	cbnz	r1, 8008926 <__lo0bits+0x32>
 8008922:	3208      	adds	r2, #8
 8008924:	0a1b      	lsrs	r3, r3, #8
 8008926:	0719      	lsls	r1, r3, #28
 8008928:	bf04      	itt	eq
 800892a:	091b      	lsreq	r3, r3, #4
 800892c:	3204      	addeq	r2, #4
 800892e:	0799      	lsls	r1, r3, #30
 8008930:	bf04      	itt	eq
 8008932:	089b      	lsreq	r3, r3, #2
 8008934:	3202      	addeq	r2, #2
 8008936:	07d9      	lsls	r1, r3, #31
 8008938:	d403      	bmi.n	8008942 <__lo0bits+0x4e>
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	f102 0201 	add.w	r2, r2, #1
 8008940:	d003      	beq.n	800894a <__lo0bits+0x56>
 8008942:	6003      	str	r3, [r0, #0]
 8008944:	e7e5      	b.n	8008912 <__lo0bits+0x1e>
 8008946:	2200      	movs	r2, #0
 8008948:	e7e3      	b.n	8008912 <__lo0bits+0x1e>
 800894a:	2220      	movs	r2, #32
 800894c:	e7e1      	b.n	8008912 <__lo0bits+0x1e>
	...

08008950 <__i2b>:
 8008950:	b510      	push	{r4, lr}
 8008952:	460c      	mov	r4, r1
 8008954:	2101      	movs	r1, #1
 8008956:	f7ff ff05 	bl	8008764 <_Balloc>
 800895a:	4602      	mov	r2, r0
 800895c:	b928      	cbnz	r0, 800896a <__i2b+0x1a>
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <__i2b+0x24>)
 8008960:	4805      	ldr	r0, [pc, #20]	; (8008978 <__i2b+0x28>)
 8008962:	f240 1145 	movw	r1, #325	; 0x145
 8008966:	f000 fcb7 	bl	80092d8 <__assert_func>
 800896a:	2301      	movs	r3, #1
 800896c:	6144      	str	r4, [r0, #20]
 800896e:	6103      	str	r3, [r0, #16]
 8008970:	bd10      	pop	{r4, pc}
 8008972:	bf00      	nop
 8008974:	08009a58 	.word	0x08009a58
 8008978:	08009a69 	.word	0x08009a69

0800897c <__multiply>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	4691      	mov	r9, r2
 8008982:	690a      	ldr	r2, [r1, #16]
 8008984:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	bfb8      	it	lt
 800898c:	460b      	movlt	r3, r1
 800898e:	460c      	mov	r4, r1
 8008990:	bfbc      	itt	lt
 8008992:	464c      	movlt	r4, r9
 8008994:	4699      	movlt	r9, r3
 8008996:	6927      	ldr	r7, [r4, #16]
 8008998:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	6861      	ldr	r1, [r4, #4]
 80089a0:	eb07 060a 	add.w	r6, r7, sl
 80089a4:	42b3      	cmp	r3, r6
 80089a6:	b085      	sub	sp, #20
 80089a8:	bfb8      	it	lt
 80089aa:	3101      	addlt	r1, #1
 80089ac:	f7ff feda 	bl	8008764 <_Balloc>
 80089b0:	b930      	cbnz	r0, 80089c0 <__multiply+0x44>
 80089b2:	4602      	mov	r2, r0
 80089b4:	4b44      	ldr	r3, [pc, #272]	; (8008ac8 <__multiply+0x14c>)
 80089b6:	4845      	ldr	r0, [pc, #276]	; (8008acc <__multiply+0x150>)
 80089b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089bc:	f000 fc8c 	bl	80092d8 <__assert_func>
 80089c0:	f100 0514 	add.w	r5, r0, #20
 80089c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089c8:	462b      	mov	r3, r5
 80089ca:	2200      	movs	r2, #0
 80089cc:	4543      	cmp	r3, r8
 80089ce:	d321      	bcc.n	8008a14 <__multiply+0x98>
 80089d0:	f104 0314 	add.w	r3, r4, #20
 80089d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089d8:	f109 0314 	add.w	r3, r9, #20
 80089dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089e0:	9202      	str	r2, [sp, #8]
 80089e2:	1b3a      	subs	r2, r7, r4
 80089e4:	3a15      	subs	r2, #21
 80089e6:	f022 0203 	bic.w	r2, r2, #3
 80089ea:	3204      	adds	r2, #4
 80089ec:	f104 0115 	add.w	r1, r4, #21
 80089f0:	428f      	cmp	r7, r1
 80089f2:	bf38      	it	cc
 80089f4:	2204      	movcc	r2, #4
 80089f6:	9201      	str	r2, [sp, #4]
 80089f8:	9a02      	ldr	r2, [sp, #8]
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d80c      	bhi.n	8008a1a <__multiply+0x9e>
 8008a00:	2e00      	cmp	r6, #0
 8008a02:	dd03      	ble.n	8008a0c <__multiply+0x90>
 8008a04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d05b      	beq.n	8008ac4 <__multiply+0x148>
 8008a0c:	6106      	str	r6, [r0, #16]
 8008a0e:	b005      	add	sp, #20
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	f843 2b04 	str.w	r2, [r3], #4
 8008a18:	e7d8      	b.n	80089cc <__multiply+0x50>
 8008a1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a1e:	f1ba 0f00 	cmp.w	sl, #0
 8008a22:	d024      	beq.n	8008a6e <__multiply+0xf2>
 8008a24:	f104 0e14 	add.w	lr, r4, #20
 8008a28:	46a9      	mov	r9, r5
 8008a2a:	f04f 0c00 	mov.w	ip, #0
 8008a2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a32:	f8d9 1000 	ldr.w	r1, [r9]
 8008a36:	fa1f fb82 	uxth.w	fp, r2
 8008a3a:	b289      	uxth	r1, r1
 8008a3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a44:	f8d9 2000 	ldr.w	r2, [r9]
 8008a48:	4461      	add	r1, ip
 8008a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a56:	b289      	uxth	r1, r1
 8008a58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a5c:	4577      	cmp	r7, lr
 8008a5e:	f849 1b04 	str.w	r1, [r9], #4
 8008a62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a66:	d8e2      	bhi.n	8008a2e <__multiply+0xb2>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	f845 c002 	str.w	ip, [r5, r2]
 8008a6e:	9a03      	ldr	r2, [sp, #12]
 8008a70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a74:	3304      	adds	r3, #4
 8008a76:	f1b9 0f00 	cmp.w	r9, #0
 8008a7a:	d021      	beq.n	8008ac0 <__multiply+0x144>
 8008a7c:	6829      	ldr	r1, [r5, #0]
 8008a7e:	f104 0c14 	add.w	ip, r4, #20
 8008a82:	46ae      	mov	lr, r5
 8008a84:	f04f 0a00 	mov.w	sl, #0
 8008a88:	f8bc b000 	ldrh.w	fp, [ip]
 8008a8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a90:	fb09 220b 	mla	r2, r9, fp, r2
 8008a94:	4452      	add	r2, sl
 8008a96:	b289      	uxth	r1, r1
 8008a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a9c:	f84e 1b04 	str.w	r1, [lr], #4
 8008aa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008aa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aa8:	f8be 1000 	ldrh.w	r1, [lr]
 8008aac:	fb09 110a 	mla	r1, r9, sl, r1
 8008ab0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ab4:	4567      	cmp	r7, ip
 8008ab6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aba:	d8e5      	bhi.n	8008a88 <__multiply+0x10c>
 8008abc:	9a01      	ldr	r2, [sp, #4]
 8008abe:	50a9      	str	r1, [r5, r2]
 8008ac0:	3504      	adds	r5, #4
 8008ac2:	e799      	b.n	80089f8 <__multiply+0x7c>
 8008ac4:	3e01      	subs	r6, #1
 8008ac6:	e79b      	b.n	8008a00 <__multiply+0x84>
 8008ac8:	08009a58 	.word	0x08009a58
 8008acc:	08009a69 	.word	0x08009a69

08008ad0 <__pow5mult>:
 8008ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	f012 0203 	ands.w	r2, r2, #3
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	d007      	beq.n	8008af0 <__pow5mult+0x20>
 8008ae0:	4c25      	ldr	r4, [pc, #148]	; (8008b78 <__pow5mult+0xa8>)
 8008ae2:	3a01      	subs	r2, #1
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aea:	f7ff fe9d 	bl	8008828 <__multadd>
 8008aee:	4607      	mov	r7, r0
 8008af0:	10ad      	asrs	r5, r5, #2
 8008af2:	d03d      	beq.n	8008b70 <__pow5mult+0xa0>
 8008af4:	69f4      	ldr	r4, [r6, #28]
 8008af6:	b97c      	cbnz	r4, 8008b18 <__pow5mult+0x48>
 8008af8:	2010      	movs	r0, #16
 8008afa:	f7ff fd7f 	bl	80085fc <malloc>
 8008afe:	4602      	mov	r2, r0
 8008b00:	61f0      	str	r0, [r6, #28]
 8008b02:	b928      	cbnz	r0, 8008b10 <__pow5mult+0x40>
 8008b04:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <__pow5mult+0xac>)
 8008b06:	481e      	ldr	r0, [pc, #120]	; (8008b80 <__pow5mult+0xb0>)
 8008b08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b0c:	f000 fbe4 	bl	80092d8 <__assert_func>
 8008b10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b14:	6004      	str	r4, [r0, #0]
 8008b16:	60c4      	str	r4, [r0, #12]
 8008b18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b20:	b94c      	cbnz	r4, 8008b36 <__pow5mult+0x66>
 8008b22:	f240 2171 	movw	r1, #625	; 0x271
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff ff12 	bl	8008950 <__i2b>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b32:	4604      	mov	r4, r0
 8008b34:	6003      	str	r3, [r0, #0]
 8008b36:	f04f 0900 	mov.w	r9, #0
 8008b3a:	07eb      	lsls	r3, r5, #31
 8008b3c:	d50a      	bpl.n	8008b54 <__pow5mult+0x84>
 8008b3e:	4639      	mov	r1, r7
 8008b40:	4622      	mov	r2, r4
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7ff ff1a 	bl	800897c <__multiply>
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7ff fe49 	bl	80087e4 <_Bfree>
 8008b52:	4647      	mov	r7, r8
 8008b54:	106d      	asrs	r5, r5, #1
 8008b56:	d00b      	beq.n	8008b70 <__pow5mult+0xa0>
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	b938      	cbnz	r0, 8008b6c <__pow5mult+0x9c>
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff ff0b 	bl	800897c <__multiply>
 8008b66:	6020      	str	r0, [r4, #0]
 8008b68:	f8c0 9000 	str.w	r9, [r0]
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	e7e4      	b.n	8008b3a <__pow5mult+0x6a>
 8008b70:	4638      	mov	r0, r7
 8008b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b76:	bf00      	nop
 8008b78:	08009bb8 	.word	0x08009bb8
 8008b7c:	080099e9 	.word	0x080099e9
 8008b80:	08009a69 	.word	0x08009a69

08008b84 <__lshift>:
 8008b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	460c      	mov	r4, r1
 8008b8a:	6849      	ldr	r1, [r1, #4]
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	4607      	mov	r7, r0
 8008b96:	4691      	mov	r9, r2
 8008b98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b9c:	f108 0601 	add.w	r6, r8, #1
 8008ba0:	42b3      	cmp	r3, r6
 8008ba2:	db0b      	blt.n	8008bbc <__lshift+0x38>
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff fddd 	bl	8008764 <_Balloc>
 8008baa:	4605      	mov	r5, r0
 8008bac:	b948      	cbnz	r0, 8008bc2 <__lshift+0x3e>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4b28      	ldr	r3, [pc, #160]	; (8008c54 <__lshift+0xd0>)
 8008bb2:	4829      	ldr	r0, [pc, #164]	; (8008c58 <__lshift+0xd4>)
 8008bb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008bb8:	f000 fb8e 	bl	80092d8 <__assert_func>
 8008bbc:	3101      	adds	r1, #1
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__lshift+0x1c>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f100 0114 	add.w	r1, r0, #20
 8008bc8:	f100 0210 	add.w	r2, r0, #16
 8008bcc:	4618      	mov	r0, r3
 8008bce:	4553      	cmp	r3, sl
 8008bd0:	db33      	blt.n	8008c3a <__lshift+0xb6>
 8008bd2:	6920      	ldr	r0, [r4, #16]
 8008bd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bd8:	f104 0314 	add.w	r3, r4, #20
 8008bdc:	f019 091f 	ands.w	r9, r9, #31
 8008be0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008be4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008be8:	d02b      	beq.n	8008c42 <__lshift+0xbe>
 8008bea:	f1c9 0e20 	rsb	lr, r9, #32
 8008bee:	468a      	mov	sl, r1
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	fa00 f009 	lsl.w	r0, r0, r9
 8008bf8:	4310      	orrs	r0, r2
 8008bfa:	f84a 0b04 	str.w	r0, [sl], #4
 8008bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c02:	459c      	cmp	ip, r3
 8008c04:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c08:	d8f3      	bhi.n	8008bf2 <__lshift+0x6e>
 8008c0a:	ebac 0304 	sub.w	r3, ip, r4
 8008c0e:	3b15      	subs	r3, #21
 8008c10:	f023 0303 	bic.w	r3, r3, #3
 8008c14:	3304      	adds	r3, #4
 8008c16:	f104 0015 	add.w	r0, r4, #21
 8008c1a:	4584      	cmp	ip, r0
 8008c1c:	bf38      	it	cc
 8008c1e:	2304      	movcc	r3, #4
 8008c20:	50ca      	str	r2, [r1, r3]
 8008c22:	b10a      	cbz	r2, 8008c28 <__lshift+0xa4>
 8008c24:	f108 0602 	add.w	r6, r8, #2
 8008c28:	3e01      	subs	r6, #1
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	612e      	str	r6, [r5, #16]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	f7ff fdd8 	bl	80087e4 <_Bfree>
 8008c34:	4628      	mov	r0, r5
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c3e:	3301      	adds	r3, #1
 8008c40:	e7c5      	b.n	8008bce <__lshift+0x4a>
 8008c42:	3904      	subs	r1, #4
 8008c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c4c:	459c      	cmp	ip, r3
 8008c4e:	d8f9      	bhi.n	8008c44 <__lshift+0xc0>
 8008c50:	e7ea      	b.n	8008c28 <__lshift+0xa4>
 8008c52:	bf00      	nop
 8008c54:	08009a58 	.word	0x08009a58
 8008c58:	08009a69 	.word	0x08009a69

08008c5c <__mcmp>:
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	6902      	ldr	r2, [r0, #16]
 8008c60:	690c      	ldr	r4, [r1, #16]
 8008c62:	1b12      	subs	r2, r2, r4
 8008c64:	d10e      	bne.n	8008c84 <__mcmp+0x28>
 8008c66:	f100 0314 	add.w	r3, r0, #20
 8008c6a:	3114      	adds	r1, #20
 8008c6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c7c:	42a5      	cmp	r5, r4
 8008c7e:	d003      	beq.n	8008c88 <__mcmp+0x2c>
 8008c80:	d305      	bcc.n	8008c8e <__mcmp+0x32>
 8008c82:	2201      	movs	r2, #1
 8008c84:	4610      	mov	r0, r2
 8008c86:	bd30      	pop	{r4, r5, pc}
 8008c88:	4283      	cmp	r3, r0
 8008c8a:	d3f3      	bcc.n	8008c74 <__mcmp+0x18>
 8008c8c:	e7fa      	b.n	8008c84 <__mcmp+0x28>
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c92:	e7f7      	b.n	8008c84 <__mcmp+0x28>

08008c94 <__mdiff>:
 8008c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	460c      	mov	r4, r1
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4690      	mov	r8, r2
 8008ca2:	f7ff ffdb 	bl	8008c5c <__mcmp>
 8008ca6:	1e05      	subs	r5, r0, #0
 8008ca8:	d110      	bne.n	8008ccc <__mdiff+0x38>
 8008caa:	4629      	mov	r1, r5
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7ff fd59 	bl	8008764 <_Balloc>
 8008cb2:	b930      	cbnz	r0, 8008cc2 <__mdiff+0x2e>
 8008cb4:	4b3a      	ldr	r3, [pc, #232]	; (8008da0 <__mdiff+0x10c>)
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	f240 2137 	movw	r1, #567	; 0x237
 8008cbc:	4839      	ldr	r0, [pc, #228]	; (8008da4 <__mdiff+0x110>)
 8008cbe:	f000 fb0b 	bl	80092d8 <__assert_func>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	bfa4      	itt	ge
 8008cce:	4643      	movge	r3, r8
 8008cd0:	46a0      	movge	r8, r4
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cd8:	bfa6      	itte	ge
 8008cda:	461c      	movge	r4, r3
 8008cdc:	2500      	movge	r5, #0
 8008cde:	2501      	movlt	r5, #1
 8008ce0:	f7ff fd40 	bl	8008764 <_Balloc>
 8008ce4:	b920      	cbnz	r0, 8008cf0 <__mdiff+0x5c>
 8008ce6:	4b2e      	ldr	r3, [pc, #184]	; (8008da0 <__mdiff+0x10c>)
 8008ce8:	4602      	mov	r2, r0
 8008cea:	f240 2145 	movw	r1, #581	; 0x245
 8008cee:	e7e5      	b.n	8008cbc <__mdiff+0x28>
 8008cf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cf4:	6926      	ldr	r6, [r4, #16]
 8008cf6:	60c5      	str	r5, [r0, #12]
 8008cf8:	f104 0914 	add.w	r9, r4, #20
 8008cfc:	f108 0514 	add.w	r5, r8, #20
 8008d00:	f100 0e14 	add.w	lr, r0, #20
 8008d04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d0c:	f108 0210 	add.w	r2, r8, #16
 8008d10:	46f2      	mov	sl, lr
 8008d12:	2100      	movs	r1, #0
 8008d14:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d1c:	fa11 f88b 	uxtah	r8, r1, fp
 8008d20:	b299      	uxth	r1, r3
 8008d22:	0c1b      	lsrs	r3, r3, #16
 8008d24:	eba8 0801 	sub.w	r8, r8, r1
 8008d28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d30:	fa1f f888 	uxth.w	r8, r8
 8008d34:	1419      	asrs	r1, r3, #16
 8008d36:	454e      	cmp	r6, r9
 8008d38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d3c:	f84a 3b04 	str.w	r3, [sl], #4
 8008d40:	d8e8      	bhi.n	8008d14 <__mdiff+0x80>
 8008d42:	1b33      	subs	r3, r6, r4
 8008d44:	3b15      	subs	r3, #21
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	3415      	adds	r4, #21
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	bf38      	it	cc
 8008d52:	2304      	movcc	r3, #4
 8008d54:	441d      	add	r5, r3
 8008d56:	4473      	add	r3, lr
 8008d58:	469e      	mov	lr, r3
 8008d5a:	462e      	mov	r6, r5
 8008d5c:	4566      	cmp	r6, ip
 8008d5e:	d30e      	bcc.n	8008d7e <__mdiff+0xea>
 8008d60:	f10c 0203 	add.w	r2, ip, #3
 8008d64:	1b52      	subs	r2, r2, r5
 8008d66:	f022 0203 	bic.w	r2, r2, #3
 8008d6a:	3d03      	subs	r5, #3
 8008d6c:	45ac      	cmp	ip, r5
 8008d6e:	bf38      	it	cc
 8008d70:	2200      	movcc	r2, #0
 8008d72:	4413      	add	r3, r2
 8008d74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d78:	b17a      	cbz	r2, 8008d9a <__mdiff+0x106>
 8008d7a:	6107      	str	r7, [r0, #16]
 8008d7c:	e7a4      	b.n	8008cc8 <__mdiff+0x34>
 8008d7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d82:	fa11 f288 	uxtah	r2, r1, r8
 8008d86:	1414      	asrs	r4, r2, #16
 8008d88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d8c:	b292      	uxth	r2, r2
 8008d8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d92:	f84e 2b04 	str.w	r2, [lr], #4
 8008d96:	1421      	asrs	r1, r4, #16
 8008d98:	e7e0      	b.n	8008d5c <__mdiff+0xc8>
 8008d9a:	3f01      	subs	r7, #1
 8008d9c:	e7ea      	b.n	8008d74 <__mdiff+0xe0>
 8008d9e:	bf00      	nop
 8008da0:	08009a58 	.word	0x08009a58
 8008da4:	08009a69 	.word	0x08009a69

08008da8 <__d2b>:
 8008da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dac:	460f      	mov	r7, r1
 8008dae:	2101      	movs	r1, #1
 8008db0:	ec59 8b10 	vmov	r8, r9, d0
 8008db4:	4616      	mov	r6, r2
 8008db6:	f7ff fcd5 	bl	8008764 <_Balloc>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	b930      	cbnz	r0, 8008dcc <__d2b+0x24>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <__d2b+0xac>)
 8008dc2:	4825      	ldr	r0, [pc, #148]	; (8008e58 <__d2b+0xb0>)
 8008dc4:	f240 310f 	movw	r1, #783	; 0x30f
 8008dc8:	f000 fa86 	bl	80092d8 <__assert_func>
 8008dcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dd4:	bb2d      	cbnz	r5, 8008e22 <__d2b+0x7a>
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	f1b8 0300 	subs.w	r3, r8, #0
 8008ddc:	d026      	beq.n	8008e2c <__d2b+0x84>
 8008dde:	4668      	mov	r0, sp
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f7ff fd87 	bl	80088f4 <__lo0bits>
 8008de6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dea:	b1e8      	cbz	r0, 8008e28 <__d2b+0x80>
 8008dec:	f1c0 0320 	rsb	r3, r0, #32
 8008df0:	fa02 f303 	lsl.w	r3, r2, r3
 8008df4:	430b      	orrs	r3, r1
 8008df6:	40c2      	lsrs	r2, r0
 8008df8:	6163      	str	r3, [r4, #20]
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	61a3      	str	r3, [r4, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bf14      	ite	ne
 8008e04:	2202      	movne	r2, #2
 8008e06:	2201      	moveq	r2, #1
 8008e08:	6122      	str	r2, [r4, #16]
 8008e0a:	b1bd      	cbz	r5, 8008e3c <__d2b+0x94>
 8008e0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e10:	4405      	add	r5, r0
 8008e12:	603d      	str	r5, [r7, #0]
 8008e14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e18:	6030      	str	r0, [r6, #0]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	b003      	add	sp, #12
 8008e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e26:	e7d6      	b.n	8008dd6 <__d2b+0x2e>
 8008e28:	6161      	str	r1, [r4, #20]
 8008e2a:	e7e7      	b.n	8008dfc <__d2b+0x54>
 8008e2c:	a801      	add	r0, sp, #4
 8008e2e:	f7ff fd61 	bl	80088f4 <__lo0bits>
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	6163      	str	r3, [r4, #20]
 8008e36:	3020      	adds	r0, #32
 8008e38:	2201      	movs	r2, #1
 8008e3a:	e7e5      	b.n	8008e08 <__d2b+0x60>
 8008e3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e44:	6038      	str	r0, [r7, #0]
 8008e46:	6918      	ldr	r0, [r3, #16]
 8008e48:	f7ff fd34 	bl	80088b4 <__hi0bits>
 8008e4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e50:	e7e2      	b.n	8008e18 <__d2b+0x70>
 8008e52:	bf00      	nop
 8008e54:	08009a58 	.word	0x08009a58
 8008e58:	08009a69 	.word	0x08009a69

08008e5c <__ssputs_r>:
 8008e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	688e      	ldr	r6, [r1, #8]
 8008e62:	461f      	mov	r7, r3
 8008e64:	42be      	cmp	r6, r7
 8008e66:	680b      	ldr	r3, [r1, #0]
 8008e68:	4682      	mov	sl, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	d82c      	bhi.n	8008eca <__ssputs_r+0x6e>
 8008e70:	898a      	ldrh	r2, [r1, #12]
 8008e72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e76:	d026      	beq.n	8008ec6 <__ssputs_r+0x6a>
 8008e78:	6965      	ldr	r5, [r4, #20]
 8008e7a:	6909      	ldr	r1, [r1, #16]
 8008e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e80:	eba3 0901 	sub.w	r9, r3, r1
 8008e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e88:	1c7b      	adds	r3, r7, #1
 8008e8a:	444b      	add	r3, r9
 8008e8c:	106d      	asrs	r5, r5, #1
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	bf38      	it	cc
 8008e92:	461d      	movcc	r5, r3
 8008e94:	0553      	lsls	r3, r2, #21
 8008e96:	d527      	bpl.n	8008ee8 <__ssputs_r+0x8c>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7ff fbd7 	bl	800864c <_malloc_r>
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	b360      	cbz	r0, 8008efc <__ssputs_r+0xa0>
 8008ea2:	6921      	ldr	r1, [r4, #16]
 8008ea4:	464a      	mov	r2, r9
 8008ea6:	f000 fa09 	bl	80092bc <memcpy>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	6126      	str	r6, [r4, #16]
 8008eb8:	6165      	str	r5, [r4, #20]
 8008eba:	444e      	add	r6, r9
 8008ebc:	eba5 0509 	sub.w	r5, r5, r9
 8008ec0:	6026      	str	r6, [r4, #0]
 8008ec2:	60a5      	str	r5, [r4, #8]
 8008ec4:	463e      	mov	r6, r7
 8008ec6:	42be      	cmp	r6, r7
 8008ec8:	d900      	bls.n	8008ecc <__ssputs_r+0x70>
 8008eca:	463e      	mov	r6, r7
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	4632      	mov	r2, r6
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	f000 f9c9 	bl	8009268 <memmove>
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	1b9b      	subs	r3, r3, r6
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	4433      	add	r3, r6
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	462a      	mov	r2, r5
 8008eea:	f000 fa3b 	bl	8009364 <_realloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1e0      	bne.n	8008eb6 <__ssputs_r+0x5a>
 8008ef4:	6921      	ldr	r1, [r4, #16]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	f7ff fb34 	bl	8008564 <_free_r>
 8008efc:	230c      	movs	r3, #12
 8008efe:	f8ca 3000 	str.w	r3, [sl]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f0e:	e7e9      	b.n	8008ee4 <__ssputs_r+0x88>

08008f10 <_svfiprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	4698      	mov	r8, r3
 8008f16:	898b      	ldrh	r3, [r1, #12]
 8008f18:	061b      	lsls	r3, r3, #24
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	4614      	mov	r4, r2
 8008f22:	d50e      	bpl.n	8008f42 <_svfiprintf_r+0x32>
 8008f24:	690b      	ldr	r3, [r1, #16]
 8008f26:	b963      	cbnz	r3, 8008f42 <_svfiprintf_r+0x32>
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	f7ff fb8f 	bl	800864c <_malloc_r>
 8008f2e:	6028      	str	r0, [r5, #0]
 8008f30:	6128      	str	r0, [r5, #16]
 8008f32:	b920      	cbnz	r0, 8008f3e <_svfiprintf_r+0x2e>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f3c:	e0d0      	b.n	80090e0 <_svfiprintf_r+0x1d0>
 8008f3e:	2340      	movs	r3, #64	; 0x40
 8008f40:	616b      	str	r3, [r5, #20]
 8008f42:	2300      	movs	r3, #0
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	2320      	movs	r3, #32
 8008f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f50:	2330      	movs	r3, #48	; 0x30
 8008f52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090f8 <_svfiprintf_r+0x1e8>
 8008f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5a:	f04f 0901 	mov.w	r9, #1
 8008f5e:	4623      	mov	r3, r4
 8008f60:	469a      	mov	sl, r3
 8008f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f66:	b10a      	cbz	r2, 8008f6c <_svfiprintf_r+0x5c>
 8008f68:	2a25      	cmp	r2, #37	; 0x25
 8008f6a:	d1f9      	bne.n	8008f60 <_svfiprintf_r+0x50>
 8008f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f70:	d00b      	beq.n	8008f8a <_svfiprintf_r+0x7a>
 8008f72:	465b      	mov	r3, fp
 8008f74:	4622      	mov	r2, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff ff6f 	bl	8008e5c <__ssputs_r>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f000 80a9 	beq.w	80090d6 <_svfiprintf_r+0x1c6>
 8008f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f86:	445a      	add	r2, fp
 8008f88:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80a1 	beq.w	80090d6 <_svfiprintf_r+0x1c6>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9e:	f10a 0a01 	add.w	sl, sl, #1
 8008fa2:	9304      	str	r3, [sp, #16]
 8008fa4:	9307      	str	r3, [sp, #28]
 8008fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008faa:	931a      	str	r3, [sp, #104]	; 0x68
 8008fac:	4654      	mov	r4, sl
 8008fae:	2205      	movs	r2, #5
 8008fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb4:	4850      	ldr	r0, [pc, #320]	; (80090f8 <_svfiprintf_r+0x1e8>)
 8008fb6:	f7f7 f913 	bl	80001e0 <memchr>
 8008fba:	9a04      	ldr	r2, [sp, #16]
 8008fbc:	b9d8      	cbnz	r0, 8008ff6 <_svfiprintf_r+0xe6>
 8008fbe:	06d0      	lsls	r0, r2, #27
 8008fc0:	bf44      	itt	mi
 8008fc2:	2320      	movmi	r3, #32
 8008fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc8:	0711      	lsls	r1, r2, #28
 8008fca:	bf44      	itt	mi
 8008fcc:	232b      	movmi	r3, #43	; 0x2b
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd8:	d015      	beq.n	8009006 <_svfiprintf_r+0xf6>
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	4654      	mov	r4, sl
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fea:	3b30      	subs	r3, #48	; 0x30
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d94d      	bls.n	800908c <_svfiprintf_r+0x17c>
 8008ff0:	b1b0      	cbz	r0, 8009020 <_svfiprintf_r+0x110>
 8008ff2:	9207      	str	r2, [sp, #28]
 8008ff4:	e014      	b.n	8009020 <_svfiprintf_r+0x110>
 8008ff6:	eba0 0308 	sub.w	r3, r0, r8
 8008ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	46a2      	mov	sl, r4
 8009004:	e7d2      	b.n	8008fac <_svfiprintf_r+0x9c>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	9103      	str	r1, [sp, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfbb      	ittet	lt
 8009012:	425b      	neglt	r3, r3
 8009014:	f042 0202 	orrlt.w	r2, r2, #2
 8009018:	9307      	strge	r3, [sp, #28]
 800901a:	9307      	strlt	r3, [sp, #28]
 800901c:	bfb8      	it	lt
 800901e:	9204      	strlt	r2, [sp, #16]
 8009020:	7823      	ldrb	r3, [r4, #0]
 8009022:	2b2e      	cmp	r3, #46	; 0x2e
 8009024:	d10c      	bne.n	8009040 <_svfiprintf_r+0x130>
 8009026:	7863      	ldrb	r3, [r4, #1]
 8009028:	2b2a      	cmp	r3, #42	; 0x2a
 800902a:	d134      	bne.n	8009096 <_svfiprintf_r+0x186>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	9203      	str	r2, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfb8      	it	lt
 8009038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800903c:	3402      	adds	r4, #2
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009108 <_svfiprintf_r+0x1f8>
 8009044:	7821      	ldrb	r1, [r4, #0]
 8009046:	2203      	movs	r2, #3
 8009048:	4650      	mov	r0, sl
 800904a:	f7f7 f8c9 	bl	80001e0 <memchr>
 800904e:	b138      	cbz	r0, 8009060 <_svfiprintf_r+0x150>
 8009050:	9b04      	ldr	r3, [sp, #16]
 8009052:	eba0 000a 	sub.w	r0, r0, sl
 8009056:	2240      	movs	r2, #64	; 0x40
 8009058:	4082      	lsls	r2, r0
 800905a:	4313      	orrs	r3, r2
 800905c:	3401      	adds	r4, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	4825      	ldr	r0, [pc, #148]	; (80090fc <_svfiprintf_r+0x1ec>)
 8009066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906a:	2206      	movs	r2, #6
 800906c:	f7f7 f8b8 	bl	80001e0 <memchr>
 8009070:	2800      	cmp	r0, #0
 8009072:	d038      	beq.n	80090e6 <_svfiprintf_r+0x1d6>
 8009074:	4b22      	ldr	r3, [pc, #136]	; (8009100 <_svfiprintf_r+0x1f0>)
 8009076:	bb1b      	cbnz	r3, 80090c0 <_svfiprintf_r+0x1b0>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	3307      	adds	r3, #7
 800907c:	f023 0307 	bic.w	r3, r3, #7
 8009080:	3308      	adds	r3, #8
 8009082:	9303      	str	r3, [sp, #12]
 8009084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009086:	4433      	add	r3, r6
 8009088:	9309      	str	r3, [sp, #36]	; 0x24
 800908a:	e768      	b.n	8008f5e <_svfiprintf_r+0x4e>
 800908c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009090:	460c      	mov	r4, r1
 8009092:	2001      	movs	r0, #1
 8009094:	e7a6      	b.n	8008fe4 <_svfiprintf_r+0xd4>
 8009096:	2300      	movs	r3, #0
 8009098:	3401      	adds	r4, #1
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0c0a 	mov.w	ip, #10
 80090a2:	4620      	mov	r0, r4
 80090a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a8:	3a30      	subs	r2, #48	; 0x30
 80090aa:	2a09      	cmp	r2, #9
 80090ac:	d903      	bls.n	80090b6 <_svfiprintf_r+0x1a6>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0c6      	beq.n	8009040 <_svfiprintf_r+0x130>
 80090b2:	9105      	str	r1, [sp, #20]
 80090b4:	e7c4      	b.n	8009040 <_svfiprintf_r+0x130>
 80090b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ba:	4604      	mov	r4, r0
 80090bc:	2301      	movs	r3, #1
 80090be:	e7f0      	b.n	80090a2 <_svfiprintf_r+0x192>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <_svfiprintf_r+0x1f4>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7fd fe64 	bl	8006d98 <_printf_float>
 80090d0:	1c42      	adds	r2, r0, #1
 80090d2:	4606      	mov	r6, r0
 80090d4:	d1d6      	bne.n	8009084 <_svfiprintf_r+0x174>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	065b      	lsls	r3, r3, #25
 80090da:	f53f af2d 	bmi.w	8008f38 <_svfiprintf_r+0x28>
 80090de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e0:	b01d      	add	sp, #116	; 0x74
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	ab03      	add	r3, sp, #12
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	462a      	mov	r2, r5
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <_svfiprintf_r+0x1f4>)
 80090ee:	a904      	add	r1, sp, #16
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7fe f8f5 	bl	80072e0 <_printf_i>
 80090f6:	e7eb      	b.n	80090d0 <_svfiprintf_r+0x1c0>
 80090f8:	08009bc4 	.word	0x08009bc4
 80090fc:	08009bce 	.word	0x08009bce
 8009100:	08006d99 	.word	0x08006d99
 8009104:	08008e5d 	.word	0x08008e5d
 8009108:	08009bca 	.word	0x08009bca

0800910c <__sflush_r>:
 800910c:	898a      	ldrh	r2, [r1, #12]
 800910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	4605      	mov	r5, r0
 8009114:	0710      	lsls	r0, r2, #28
 8009116:	460c      	mov	r4, r1
 8009118:	d458      	bmi.n	80091cc <__sflush_r+0xc0>
 800911a:	684b      	ldr	r3, [r1, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dc05      	bgt.n	800912c <__sflush_r+0x20>
 8009120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	dc02      	bgt.n	800912c <__sflush_r+0x20>
 8009126:	2000      	movs	r0, #0
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912e:	2e00      	cmp	r6, #0
 8009130:	d0f9      	beq.n	8009126 <__sflush_r+0x1a>
 8009132:	2300      	movs	r3, #0
 8009134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009138:	682f      	ldr	r7, [r5, #0]
 800913a:	6a21      	ldr	r1, [r4, #32]
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	d032      	beq.n	80091a6 <__sflush_r+0x9a>
 8009140:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	075a      	lsls	r2, r3, #29
 8009146:	d505      	bpl.n	8009154 <__sflush_r+0x48>
 8009148:	6863      	ldr	r3, [r4, #4]
 800914a:	1ac0      	subs	r0, r0, r3
 800914c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800914e:	b10b      	cbz	r3, 8009154 <__sflush_r+0x48>
 8009150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009152:	1ac0      	subs	r0, r0, r3
 8009154:	2300      	movs	r3, #0
 8009156:	4602      	mov	r2, r0
 8009158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800915a:	6a21      	ldr	r1, [r4, #32]
 800915c:	4628      	mov	r0, r5
 800915e:	47b0      	blx	r6
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	d106      	bne.n	8009174 <__sflush_r+0x68>
 8009166:	6829      	ldr	r1, [r5, #0]
 8009168:	291d      	cmp	r1, #29
 800916a:	d82b      	bhi.n	80091c4 <__sflush_r+0xb8>
 800916c:	4a29      	ldr	r2, [pc, #164]	; (8009214 <__sflush_r+0x108>)
 800916e:	410a      	asrs	r2, r1
 8009170:	07d6      	lsls	r6, r2, #31
 8009172:	d427      	bmi.n	80091c4 <__sflush_r+0xb8>
 8009174:	2200      	movs	r2, #0
 8009176:	6062      	str	r2, [r4, #4]
 8009178:	04d9      	lsls	r1, r3, #19
 800917a:	6922      	ldr	r2, [r4, #16]
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	d504      	bpl.n	800918a <__sflush_r+0x7e>
 8009180:	1c42      	adds	r2, r0, #1
 8009182:	d101      	bne.n	8009188 <__sflush_r+0x7c>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b903      	cbnz	r3, 800918a <__sflush_r+0x7e>
 8009188:	6560      	str	r0, [r4, #84]	; 0x54
 800918a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918c:	602f      	str	r7, [r5, #0]
 800918e:	2900      	cmp	r1, #0
 8009190:	d0c9      	beq.n	8009126 <__sflush_r+0x1a>
 8009192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009196:	4299      	cmp	r1, r3
 8009198:	d002      	beq.n	80091a0 <__sflush_r+0x94>
 800919a:	4628      	mov	r0, r5
 800919c:	f7ff f9e2 	bl	8008564 <_free_r>
 80091a0:	2000      	movs	r0, #0
 80091a2:	6360      	str	r0, [r4, #52]	; 0x34
 80091a4:	e7c0      	b.n	8009128 <__sflush_r+0x1c>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b0      	blx	r6
 80091ac:	1c41      	adds	r1, r0, #1
 80091ae:	d1c8      	bne.n	8009142 <__sflush_r+0x36>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0c5      	beq.n	8009142 <__sflush_r+0x36>
 80091b6:	2b1d      	cmp	r3, #29
 80091b8:	d001      	beq.n	80091be <__sflush_r+0xb2>
 80091ba:	2b16      	cmp	r3, #22
 80091bc:	d101      	bne.n	80091c2 <__sflush_r+0xb6>
 80091be:	602f      	str	r7, [r5, #0]
 80091c0:	e7b1      	b.n	8009126 <__sflush_r+0x1a>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	e7ad      	b.n	8009128 <__sflush_r+0x1c>
 80091cc:	690f      	ldr	r7, [r1, #16]
 80091ce:	2f00      	cmp	r7, #0
 80091d0:	d0a9      	beq.n	8009126 <__sflush_r+0x1a>
 80091d2:	0793      	lsls	r3, r2, #30
 80091d4:	680e      	ldr	r6, [r1, #0]
 80091d6:	bf08      	it	eq
 80091d8:	694b      	ldreq	r3, [r1, #20]
 80091da:	600f      	str	r7, [r1, #0]
 80091dc:	bf18      	it	ne
 80091de:	2300      	movne	r3, #0
 80091e0:	eba6 0807 	sub.w	r8, r6, r7
 80091e4:	608b      	str	r3, [r1, #8]
 80091e6:	f1b8 0f00 	cmp.w	r8, #0
 80091ea:	dd9c      	ble.n	8009126 <__sflush_r+0x1a>
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091f0:	4643      	mov	r3, r8
 80091f2:	463a      	mov	r2, r7
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b0      	blx	r6
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dc06      	bgt.n	800920a <__sflush_r+0xfe>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009208:	e78e      	b.n	8009128 <__sflush_r+0x1c>
 800920a:	4407      	add	r7, r0
 800920c:	eba8 0800 	sub.w	r8, r8, r0
 8009210:	e7e9      	b.n	80091e6 <__sflush_r+0xda>
 8009212:	bf00      	nop
 8009214:	dfbffffe 	.word	0xdfbffffe

08009218 <_fflush_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	690b      	ldr	r3, [r1, #16]
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	b913      	cbnz	r3, 8009228 <_fflush_r+0x10>
 8009222:	2500      	movs	r5, #0
 8009224:	4628      	mov	r0, r5
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	b118      	cbz	r0, 8009232 <_fflush_r+0x1a>
 800922a:	6a03      	ldr	r3, [r0, #32]
 800922c:	b90b      	cbnz	r3, 8009232 <_fflush_r+0x1a>
 800922e:	f7fe f9f3 	bl	8007618 <__sinit>
 8009232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f3      	beq.n	8009222 <_fflush_r+0xa>
 800923a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800923c:	07d0      	lsls	r0, r2, #31
 800923e:	d404      	bmi.n	800924a <_fflush_r+0x32>
 8009240:	0599      	lsls	r1, r3, #22
 8009242:	d402      	bmi.n	800924a <_fflush_r+0x32>
 8009244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009246:	f7fe fb11 	bl	800786c <__retarget_lock_acquire_recursive>
 800924a:	4628      	mov	r0, r5
 800924c:	4621      	mov	r1, r4
 800924e:	f7ff ff5d 	bl	800910c <__sflush_r>
 8009252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009254:	07da      	lsls	r2, r3, #31
 8009256:	4605      	mov	r5, r0
 8009258:	d4e4      	bmi.n	8009224 <_fflush_r+0xc>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	059b      	lsls	r3, r3, #22
 800925e:	d4e1      	bmi.n	8009224 <_fflush_r+0xc>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f7fe fb04 	bl	800786e <__retarget_lock_release_recursive>
 8009266:	e7dd      	b.n	8009224 <_fflush_r+0xc>

08009268 <memmove>:
 8009268:	4288      	cmp	r0, r1
 800926a:	b510      	push	{r4, lr}
 800926c:	eb01 0402 	add.w	r4, r1, r2
 8009270:	d902      	bls.n	8009278 <memmove+0x10>
 8009272:	4284      	cmp	r4, r0
 8009274:	4623      	mov	r3, r4
 8009276:	d807      	bhi.n	8009288 <memmove+0x20>
 8009278:	1e43      	subs	r3, r0, #1
 800927a:	42a1      	cmp	r1, r4
 800927c:	d008      	beq.n	8009290 <memmove+0x28>
 800927e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009286:	e7f8      	b.n	800927a <memmove+0x12>
 8009288:	4402      	add	r2, r0
 800928a:	4601      	mov	r1, r0
 800928c:	428a      	cmp	r2, r1
 800928e:	d100      	bne.n	8009292 <memmove+0x2a>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929a:	e7f7      	b.n	800928c <memmove+0x24>

0800929c <_sbrk_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d06      	ldr	r5, [pc, #24]	; (80092b8 <_sbrk_r+0x1c>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	f7f8 fa34 	bl	8001714 <_sbrk>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_sbrk_r+0x1a>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_sbrk_r+0x1a>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000414 	.word	0x20000414

080092bc <memcpy>:
 80092bc:	440a      	add	r2, r1
 80092be:	4291      	cmp	r1, r2
 80092c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092c4:	d100      	bne.n	80092c8 <memcpy+0xc>
 80092c6:	4770      	bx	lr
 80092c8:	b510      	push	{r4, lr}
 80092ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d2:	4291      	cmp	r1, r2
 80092d4:	d1f9      	bne.n	80092ca <memcpy+0xe>
 80092d6:	bd10      	pop	{r4, pc}

080092d8 <__assert_func>:
 80092d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092da:	4614      	mov	r4, r2
 80092dc:	461a      	mov	r2, r3
 80092de:	4b09      	ldr	r3, [pc, #36]	; (8009304 <__assert_func+0x2c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4605      	mov	r5, r0
 80092e4:	68d8      	ldr	r0, [r3, #12]
 80092e6:	b14c      	cbz	r4, 80092fc <__assert_func+0x24>
 80092e8:	4b07      	ldr	r3, [pc, #28]	; (8009308 <__assert_func+0x30>)
 80092ea:	9100      	str	r1, [sp, #0]
 80092ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092f0:	4906      	ldr	r1, [pc, #24]	; (800930c <__assert_func+0x34>)
 80092f2:	462b      	mov	r3, r5
 80092f4:	f000 f872 	bl	80093dc <fiprintf>
 80092f8:	f000 f882 	bl	8009400 <abort>
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <__assert_func+0x38>)
 80092fe:	461c      	mov	r4, r3
 8009300:	e7f3      	b.n	80092ea <__assert_func+0x12>
 8009302:	bf00      	nop
 8009304:	20000064 	.word	0x20000064
 8009308:	08009bdf 	.word	0x08009bdf
 800930c:	08009bec 	.word	0x08009bec
 8009310:	08009c1a 	.word	0x08009c1a

08009314 <_calloc_r>:
 8009314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009316:	fba1 2402 	umull	r2, r4, r1, r2
 800931a:	b94c      	cbnz	r4, 8009330 <_calloc_r+0x1c>
 800931c:	4611      	mov	r1, r2
 800931e:	9201      	str	r2, [sp, #4]
 8009320:	f7ff f994 	bl	800864c <_malloc_r>
 8009324:	9a01      	ldr	r2, [sp, #4]
 8009326:	4605      	mov	r5, r0
 8009328:	b930      	cbnz	r0, 8009338 <_calloc_r+0x24>
 800932a:	4628      	mov	r0, r5
 800932c:	b003      	add	sp, #12
 800932e:	bd30      	pop	{r4, r5, pc}
 8009330:	220c      	movs	r2, #12
 8009332:	6002      	str	r2, [r0, #0]
 8009334:	2500      	movs	r5, #0
 8009336:	e7f8      	b.n	800932a <_calloc_r+0x16>
 8009338:	4621      	mov	r1, r4
 800933a:	f7fe fa1a 	bl	8007772 <memset>
 800933e:	e7f4      	b.n	800932a <_calloc_r+0x16>

08009340 <__ascii_mbtowc>:
 8009340:	b082      	sub	sp, #8
 8009342:	b901      	cbnz	r1, 8009346 <__ascii_mbtowc+0x6>
 8009344:	a901      	add	r1, sp, #4
 8009346:	b142      	cbz	r2, 800935a <__ascii_mbtowc+0x1a>
 8009348:	b14b      	cbz	r3, 800935e <__ascii_mbtowc+0x1e>
 800934a:	7813      	ldrb	r3, [r2, #0]
 800934c:	600b      	str	r3, [r1, #0]
 800934e:	7812      	ldrb	r2, [r2, #0]
 8009350:	1e10      	subs	r0, r2, #0
 8009352:	bf18      	it	ne
 8009354:	2001      	movne	r0, #1
 8009356:	b002      	add	sp, #8
 8009358:	4770      	bx	lr
 800935a:	4610      	mov	r0, r2
 800935c:	e7fb      	b.n	8009356 <__ascii_mbtowc+0x16>
 800935e:	f06f 0001 	mvn.w	r0, #1
 8009362:	e7f8      	b.n	8009356 <__ascii_mbtowc+0x16>

08009364 <_realloc_r>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4680      	mov	r8, r0
 800936a:	4614      	mov	r4, r2
 800936c:	460e      	mov	r6, r1
 800936e:	b921      	cbnz	r1, 800937a <_realloc_r+0x16>
 8009370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	4611      	mov	r1, r2
 8009376:	f7ff b969 	b.w	800864c <_malloc_r>
 800937a:	b92a      	cbnz	r2, 8009388 <_realloc_r+0x24>
 800937c:	f7ff f8f2 	bl	8008564 <_free_r>
 8009380:	4625      	mov	r5, r4
 8009382:	4628      	mov	r0, r5
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	f000 f841 	bl	800940e <_malloc_usable_size_r>
 800938c:	4284      	cmp	r4, r0
 800938e:	4607      	mov	r7, r0
 8009390:	d802      	bhi.n	8009398 <_realloc_r+0x34>
 8009392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009396:	d812      	bhi.n	80093be <_realloc_r+0x5a>
 8009398:	4621      	mov	r1, r4
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff f956 	bl	800864c <_malloc_r>
 80093a0:	4605      	mov	r5, r0
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0ed      	beq.n	8009382 <_realloc_r+0x1e>
 80093a6:	42bc      	cmp	r4, r7
 80093a8:	4622      	mov	r2, r4
 80093aa:	4631      	mov	r1, r6
 80093ac:	bf28      	it	cs
 80093ae:	463a      	movcs	r2, r7
 80093b0:	f7ff ff84 	bl	80092bc <memcpy>
 80093b4:	4631      	mov	r1, r6
 80093b6:	4640      	mov	r0, r8
 80093b8:	f7ff f8d4 	bl	8008564 <_free_r>
 80093bc:	e7e1      	b.n	8009382 <_realloc_r+0x1e>
 80093be:	4635      	mov	r5, r6
 80093c0:	e7df      	b.n	8009382 <_realloc_r+0x1e>

080093c2 <__ascii_wctomb>:
 80093c2:	b149      	cbz	r1, 80093d8 <__ascii_wctomb+0x16>
 80093c4:	2aff      	cmp	r2, #255	; 0xff
 80093c6:	bf85      	ittet	hi
 80093c8:	238a      	movhi	r3, #138	; 0x8a
 80093ca:	6003      	strhi	r3, [r0, #0]
 80093cc:	700a      	strbls	r2, [r1, #0]
 80093ce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80093d2:	bf98      	it	ls
 80093d4:	2001      	movls	r0, #1
 80093d6:	4770      	bx	lr
 80093d8:	4608      	mov	r0, r1
 80093da:	4770      	bx	lr

080093dc <fiprintf>:
 80093dc:	b40e      	push	{r1, r2, r3}
 80093de:	b503      	push	{r0, r1, lr}
 80093e0:	4601      	mov	r1, r0
 80093e2:	ab03      	add	r3, sp, #12
 80093e4:	4805      	ldr	r0, [pc, #20]	; (80093fc <fiprintf+0x20>)
 80093e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	f000 f83f 	bl	8009470 <_vfiprintf_r>
 80093f2:	b002      	add	sp, #8
 80093f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093f8:	b003      	add	sp, #12
 80093fa:	4770      	bx	lr
 80093fc:	20000064 	.word	0x20000064

08009400 <abort>:
 8009400:	b508      	push	{r3, lr}
 8009402:	2006      	movs	r0, #6
 8009404:	f000 fa0c 	bl	8009820 <raise>
 8009408:	2001      	movs	r0, #1
 800940a:	f7f8 f90b 	bl	8001624 <_exit>

0800940e <_malloc_usable_size_r>:
 800940e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009412:	1f18      	subs	r0, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfbc      	itt	lt
 8009418:	580b      	ldrlt	r3, [r1, r0]
 800941a:	18c0      	addlt	r0, r0, r3
 800941c:	4770      	bx	lr

0800941e <__sfputc_r>:
 800941e:	6893      	ldr	r3, [r2, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	b410      	push	{r4}
 8009426:	6093      	str	r3, [r2, #8]
 8009428:	da08      	bge.n	800943c <__sfputc_r+0x1e>
 800942a:	6994      	ldr	r4, [r2, #24]
 800942c:	42a3      	cmp	r3, r4
 800942e:	db01      	blt.n	8009434 <__sfputc_r+0x16>
 8009430:	290a      	cmp	r1, #10
 8009432:	d103      	bne.n	800943c <__sfputc_r+0x1e>
 8009434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009438:	f000 b934 	b.w	80096a4 <__swbuf_r>
 800943c:	6813      	ldr	r3, [r2, #0]
 800943e:	1c58      	adds	r0, r3, #1
 8009440:	6010      	str	r0, [r2, #0]
 8009442:	7019      	strb	r1, [r3, #0]
 8009444:	4608      	mov	r0, r1
 8009446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944a:	4770      	bx	lr

0800944c <__sfputs_r>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	4614      	mov	r4, r2
 8009454:	18d5      	adds	r5, r2, r3
 8009456:	42ac      	cmp	r4, r5
 8009458:	d101      	bne.n	800945e <__sfputs_r+0x12>
 800945a:	2000      	movs	r0, #0
 800945c:	e007      	b.n	800946e <__sfputs_r+0x22>
 800945e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009462:	463a      	mov	r2, r7
 8009464:	4630      	mov	r0, r6
 8009466:	f7ff ffda 	bl	800941e <__sfputc_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	d1f3      	bne.n	8009456 <__sfputs_r+0xa>
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009470 <_vfiprintf_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	460d      	mov	r5, r1
 8009476:	b09d      	sub	sp, #116	; 0x74
 8009478:	4614      	mov	r4, r2
 800947a:	4698      	mov	r8, r3
 800947c:	4606      	mov	r6, r0
 800947e:	b118      	cbz	r0, 8009488 <_vfiprintf_r+0x18>
 8009480:	6a03      	ldr	r3, [r0, #32]
 8009482:	b90b      	cbnz	r3, 8009488 <_vfiprintf_r+0x18>
 8009484:	f7fe f8c8 	bl	8007618 <__sinit>
 8009488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x2a>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x2a>
 8009494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009496:	f7fe f9e9 	bl	800786c <__retarget_lock_acquire_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	071b      	lsls	r3, r3, #28
 800949e:	d501      	bpl.n	80094a4 <_vfiprintf_r+0x34>
 80094a0:	692b      	ldr	r3, [r5, #16]
 80094a2:	b99b      	cbnz	r3, 80094cc <_vfiprintf_r+0x5c>
 80094a4:	4629      	mov	r1, r5
 80094a6:	4630      	mov	r0, r6
 80094a8:	f000 f93a 	bl	8009720 <__swsetup_r>
 80094ac:	b170      	cbz	r0, 80094cc <_vfiprintf_r+0x5c>
 80094ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b0:	07dc      	lsls	r4, r3, #31
 80094b2:	d504      	bpl.n	80094be <_vfiprintf_r+0x4e>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b8:	b01d      	add	sp, #116	; 0x74
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	0598      	lsls	r0, r3, #22
 80094c2:	d4f7      	bmi.n	80094b4 <_vfiprintf_r+0x44>
 80094c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c6:	f7fe f9d2 	bl	800786e <__retarget_lock_release_recursive>
 80094ca:	e7f3      	b.n	80094b4 <_vfiprintf_r+0x44>
 80094cc:	2300      	movs	r3, #0
 80094ce:	9309      	str	r3, [sp, #36]	; 0x24
 80094d0:	2320      	movs	r3, #32
 80094d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094da:	2330      	movs	r3, #48	; 0x30
 80094dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009690 <_vfiprintf_r+0x220>
 80094e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094e4:	f04f 0901 	mov.w	r9, #1
 80094e8:	4623      	mov	r3, r4
 80094ea:	469a      	mov	sl, r3
 80094ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f0:	b10a      	cbz	r2, 80094f6 <_vfiprintf_r+0x86>
 80094f2:	2a25      	cmp	r2, #37	; 0x25
 80094f4:	d1f9      	bne.n	80094ea <_vfiprintf_r+0x7a>
 80094f6:	ebba 0b04 	subs.w	fp, sl, r4
 80094fa:	d00b      	beq.n	8009514 <_vfiprintf_r+0xa4>
 80094fc:	465b      	mov	r3, fp
 80094fe:	4622      	mov	r2, r4
 8009500:	4629      	mov	r1, r5
 8009502:	4630      	mov	r0, r6
 8009504:	f7ff ffa2 	bl	800944c <__sfputs_r>
 8009508:	3001      	adds	r0, #1
 800950a:	f000 80a9 	beq.w	8009660 <_vfiprintf_r+0x1f0>
 800950e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009510:	445a      	add	r2, fp
 8009512:	9209      	str	r2, [sp, #36]	; 0x24
 8009514:	f89a 3000 	ldrb.w	r3, [sl]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80a1 	beq.w	8009660 <_vfiprintf_r+0x1f0>
 800951e:	2300      	movs	r3, #0
 8009520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009528:	f10a 0a01 	add.w	sl, sl, #1
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	9307      	str	r3, [sp, #28]
 8009530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009534:	931a      	str	r3, [sp, #104]	; 0x68
 8009536:	4654      	mov	r4, sl
 8009538:	2205      	movs	r2, #5
 800953a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953e:	4854      	ldr	r0, [pc, #336]	; (8009690 <_vfiprintf_r+0x220>)
 8009540:	f7f6 fe4e 	bl	80001e0 <memchr>
 8009544:	9a04      	ldr	r2, [sp, #16]
 8009546:	b9d8      	cbnz	r0, 8009580 <_vfiprintf_r+0x110>
 8009548:	06d1      	lsls	r1, r2, #27
 800954a:	bf44      	itt	mi
 800954c:	2320      	movmi	r3, #32
 800954e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009552:	0713      	lsls	r3, r2, #28
 8009554:	bf44      	itt	mi
 8009556:	232b      	movmi	r3, #43	; 0x2b
 8009558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955c:	f89a 3000 	ldrb.w	r3, [sl]
 8009560:	2b2a      	cmp	r3, #42	; 0x2a
 8009562:	d015      	beq.n	8009590 <_vfiprintf_r+0x120>
 8009564:	9a07      	ldr	r2, [sp, #28]
 8009566:	4654      	mov	r4, sl
 8009568:	2000      	movs	r0, #0
 800956a:	f04f 0c0a 	mov.w	ip, #10
 800956e:	4621      	mov	r1, r4
 8009570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009574:	3b30      	subs	r3, #48	; 0x30
 8009576:	2b09      	cmp	r3, #9
 8009578:	d94d      	bls.n	8009616 <_vfiprintf_r+0x1a6>
 800957a:	b1b0      	cbz	r0, 80095aa <_vfiprintf_r+0x13a>
 800957c:	9207      	str	r2, [sp, #28]
 800957e:	e014      	b.n	80095aa <_vfiprintf_r+0x13a>
 8009580:	eba0 0308 	sub.w	r3, r0, r8
 8009584:	fa09 f303 	lsl.w	r3, r9, r3
 8009588:	4313      	orrs	r3, r2
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	46a2      	mov	sl, r4
 800958e:	e7d2      	b.n	8009536 <_vfiprintf_r+0xc6>
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	1d19      	adds	r1, r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	9103      	str	r1, [sp, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfbb      	ittet	lt
 800959c:	425b      	neglt	r3, r3
 800959e:	f042 0202 	orrlt.w	r2, r2, #2
 80095a2:	9307      	strge	r3, [sp, #28]
 80095a4:	9307      	strlt	r3, [sp, #28]
 80095a6:	bfb8      	it	lt
 80095a8:	9204      	strlt	r2, [sp, #16]
 80095aa:	7823      	ldrb	r3, [r4, #0]
 80095ac:	2b2e      	cmp	r3, #46	; 0x2e
 80095ae:	d10c      	bne.n	80095ca <_vfiprintf_r+0x15a>
 80095b0:	7863      	ldrb	r3, [r4, #1]
 80095b2:	2b2a      	cmp	r3, #42	; 0x2a
 80095b4:	d134      	bne.n	8009620 <_vfiprintf_r+0x1b0>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	1d1a      	adds	r2, r3, #4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	9203      	str	r2, [sp, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095c6:	3402      	adds	r4, #2
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80096a0 <_vfiprintf_r+0x230>
 80095ce:	7821      	ldrb	r1, [r4, #0]
 80095d0:	2203      	movs	r2, #3
 80095d2:	4650      	mov	r0, sl
 80095d4:	f7f6 fe04 	bl	80001e0 <memchr>
 80095d8:	b138      	cbz	r0, 80095ea <_vfiprintf_r+0x17a>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	eba0 000a 	sub.w	r0, r0, sl
 80095e0:	2240      	movs	r2, #64	; 0x40
 80095e2:	4082      	lsls	r2, r0
 80095e4:	4313      	orrs	r3, r2
 80095e6:	3401      	adds	r4, #1
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4829      	ldr	r0, [pc, #164]	; (8009694 <_vfiprintf_r+0x224>)
 80095f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095f4:	2206      	movs	r2, #6
 80095f6:	f7f6 fdf3 	bl	80001e0 <memchr>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d03f      	beq.n	800967e <_vfiprintf_r+0x20e>
 80095fe:	4b26      	ldr	r3, [pc, #152]	; (8009698 <_vfiprintf_r+0x228>)
 8009600:	bb1b      	cbnz	r3, 800964a <_vfiprintf_r+0x1da>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	3307      	adds	r3, #7
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	3308      	adds	r3, #8
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	443b      	add	r3, r7
 8009612:	9309      	str	r3, [sp, #36]	; 0x24
 8009614:	e768      	b.n	80094e8 <_vfiprintf_r+0x78>
 8009616:	fb0c 3202 	mla	r2, ip, r2, r3
 800961a:	460c      	mov	r4, r1
 800961c:	2001      	movs	r0, #1
 800961e:	e7a6      	b.n	800956e <_vfiprintf_r+0xfe>
 8009620:	2300      	movs	r3, #0
 8009622:	3401      	adds	r4, #1
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0c0a 	mov.w	ip, #10
 800962c:	4620      	mov	r0, r4
 800962e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009632:	3a30      	subs	r2, #48	; 0x30
 8009634:	2a09      	cmp	r2, #9
 8009636:	d903      	bls.n	8009640 <_vfiprintf_r+0x1d0>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0c6      	beq.n	80095ca <_vfiprintf_r+0x15a>
 800963c:	9105      	str	r1, [sp, #20]
 800963e:	e7c4      	b.n	80095ca <_vfiprintf_r+0x15a>
 8009640:	fb0c 2101 	mla	r1, ip, r1, r2
 8009644:	4604      	mov	r4, r0
 8009646:	2301      	movs	r3, #1
 8009648:	e7f0      	b.n	800962c <_vfiprintf_r+0x1bc>
 800964a:	ab03      	add	r3, sp, #12
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	462a      	mov	r2, r5
 8009650:	4b12      	ldr	r3, [pc, #72]	; (800969c <_vfiprintf_r+0x22c>)
 8009652:	a904      	add	r1, sp, #16
 8009654:	4630      	mov	r0, r6
 8009656:	f7fd fb9f 	bl	8006d98 <_printf_float>
 800965a:	4607      	mov	r7, r0
 800965c:	1c78      	adds	r0, r7, #1
 800965e:	d1d6      	bne.n	800960e <_vfiprintf_r+0x19e>
 8009660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d405      	bmi.n	8009672 <_vfiprintf_r+0x202>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d402      	bmi.n	8009672 <_vfiprintf_r+0x202>
 800966c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966e:	f7fe f8fe 	bl	800786e <__retarget_lock_release_recursive>
 8009672:	89ab      	ldrh	r3, [r5, #12]
 8009674:	065b      	lsls	r3, r3, #25
 8009676:	f53f af1d 	bmi.w	80094b4 <_vfiprintf_r+0x44>
 800967a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800967c:	e71c      	b.n	80094b8 <_vfiprintf_r+0x48>
 800967e:	ab03      	add	r3, sp, #12
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	462a      	mov	r2, r5
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <_vfiprintf_r+0x22c>)
 8009686:	a904      	add	r1, sp, #16
 8009688:	4630      	mov	r0, r6
 800968a:	f7fd fe29 	bl	80072e0 <_printf_i>
 800968e:	e7e4      	b.n	800965a <_vfiprintf_r+0x1ea>
 8009690:	08009bc4 	.word	0x08009bc4
 8009694:	08009bce 	.word	0x08009bce
 8009698:	08006d99 	.word	0x08006d99
 800969c:	0800944d 	.word	0x0800944d
 80096a0:	08009bca 	.word	0x08009bca

080096a4 <__swbuf_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	4605      	mov	r5, r0
 80096ac:	b118      	cbz	r0, 80096b6 <__swbuf_r+0x12>
 80096ae:	6a03      	ldr	r3, [r0, #32]
 80096b0:	b90b      	cbnz	r3, 80096b6 <__swbuf_r+0x12>
 80096b2:	f7fd ffb1 	bl	8007618 <__sinit>
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	071a      	lsls	r2, r3, #28
 80096be:	d525      	bpl.n	800970c <__swbuf_r+0x68>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	b31b      	cbz	r3, 800970c <__swbuf_r+0x68>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	6922      	ldr	r2, [r4, #16]
 80096c8:	1a98      	subs	r0, r3, r2
 80096ca:	6963      	ldr	r3, [r4, #20]
 80096cc:	b2f6      	uxtb	r6, r6
 80096ce:	4283      	cmp	r3, r0
 80096d0:	4637      	mov	r7, r6
 80096d2:	dc04      	bgt.n	80096de <__swbuf_r+0x3a>
 80096d4:	4621      	mov	r1, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	f7ff fd9e 	bl	8009218 <_fflush_r>
 80096dc:	b9e0      	cbnz	r0, 8009718 <__swbuf_r+0x74>
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	60a3      	str	r3, [r4, #8]
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	6022      	str	r2, [r4, #0]
 80096ea:	701e      	strb	r6, [r3, #0]
 80096ec:	6962      	ldr	r2, [r4, #20]
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d004      	beq.n	80096fe <__swbuf_r+0x5a>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	07db      	lsls	r3, r3, #31
 80096f8:	d506      	bpl.n	8009708 <__swbuf_r+0x64>
 80096fa:	2e0a      	cmp	r6, #10
 80096fc:	d104      	bne.n	8009708 <__swbuf_r+0x64>
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f7ff fd89 	bl	8009218 <_fflush_r>
 8009706:	b938      	cbnz	r0, 8009718 <__swbuf_r+0x74>
 8009708:	4638      	mov	r0, r7
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 f806 	bl	8009720 <__swsetup_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	d0d5      	beq.n	80096c4 <__swbuf_r+0x20>
 8009718:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800971c:	e7f4      	b.n	8009708 <__swbuf_r+0x64>
	...

08009720 <__swsetup_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <__swsetup_r+0xac>)
 8009724:	4605      	mov	r5, r0
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	460c      	mov	r4, r1
 800972a:	b118      	cbz	r0, 8009734 <__swsetup_r+0x14>
 800972c:	6a03      	ldr	r3, [r0, #32]
 800972e:	b90b      	cbnz	r3, 8009734 <__swsetup_r+0x14>
 8009730:	f7fd ff72 	bl	8007618 <__sinit>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800973a:	0718      	lsls	r0, r3, #28
 800973c:	d422      	bmi.n	8009784 <__swsetup_r+0x64>
 800973e:	06d9      	lsls	r1, r3, #27
 8009740:	d407      	bmi.n	8009752 <__swsetup_r+0x32>
 8009742:	2309      	movs	r3, #9
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800974a:	81a3      	strh	r3, [r4, #12]
 800974c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009750:	e034      	b.n	80097bc <__swsetup_r+0x9c>
 8009752:	0758      	lsls	r0, r3, #29
 8009754:	d512      	bpl.n	800977c <__swsetup_r+0x5c>
 8009756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009758:	b141      	cbz	r1, 800976c <__swsetup_r+0x4c>
 800975a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975e:	4299      	cmp	r1, r3
 8009760:	d002      	beq.n	8009768 <__swsetup_r+0x48>
 8009762:	4628      	mov	r0, r5
 8009764:	f7fe fefe 	bl	8008564 <_free_r>
 8009768:	2300      	movs	r3, #0
 800976a:	6363      	str	r3, [r4, #52]	; 0x34
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	2300      	movs	r3, #0
 8009776:	6063      	str	r3, [r4, #4]
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	f043 0308 	orr.w	r3, r3, #8
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	b94b      	cbnz	r3, 800979c <__swsetup_r+0x7c>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009792:	d003      	beq.n	800979c <__swsetup_r+0x7c>
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f000 f884 	bl	80098a4 <__smakebuf_r>
 800979c:	89a0      	ldrh	r0, [r4, #12]
 800979e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a2:	f010 0301 	ands.w	r3, r0, #1
 80097a6:	d00a      	beq.n	80097be <__swsetup_r+0x9e>
 80097a8:	2300      	movs	r3, #0
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6963      	ldr	r3, [r4, #20]
 80097ae:	425b      	negs	r3, r3
 80097b0:	61a3      	str	r3, [r4, #24]
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	b943      	cbnz	r3, 80097c8 <__swsetup_r+0xa8>
 80097b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097ba:	d1c4      	bne.n	8009746 <__swsetup_r+0x26>
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	0781      	lsls	r1, r0, #30
 80097c0:	bf58      	it	pl
 80097c2:	6963      	ldrpl	r3, [r4, #20]
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	e7f4      	b.n	80097b2 <__swsetup_r+0x92>
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7f7      	b.n	80097bc <__swsetup_r+0x9c>
 80097cc:	20000064 	.word	0x20000064

080097d0 <_raise_r>:
 80097d0:	291f      	cmp	r1, #31
 80097d2:	b538      	push	{r3, r4, r5, lr}
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	d904      	bls.n	80097e4 <_raise_r+0x14>
 80097da:	2316      	movs	r3, #22
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097e6:	b112      	cbz	r2, 80097ee <_raise_r+0x1e>
 80097e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ec:	b94b      	cbnz	r3, 8009802 <_raise_r+0x32>
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f830 	bl	8009854 <_getpid_r>
 80097f4:	462a      	mov	r2, r5
 80097f6:	4601      	mov	r1, r0
 80097f8:	4620      	mov	r0, r4
 80097fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fe:	f000 b817 	b.w	8009830 <_kill_r>
 8009802:	2b01      	cmp	r3, #1
 8009804:	d00a      	beq.n	800981c <_raise_r+0x4c>
 8009806:	1c59      	adds	r1, r3, #1
 8009808:	d103      	bne.n	8009812 <_raise_r+0x42>
 800980a:	2316      	movs	r3, #22
 800980c:	6003      	str	r3, [r0, #0]
 800980e:	2001      	movs	r0, #1
 8009810:	e7e7      	b.n	80097e2 <_raise_r+0x12>
 8009812:	2400      	movs	r4, #0
 8009814:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009818:	4628      	mov	r0, r5
 800981a:	4798      	blx	r3
 800981c:	2000      	movs	r0, #0
 800981e:	e7e0      	b.n	80097e2 <_raise_r+0x12>

08009820 <raise>:
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <raise+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7ff bfd3 	b.w	80097d0 <_raise_r>
 800982a:	bf00      	nop
 800982c:	20000064 	.word	0x20000064

08009830 <_kill_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	; (8009850 <_kill_r+0x20>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	f7f7 fee1 	bl	8001604 <_kill>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d102      	bne.n	800984c <_kill_r+0x1c>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b103      	cbz	r3, 800984c <_kill_r+0x1c>
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	bf00      	nop
 8009850:	20000414 	.word	0x20000414

08009854 <_getpid_r>:
 8009854:	f7f7 bece 	b.w	80015f4 <_getpid>

08009858 <__swhatbuf_r>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	460c      	mov	r4, r1
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	2900      	cmp	r1, #0
 8009862:	b096      	sub	sp, #88	; 0x58
 8009864:	4615      	mov	r5, r2
 8009866:	461e      	mov	r6, r3
 8009868:	da0d      	bge.n	8009886 <__swhatbuf_r+0x2e>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009870:	f04f 0100 	mov.w	r1, #0
 8009874:	bf0c      	ite	eq
 8009876:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800987a:	2340      	movne	r3, #64	; 0x40
 800987c:	2000      	movs	r0, #0
 800987e:	6031      	str	r1, [r6, #0]
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	b016      	add	sp, #88	; 0x58
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	466a      	mov	r2, sp
 8009888:	f000 f848 	bl	800991c <_fstat_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	dbec      	blt.n	800986a <__swhatbuf_r+0x12>
 8009890:	9901      	ldr	r1, [sp, #4]
 8009892:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009896:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800989a:	4259      	negs	r1, r3
 800989c:	4159      	adcs	r1, r3
 800989e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a2:	e7eb      	b.n	800987c <__swhatbuf_r+0x24>

080098a4 <__smakebuf_r>:
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a8:	079d      	lsls	r5, r3, #30
 80098aa:	4606      	mov	r6, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	d507      	bpl.n	80098c0 <__smakebuf_r+0x1c>
 80098b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	2301      	movs	r3, #1
 80098ba:	6163      	str	r3, [r4, #20]
 80098bc:	b002      	add	sp, #8
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	ab01      	add	r3, sp, #4
 80098c2:	466a      	mov	r2, sp
 80098c4:	f7ff ffc8 	bl	8009858 <__swhatbuf_r>
 80098c8:	9900      	ldr	r1, [sp, #0]
 80098ca:	4605      	mov	r5, r0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7fe febd 	bl	800864c <_malloc_r>
 80098d2:	b948      	cbnz	r0, 80098e8 <__smakebuf_r+0x44>
 80098d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d4ef      	bmi.n	80098bc <__smakebuf_r+0x18>
 80098dc:	f023 0303 	bic.w	r3, r3, #3
 80098e0:	f043 0302 	orr.w	r3, r3, #2
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7e3      	b.n	80098b0 <__smakebuf_r+0xc>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	6163      	str	r3, [r4, #20]
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	6120      	str	r0, [r4, #16]
 80098fa:	b15b      	cbz	r3, 8009914 <__smakebuf_r+0x70>
 80098fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 f81d 	bl	8009940 <_isatty_r>
 8009906:	b128      	cbz	r0, 8009914 <__smakebuf_r+0x70>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	431d      	orrs	r5, r3
 8009918:	81a5      	strh	r5, [r4, #12]
 800991a:	e7cf      	b.n	80098bc <__smakebuf_r+0x18>

0800991c <_fstat_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_fstat_r+0x20>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	4611      	mov	r1, r2
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	f7f7 feca 	bl	80016c2 <_fstat>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	d102      	bne.n	8009938 <_fstat_r+0x1c>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	b103      	cbz	r3, 8009938 <_fstat_r+0x1c>
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	bd38      	pop	{r3, r4, r5, pc}
 800993a:	bf00      	nop
 800993c:	20000414 	.word	0x20000414

08009940 <_isatty_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d06      	ldr	r5, [pc, #24]	; (800995c <_isatty_r+0x1c>)
 8009944:	2300      	movs	r3, #0
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	f7f7 fec9 	bl	80016e2 <_isatty>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_isatty_r+0x1a>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_isatty_r+0x1a>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	20000414 	.word	0x20000414

08009960 <_init>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr

0800996c <_fini>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr
